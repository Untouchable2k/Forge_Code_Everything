{"version":3,"sources":["features/Header.tsx","eth.png","components/SliderInput.tsx","components/BalanceMsg.tsx","components/ConnectionRequiredMsg.tsx","hooks/useStakeTokens.ts","hooks/useAirdrop3.ts","features/yourWallet/StakeForm.tsx","hooks/useIsClaimed.ts","hooks/useBalGuess.ts","hooks/allowance.ts","hooks/useStakingBalance.ts","hooks/useStakingBalance2.ts","hooks/useNoApprove.ts","hooks/useNoApprove2.ts","hooks/useStakeTokens2.ts","features/yourWallet/WalletBalance.tsx","features/yourWallet/YourWallet.tsx","features/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","display","justifyContent","gap","Header","classes","useEthers","account","activateBrowserWallet","deactivate","isConnected","undefined","className","Button","color","variant","slice","onClick","inputsContainer","gridTemplateRows","gridTemplateColumns","slider","SliderInput","label","id","minValue","maxValue","value","onChange","disabled","rest","sliderMarks","Typography","gutterBottom","Slider","step","event","newValue","min","max","marks","Input","margin","target","Number","onBlur","inputProps","type","alignItems","tokenImg","width","amount","fontWeight","BalanceMsg","tokenImgSrc","component","src","alt","justifyItems","ConnectionRequiredMsg","useStakeTokens","tokenAddress","chainId","networkName","helperConfig","airdropaddy","TokenFarm","abi","brownieConfig","constants","AddressZero","forgeaddy","tokenFarmInterface","utils","Interface","AirdropContract","tokenFarmContract","Contract","useContractFunction","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","Erc20","tokenContract","approveErc20Send","approveErc20State","useState","amountToStake","setAmountToStake","useEffect","status","setState","require","use","should","expect","keccak256","bufferToHex","MerkleTree","flexDirection","maxWidth","StakeForm","nothing","token","address","name","tokenBalance","useTokenBalance","notifications","useNotifications","test","dappTokenAddress","useContractCall","method","args","useIsClaimed","balGuess","AuctionAddress","AirdropAddress","rewardABI","Auctionz","AuctionInterface","Math","round","Date","now","stakingBalance3","useBalGuess","RemainaingBal2","parseFloat","toString","tokenBalance2","tokenBalance23","choice","setChoice","inputHexP2","setHexProof","tempz","leaves","map","x","tree","sortPairs","root","getRoot","hexRoot","getHexRoot","console","log","userAddress","leaf","proof","getProof","hexproof","getHexProof","verify","leaves2","tree2","root2","hexRoot2","leaf2","proof2","hexproof2","leaves3","tree3","root3","hexRoot3","leaf3","proof3","hexproof3","inputHexP","MaxAmt","msgmsg","HowMuchAllow","aidropAddy","E20","AllowanceForge9","allowz","vAmountOut","ststst","useStakingBalance","useStakingBalance2","tokenFarmContractAddress","hexprofz","odds","useAirdrop3","airDropSend","stakeTokensState2","showStakeTokensSuccess2","setShowStakeTokensSuccess2","handleCloseSnack2","filter","notification","length","isMining6","formatUnits","stakeTokensState23f","useNoApprove","stakeTokensSend2NoApprov","useNoApprove2","stakeTokensSend2NoApprov2","amount3","setAmount3","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","isMining","isMining2","isMining3","stakeTokensSend2","stakeTokensState23","useStakeTokens2","stakeTokensSend22","isMining4","vaz","showApprove","amount2","toFixed","approveandDonateButton","size","ccc","amountAsWei","parseEther","CircularProgress","refill","t1","t2","ifif","slide","maxzz","Snackbar","open","autoHideDuration","onClose","Alert","severity","WalletBalance","image","formattedTokenBalance","tabContent","box","backgroundColor","borderRadius","header","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","Box","TabContext","TabList","parseInt","index","Tab","TabPanel","title","palette","common","white","textAlign","Main","error","wethTokenAddress","eth","showNetworkError","setShowNetworkError","handleCloseNetworkError","reason","StylesProvider","injectFirst","App","DAppProvider","config","supportedChains","ChainId","Mumbai","expirationPeriod","checkInterval","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1a4fce2.chunk.js","sourcesContent":["import { Button, makeStyles } from \"@material-ui/core\"\nimport { useEthers } from \"@usedapp/core\"\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4),\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    gap: theme.spacing(1)\n  },\n}))\n\nexport const Header = () => {\n  const classes = useStyles()\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n\n  return (\n    <div className={classes.container}>\n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n            {`${account?.slice(0, 4)}...${account?.slice(-3)}`}\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/eth.ee7fc645.png\";","import React from \"react\";\nimport { Slider, Input, Typography, makeStyles } from \"@material-ui/core\";\n\ninterface SliderInputProps {\n  label?: string;\n  id?: string;\n  maxValue: number;\n  value: number | string | (string | number)[];\n  onChange: (newValue: number | string | Array<number | string>) => void;\n  disabled?: boolean;\n  [x: string]: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  inputsContainer: {\n    display: \"grid\",\n    gap: theme.spacing(3),\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: \"1fr auto\",\n  },\n  slider: {},\n}));\n\nexport const SliderInput = ({\n  label = \"\",\n  id = \"input-slider\",\n  minValue,\n  maxValue,\n  value,\n  onChange,\n  disabled = false,\n  ...rest\n}: SliderInputProps) => {\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    onChange(newValue);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      onChange(0);\n    } else if (value > maxValue) {\n      onChange(maxValue);\n    }\n  };\n\n  const sliderStep = 0.1;\n  const inputStep = 1;\n\n  const classes = useStyles();\n\n  const sliderMarks = [\n    {\n      value: minValue,\n      label: \"0%\",\n    },\n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n\n  // ... is a \"Spread\" operator\n  // standard javascript thing\n  // works on iterables\n  // expands a list\n  return (\n    <div {...rest}>\n      {label && (\n        <Typography id={id} gutterBottom>\n          {label}\n        </Typography>\n      )}\n      <div className={classes.inputsContainer}>\n        <div>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            step={sliderStep}\n            onChange={handleSliderChange}\n            aria-labelledby={id}\n            min={minValue}\n            max={maxValue}\n            disabled={disabled}\n            marks={disabled ? [] : sliderMarks}\n          />\n        </div>\n        <div>\n          <Input\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            disabled={disabled}\n            inputProps={{\n              step: inputStep,\n              min: minValue,\n              max: maxValue,\n              type: \"number\",\n              \"aria-labelledby\": id,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\"\nimport { Typography, makeStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\"\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    }\n}))\n\ninterface BalanceMsgProps {\n    label: string;\n    amount: number;\n    tokenImgSrc: string\n}\n\nexport const BalanceMsg = ({ label, amount, tokenImgSrc }: BalanceMsgProps) => {\n\n    const classes = useStyles()\n\n    return <div className={classes.container}>\n        <Typography component=\"span\">{label}:</Typography>\n        <Typography className={classes.amount} component=\"span\">{amount}</Typography>\n        <img className={classes.tokenImg} src={tokenImgSrc} alt=\"token logo\" />\n    </div>\n}","import React from \"react\";\nimport { Typography, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"grid\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    gridTemplateRows: \"150px\"\n  },\n}));\n\nexport const ConnectionRequiredMsg = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h6\" component=\"span\">\n        Please connect your Metamask account\n      </Typography>\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\n\nimport AirdropContract from \"../chain-info/AirdropToken.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of th e second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n\n\n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const { abi } = TokenFarm\n  const airdropaddy = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n  const forgeaddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n\n  const tokenFarmInterface = new utils.Interface(AirdropContract.abi)\n\n  const tokenFarmContract = new Contract(\n    airdropaddy,\n    tokenFarmInterface\n  )\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"deposit\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(forgeaddy, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(airdropaddy, \"999999999999999999999999999999999999999999999999\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport AirdropContract from \"../chain-info/AirdropToken.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\nconst { use, should, expect } = require('chai')\n\nconst { keccak256, bufferToHex } = require('ethereumjs-util');\n\nconst { MerkleTree } = require('merkletreejs') \n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useAirdrop3 = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const test = new utils.Interface(AirdropContract.abi)\n\n  const tokenFarmContract = new Contract(\n    tokenFarmContractAddress,\n    test\n  )\n\n  const { account } = useEthers()\n\n\n\n\n\n\n\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(tokenAddress, erc20Interface)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"mintWithProofALL\", {\n      transactionName: \"Airdrop trans\",\n    })\n\n  const send =  (hexprofz: any, odds: string) => {\n    console.log(\"hexsdfdf\", hexprofz )\n    return stakeTokensSend(hexprofz, odds, (500 * 10**18).toString())\n  }\n  const [state, setState] = useState(stakeTokensState)\n  \n  useEffect(() => {\n      setState(stakeTokensState)\n  \n  }, [stakeTokensState])\n    \n  return { send, state }\n  }","import React, { useEffect, useState } from \"react\"\nimport { SliderInput } from \"../../components\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useStakeTokens, useStakeTokens2, useAirdrop3, useNoApprove, useNoApprove2, AllowanceForge9, useBalGuess, useIsClaimed, useStakingBalance, useStakingBalance2 } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\nimport { Contract, Signer } from 'ethers'\nimport \"../../styles.css\"\nconst { keccak256, bufferToHex } = require('ethereumjs-util');\n\nconst { use, should, expect } = require('chai')\n\nconst { MerkleTree } = require('merkletreejs') \nconst web3 = require('web3')\n\n\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n  const { address: tokenAddress, name } = token\n\n  const { account } = useEthers()\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n  const { notifications } = useNotifications()\n  let nothing2\n  \n  const classes = useStyles()\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    var test = useIsClaimed()\n\n    let nothing\nvar balGuess = useBalGuess()\n\n\nvar RemainaingBal2 = 0\nif(balGuess !== nothing)\n{\n  RemainaingBal2 = parseFloat(balGuess.toString()) / 10**18 + 1\n}\nvar RemainaingBal = 0\n    const tokenBalance2 = useTokenBalance(\"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\", \"0xd5c58383c6406Ce1D1ac8010BF655D1219619912\")\n    const tokenBalance23 = useTokenBalance(\"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\", account)\nif(tokenBalance2 !== nothing)\n{\n  RemainaingBal = parseFloat(tokenBalance2.toString()) / 10**18\n}\nvar roottop  = 0xdd82af2bc4b721bfd5be08111d4f422fd07d1578a0072d6701f26ea4fff33845 \nvar root2mid = 0x15893a9b8d3638149dd9461fde79f589e565a2fc76a861ec1aebb83736151566\nvar root3bot = 0x316b4323ca91ba63304a4e0ada24b09f8689ac1f80aca8e9d5c4213fc9ba7848\nvar inputHexP = \"\"\nconst [choice, setChoice] =\nuseState<number | string | Array<number | string>>(3)\nconst [inputHexP2, setHexProof] =\nuseState<number | string | Array<string | string>>(\"1\")\n      \n  useEffect(() => {\n    var tempz = 0\n    const addressList = require('./airdropList.json')\n    const leaves = addressList.map((x:any) => keccak256(x))\n    const tree = new MerkleTree(leaves, keccak256, {sortPairs: true})\n    const root = tree.getRoot().toString('hex')\n  \n    const hexRoot = tree.getHexRoot()\n    \n    console.log('airdrop roottop is ', hexRoot)\n  \n    const userAddress = account\n    console.log('user address',userAddress)\n  \n    const leaf = keccak256(userAddress)\n    const proof = tree.getProof(leaf)\n  \n    const hexproof = tree.getHexProof(leaf)\n  \n    console.log(tree.verify(proof, leaf, root)) // true\n    console.log(\"YOUR STATUS: \",tree.verify(proof, leaf, root))\n    console.log(\"hex proof: \", hexproof)\n  \n    if(!tree.verify(proof, leaf, root)){\n      tempz = 0\n    }\n\n\n    const addressList2 = require('./airdropListMid.json')\n    const leaves2 = addressList2.map((x:any) => keccak256(x))\n    const tree2 = new MerkleTree(leaves2, keccak256, {sortPairs: true})\n    const root2 = tree2.getRoot().toString('hex')\n  \n    const hexRoot2 = tree2.getHexRoot()\n    \n    console.log('airdrop root2mid is ', hexRoot2)\n  \n    console.log('user address',userAddress)\n  \n    const leaf2 = keccak256(userAddress)\n    const proof2 = tree2.getProof(leaf2)\n  \n    const hexproof2 = tree2.getHexProof(leaf2)\n  \n    console.log(tree2.verify(proof2, leaf2, root2)) // true\n    console.log(\"YOUR STATUS2: \",tree2.verify(proof2, leaf2, root2))\n    console.log(\"hex proof2: \", hexproof2)\n  \n    if(!tree2.verify(proof2, leaf2, root2)){\n      tempz+=1\n    }\n\n    const addressList3 = require('./airdropListBot.json')\n    const leaves3 = addressList3.map((x:any) => keccak256(x))\n    const tree3 = new MerkleTree(leaves3, keccak256, {sortPairs: true})\n    const root3 = tree3.getRoot().toString('hex')\n  \n    const hexRoot3 = tree3.getHexRoot()\n    \n    console.log('airdrop root3bot is ', hexRoot3)\n  \n    console.log('user address',userAddress)\n  \n    const leaf3 = keccak256(userAddress)\n    const proof3 = tree3.getProof(leaf3)\n  \n    const hexproof3 = tree3.getHexProof(leaf3)\n  \n    console.log(tree3.verify(proof3, leaf3, root3)) // true\n    console.log(\"YOUR STATUS3: \",tree.verify(proof3, leaf3, root3))\n    console.log(\"hex proof3: \", hexproof3)\n    tree2.verify(proof2, leaf2, root2)\n    var inputHexP  = \"\"\n    tree3.verify(proof3, leaf3, root3)\n    if(tree.verify(proof, leaf, root)){\n      inputHexP = hexproof;\n      tempz = 0\n    }else if(tree2.verify(proof2, leaf2, root2)){\n      tempz = 1\n      inputHexP = hexproof2;\n    }else if(tree3.verify(proof3, leaf3, root3)){\n      tempz = 2\n      inputHexP = hexproof3;\n    }else{\n      tempz = 3\n      inputHexP = hexproof;\n    }\n    setChoice(tempz)\n    console.log(\"inputHexP\", inputHexP, choice)\n    setHexProof(inputHexP)\n\n  }, [account])\n\n  var MaxAmt = 0\n  var msgmsg = \"CLICK BELOW TO CLAIM\"       \n\n\n  var HowMuchAllow = AllowanceForge9()\nvar allowz = 0\nif(HowMuchAllow!== nothing){\n  allowz = parseFloat(HowMuchAllow.toString()) / (10 ** 18)\n} \n  if(choice == 0){\n    MaxAmt = 100\n    if(test){\n      msgmsg = \"Already Claimed\"\n    }\n  }else if(choice == 1){\n      MaxAmt = 30    \n      if(test){\n        msgmsg = \"Already Claimed\"\n      }\n    }else if (choice == 2){\n      MaxAmt = 10\n      if(test){\n        msgmsg = \"Already Claimed\"\n      }\n    }else{\n      msgmsg = \"NO CLAIM FOR THIS ACCOUNT\"\n     if(test){\n       msgmsg = \"Already Claimed\"\n     }\n    }\n\nvar vAmountOut = 0\nvar test = useStakingBalance(choice.toString())\nif(test !== nothing){\n\n  vAmountOut = parseFloat(test.toString())  / (10 ** 18)\n}\n\n\n\n\nvar test2 = useStakingBalance2(choice.toString())\n\n\n\n    const { send: airDropSend, state: stakeTokensState2 } =\n    useAirdrop3(tokenAddress)\n\n\n\n  const [showStakeTokensSuccess2, setShowStakeTokensSuccess2] = useState(false)\n\n  const handleCloseSnack2 = () => {\n    showStakeTokensSuccess2 && setShowStakeTokensSuccess2(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Airdrop trans\"\n      ).length > 0\n    ) {\n      !showStakeTokensSuccess2 && setShowStakeTokensSuccess2(true)\n    }\n  }, [notifications, showStakeTokensSuccess2])\n\n  const isMining6 = stakeTokensState2.status === \"Mining\"\n\n\n\n\n\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n    const handleStakeSubmit = () => {\n      const amountAsWei = utils.parseEther(amount.toString())\n      return stakeTokensSend(amountAsWei.toString())\n    }  \n    \n    const handleAirdrop = () => {\n      const amountAsWei = utils.parseEther(amount.toString())\n      return airDropSend(inputHexP2, choice.toString())\n      //return airDropSend(hexproof)\n    }\n\n\n    const { send: stakeTokensSend2NoApprov, state: stakeTokensState23f } =\n    useNoApprove(tokenAddress)\n\n    const { send: stakeTokensSend2NoApprov2, state: stakeTokensState23f2 } =\n    useNoApprove2(tokenAddress)\n\n    const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n\n    const [amount3, setAmount3] =\n    useState<number | string | Array<number | string>>(0)\n\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  const isMining = stakeTokensState.status === \"Mining\"\n  const isMining2 = stakeTokensState23f.status === \"Mining\"\n  const isMining3 = stakeTokensState2.status === \"Mining\"\n\n  const hasZeroBalance = formattedTokenBalance === 0\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n\n\n\n\n\n\n\n\n\n  const { send: stakeTokensSend2, state: stakeTokensState23 } =\n    useStakeTokens(tokenAddress)\n\n\n\n    const { send: stakeTokensSend22, state: stakeTokensState232 } =\n    useStakeTokens2(tokenAddress)\n\n\n\n    const isMining4 = stakeTokensState23.status === \"Mining\"\n\n\nvar vaz = 0  \nif(tokenBalance23 !== nothing){\n  vaz = parseFloat(tokenBalance23.toString()) / 10 ** 18\n}\nvar showApprove = true\nconsole.log(\"Vaz \", vaz, \"  VS \", \"allows \", allowz)\nif(allowz > vaz){\n  showApprove = false\n}\n  const [amount2, setAmount2] =\n  useState<number | string | Array<number | string>>(RemainaingBal2)\n\n\n\n\n\n  const handleStakeSubmit2 = () => {\n    var ccc = parseFloat(amount3.toString()).toFixed(18)\n     const amountAsWei = utils.parseEther(ccc.toString())\n     console.log(\"INPUT\", amountAsWei)\n    return stakeTokensSend2(amountAsWei.toString())\n  }\n\n\n\n  const handleStakeSubmit22 = () => {\n    var ccc = parseFloat(amount3.toString()).toFixed(18)\n     const amountAsWei = utils.parseEther(ccc.toString())\n     console.log(\"INPUT\", amountAsWei)\n    return stakeTokensSend22(amountAsWei.toString())\n  }\n\n\n  const handleStakeSubmit2NoApprove = () => {\n    var ccc = parseFloat(amount3.toString()).toFixed(18)\n     const amountAsWei = utils.parseEther(ccc.toString())\n     console.log(\"INPUT\", amountAsWei)\n    return stakeTokensSend2NoApprov(amountAsWei.toString())\n  }\n\n  const handleStakeSubmit2NoApprove2 = () => {\n    var ccc = parseFloat(amount3.toString()).toFixed(18)\n     const amountAsWei = utils.parseEther(ccc.toString())\n     console.log(\"INPUT\", amountAsWei)\n    return stakeTokensSend2NoApprov2(amountAsWei.toString())\n  }\n\n  if(msgmsg == \"NO CLAIM FOR THIS ACCOUNT\" && tokenAddress != \"0xDAe61164B62e5427f6ea5CE40c093F8C10e1E154\" && tokenAddress != \"0xe7FFb468559158e0a9c4dD1d0CB60fc119850191\"){\n    return (<>\n    <div className={classes.container}>       \n      <h1>{msgmsg} </h1><h3>The Way this works is.  The longer users wait the more they are able to claim.<br></br></h3>\n      <h2>The Contract has</h2> <h3>{(RemainaingBal2 -1).toFixed(3)} Forge remaining </h3><br></br>\n        <h2>Anyone can reset this game by donating more than {(RemainaingBal2).toFixed(0)} Forge<br></br>\n        Which is available in the next tab over called \"Refill Forge Airdrop\"</h2>\n        </div>\n  \n    </>\n    )\n  \n  }\n\n\n  if(msgmsg == \"Already Claimed\" && tokenAddress != \"0xDAe61164B62e5427f6ea5CE40c093F8C10e1E154\" && tokenAddress != \"0xe7FFb468559158e0a9c4dD1d0CB60fc119850191\"){\n    return (<>\n    <div className={classes.container}>       \n      <h1>{msgmsg} </h1><h3>The Way this works is.  The longer users wait the more they are able to claim.<br></br></h3>\n        You would have recieved {MaxAmt} Forge after 30 days; however, you already claimed your tokens<br></br>\n        <h2>The Contract has</h2> <h3>{(RemainaingBal2 -1).toFixed(3)} Forge </h3><br></br>\n        <h2>Anyone can reset this game by donating more than {(RemainaingBal2).toFixed(0)} Forge<br></br>\n        Which is available in the next tab over called \"Refill Forge Airdrop\"</h2> \n  </div>\n    </>\n    )\n  \n  }\nvar approveandDonateButton =  <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit22}\n>\n{isMining || isMining4 ? <CircularProgress size={26} /> : \"Approve and Donate, 2 transactions\"}\n</Button>     \n\n\nvar refill = <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit2}\n>\n{isMining || isMining4 ? <CircularProgress size={26} /> : \"Approve and refill, 2 transactions\"}\n</Button>     \n\n\n\n\nif(!showApprove){\n  refill = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleStakeSubmit2NoApprove}\n  >\n  {isMining || isMining2 || isMining3 || isMining4 ? <CircularProgress size={26} /> : \"Refill Airdrop\"}\n  </Button>     \n\n\n  approveandDonateButton = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleStakeSubmit2NoApprove2}\n  >\n  {isMining || isMining2 || isMining3 || isMining4 ? <CircularProgress size={26} /> : \" Donate to Airdrop\"}\n  </Button>     \n  \n}\nvar ifif = \"\"\nif(amount3 > RemainaingBal2 - 1000){\n ifif = \"If you want to donate more than \"+ RemainaingBal2.toFixed(2) + \" please go to Refill Forge Airdrop Tab\"\n}\nvar t1\nvar t2\nif(amount2 >= RemainaingBal2){\n  t1 =  <h2>This will restart the time release in the Forge Airdrop contract</h2>\n  t2 =   <h2>Thank you for your donation!</h2>\n\n}\nvar slide = <SliderInput\nlabel={`You are donating this many Forge to Airdrop contract`}\nminValue={0}\nmaxValue={RemainaingBal2 - 5}\nid={`slider-input2-${name}`}\nclassName={classes.slider}\nvalue={amount3}\nonChange={setAmount3}\ndisabled={isMining }\n/>\nif(RemainaingBal2 !== nothing && tokenBalance23 !== nothing && RemainaingBal2 > parseFloat(tokenBalance23.toString()) / (10**18)){\n  var maxzz = parseFloat(tokenBalance23.toString())  / (10**18)\n console.log(\"Reamin\", RemainaingBal2, \"  tokenbal\", parseFloat(tokenBalance23.toString())  / (10**18))\n slide = <SliderInput\nlabel={`You are donating this many Forge to Airdrop contract`}\nminValue={0}\nmaxValue={maxzz}\nid={`slider-input2-${name}`}\nclassName={classes.slider}\nvalue={amount3}\nonChange={setAmount3}\ndisabled={isMining }\n/>\n}\nif(tokenAddress == \"0xe7FFb468559158e0a9c4dD1d0CB60fc119850191\"){\n  return (<>\n<div className={classes.container}>       \n   {slide} \n    {ifif}\n    \n   {approveandDonateButton}\n        \n   <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={10000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the donation.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={42000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens donated successfully!\n        </Alert>\n      </Snackbar>\n\n    \n    </div>\n    \n    \n    \n    \n    \n      </>\n      )\n  }\n\nif(tokenAddress == \"0xDAe61164B62e5427f6ea5CE40c093F8C10e1E154\"){\n  RemainaingBal += 1\n    if(tokenBalance23 !== nothing &&  parseFloat(tokenBalance23.toString()) < RemainaingBal2 * 10 ** 18){\n\n      return (<><div className={classes.container}>       \n    <h2>  You must donate at least {RemainaingBal2.toFixed(2)} to restart the airdrop clock</h2>\n    <h2>  Please aquire more Forge to open this panel</h2></div>\n        </>\n      )\n\n\n\n    }\n  return (<><div className={classes.container}>       \n<h2>  You must donate at least {RemainaingBal2.toFixed(2)} to restart the airdrop clock</h2>\n\n<SliderInput\n          label={`You are donating this many Forge to Airdrop contract`}\n          minValue={RemainaingBal2}\n          maxValue={vaz}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount3}\n          onChange={setAmount3}\n          disabled={isMining }\n        />     \n\n\n{refill}\n        \n         {t1}{t2}</div>   \n         <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={10000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the refill donation transfer.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={42000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens donated successfully!\n        </Alert>\n      </Snackbar>\n\n  </>\n  )\n}\n\n \n\n  return (\n    <><div className={classes.container}>       \n    <h1>{msgmsg} </h1><h3>The Way this works is.  The longer you wait the more they are able to claim.<br></br></h3>\n      You will recieve {MaxAmt} Forge after 30 days.<br></br>\n      However, the contract only has <h3>{(RemainaingBal2 -1).toFixed(3)} Forge </h3><br></br>\n      Claim before the contract runs out or hope it gets refilled<br></br>\n      Anyone can reset this game by donating more than {(RemainaingBal2).toFixed(0)} Forge\n      <h3>Currently you will recieve {vAmountOut.toFixed(3)} Forge if you claim now.</h3>\n   \n            <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleAirdrop}\n        >\n          {isMining || isMining6 ? <CircularProgress size={26} /> : \"Claim Airdrop For Your Account\"}\n        </Button>\n      </div>\n\n      <Snackbar\n        open={showStakeTokensSuccess2}\n        autoHideDuration={25000}\n        onClose={handleCloseSnack2}\n      >\n        <Alert onClose={handleCloseSnack2} severity=\"success\">\n          Tokens claimed successfully!!\n        </Alert>\n      </Snackbar>\n\n\n    </>\n  )\n}","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/map.json\"\n\nimport AirdropContract from \"../chain-info/AirdropToken.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useIsClaimed = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const { abi } = TokenFarm\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n\n  \n  const test = new utils.Interface(AirdropContract.abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: test,\n      address: dappTokenAddress,\n      method: \"hasClaimed\",\n      args: [account],\n    }) ?? []\n  return stakingBalance\n}\n","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/ForgeGuess.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useBalGuess = (): number => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"guess\"] : constants.AddressZero\n    const AirdropAddress = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance3] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"balanceOf\",\n      args: [AirdropAddress],\n    }) ?? []    \nvar test2 = 0\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"withEstimator\",\n      args: [stakingBalance3],\n    }) ?? []\n\n    return stakingBalance2\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport E20 from \"../chain-info/ERC20.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AllowanceForge9 = (): number => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const aidropAddy = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n    const forgeaddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = E20.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    \n    const [stakingBalance2] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: forgeaddy,\n      method: \"allowance\",\n      args: [account, aidropAddy],\n    }) ?? []\n    \n    return stakingBalance2\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/map.json\"\n\nimport AirdropContract from \"../chain-info/AirdropToken.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance = (ststst: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const { abi } = TokenFarm\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n\n  \n  const test = new utils.Interface(AirdropContract.abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: test,\n      address: dappTokenAddress,\n      method: \"amtOutForChoiceInForge\",\n      args: [ststst],\n    }) ?? []\n    \n  return stakingBalance\n}\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/map.json\"\n\nimport AirdropContract from \"../chain-info/AirdropToken.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance2 = (ststst: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const { abi } = TokenFarm\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n\n  \n  const test = new utils.Interface(AirdropContract.abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: test,\n      address: dappTokenAddress,\n      method: \"hasClaimed\",\n      args: [ststst],\n    }) ?? []\n  return stakingBalance\n}\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\n\nimport AirdropContract from \"../chain-info/AirdropToken.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useNoApprove = (tokenAddress: string) => {\n\n\n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const { abi } = TokenFarm\n  const airdropaddy = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n  const forgeaddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n\n  const tokenFarmInterface = new utils.Interface(AirdropContract.abi)\n\n  const tokenFarmContract = new Contract(\n    airdropaddy,\n    tokenFarmInterface\n  )\n\n  const { send: stakeTokensSend, state: stakeTokensState23f } =\n    useContractFunction(tokenFarmContract, \"deposit\", {\n      transactionName: \"Stake tokens\",\n    })\n\n\n  const send =  (amount: string) => {\n\n    return stakeTokensSend(amount)\n  }\n  const [state, setState] = useState(stakeTokensState23f)\n  \n  useEffect(() => {\n      setState(stakeTokensState23f)\n  \n  }, [stakeTokensState23f])\n    \n  return { send, state }\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\n\nimport AirdropContract from \"../chain-info/ForgeAirdrop.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useNoApprove2 = (tokenAddress: string) => {\n\n\n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const { abi } = TokenFarm\n  const airdropaddy = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n  const forgeaddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n\n  const tokenFarmInterface = new utils.Interface(AirdropContract.abi)\n\n  const tokenFarmContract = new Contract(\n    airdropaddy,\n    tokenFarmInterface\n  )\n\n  const { send: stakeTokensSend, state: stakeTokensState23f } =\n    useContractFunction(tokenFarmContract, \"Donation\", {\n      transactionName: \"Stake tokens\",\n    })\n\n\n  const send =  (amount: string) => {\n\n    return stakeTokensSend(amount)\n  }\n  const [state, setState] = useState(stakeTokensState23f)\n  \n  useEffect(() => {\n      setState(stakeTokensState23f)\n  \n  }, [stakeTokensState23f])\n    \n  return { send, state }\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\n\nimport AirdropContract from \"../chain-info/ForgeAirdrop.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of th e second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens2 = (tokenAddress: string) => {\n\n\n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const { abi } = TokenFarm\n  const airdropaddy = chainId ? brownieConfig[\"networks\"][networkName][\"airdrop\"] : constants.AddressZero\n  const forgeaddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n\n  const tokenFarmInterface = new utils.Interface(AirdropContract.abi)\n\n  const tokenFarmContract = new Contract(\n    airdropaddy,\n    tokenFarmInterface\n  )\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"Donation\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(forgeaddy, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(airdropaddy, \"999999999999999999999999999999999999999999999999\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n  const { image, address, name } = token;\n\n  const { account } = useEthers();\n  console.log(\"tokenBalance\", address)\n  console.log(\"tokenBalance\", account)\n  const tokenBalance = useTokenBalance(\"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\", account);\nconsole.log(\"tokenBalance\", tokenBalance)\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n\n  return (\n    <BalanceMsg\n      label={`Your Forge balance`}\n      amount={formattedTokenBalance}\n      tokenImgSrc={image}\n    />\n  );\n};\n","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { StakeForm } from \"./StakeForm\"\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg\n} from \"../../components\"\nimport { Token } from \"../Main\"\nimport { WalletBalance } from \"./WalletBalance\"\n\ninterface YourWalletProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n  // wtf is this? \n  // Reacts way of holding state between components \n  // Could do it without <number> \n  // saving state between renders of components \n  // You'd have to pass it through as a prop to have another component use it \n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  const classes = useStyles()\n\n  return (\n    <Box>\n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      <WalletBalance\n                        token={supportedTokens[selectedTokenIndex]}\n                      />\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}\n","/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\nimport DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport { StylesProvider } from \"@material-ui/core/styles\";\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const { chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  console.log(typeof chainId)\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n   const supportedTokens: Array<Token> = [\n    {\n      image: eth,\n      address: wethTokenAddress,\n      name: \"Claim your Forge\",\n    },\n    {\n      image: eth,\n      address: \"0xDAe61164B62e5427f6ea5CE40c093F8C10e1E154\",\n      name: \"ReFill Forge Airdrop\",\n    },\n    {\n      image: eth,\n      address: \"0xe7FFb468559158e0a9c4dD1d0CB60fc119850191\",\n      name: \"Donate\",\n    },\n  ]\n  const supportedTokens2: Array<Token> = [\n\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && (error.name === \"UnsupportedChainIdError\"  || error.name === \"t\")) {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)\n    }\n  }, [error, showNetworkError])\n\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: classes.title,\n        }}\n      >\n        Forge Airdrop\n      </Typography>\n      <YourWallet supportedTokens={supportedTokens} /><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n\n      <StylesProvider injectFirst>\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          You got to connect to the Mumbai network!\n        </Alert>\n      </Snackbar>\n      </StylesProvider>\n    </>\n  )\n}\n","import React from \"react\"\nimport { Header } from \"./features/Header\"\nimport { Main } from \"./features/Main\"\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Container } from \"@material-ui/core\"\n\nexport const App = () => {\n  return (\n    <DAppProvider config={{\n      supportedChains: [ChainId.Mumbai],\n      notifications: {\n        expirationPeriod: 1000,\n        checkInterval: 1000\n      }\n    }}>\n      <Header />\n      <Container maxWidth=\"md\">\n        <Main />\n      </Container>\n    </DAppProvider>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}