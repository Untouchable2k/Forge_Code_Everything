{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "Donation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ForgeGuessContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ForgeTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ForgeTokenAddressREAL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_merkleRootAll",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        }
      ],
      "name": "amountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "out",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "amtClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        }
      ],
      "name": "amtOutForChoiceInForge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "out",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "claim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        }
      ],
      "name": "mintWithProofALL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintWithProofMid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintWithProofTop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perfect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amtz",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starttime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "claim",
          "type": "uint256"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "ver",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/Merkletree.sol"
  },
  "ast": {
    "absolutePath": "contracts/Merkletree.sol",
    "exportedSymbols": {
      "ForgeAirdrop": [
        3101
      ],
      "ForgeGuess": [
        2459
      ],
      "IERC20": [
        2422
      ],
      "MerkleProof": [
        2355
      ]
    },
    "id": 3102,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2287,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "372:24:1"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleProof",
        "contractDependencies": [],
        "contractKind": "library",
        "fullyImplemented": true,
        "id": 2355,
        "linearizedBaseContracts": [
          2355
        ],
        "name": "MerkleProof",
        "nameLocation": "406:11:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2353,
              "nodeType": "Block",
              "src": "879:693:1",
              "statements": [
                {
                  "assignments": [
                    2301
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2301,
                      "mutability": "mutable",
                      "name": "computedHash",
                      "nameLocation": "897:12:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 2353,
                      "src": "889:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 2300,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "889:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2303,
                  "initialValue": {
                    "id": 2302,
                    "name": "leaf",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2295,
                    "src": "912:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "889:27:1"
                },
                {
                  "body": {
                    "id": 2347,
                    "nodeType": "Block",
                    "src": "970:483:1",
                    "statements": [
                      {
                        "assignments": [
                          2316
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2316,
                            "mutability": "mutable",
                            "name": "proofElement",
                            "nameLocation": "992:12:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 2347,
                            "src": "984:20:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 2315,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "984:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2320,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2317,
                            "name": "proof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2291,
                            "src": "1007:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          },
                          "id": 2319,
                          "indexExpression": {
                            "id": 2318,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2305,
                            "src": "1013:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1007:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "984:31:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 2323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2321,
                            "name": "computedHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2301,
                            "src": "1045:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "id": 2322,
                            "name": "proofElement",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2316,
                            "src": "1061:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1045:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 2345,
                          "nodeType": "Block",
                          "src": "1262:181:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 2343,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2335,
                                  "name": "computedHash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2301,
                                  "src": "1358:12:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 2339,
                                          "name": "proofElement",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2316,
                                          "src": "1400:12:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        {
                                          "id": 2340,
                                          "name": "computedHash",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2301,
                                          "src": "1414:12:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          },
                                          {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        ],
                                        "expression": {
                                          "id": 2337,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "1383:3:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 2338,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "1383:16:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 2341,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1383:44:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 2336,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "1373:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 2342,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1373:55:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "src": "1358:70:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "id": 2344,
                              "nodeType": "ExpressionStatement",
                              "src": "1358:70:1"
                            }
                          ]
                        },
                        "id": 2346,
                        "nodeType": "IfStatement",
                        "src": "1041:402:1",
                        "trueBody": {
                          "id": 2334,
                          "nodeType": "Block",
                          "src": "1075:181:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 2332,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2324,
                                  "name": "computedHash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2301,
                                  "src": "1171:12:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 2328,
                                          "name": "computedHash",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2301,
                                          "src": "1213:12:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        {
                                          "id": 2329,
                                          "name": "proofElement",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2316,
                                          "src": "1227:12:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          },
                                          {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        ],
                                        "expression": {
                                          "id": 2326,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "1196:3:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 2327,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "1196:16:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 2330,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1196:44:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 2325,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "1186:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 2331,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1186:55:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "src": "1171:70:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "id": 2333,
                              "nodeType": "ExpressionStatement",
                              "src": "1171:70:1"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2311,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2308,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2305,
                      "src": "947:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 2309,
                        "name": "proof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2291,
                        "src": "951:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      "id": 2310,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "951:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "947:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2348,
                  "initializationExpression": {
                    "assignments": [
                      2305
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 2305,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "940:1:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2348,
                        "src": "932:9:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2304,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "932:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 2307,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 2306,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "944:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "932:13:1"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 2313,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "965:3:1",
                      "subExpression": {
                        "id": 2312,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2305,
                        "src": "965:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 2314,
                    "nodeType": "ExpressionStatement",
                    "src": "965:3:1"
                  },
                  "nodeType": "ForStatement",
                  "src": "927:526:1"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 2351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2349,
                      "name": "computedHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2301,
                      "src": "1545:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 2350,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2293,
                      "src": "1561:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1545:20:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2299,
                  "id": 2352,
                  "nodeType": "Return",
                  "src": "1538:27:1"
                }
              ]
            },
            "documentation": {
              "id": 2288,
              "nodeType": "StructuredDocumentation",
              "src": "424:323:1",
              "text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
            },
            "id": 2354,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verify",
            "nameLocation": "761:6:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2291,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "794:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2354,
                  "src": "777:22:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2289,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "777:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 2290,
                    "nodeType": "ArrayTypeName",
                    "src": "777:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2293,
                  "mutability": "mutable",
                  "name": "root",
                  "nameLocation": "817:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2354,
                  "src": "809:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2292,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "809:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2295,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "839:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2354,
                  "src": "831:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2294,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "831:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "767:82:1"
            },
            "returnParameters": {
              "id": 2299,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2298,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2354,
                  "src": "873:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2297,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "873:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "872:6:1"
            },
            "scope": 2355,
            "src": "752:820:1",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 3102,
        "src": "398:1176:1",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IERC20",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 2422,
        "linearizedBaseContracts": [
          2422
        ],
        "name": "IERC20",
        "nameLocation": "1588:6:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "18160ddd",
            "id": 2360,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "1610:11:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2356,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1621:2:1"
            },
            "returnParameters": {
              "id": 2359,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2358,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2360,
                  "src": "1647:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2357,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1647:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1646:9:1"
            },
            "scope": 2422,
            "src": "1601:55:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "70a08231",
            "id": 2367,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "1670:9:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2363,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2362,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1688:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2367,
                  "src": "1680:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2361,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1680:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1679:17:1"
            },
            "returnParameters": {
              "id": 2366,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2365,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2367,
                  "src": "1720:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2364,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1720:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1719:9:1"
            },
            "scope": 2422,
            "src": "1661:68:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "a9059cbb",
            "id": 2376,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nameLocation": "1743:8:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2372,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2369,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "1760:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2376,
                  "src": "1752:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2368,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1752:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2371,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1779:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2376,
                  "src": "1771:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2370,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1771:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1751:35:1"
            },
            "returnParameters": {
              "id": 2375,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2374,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2376,
                  "src": "1805:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2373,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1805:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1804:6:1"
            },
            "scope": 2422,
            "src": "1734:77:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "dd62ed3e",
            "id": 2385,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "1825:9:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2378,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1843:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2385,
                  "src": "1835:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2377,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1835:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2380,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "1858:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2385,
                  "src": "1850:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2379,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1850:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1834:32:1"
            },
            "returnParameters": {
              "id": 2384,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2383,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2385,
                  "src": "1890:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2382,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1890:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1889:9:1"
            },
            "scope": 2422,
            "src": "1816:83:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "095ea7b3",
            "id": 2394,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "1913:7:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2390,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2387,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "1929:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2394,
                  "src": "1921:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2386,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1921:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2389,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1946:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2394,
                  "src": "1938:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2388,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1938:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1920:33:1"
            },
            "returnParameters": {
              "id": 2393,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2392,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2394,
                  "src": "1972:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2391,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1972:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1971:6:1"
            },
            "scope": 2422,
            "src": "1904:74:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "23b872dd",
            "id": 2405,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "1992:12:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2401,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2396,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "2013:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2405,
                  "src": "2005:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2395,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2005:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2398,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "2029:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2405,
                  "src": "2021:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2397,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2021:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2400,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2048:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2405,
                  "src": "2040:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2399,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2040:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2004:51:1"
            },
            "returnParameters": {
              "id": 2404,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2403,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2405,
                  "src": "2074:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2402,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2074:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2073:6:1"
            },
            "scope": 2422,
            "src": "1983:97:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "id": 2413,
            "name": "Transfer",
            "nameLocation": "2096:8:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 2412,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2407,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "2121:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2413,
                  "src": "2105:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2406,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2105:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2409,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2143:2:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2413,
                  "src": "2127:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2408,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2127:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2411,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "2155:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2413,
                  "src": "2147:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2410,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2147:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2104:57:1"
            },
            "src": "2090:72:1"
          },
          {
            "anonymous": false,
            "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
            "id": 2421,
            "name": "Approval",
            "nameLocation": "2173:8:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 2420,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2415,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "2198:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2421,
                  "src": "2182:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2414,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2182:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2417,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "2221:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2421,
                  "src": "2205:23:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2416,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2205:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2419,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "2238:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2421,
                  "src": "2230:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2418,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2230:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2181:63:1"
            },
            "src": "2167:78:1"
          }
        ],
        "scope": 3102,
        "src": "1578:669:1",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ForgeGuess",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 2459,
        "linearizedBaseContracts": [
          2459
        ],
        "name": "ForgeGuess",
        "nameLocation": "2260:10:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2429,
              "nodeType": "Block",
              "src": "2342:2:1",
              "statements": []
            },
            "functionSelector": "70a08231",
            "id": 2430,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "2285:9:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2425,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2424,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2303:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2430,
                  "src": "2295:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2423,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2295:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2294:17:1"
            },
            "returnParameters": {
              "id": 2428,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2427,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2430,
                  "src": "2333:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2426,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2333:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2332:9:1"
            },
            "scope": 2459,
            "src": "2276:68:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f03d6672",
            "id": 2432,
            "mutability": "mutable",
            "name": "unreleased",
            "nameLocation": "2364:10:1",
            "nodeType": "VariableDeclaration",
            "scope": 2459,
            "src": "2349:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2431,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2349:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "18160ddd",
            "id": 2434,
            "mutability": "mutable",
            "name": "totalSupply",
            "nameLocation": "2395:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 2459,
            "src": "2380:26:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2433,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2380:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 2441,
              "nodeType": "Block",
              "src": "2478:2:1",
              "statements": []
            },
            "functionSelector": "2ee40908",
            "id": 2442,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "stakeFor",
            "nameLocation": "2421:8:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2439,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2436,
                  "mutability": "mutable",
                  "name": "forWhom",
                  "nameLocation": "2438:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2442,
                  "src": "2430:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2435,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2430:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2438,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2455:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2442,
                  "src": "2447:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2437,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2447:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2429:33:1"
            },
            "returnParameters": {
              "id": 2440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2478:0:1"
            },
            "scope": 2459,
            "src": "2412:68:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2449,
              "nodeType": "Block",
              "src": "2551:2:1",
              "statements": []
            },
            "functionSelector": "441a3e70",
            "id": 2450,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "2494:8:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2444,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2511:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2450,
                  "src": "2503:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2443,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2503:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2446,
                  "mutability": "mutable",
                  "name": "maxLoss",
                  "nameLocation": "2527:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2450,
                  "src": "2519:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2445,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2519:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2502:33:1"
            },
            "returnParameters": {
              "id": 2448,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2551:0:1"
            },
            "scope": 2459,
            "src": "2485:68:1",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2457,
              "nodeType": "Block",
              "src": "2635:2:1",
              "statements": []
            },
            "functionSelector": "afcf89aa",
            "id": 2458,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withEstimator",
            "nameLocation": "2572:13:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2453,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2452,
                  "mutability": "mutable",
                  "name": "amountOut",
                  "nameLocation": "2594:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2458,
                  "src": "2586:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2451,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2586:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2585:19:1"
            },
            "returnParameters": {
              "id": 2456,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2455,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2458,
                  "src": "2626:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2454,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2626:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2625:9:1"
            },
            "scope": 2459,
            "src": "2563:74:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 3102,
        "src": "2251:392:1",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ForgeAirdrop",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 3101,
        "linearizedBaseContracts": [
          3101
        ],
        "name": "ForgeAirdrop",
        "nameLocation": "2656:12:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "5b9ea9e5",
            "id": 2465,
            "mutability": "mutable",
            "name": "ForgeTokenAddressREAL",
            "nameLocation": "2700:21:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "2685:90:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2460,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2685:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307846343466423433303636463745434339313035384533413631344662384131354132373335323736",
                  "id": 2463,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2732:42:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0xF44fB43066F7ECC91058E3A614Fb8A15A2735276"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 2462,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "2724:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_$",
                  "typeString": "type(address)"
                },
                "typeName": {
                  "id": 2461,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2724:7:1",
                  "typeDescriptions": {}
                }
              },
              "id": 2464,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2724:51:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "647e03b7",
            "id": 2471,
            "mutability": "mutable",
            "name": "ForgeTokenAddress",
            "nameLocation": "2796:17:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "2781:86:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2466,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2781:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307862463434393334313566443145373944634461386344306341643745354564363544436537303734",
                  "id": 2469,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2824:42:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 2468,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "2816:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_$",
                  "typeString": "type(address)"
                },
                "typeName": {
                  "id": 2467,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2816:7:1",
                  "typeDescriptions": {}
                }
              },
              "id": 2470,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2816:51:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "60138460",
            "id": 2477,
            "mutability": "mutable",
            "name": "ForgeGuessContractAddress",
            "nameLocation": "2888:25:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "2873:94:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2472,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2873:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307844653235364543353745383634654338343763303330653134633562393741423233334135323145",
                  "id": 2475,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2924:42:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0xDe256EC57E864eC847c030e14c5b97AB233A521E"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 2474,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "2916:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_$",
                  "typeString": "type(address)"
                },
                "typeName": {
                  "id": 2473,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2916:7:1",
                  "typeDescriptions": {}
                }
              },
              "id": 2476,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2916:51:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "d49b9216",
            "id": 2480,
            "mutability": "mutable",
            "name": "_merkleRootAll",
            "nameLocation": "2991:14:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "2973:32:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
              "typeString": "bytes32[]"
            },
            "typeName": {
              "baseType": {
                "id": 2478,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "2973:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "id": 2479,
              "nodeType": "ArrayTypeName",
              "src": "2973:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                "typeString": "bytes32[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 2483,
            "mutability": "mutable",
            "name": "_merkleRootTop",
            "nameLocation": "3028:14:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3011:100:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 2481,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "3011:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "307864643832616632626334623732316266643562653038313131643466343232666430376431353738613030373264363730316632366561346666663333383435",
              "id": 2482,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3045:66:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_100192038640928002063148272310828067627996455410527015143226000379904206780485_by_1",
                "typeString": "int_const 1001...(70 digits omitted)...0485"
              },
              "value": "0xdd82af2bc4b721bfd5be08111d4f422fd07d1578a0072d6701f26ea4fff33845"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 2486,
            "mutability": "mutable",
            "name": "_merkleRootMid",
            "nameLocation": "3134:14:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3117:100:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 2484,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "3117:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "307831353839336139623864333633383134396464393436316664653739663538396535363561326663373661383631656331616562623833373336313531353636",
              "id": 2485,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3151:66:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_9741032363074417624774910834101753834832440615676253441853226277437707720038_by_1",
                "typeString": "int_const 9741...(68 digits omitted)...0038"
              },
              "value": "0x15893a9b8d3638149dd9461fde79f589e565a2fc76a861ec1aebb83736151566"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 2489,
            "mutability": "mutable",
            "name": "_merkleRootBot",
            "nameLocation": "3240:14:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3223:100:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 2487,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "3223:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "307833313662343332336361393162613633333034613465306164613234623039663836383961633166383061636138653964356334323133666339626137383438",
              "id": 2488,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3257:66:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_22352845598447740441949270597753764576667759800191410879094984310838034856008_by_1",
                "typeString": "int_const 2235...(69 digits omitted)...6008"
              },
              "value": "0x316b4323ca91ba63304a4e0ada24b09f8689ac1f80aca8e9d5c4213fc9ba7848"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "290812c2",
            "id": 2492,
            "mutability": "mutable",
            "name": "amtClaim",
            "nameLocation": "3389:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3371:26:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 2490,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "3371:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 2491,
              "nodeType": "ArrayTypeName",
              "src": "3371:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 2495,
            "mutability": "mutable",
            "name": "nextTokenId",
            "nameLocation": "3420:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3403:32:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2493,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "3403:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 2494,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3434:1:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "73b2e80e",
            "id": 2499,
            "mutability": "mutable",
            "name": "hasClaimed",
            "nameLocation": "3473:10:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3441:42:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 2498,
              "keyType": {
                "id": 2496,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "3449:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "3441:24:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 2497,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "3460:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "54fac919",
            "id": 2508,
            "mutability": "mutable",
            "name": "decay",
            "nameLocation": "3504:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3489:39:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2500,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "3489:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_2592000_by_1",
                "typeString": "int_const 2592000"
              },
              "id": 2507,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "commonType": {
                  "typeIdentifier": "t_rational_86400_by_1",
                  "typeString": "int_const 86400"
                },
                "id": 2505,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "leftExpression": {
                  "commonType": {
                    "typeIdentifier": "t_rational_1440_by_1",
                    "typeString": "int_const 1440"
                  },
                  "id": 2503,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "leftExpression": {
                    "hexValue": "3234",
                    "id": 2501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3512:2:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_24_by_1",
                      "typeString": "int_const 24"
                    },
                    "value": "24"
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "*",
                  "rightExpression": {
                    "hexValue": "3630",
                    "id": 2502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3516:2:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_60_by_1",
                      "typeString": "int_const 60"
                    },
                    "value": "60"
                  },
                  "src": "3512:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1440_by_1",
                    "typeString": "int_const 1440"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "*",
                "rightExpression": {
                  "hexValue": "3630",
                  "id": 2504,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "3521:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_60_by_1",
                    "typeString": "int_const 60"
                  },
                  "value": "60"
                },
                "src": "3512:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_86400_by_1",
                  "typeString": "int_const 86400"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "*",
              "rightExpression": {
                "hexValue": "3330",
                "id": 2506,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "3526:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_30_by_1",
                  "typeString": "int_const 30"
                },
                "value": "30"
              },
              "src": "3512:16:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2592000_by_1",
                "typeString": "int_const 2592000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8da58897",
            "id": 2512,
            "mutability": "mutable",
            "name": "starttime",
            "nameLocation": "3550:9:1",
            "nodeType": "VariableDeclaration",
            "scope": 3101,
            "src": "3535:42:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2509,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "3535:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "expression": {
                "id": 2510,
                "name": "block",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": -4,
                "src": "3562:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_magic_block",
                  "typeString": "block"
                }
              },
              "id": 2511,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "memberName": "timestamp",
              "nodeType": "MemberAccess",
              "src": "3562:15:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 2551,
              "nodeType": "Block",
              "src": "3604:245:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2518,
                        "name": "_merkleRootTop",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2483,
                        "src": "3634:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 2515,
                        "name": "_merkleRootAll",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2480,
                        "src": "3614:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                          "typeString": "bytes32[] storage ref"
                        }
                      },
                      "id": 2517,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3614:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
                        "typeString": "function (bytes32[] storage pointer,bytes32)"
                      }
                    },
                    "id": 2519,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3614:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2520,
                  "nodeType": "ExpressionStatement",
                  "src": "3614:35:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2524,
                        "name": "_merkleRootMid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2486,
                        "src": "3679:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 2521,
                        "name": "_merkleRootAll",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2480,
                        "src": "3659:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                          "typeString": "bytes32[] storage ref"
                        }
                      },
                      "id": 2523,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3659:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
                        "typeString": "function (bytes32[] storage pointer,bytes32)"
                      }
                    },
                    "id": 2525,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3659:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2526,
                  "nodeType": "ExpressionStatement",
                  "src": "3659:35:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2530,
                        "name": "_merkleRootBot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2489,
                        "src": "3724:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "expression": {
                        "id": 2527,
                        "name": "_merkleRootAll",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2480,
                        "src": "3704:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                          "typeString": "bytes32[] storage ref"
                        }
                      },
                      "id": 2529,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3704:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
                        "typeString": "function (bytes32[] storage pointer,bytes32)"
                      }
                    },
                    "id": 2531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3704:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2532,
                  "nodeType": "ExpressionStatement",
                  "src": "3704:35:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "31303030303030303030303030",
                        "id": 2536,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3763:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000_by_1",
                          "typeString": "int_const 1000000000000"
                        },
                        "value": "1000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000000000_by_1",
                          "typeString": "int_const 1000000000000"
                        }
                      ],
                      "expression": {
                        "id": 2533,
                        "name": "amtClaim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "3749:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 2535,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3749:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                        "typeString": "function (uint256[] storage pointer,uint256)"
                      }
                    },
                    "id": 2537,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3749:28:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2538,
                  "nodeType": "ExpressionStatement",
                  "src": "3749:28:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "313030303030303030",
                        "id": 2542,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3801:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        },
                        "value": "100000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        }
                      ],
                      "expression": {
                        "id": 2539,
                        "name": "amtClaim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "3787:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 2541,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3787:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                        "typeString": "function (uint256[] storage pointer,uint256)"
                      }
                    },
                    "id": 2543,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3787:24:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2544,
                  "nodeType": "ExpressionStatement",
                  "src": "3787:24:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "313030303030",
                        "id": 2548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3835:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000_by_1",
                          "typeString": "int_const 100000"
                        },
                        "value": "100000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_100000_by_1",
                          "typeString": "int_const 100000"
                        }
                      ],
                      "expression": {
                        "id": 2545,
                        "name": "amtClaim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "3821:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 2547,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3821:13:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                        "typeString": "function (uint256[] storage pointer,uint256)"
                      }
                    },
                    "id": 2549,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3821:21:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2550,
                  "nodeType": "ExpressionStatement",
                  "src": "3821:21:1"
                }
              ]
            },
            "id": 2552,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2513,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3600:2:1"
            },
            "returnParameters": {
              "id": 2514,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3604:0:1"
            },
            "scope": 3101,
            "src": "3589:260:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2650,
              "nodeType": "Block",
              "src": "3916:677:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2575,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2560,
                          "name": "amt",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2554,
                          "src": "3936:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 2571,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "4050:4:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                        "typeString": "contract ForgeAirdrop"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                        "typeString": "contract ForgeAirdrop"
                                      }
                                    ],
                                    "id": 2570,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4042:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2569,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4042:7:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2572,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4042:13:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 2566,
                                      "name": "ForgeGuessContractAddress",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2477,
                                      "src": "4005:25:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 2565,
                                    "name": "ForgeGuess",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2459,
                                    "src": "3994:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                                      "typeString": "type(contract ForgeGuess)"
                                    }
                                  },
                                  "id": 2567,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3994:37:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                                    "typeString": "contract ForgeGuess"
                                  }
                                },
                                "id": 2568,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balanceOf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2430,
                                "src": "3994:47:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view external returns (uint256)"
                                }
                              },
                              "id": 2573,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3994:62:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 2562,
                                  "name": "ForgeGuessContractAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2477,
                                  "src": "3953:25:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2561,
                                "name": "ForgeGuess",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2459,
                                "src": "3942:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                                  "typeString": "type(contract ForgeGuess)"
                                }
                              },
                              "id": 2563,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3942:37:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                                "typeString": "contract ForgeGuess"
                              }
                            },
                            "id": 2564,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "withEstimator",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2458,
                            "src": "3942:51:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 2574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3942:115:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3936:121:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6d7573742062652067726561746572207468616e2070726576696f757320746f74616c20746f207265736574",
                        "id": 2576,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4059:46:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_307ff9cf3cb440ac89a62a5e4b70b956e3f0184b0c4d4868eb74068e7d70831e",
                          "typeString": "literal_string \"must be greater than previous total to reset\""
                        },
                        "value": "must be greater than previous total to reset"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_307ff9cf3cb440ac89a62a5e4b70b956e3f0184b0c4d4868eb74068e7d70831e",
                          "typeString": "literal_string \"must be greater than previous total to reset\""
                        }
                      ],
                      "id": 2559,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3928:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3928:178:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2578,
                  "nodeType": "ExpressionStatement",
                  "src": "3928:178:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 2584,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4163:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2585,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4163:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 2588,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4183:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                  "typeString": "contract ForgeAirdrop"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                  "typeString": "contract ForgeAirdrop"
                                }
                              ],
                              "id": 2587,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4175:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 2586,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4175:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2589,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4175:13:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 2590,
                            "name": "amt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2554,
                            "src": "4190:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 2581,
                                "name": "ForgeTokenAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2471,
                                "src": "4131:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2580,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2422,
                              "src": "4124:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 2582,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4124:25:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$2422",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 2583,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2405,
                          "src": "4124:38:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 2591,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4124:70:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7472616e73666572206661696c",
                        "id": 2592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4196:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d35fe8e3e3a4ab0323fd2dca45db261fa8c7ab4a56fb233745bca451cc78f27a",
                          "typeString": "literal_string \"transfer fail\""
                        },
                        "value": "transfer fail"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d35fe8e3e3a4ab0323fd2dca45db261fa8c7ab4a56fb233745bca451cc78f27a",
                          "typeString": "literal_string \"transfer fail\""
                        }
                      ],
                      "id": 2579,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4116:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4116:96:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2594,
                  "nodeType": "ExpressionStatement",
                  "src": "4116:96:1"
                },
                {
                  "expression": {
                    "id": 2598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2595,
                      "name": "starttime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2512,
                      "src": "4222:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 2596,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "4234:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 2597,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "4234:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4222:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2599,
                  "nodeType": "ExpressionStatement",
                  "src": "4222:27:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2604,
                        "name": "ForgeGuessContractAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2477,
                        "src": "4293:25:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939",
                        "id": 2605,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4320:51:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_999999999999999999999999999999999999999999999999999_by_1",
                          "typeString": "int_const 9999...(43 digits omitted)...9999"
                        },
                        "value": "999999999999999999999999999999999999999999999999999"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_999999999999999999999999999999999999999999999999999_by_1",
                          "typeString": "int_const 9999...(43 digits omitted)...9999"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2601,
                            "name": "ForgeTokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2471,
                            "src": "4266:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2600,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2422,
                          "src": "4259:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 2602,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4259:25:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2422",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 2603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "approve",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2394,
                      "src": "4259:33:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 2606,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4259:113:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2607,
                  "nodeType": "ExpressionStatement",
                  "src": "4259:113:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2614,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "4437:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                              "typeString": "contract ForgeAirdrop"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                              "typeString": "contract ForgeAirdrop"
                            }
                          ],
                          "id": 2613,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4429:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 2612,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4429:7:1",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 2615,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4429:13:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 2616,
                        "name": "amt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2554,
                        "src": "4444:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2609,
                            "name": "ForgeGuessContractAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2477,
                            "src": "4393:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2608,
                          "name": "ForgeGuess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2459,
                          "src": "4382:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                            "typeString": "type(contract ForgeGuess)"
                          }
                        },
                        "id": 2610,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4382:37:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                          "typeString": "contract ForgeGuess"
                        }
                      },
                      "id": 2611,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "stakeFor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2442,
                      "src": "4382:46:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 2617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4382:66:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2618,
                  "nodeType": "ExpressionStatement",
                  "src": "4382:66:1"
                },
                {
                  "assignments": [
                    2620
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2620,
                      "mutability": "mutable",
                      "name": "x",
                      "nameLocation": "4463:1:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 2650,
                      "src": "4458:6:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2619,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4458:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2623,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 2621,
                      "name": "perfect",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2765,
                      "src": "4467:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 2622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4467:9:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4458:18:1"
                },
                {
                  "expression": {
                    "id": 2630,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 2624,
                        "name": "amtClaim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "4486:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 2626,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 2625,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4495:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4486:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 2629,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2627,
                        "name": "x",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2620,
                        "src": "4500:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "hexValue": "3130",
                        "id": 2628,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4504:2:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "src": "4500:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4486:20:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2631,
                  "nodeType": "ExpressionStatement",
                  "src": "4486:20:1"
                },
                {
                  "expression": {
                    "id": 2638,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 2632,
                        "name": "amtClaim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "4516:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 2634,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 2633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4525:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4516:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 2637,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2635,
                        "name": "x",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2620,
                        "src": "4530:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "hexValue": "33",
                        "id": 2636,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4534:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "src": "4530:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4516:19:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2639,
                  "nodeType": "ExpressionStatement",
                  "src": "4516:19:1"
                },
                {
                  "expression": {
                    "id": 2646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 2640,
                        "name": "amtClaim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2492,
                        "src": "4545:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 2642,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 2641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4554:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4545:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 2645,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2643,
                        "name": "x",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2620,
                        "src": "4559:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 2644,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4563:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "4559:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4545:19:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2647,
                  "nodeType": "ExpressionStatement",
                  "src": "4545:19:1"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 2648,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4582:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 2558,
                  "id": 2649,
                  "nodeType": "Return",
                  "src": "4575:11:1"
                }
              ]
            },
            "functionSelector": "b6b55f25",
            "id": 2651,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nameLocation": "3869:7:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2555,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2554,
                  "mutability": "mutable",
                  "name": "amt",
                  "nameLocation": "3882:3:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2651,
                  "src": "3877:8:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2553,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3877:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3876:10:1"
            },
            "returnParameters": {
              "id": 2558,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2557,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "3908:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2651,
                  "src": "3903:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2556,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3903:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3902:14:1"
            },
            "scope": 3101,
            "src": "3860:733:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2718,
              "nodeType": "Block",
              "src": "4657:538:1",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2658,
                      "name": "amt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2653,
                      "src": "4672:3:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2669,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "4786:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                    "typeString": "contract ForgeAirdrop"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                    "typeString": "contract ForgeAirdrop"
                                  }
                                ],
                                "id": 2668,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4778:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 2667,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4778:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2670,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4778:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 2664,
                                  "name": "ForgeGuessContractAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2477,
                                  "src": "4741:25:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2663,
                                "name": "ForgeGuess",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2459,
                                "src": "4730:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                                  "typeString": "type(contract ForgeGuess)"
                                }
                              },
                              "id": 2665,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4730:37:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                                "typeString": "contract ForgeGuess"
                              }
                            },
                            "id": 2666,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2430,
                            "src": "4730:47:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 2671,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4730:62:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "id": 2660,
                              "name": "ForgeGuessContractAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2477,
                              "src": "4689:25:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2659,
                            "name": "ForgeGuess",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2459,
                            "src": "4678:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                              "typeString": "type(contract ForgeGuess)"
                            }
                          },
                          "id": 2661,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4678:37:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                            "typeString": "contract ForgeGuess"
                          }
                        },
                        "id": 2662,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "withEstimator",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2458,
                        "src": "4678:51:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256) view external returns (uint256)"
                        }
                      },
                      "id": 2672,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4678:115:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4672:121:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 2714,
                    "nodeType": "Block",
                    "src": "4837:330:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 2684,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "4899:3:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 2685,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "4899:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "id": 2688,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "4919:4:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                        "typeString": "contract ForgeAirdrop"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                        "typeString": "contract ForgeAirdrop"
                                      }
                                    ],
                                    "id": 2687,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4911:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2686,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4911:7:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2689,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4911:13:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 2690,
                                  "name": "amt",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2653,
                                  "src": "4926:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 2681,
                                      "name": "ForgeTokenAddress",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2471,
                                      "src": "4867:17:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 2680,
                                    "name": "IERC20",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2422,
                                    "src": "4860:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                                      "typeString": "type(contract IERC20)"
                                    }
                                  },
                                  "id": 2682,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4860:25:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$2422",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                "id": 2683,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "transferFrom",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2405,
                                "src": "4860:38:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,address,uint256) external returns (bool)"
                                }
                              },
                              "id": 2691,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4860:70:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7472616e73666572206661696c",
                              "id": 2692,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4932:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d35fe8e3e3a4ab0323fd2dca45db261fa8c7ab4a56fb233745bca451cc78f27a",
                                "typeString": "literal_string \"transfer fail\""
                              },
                              "value": "transfer fail"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d35fe8e3e3a4ab0323fd2dca45db261fa8c7ab4a56fb233745bca451cc78f27a",
                                "typeString": "literal_string \"transfer fail\""
                              }
                            ],
                            "id": 2679,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4852:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2693,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4852:96:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2694,
                        "nodeType": "ExpressionStatement",
                        "src": "4852:96:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2699,
                              "name": "ForgeGuessContractAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2477,
                              "src": "4996:25:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939",
                              "id": 2700,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5023:51:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_999999999999999999999999999999999999999999999999999_by_1",
                                "typeString": "int_const 9999...(43 digits omitted)...9999"
                              },
                              "value": "999999999999999999999999999999999999999999999999999"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_999999999999999999999999999999999999999999999999999_by_1",
                                "typeString": "int_const 9999...(43 digits omitted)...9999"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 2696,
                                  "name": "ForgeTokenAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2471,
                                  "src": "4969:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2695,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2422,
                                "src": "4962:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 2697,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4962:25:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$2422",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 2698,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "approve",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2394,
                            "src": "4962:33:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 2701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4962:113:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2702,
                        "nodeType": "ExpressionStatement",
                        "src": "4962:113:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2709,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "5144:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                    "typeString": "contract ForgeAirdrop"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                    "typeString": "contract ForgeAirdrop"
                                  }
                                ],
                                "id": 2708,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "5136:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 2707,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "5136:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2710,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5136:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2711,
                              "name": "amt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2653,
                              "src": "5151:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 2704,
                                  "name": "ForgeGuessContractAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2477,
                                  "src": "5100:25:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 2703,
                                "name": "ForgeGuess",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2459,
                                "src": "5089:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                                  "typeString": "type(contract ForgeGuess)"
                                }
                              },
                              "id": 2705,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5089:37:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                                "typeString": "contract ForgeGuess"
                              }
                            },
                            "id": 2706,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "stakeFor",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2442,
                            "src": "5089:46:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 2712,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5089:66:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2713,
                        "nodeType": "ExpressionStatement",
                        "src": "5089:66:1"
                      }
                    ]
                  },
                  "id": 2715,
                  "nodeType": "IfStatement",
                  "src": "4669:498:1",
                  "trueBody": {
                    "id": 2678,
                    "nodeType": "Block",
                    "src": "4794:39:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2675,
                              "name": "amt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2653,
                              "src": "4817:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2674,
                            "name": "deposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2651,
                            "src": "4809:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (uint256) returns (bool)"
                            }
                          },
                          "id": 2676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4809:12:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2677,
                        "nodeType": "ExpressionStatement",
                        "src": "4809:12:1"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 2716,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5184:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 2657,
                  "id": 2717,
                  "nodeType": "Return",
                  "src": "5177:11:1"
                }
              ]
            },
            "functionSelector": "4ad6d3cd",
            "id": 2719,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "Donation",
            "nameLocation": "4609:8:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2654,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2653,
                  "mutability": "mutable",
                  "name": "amt",
                  "nameLocation": "4623:3:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2719,
                  "src": "4618:8:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2652,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4618:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4617:10:1"
            },
            "returnParameters": {
              "id": 2657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2656,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "4649:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2719,
                  "src": "4644:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2655,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4644:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4643:14:1"
            },
            "scope": 3101,
            "src": "4600:595:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2764,
              "nodeType": "Block",
              "src": "5255:280:1",
              "statements": [
                {
                  "assignments": [
                    2725
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2725,
                      "mutability": "mutable",
                      "name": "test",
                      "nameLocation": "5282:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 2764,
                      "src": "5274:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2724,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5274:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2761,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2760,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_rational_10000000000000000000000_by_1",
                            "typeString": "int_const 10000000000000000000000"
                          },
                          "id": 2732,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_10000000000000000000_by_1",
                              "typeString": "int_const 10000000000000000000"
                            },
                            "id": 2730,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 2726,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5290:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              },
                              "id": 2729,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 2727,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5295:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "3138",
                                "id": 2728,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5301:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_18_by_1",
                                  "typeString": "int_const 18"
                                },
                                "value": "18"
                              },
                              "src": "5295:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                "typeString": "int_const 1000000000000000000"
                              }
                            },
                            "src": "5290:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10000000000000000000_by_1",
                              "typeString": "int_const 10000000000000000000"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "31303030",
                            "id": 2731,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5306:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000_by_1",
                              "typeString": "int_const 1000"
                            },
                            "value": "1000"
                          },
                          "src": "5290:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10000000000000000000000_by_1",
                            "typeString": "int_const 10000000000000000000000"
                          }
                        }
                      ],
                      "id": 2733,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5289:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_10000000000000000000000_by_1",
                        "typeString": "int_const 10000000000000000000000"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2757,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2751,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "393735",
                                  "id": 2734,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5316:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_975_by_1",
                                    "typeString": "int_const 975"
                                  },
                                  "value": "975"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2749,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "arguments": [
                                          {
                                            "id": 2742,
                                            "name": "ForgeGuessContractAddress",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2477,
                                            "src": "5368:25:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "id": 2738,
                                                    "name": "ForgeTokenAddress",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2471,
                                                    "src": "5338:17:1",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  ],
                                                  "id": 2737,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "lValueRequested": false,
                                                  "nodeType": "ElementaryTypeNameExpression",
                                                  "src": "5330:7:1",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_type$_t_address_$",
                                                    "typeString": "type(address)"
                                                  },
                                                  "typeName": {
                                                    "id": 2736,
                                                    "name": "address",
                                                    "nodeType": "ElementaryTypeName",
                                                    "src": "5330:7:1",
                                                    "typeDescriptions": {}
                                                  }
                                                },
                                                "id": 2739,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "typeConversion",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "5330:26:1",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "id": 2735,
                                              "name": "IERC20",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2422,
                                              "src": "5323:6:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                                                "typeString": "type(contract IERC20)"
                                              }
                                            },
                                            "id": 2740,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "5323:34:1",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IERC20_$2422",
                                              "typeString": "contract IERC20"
                                            }
                                          },
                                          "id": 2741,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "balanceOf",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 2367,
                                          "src": "5323:44:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                            "typeString": "function (address) view external returns (uint256)"
                                          }
                                        },
                                        "id": 2743,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "5323:71:1",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "expression": {
                                            "arguments": [
                                              {
                                                "id": 2745,
                                                "name": "ForgeGuessContractAddress",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2477,
                                                "src": "5408:25:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              ],
                                              "id": 2744,
                                              "name": "ForgeGuess",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2459,
                                              "src": "5397:10:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                                                "typeString": "type(contract ForgeGuess)"
                                              }
                                            },
                                            "id": 2746,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "5397:37:1",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                                              "typeString": "contract ForgeGuess"
                                            }
                                          },
                                          "id": 2747,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "unreleased",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 2432,
                                          "src": "5397:48:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                            "typeString": "function () view external returns (uint256)"
                                          }
                                        },
                                        "id": 2748,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "5397:50:1",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "5323:124:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2750,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "5322:127:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5316:133:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 2753,
                                        "name": "ForgeGuessContractAddress",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2477,
                                        "src": "5463:25:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 2752,
                                      "name": "ForgeGuess",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2459,
                                      "src": "5452:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                                        "typeString": "type(contract ForgeGuess)"
                                      }
                                    },
                                    "id": 2754,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5452:37:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                                      "typeString": "contract ForgeGuess"
                                    }
                                  },
                                  "id": 2755,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "totalSupply",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 2434,
                                  "src": "5452:49:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                    "typeString": "function () view external returns (uint256)"
                                  }
                                },
                                "id": 2756,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5452:51:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5316:187:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 2758,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "5315:189:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2759,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5314:191:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5289:216:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5274:231:1"
                },
                {
                  "expression": {
                    "id": 2762,
                    "name": "test",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2725,
                    "src": "5524:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2723,
                  "id": 2763,
                  "nodeType": "Return",
                  "src": "5517:11:1"
                }
              ]
            },
            "functionSelector": "8912ed0b",
            "id": 2765,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "perfect",
            "nameLocation": "5211:7:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2720,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5218:2:1"
            },
            "returnParameters": {
              "id": 2723,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2722,
                  "mutability": "mutable",
                  "name": "amtz",
                  "nameLocation": "5250:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2765,
                  "src": "5242:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2721,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5242:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5241:14:1"
            },
            "scope": 3101,
            "src": "5202:333:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2781,
              "nodeType": "Block",
              "src": "5619:95:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2777,
                            "name": "choice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2767,
                            "src": "5699:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2776,
                          "name": "amountOut",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2850,
                          "src": "5689:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) view returns (uint256)"
                          }
                        },
                        "id": 2778,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5689:17:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2773,
                            "name": "ForgeGuessContractAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2477,
                            "src": "5648:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2772,
                          "name": "ForgeGuess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2459,
                          "src": "5637:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                            "typeString": "type(contract ForgeGuess)"
                          }
                        },
                        "id": 2774,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5637:37:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                          "typeString": "contract ForgeGuess"
                        }
                      },
                      "id": 2775,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withEstimator",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2458,
                      "src": "5637:51:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view external returns (uint256)"
                      }
                    },
                    "id": 2779,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5637:70:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2771,
                  "id": 2780,
                  "nodeType": "Return",
                  "src": "5630:77:1"
                }
              ]
            },
            "functionSelector": "2d8590c7",
            "id": 2782,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "amtOutForChoiceInForge",
            "nameLocation": "5550:22:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2768,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2767,
                  "mutability": "mutable",
                  "name": "choice",
                  "nameLocation": "5578:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2782,
                  "src": "5573:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2766,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5573:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5572:13:1"
            },
            "returnParameters": {
              "id": 2771,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2770,
                  "mutability": "mutable",
                  "name": "out",
                  "nameLocation": "5615:3:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2782,
                  "src": "5607:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2769,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5607:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5606:13:1"
            },
            "scope": 3101,
            "src": "5541:173:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2849,
              "nodeType": "Block",
              "src": "5785:389:1",
              "statements": [
                {
                  "assignments": [
                    2790
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 2790,
                      "mutability": "mutable",
                      "name": "durdur",
                      "nameLocation": "5803:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 2849,
                      "src": "5795:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2789,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5795:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 2795,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2794,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 2791,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "5812:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 2792,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "5812:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 2793,
                      "name": "starttime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2512,
                      "src": "5830:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5812:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5795:44:1"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2798,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2796,
                      "name": "durdur",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2790,
                      "src": "5852:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 2797,
                      "name": "decay",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2508,
                      "src": "5861:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5852:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2804,
                  "nodeType": "IfStatement",
                  "src": "5849:57:1",
                  "trueBody": {
                    "id": 2803,
                    "nodeType": "Block",
                    "src": "5867:39:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 2801,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2799,
                            "name": "durdur",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2790,
                            "src": "5881:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2800,
                            "name": "decay",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2508,
                            "src": "5890:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5881:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2802,
                        "nodeType": "ExpressionStatement",
                        "src": "5881:14:1"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2807,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2805,
                      "name": "choice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2784,
                      "src": "5918:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 2806,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5928:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "5918:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 2820,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 2818,
                        "name": "choice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2784,
                        "src": "5999:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 2819,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6008:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "5999:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2833,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2831,
                          "name": "choice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2784,
                          "src": "6079:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "32",
                          "id": 2832,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6088:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "src": "6079:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 2844,
                      "nodeType": "IfStatement",
                      "src": "6076:75:1",
                      "trueBody": {
                        "id": 2843,
                        "nodeType": "Block",
                        "src": "6090:61:1",
                        "statements": [
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2841,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2838,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 2834,
                                        "name": "amtClaim",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2492,
                                        "src": "6111:8:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                          "typeString": "uint256[] storage ref"
                                        }
                                      },
                                      "id": 2836,
                                      "indexExpression": {
                                        "hexValue": "32",
                                        "id": 2835,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6120:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "6111:11:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 2837,
                                      "name": "durdur",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2790,
                                      "src": "6125:6:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6111:20:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 2839,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "6110:22:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 2840,
                                "name": "decay",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2508,
                                "src": "6135:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6110:30:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 2788,
                            "id": 2842,
                            "nodeType": "Return",
                            "src": "6103:37:1"
                          }
                        ]
                      }
                    },
                    "id": 2845,
                    "nodeType": "IfStatement",
                    "src": "5996:155:1",
                    "trueBody": {
                      "id": 2830,
                      "nodeType": "Block",
                      "src": "6010:61:1",
                      "statements": [
                        {
                          "expression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2828,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2825,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "baseExpression": {
                                      "id": 2821,
                                      "name": "amtClaim",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2492,
                                      "src": "6031:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                        "typeString": "uint256[] storage ref"
                                      }
                                    },
                                    "id": 2823,
                                    "indexExpression": {
                                      "hexValue": "31",
                                      "id": 2822,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6040:1:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6031:11:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 2824,
                                    "name": "durdur",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2790,
                                    "src": "6045:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "6031:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 2826,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "6030:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 2827,
                              "name": "decay",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2508,
                              "src": "6055:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6030:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "functionReturnParameters": 2788,
                          "id": 2829,
                          "nodeType": "Return",
                          "src": "6023:37:1"
                        }
                      ]
                    }
                  },
                  "id": 2846,
                  "nodeType": "IfStatement",
                  "src": "5915:236:1",
                  "trueBody": {
                    "id": 2817,
                    "nodeType": "Block",
                    "src": "5930:61:1",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2812,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "id": 2808,
                                    "name": "amtClaim",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2492,
                                    "src": "5951:8:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                      "typeString": "uint256[] storage ref"
                                    }
                                  },
                                  "id": 2810,
                                  "indexExpression": {
                                    "hexValue": "30",
                                    "id": 2809,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5960:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5951:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 2811,
                                  "name": "durdur",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2790,
                                  "src": "5965:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5951:20:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 2813,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5950:22:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 2814,
                            "name": "decay",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2508,
                            "src": "5975:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5950:30:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2788,
                        "id": 2816,
                        "nodeType": "Return",
                        "src": "5943:37:1"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "hexValue": "30",
                    "id": 2847,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6167:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "functionReturnParameters": 2788,
                  "id": 2848,
                  "nodeType": "Return",
                  "src": "6160:8:1"
                }
              ]
            },
            "functionSelector": "75fe9fba",
            "id": 2850,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "amountOut",
            "nameLocation": "5729:9:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2785,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2784,
                  "mutability": "mutable",
                  "name": "choice",
                  "nameLocation": "5744:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2850,
                  "src": "5739:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2783,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5739:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5738:13:1"
            },
            "returnParameters": {
              "id": 2788,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2787,
                  "mutability": "mutable",
                  "name": "out",
                  "nameLocation": "5781:3:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2850,
                  "src": "5773:11:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5773:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5772:13:1"
            },
            "scope": 3101,
            "src": "5720:454:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2900,
              "nodeType": "Block",
              "src": "6247:337:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2859,
                            "name": "merkleProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2853,
                            "src": "6299:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          },
                          {
                            "id": 2860,
                            "name": "_merkleRootTop",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2483,
                            "src": "6312:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2864,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "6356:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2865,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "6356:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 2862,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "6339:3:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 2863,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodePacked",
                                  "nodeType": "MemberAccess",
                                  "src": "6339:16:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 2866,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6339:28:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 2861,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "6328:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 2867,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6328:40:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 2857,
                            "name": "MerkleProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2355,
                            "src": "6280:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_MerkleProof_$2355_$",
                              "typeString": "type(library MerkleProof)"
                            }
                          },
                          "id": 2858,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verify",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2354,
                          "src": "6280:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                            "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                          }
                        },
                        "id": 2868,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6280:90:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "70726f6f66206661696c757265",
                        "id": 2869,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6373:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_378191bf8a12e9d7314877f6fa10917c7688a2ea0e5692dcfbbbd15a171122d5",
                          "typeString": "literal_string \"proof failure\""
                        },
                        "value": "proof failure"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_378191bf8a12e9d7314877f6fa10917c7688a2ea0e5692dcfbbbd15a171122d5",
                          "typeString": "literal_string \"proof failure\""
                        }
                      ],
                      "id": 2856,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6271:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2870,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6271:118:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2871,
                  "nodeType": "ExpressionStatement",
                  "src": "6271:118:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2878,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 2873,
                            "name": "hasClaimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2499,
                            "src": "6408:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 2876,
                          "indexExpression": {
                            "expression": {
                              "id": 2874,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "6419:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2875,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6419:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6408:22:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "66616c7365",
                          "id": 2877,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6434:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "6408:31:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920636c61696d6564",
                        "id": 2879,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6441:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35ab08c51d3c5f6dce9e2f229c8cce621755785a49ae5048c5948e3805dfc55b",
                          "typeString": "literal_string \"already claimed\""
                        },
                        "value": "already claimed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_35ab08c51d3c5f6dce9e2f229c8cce621755785a49ae5048c5948e3805dfc55b",
                          "typeString": "literal_string \"already claimed\""
                        }
                      ],
                      "id": 2872,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6400:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2880,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6400:59:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2881,
                  "nodeType": "ExpressionStatement",
                  "src": "6400:59:1"
                },
                {
                  "expression": {
                    "id": 2887,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 2882,
                        "name": "hasClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2499,
                        "src": "6470:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 2885,
                      "indexExpression": {
                        "expression": {
                          "id": 2883,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6481:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2884,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6481:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6470:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 2886,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6493:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "6470:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2888,
                  "nodeType": "ExpressionStatement",
                  "src": "6470:27:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2893,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6551:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2894,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6551:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "31",
                            "id": 2896,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6574:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            }
                          ],
                          "id": 2895,
                          "name": "amountOut",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2850,
                          "src": "6564:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) view returns (uint256)"
                          }
                        },
                        "id": 2897,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6564:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2890,
                            "name": "ForgeTokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2471,
                            "src": "6523:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2889,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2422,
                          "src": "6516:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 2891,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6516:25:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2422",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 2892,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2376,
                      "src": "6516:34:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 2898,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6516:61:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2899,
                  "nodeType": "ExpressionStatement",
                  "src": "6516:61:1"
                }
              ]
            },
            "functionSelector": "f14ddabf",
            "id": 2901,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintWithProofTop",
            "nameLocation": "6192:16:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2854,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2853,
                  "mutability": "mutable",
                  "name": "merkleProof",
                  "nameLocation": "6226:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2901,
                  "src": "6209:28:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2851,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "6209:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 2852,
                    "nodeType": "ArrayTypeName",
                    "src": "6209:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6208:31:1"
            },
            "returnParameters": {
              "id": 2855,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6247:0:1"
            },
            "scope": 3101,
            "src": "6183:401:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2951,
              "nodeType": "Block",
              "src": "6658:325:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2910,
                            "name": "merkleProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2904,
                            "src": "6698:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          },
                          {
                            "id": 2911,
                            "name": "_merkleRootMid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2486,
                            "src": "6711:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2915,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "6755:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2916,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "6755:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 2913,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "6738:3:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 2914,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodePacked",
                                  "nodeType": "MemberAccess",
                                  "src": "6738:16:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 2917,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6738:28:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 2912,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "6727:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 2918,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6727:40:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 2908,
                            "name": "MerkleProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2355,
                            "src": "6679:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_MerkleProof_$2355_$",
                              "typeString": "type(library MerkleProof)"
                            }
                          },
                          "id": 2909,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verify",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2354,
                          "src": "6679:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                            "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                          }
                        },
                        "id": 2919,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6679:90:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "70726f6f66206661696c757265",
                        "id": 2920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6772:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_378191bf8a12e9d7314877f6fa10917c7688a2ea0e5692dcfbbbd15a171122d5",
                          "typeString": "literal_string \"proof failure\""
                        },
                        "value": "proof failure"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_378191bf8a12e9d7314877f6fa10917c7688a2ea0e5692dcfbbbd15a171122d5",
                          "typeString": "literal_string \"proof failure\""
                        }
                      ],
                      "id": 2907,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6670:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2921,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6670:118:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2922,
                  "nodeType": "ExpressionStatement",
                  "src": "6670:118:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2929,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 2924,
                            "name": "hasClaimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2499,
                            "src": "6807:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 2927,
                          "indexExpression": {
                            "expression": {
                              "id": 2925,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "6818:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2926,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6818:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6807:22:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "66616c7365",
                          "id": 2928,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6833:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "6807:31:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920636c61696d6564",
                        "id": 2930,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6840:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35ab08c51d3c5f6dce9e2f229c8cce621755785a49ae5048c5948e3805dfc55b",
                          "typeString": "literal_string \"already claimed\""
                        },
                        "value": "already claimed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_35ab08c51d3c5f6dce9e2f229c8cce621755785a49ae5048c5948e3805dfc55b",
                          "typeString": "literal_string \"already claimed\""
                        }
                      ],
                      "id": 2923,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6799:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6799:59:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2932,
                  "nodeType": "ExpressionStatement",
                  "src": "6799:59:1"
                },
                {
                  "expression": {
                    "id": 2938,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 2933,
                        "name": "hasClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2499,
                        "src": "6869:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 2936,
                      "indexExpression": {
                        "expression": {
                          "id": 2934,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6880:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2935,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6880:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6869:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 2937,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6892:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "6869:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2939,
                  "nodeType": "ExpressionStatement",
                  "src": "6869:27:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 2944,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6950:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2945,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6950:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 2947,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6973:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "id": 2946,
                          "name": "amountOut",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2850,
                          "src": "6963:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) view returns (uint256)"
                          }
                        },
                        "id": 2948,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6963:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2941,
                            "name": "ForgeTokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2471,
                            "src": "6922:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2940,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2422,
                          "src": "6915:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 2942,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6915:25:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2422",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 2943,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2376,
                      "src": "6915:34:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 2949,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6915:61:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2950,
                  "nodeType": "ExpressionStatement",
                  "src": "6915:61:1"
                }
              ]
            },
            "functionSelector": "75c53c04",
            "id": 2952,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintWithProofMid",
            "nameLocation": "6603:16:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2905,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2904,
                  "mutability": "mutable",
                  "name": "merkleProof",
                  "nameLocation": "6637:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2952,
                  "src": "6620:28:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2902,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "6620:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 2903,
                    "nodeType": "ArrayTypeName",
                    "src": "6620:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6619:31:1"
            },
            "returnParameters": {
              "id": 2906,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6658:0:1"
            },
            "scope": 3101,
            "src": "6594:389:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3019,
              "nodeType": "Block",
              "src": "7118:435:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2964,
                            "name": "merkleProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2955,
                            "src": "7146:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          },
                          {
                            "expression": {
                              "id": 2965,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "7159:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2966,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "7159:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 2967,
                            "name": "claim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2957,
                            "src": "7171:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2963,
                          "name": "verify",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3092,
                          "src": "7139:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (bytes32[] memory,address,uint256) view returns (bool)"
                          }
                        },
                        "id": 2968,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7139:38:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "70726f6f66206661696c757265",
                        "id": 2969,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7181:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_378191bf8a12e9d7314877f6fa10917c7688a2ea0e5692dcfbbbd15a171122d5",
                          "typeString": "literal_string \"proof failure\""
                        },
                        "value": "proof failure"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_378191bf8a12e9d7314877f6fa10917c7688a2ea0e5692dcfbbbd15a171122d5",
                          "typeString": "literal_string \"proof failure\""
                        }
                      ],
                      "id": 2962,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7130:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2970,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7130:67:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2971,
                  "nodeType": "ExpressionStatement",
                  "src": "7130:67:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2978,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 2973,
                            "name": "hasClaimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2499,
                            "src": "7216:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 2976,
                          "indexExpression": {
                            "expression": {
                              "id": 2974,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "7227:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2975,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "7227:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7216:22:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "66616c7365",
                          "id": 2977,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7242:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "7216:31:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920636c61696d6564",
                        "id": 2979,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7249:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35ab08c51d3c5f6dce9e2f229c8cce621755785a49ae5048c5948e3805dfc55b",
                          "typeString": "literal_string \"already claimed\""
                        },
                        "value": "already claimed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_35ab08c51d3c5f6dce9e2f229c8cce621755785a49ae5048c5948e3805dfc55b",
                          "typeString": "literal_string \"already claimed\""
                        }
                      ],
                      "id": 2972,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7208:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7208:59:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2981,
                  "nodeType": "ExpressionStatement",
                  "src": "7208:59:1"
                },
                {
                  "expression": {
                    "id": 2987,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 2982,
                        "name": "hasClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2499,
                        "src": "7278:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 2985,
                      "indexExpression": {
                        "expression": {
                          "id": 2983,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "7289:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2984,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "7289:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7278:22:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 2986,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7301:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "7278:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2988,
                  "nodeType": "ExpressionStatement",
                  "src": "7278:27:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 2994,
                            "name": "claim",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2957,
                            "src": "7381:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2993,
                          "name": "amountOut",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2850,
                          "src": "7371:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) view returns (uint256)"
                          }
                        },
                        "id": 2995,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7371:16:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 2996,
                        "name": "maxLoss",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2959,
                        "src": "7389:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2990,
                            "name": "ForgeGuessContractAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2477,
                            "src": "7335:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2989,
                          "name": "ForgeGuess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2459,
                          "src": "7324:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ForgeGuess_$2459_$",
                            "typeString": "type(contract ForgeGuess)"
                          }
                        },
                        "id": 2991,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7324:37:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ForgeGuess_$2459",
                          "typeString": "contract ForgeGuess"
                        }
                      },
                      "id": 2992,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2450,
                      "src": "7324:46:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256) external"
                      }
                    },
                    "id": 2997,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7324:73:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2998,
                  "nodeType": "ExpressionStatement",
                  "src": "7324:73:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 3004,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "7450:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 3005,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "7450:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 3012,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "7506:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                      "typeString": "contract ForgeAirdrop"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_ForgeAirdrop_$3101",
                                      "typeString": "contract ForgeAirdrop"
                                    }
                                  ],
                                  "id": 3011,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "7498:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3010,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "7498:7:1",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3013,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7498:13:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 3007,
                                    "name": "ForgeTokenAddress",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2471,
                                    "src": "7469:17:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 3006,
                                  "name": "IERC20",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2422,
                                  "src": "7462:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                                    "typeString": "type(contract IERC20)"
                                  }
                                },
                                "id": 3008,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7462:25:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$2422",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 3009,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2367,
                              "src": "7462:35:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 3014,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7462:50:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 3001,
                                "name": "ForgeTokenAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2471,
                                "src": "7422:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 3000,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2422,
                              "src": "7415:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$2422_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 3002,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7415:25:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$2422",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 3003,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2376,
                          "src": "7415:34:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 3015,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7415:98:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "636f6e7472616374206d6179206265206f7574206f662066756e6473",
                        "id": 3016,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7515:30:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0c0645f299dcc01be5825c8d58ff739e41f41c9dfd5caa64f7b662919572172c",
                          "typeString": "literal_string \"contract may be out of funds\""
                        },
                        "value": "contract may be out of funds"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0c0645f299dcc01be5825c8d58ff739e41f41c9dfd5caa64f7b662919572172c",
                          "typeString": "literal_string \"contract may be out of funds\""
                        }
                      ],
                      "id": 2999,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7407:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7407:139:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3018,
                  "nodeType": "ExpressionStatement",
                  "src": "7407:139:1"
                }
              ]
            },
            "functionSelector": "f5f21aca",
            "id": 3020,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintWithProofALL",
            "nameLocation": "7037:16:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2960,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2955,
                  "mutability": "mutable",
                  "name": "merkleProof",
                  "nameLocation": "7071:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3020,
                  "src": "7054:28:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 2953,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "7054:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 2954,
                    "nodeType": "ArrayTypeName",
                    "src": "7054:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2957,
                  "mutability": "mutable",
                  "name": "claim",
                  "nameLocation": "7089:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3020,
                  "src": "7084:10:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2956,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7084:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2959,
                  "mutability": "mutable",
                  "name": "maxLoss",
                  "nameLocation": "7101:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3020,
                  "src": "7096:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2958,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7096:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7053:57:1"
            },
            "returnParameters": {
              "id": 2961,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7118:0:1"
            },
            "scope": 3101,
            "src": "7028:525:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3091,
              "nodeType": "Block",
              "src": "7682:432:1",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 3034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 3032,
                      "name": "claim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3027,
                      "src": "7691:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 3033,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7700:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "7691:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 3052,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 3050,
                        "name": "claim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3027,
                        "src": "7828:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 3051,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7836:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "7828:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3070,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 3068,
                          "name": "claim",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3027,
                          "src": "7961:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "32",
                          "id": 3069,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7970:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "src": "7961:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 3086,
                      "nodeType": "IfStatement",
                      "src": "7958:132:1",
                      "trueBody": {
                        "id": 3085,
                        "nodeType": "Block",
                        "src": "7972:118:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 3073,
                                  "name": "merkleProof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3023,
                                  "src": "8013:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                    "typeString": "bytes32[] memory"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "id": 3074,
                                    "name": "_merkleRootAll",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2480,
                                    "src": "8026:14:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                                      "typeString": "bytes32[] storage ref"
                                    }
                                  },
                                  "id": 3076,
                                  "indexExpression": {
                                    "hexValue": "32",
                                    "id": 3075,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "8041:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "8026:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 3080,
                                          "name": "claimer",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 3025,
                                          "src": "8073:7:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "expression": {
                                          "id": 3078,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "8056:3:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 3079,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "encodePacked",
                                        "nodeType": "MemberAccess",
                                        "src": "8056:16:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                          "typeString": "function () pure returns (bytes memory)"
                                        }
                                      },
                                      "id": 3081,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8056:25:1",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 3077,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -8,
                                    "src": "8045:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 3082,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8045:37:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                    "typeString": "bytes32[] memory"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                ],
                                "expression": {
                                  "id": 3071,
                                  "name": "MerkleProof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2355,
                                  "src": "7994:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_MerkleProof_$2355_$",
                                    "typeString": "type(library MerkleProof)"
                                  }
                                },
                                "id": 3072,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "verify",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2354,
                                "src": "7994:18:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                                  "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                                }
                              },
                              "id": 3083,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7994:89:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "functionReturnParameters": 3031,
                            "id": 3084,
                            "nodeType": "Return",
                            "src": "7987:96:1"
                          }
                        ]
                      }
                    },
                    "id": 3087,
                    "nodeType": "IfStatement",
                    "src": "7825:265:1",
                    "trueBody": {
                      "id": 3067,
                      "nodeType": "Block",
                      "src": "7839:114:1",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "id": 3055,
                                "name": "merkleProof",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3023,
                                "src": "7876:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                  "typeString": "bytes32[] memory"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 3056,
                                  "name": "_merkleRootAll",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2480,
                                  "src": "7889:14:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                                    "typeString": "bytes32[] storage ref"
                                  }
                                },
                                "id": 3058,
                                "indexExpression": {
                                  "hexValue": "31",
                                  "id": 3057,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7904:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7889:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 3062,
                                        "name": "claimer",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3025,
                                        "src": "7936:7:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "id": 3060,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "7919:3:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 3061,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "encodePacked",
                                      "nodeType": "MemberAccess",
                                      "src": "7919:16:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                        "typeString": "function () pure returns (bytes memory)"
                                      }
                                    },
                                    "id": 3063,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7919:25:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "id": 3059,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -8,
                                  "src": "7908:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 3064,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "7908:37:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                  "typeString": "bytes32[] memory"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "id": 3053,
                                "name": "MerkleProof",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2355,
                                "src": "7857:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_MerkleProof_$2355_$",
                                  "typeString": "type(library MerkleProof)"
                                }
                              },
                              "id": 3054,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "verify",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2354,
                              "src": "7857:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                                "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                              }
                            },
                            "id": 3065,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7857:89:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "functionReturnParameters": 3031,
                          "id": 3066,
                          "nodeType": "Return",
                          "src": "7850:96:1"
                        }
                      ]
                    }
                  },
                  "id": 3088,
                  "nodeType": "IfStatement",
                  "src": "7688:402:1",
                  "trueBody": {
                    "id": 3049,
                    "nodeType": "Block",
                    "src": "7702:118:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3037,
                              "name": "merkleProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3023,
                              "src": "7743:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 3038,
                                "name": "_merkleRootAll",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2480,
                                "src": "7756:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                                  "typeString": "bytes32[] storage ref"
                                }
                              },
                              "id": 3040,
                              "indexExpression": {
                                "hexValue": "30",
                                "id": 3039,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7771:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7756:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 3044,
                                      "name": "claimer",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3025,
                                      "src": "7803:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 3042,
                                      "name": "abi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -1,
                                      "src": "7786:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_abi",
                                        "typeString": "abi"
                                      }
                                    },
                                    "id": 3043,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "encodePacked",
                                    "nodeType": "MemberAccess",
                                    "src": "7786:16:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function () pure returns (bytes memory)"
                                    }
                                  },
                                  "id": 3045,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7786:25:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 3041,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -8,
                                "src": "7775:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3046,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7775:37:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "id": 3035,
                              "name": "MerkleProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2355,
                              "src": "7724:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_MerkleProof_$2355_$",
                                "typeString": "type(library MerkleProof)"
                              }
                            },
                            "id": 3036,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "verify",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2354,
                            "src": "7724:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                              "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                            }
                          },
                          "id": 3047,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7724:89:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 3031,
                        "id": 3048,
                        "nodeType": "Return",
                        "src": "7717:96:1"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "hexValue": "66616c7365",
                    "id": 3089,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8102:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "functionReturnParameters": 3031,
                  "id": 3090,
                  "nodeType": "Return",
                  "src": "8095:12:1"
                }
              ]
            },
            "functionSelector": "04b38ce0",
            "id": 3092,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verify",
            "nameLocation": "7587:6:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3028,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3023,
                  "mutability": "mutable",
                  "name": "merkleProof",
                  "nameLocation": "7611:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3092,
                  "src": "7594:28:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 3021,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "7594:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 3022,
                    "nodeType": "ArrayTypeName",
                    "src": "7594:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3025,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "7632:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3092,
                  "src": "7624:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3024,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7624:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3027,
                  "mutability": "mutable",
                  "name": "claim",
                  "nameLocation": "7646:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3092,
                  "src": "7641:10:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3026,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7641:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7593:59:1"
            },
            "returnParameters": {
              "id": 3031,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3030,
                  "mutability": "mutable",
                  "name": "ver",
                  "nameLocation": "7678:3:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3092,
                  "src": "7673:8:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3029,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7673:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7672:10:1"
            },
            "scope": 3101,
            "src": "7578:536:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3099,
              "nodeType": "Block",
              "src": "8179:26:1",
              "statements": [
                {
                  "expression": {
                    "hexValue": "33",
                    "id": 3097,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8197:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_3_by_1",
                      "typeString": "int_const 3"
                    },
                    "value": "3"
                  },
                  "functionReturnParameters": 3096,
                  "id": 3098,
                  "nodeType": "Return",
                  "src": "8190:8:1"
                }
              ]
            },
            "functionSelector": "0e2f5fb3",
            "id": 3100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getThree",
            "nameLocation": "8138:8:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3093,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8146:2:1"
            },
            "returnParameters": {
              "id": 3096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3095,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3100,
                  "src": "8170:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3094,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8170:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8169:9:1"
            },
            "scope": 3101,
            "src": "8129:76:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 3102,
        "src": "2647:5566:1",
        "usedErrors": []
      }
    ],
    "src": "372:7842:1"
  },
  "bytecode": "6080604052600080546001600160a01b031990811673f44fb43066f7ecc91058e3a614fb8a15a273527617825560018054821673bf4493415fd1e79dcda8cd0cad7e5ed65dce70741790556002805490911673de256ec57e864ec847c030e14c5b97ab233a521e1790557fdd82af2bc4b721bfd5be08111d4f422fd07d1578a0072d6701f26ea4fff338456004557f15893a9b8d3638149dd9461fde79f589e565a2fc76a861ec1aebb837361515666005557f316b4323ca91ba63304a4e0ada24b09f8689ac1f80aca8e9d5c4213fc9ba784860065560085562278d00600a5542600b553480156100ef57600080fd5b5060045460038054600181810183557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91820193909355600554825480850184558201556006548254808501909355910155600780548083018255600082905264e8d4a510007fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68891820155815480840183556305f5e100908201558154928301909155620186a091015561142f806101a86000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806373b2e80e116100a25780638da58897116100715780638da588971461023a578063b6b55f2514610243578063d49b921614610256578063f14ddabf14610269578063f5f21aca1461027c57600080fd5b806373b2e80e146101e757806375c53c041461020a57806375fe9fba1461021f5780638912ed0b1461023257600080fd5b80634ad6d3cd116100e95780634ad6d3cd1461017a57806354fac9191461018d5780635b9ea9e51461019657806360138460146101c1578063647e03b7146101d457600080fd5b806304b38ce01461011b5780630e2f5fb314610143578063290812c2146101545780632d8590c714610167575b600080fd5b61012e6101293660046111bb565b61028f565b60405190151581526020015b60405180910390f35b60035b60405190815260200161013a565b610146610162366004611212565b61034d565b610146610175366004611212565b61036e565b61012e610188366004611212565b6103f0565b610146600a5481565b6000546101a9906001600160a01b031681565b6040516001600160a01b03909116815260200161013a565b6002546101a9906001600160a01b031681565b6001546101a9906001600160a01b031681565b61012e6101f536600461122b565b60096020526000908152604090205460ff1681565b61021d610218366004611246565b610692565b005b61014661022d366004611212565b6107b0565b61014661085a565b610146600b5481565b61012e610251366004611212565b6109ef565b610146610264366004611212565b610d6a565b61021d610277366004611246565b610d7a565b61021d61028a366004611283565b610e25565b600081600003610302576102fb8460036000815481106102b1576102b16112d1565b9060005260206000200154856040516020016102e0919060609190911b6001600160601b031916815260140190565b6040516020818303038152906040528051906020012061103f565b9050610346565b81600103610322576102fb8460036001815481106102b1576102b16112d1565b81600203610342576102fb8460036002815481106102b1576102b16112d1565b5060005b9392505050565b6007818154811061035d57600080fd5b600091825260209091200154905081565b6002546000906001600160a01b031663afcf89aa61038b846107b0565b6040518263ffffffff1660e01b81526004016103a991815260200190565b602060405180830381865afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea91906112e7565b92915050565b6002546040516370a0823160e01b81523060048201526000916001600160a01b03169063afcf89aa9082906370a0823190602401602060405180830381865afa158015610441573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046591906112e7565b6040518263ffffffff1660e01b815260040161048391815260200190565b602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c491906112e7565b8211156104da576104d4826109ef565b5061068a565b6001546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190611300565b6105965760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b60448201526064015b60405180910390fd5b60015460025460405163095ea7b360e01b81526001600160a01b0391821660048201527502ac3a4edbbfb8014e3ba83411e915e7ffffffffffff602482015291169063095ea7b3906044016020604051808303816000875af1158015610600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106249190611300565b506002546040516305dc812160e31b8152306004820152602481018490526001600160a01b0390911690632ee4090890604401600060405180830381600087803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b505050505b506001919050565b6005546040516001600160601b03193360601b1660208201526106b99183916034016102e0565b6106d55760405162461bcd60e51b815260040161058d90611322565b3360009081526009602052604090205460ff16156107055760405162461bcd60e51b815260040161058d90611349565b336000818152600960205260409020805460ff19166001908117909155546001600160a01b03169063a9059cbb9061073d60026107b0565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190611300565b5050565b600080600b54426107c19190611388565b9050600a548111156107d25750600a545b8260000361081157600a548160076000815481106107f2576107f26112d1565b9060005260206000200154610807919061139f565b61034691906113be565b8260010361083157600a548160076001815481106107f2576107f26112d1565b8260020361085157600a548160076002815481106107f2576107f26112d1565b50600092915050565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d491906112e7565b600260009054906101000a90046001600160a01b03166001600160a01b031663f03d66726040518163ffffffff1660e01b8152600401602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906112e7565b6001546002546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb91906112e7565b6109c59190611388565b6109d1906103cf61139f565b6109db91906113be565b6103ea9069021e19e0c9bab24000006113be565b6002546040516370a0823160e01b81523060048201526000916001600160a01b03169063afcf89aa9082906370a0823190602401602060405180830381865afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6491906112e7565b6040518263ffffffff1660e01b8152600401610a8291815260200190565b602060405180830381865afa158015610a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac391906112e7565b8211610b265760405162461bcd60e51b815260206004820152602c60248201527f6d7573742062652067726561746572207468616e2070726576696f757320746f60448201526b1d185b081d1bc81c995cd95d60a21b606482015260840161058d565b6001546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba19190611300565b610bdd5760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8819985a5b609a1b604482015260640161058d565b42600b5560015460025460405163095ea7b360e01b81526001600160a01b0391821660048201527502ac3a4edbbfb8014e3ba83411e915e7ffffffffffff602482015291169063095ea7b3906044016020604051808303816000875af1158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f9190611300565b506002546040516305dc812160e31b8152306004820152602481018490526001600160a01b0390911690632ee4090890604401600060405180830381600087803b158015610cbc57600080fd5b505af1158015610cd0573d6000803e3d6000fd5b505050506000610cde61085a565b9050610ceb81600a61139f565b6007600081548110610cff57610cff6112d1565b600091825260209091200155610d1681600361139f565b6007600181548110610d2a57610d2a6112d1565b600091825260209091200155610d4181600161139f565b6007600281548110610d5557610d556112d1565b60009182526020909120015550600192915050565b6003818154811061035d57600080fd5b6004546040516001600160601b03193360601b166020820152610da19183916034016102e0565b610dbd5760405162461bcd60e51b815260040161058d90611322565b3360009081526009602052604090205460ff1615610ded5760405162461bcd60e51b815260040161058d90611349565b336000818152600960205260409020805460ff1916600190811790915580546001600160a01b03169163a9059cbb9161073d906107b0565b610e3083338461028f565b610e4c5760405162461bcd60e51b815260040161058d90611322565b3360009081526009602052604090205460ff1615610e7c5760405162461bcd60e51b815260040161058d90611349565b336000908152600960205260409020805460ff191660011790556002546001600160a01b031663441a3e70610eb0846107b0565b836040518363ffffffff1660e01b8152600401610ed7929190918252602082015260400190565b600060405180830381600087803b158015610ef157600080fd5b505af1158015610f05573d6000803e3d6000fd5b50506001546040516370a0823160e01b81523060048201526001600160a01b03909116925063a9059cbb9150339083906370a0823190602401602060405180830381865afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f91906112e7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee9190611300565b61103a5760405162461bcd60e51b815260206004820152601c60248201527f636f6e7472616374206d6179206265206f7574206f662066756e647300000000604482015260640161058d565b505050565b600081815b85518110156110e3576000868281518110611061576110616112d1565b602002602001015190508083116110a35760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506110d0565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806110db816113e0565b915050611044565b509092149392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261111557600080fd5b8135602067ffffffffffffffff80831115611132576111326110ee565b8260051b604051601f19603f83011681018181108482111715611157576111576110ee565b60405293845285810183019383810192508785111561117557600080fd5b83870191505b848210156111945781358352918301919083019061117b565b979650505050505050565b80356001600160a01b03811681146111b657600080fd5b919050565b6000806000606084860312156111d057600080fd5b833567ffffffffffffffff8111156111e757600080fd5b6111f386828701611104565b9350506112026020850161119f565b9150604084013590509250925092565b60006020828403121561122457600080fd5b5035919050565b60006020828403121561123d57600080fd5b6103468261119f565b60006020828403121561125857600080fd5b813567ffffffffffffffff81111561126f57600080fd5b61127b84828501611104565b949350505050565b60008060006060848603121561129857600080fd5b833567ffffffffffffffff8111156112af57600080fd5b6112bb86828701611104565b9660208601359650604090950135949350505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156112f957600080fd5b5051919050565b60006020828403121561131257600080fd5b8151801515811461034657600080fd5b6020808252600d908201526c70726f6f66206661696c75726560981b604082015260600190565b6020808252600f908201526e185b1c9958591e4818db185a5b5959608a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561139a5761139a611372565b500390565b60008160001904831182151516156113b9576113b9611372565b500290565b6000826113db57634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016113f2576113f2611372565b506001019056fea2646970667358221220a2b7bacdead7125e500bd4bec61d04903177f1069e095060a409b627c4c8a39564736f6c634300080e0033",
  "bytecodeSha1": "0f887fbe0148770cb830c28445eb568356deb6c7",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.14+commit.80d49f37"
  },
  "contractName": "ForgeAirdrop",
  "coverageMap": {
    "branches": {
      "1": {
        "ForgeAirdrop.Donation": {
          "45": [
            4672,
            4793,
            false
          ],
          "46": [
            4860,
            4930,
            true
          ]
        },
        "ForgeAirdrop.amountOut": {
          "49": [
            5852,
            5866,
            false
          ],
          "50": [
            5918,
            5929,
            false
          ],
          "51": [
            5999,
            6009,
            false
          ],
          "52": [
            6079,
            6089,
            false
          ]
        },
        "ForgeAirdrop.deposit": {
          "53": [
            3936,
            4057,
            true
          ],
          "54": [
            4124,
            4194,
            true
          ]
        },
        "ForgeAirdrop.mintWithProofALL": {
          "57": [
            7139,
            7177,
            true
          ],
          "58": [
            7216,
            7247,
            true
          ],
          "59": [
            7415,
            7513,
            true
          ]
        },
        "ForgeAirdrop.mintWithProofMid": {
          "47": [
            6679,
            6769,
            true
          ],
          "48": [
            6807,
            6838,
            true
          ]
        },
        "ForgeAirdrop.mintWithProofTop": {
          "55": [
            6280,
            6370,
            true
          ],
          "56": [
            6408,
            6439,
            true
          ]
        },
        "ForgeAirdrop.verify": {
          "42": [
            7691,
            7701,
            false
          ],
          "43": [
            7828,
            7837,
            false
          ],
          "44": [
            7961,
            7971,
            false
          ]
        },
        "MerkleProof.verify": {
          "60": [
            1045,
            1073,
            false
          ]
        }
      }
    },
    "statements": {
      "1": {
        "ForgeAirdrop.Donation": {
          "6": [
            4809,
            4821
          ],
          "7": [
            4852,
            4948
          ],
          "8": [
            4962,
            5075
          ],
          "9": [
            5089,
            5155
          ],
          "10": [
            5177,
            5188
          ]
        },
        "ForgeAirdrop.amountOut": {
          "15": [
            5881,
            5895
          ],
          "16": [
            5943,
            5980
          ],
          "17": [
            6023,
            6060
          ],
          "18": [
            6103,
            6140
          ],
          "19": [
            6160,
            6168
          ]
        },
        "ForgeAirdrop.amtOutForChoiceInForge": {
          "5": [
            5630,
            5707
          ]
        },
        "ForgeAirdrop.deposit": {
          "20": [
            3928,
            4106
          ],
          "21": [
            4116,
            4212
          ],
          "22": [
            4222,
            4249
          ],
          "23": [
            4259,
            4372
          ],
          "24": [
            4382,
            4448
          ],
          "25": [
            4486,
            4506
          ],
          "26": [
            4516,
            4535
          ],
          "27": [
            4545,
            4564
          ],
          "28": [
            4575,
            4586
          ]
        },
        "ForgeAirdrop.getThree": {
          "0": [
            8190,
            8198
          ]
        },
        "ForgeAirdrop.mintWithProofALL": {
          "33": [
            7130,
            7197
          ],
          "34": [
            7208,
            7267
          ],
          "35": [
            7278,
            7305
          ],
          "36": [
            7324,
            7397
          ],
          "37": [
            7407,
            7546
          ]
        },
        "ForgeAirdrop.mintWithProofMid": {
          "11": [
            6670,
            6788
          ],
          "12": [
            6799,
            6858
          ],
          "13": [
            6869,
            6896
          ],
          "14": [
            6915,
            6976
          ]
        },
        "ForgeAirdrop.mintWithProofTop": {
          "29": [
            6271,
            6389
          ],
          "30": [
            6400,
            6459
          ],
          "31": [
            6470,
            6497
          ],
          "32": [
            6516,
            6577
          ]
        },
        "ForgeAirdrop.verify": {
          "1": [
            7717,
            7813
          ],
          "2": [
            7850,
            7946
          ],
          "3": [
            7987,
            8083
          ],
          "4": [
            8095,
            8107
          ]
        },
        "MerkleProof.verify": {
          "38": [
            1171,
            1241
          ],
          "39": [
            1358,
            1428
          ],
          "40": [
            965,
            968
          ],
          "41": [
            1538,
            1565
          ]
        }
      }
    }
  },
  "dependencies": [
    "ForgeGuess",
    "IERC20",
    "MerkleProof"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "2647:5566:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7578:536;;;;;;:::i;:::-;;:::i;:::-;;;1891:14:2;;1884:22;1866:41;;1854:2;1839:18;7578:536:1;;;;;;;;8129:76;8197:1;8129:76;;;2064:25:2;;;2052:2;2037:18;8129:76:1;1918:177:2;3371:26:1;;;;;;:::i;:::-;;:::i;5541:173::-;;;;;;:::i;:::-;;:::i;4600:595::-;;;;;;:::i;:::-;;:::i;3489:39::-;;;;;;2685:90;;;;;-1:-1:-1;;;;;2685:90:1;;;;;;-1:-1:-1;;;;;2449:32:2;;;2431:51;;2419:2;2404:18;2685:90:1;2285:203:2;2873:94:1;;;;;-1:-1:-1;;;;;2873:94:1;;;2781:86;;;;;-1:-1:-1;;;;;2781:86:1;;;3441:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;6594:389;;;;;;:::i;:::-;;:::i;:::-;;5720:454;;;;;;:::i;:::-;;:::i;5202:333::-;;;:::i;3535:42::-;;;;;;3860:733;;;;;;:::i;:::-;;:::i;2973:32::-;;;;;;:::i;:::-;;:::i;6183:401::-;;;;;;:::i;:::-;;:::i;7028:525::-;;;;;;:::i;:::-;;:::i;7578:536::-;7673:8;7691:5;7700:1;7691:10;7688:402;;7724:89;7743:11;7756:14;7771:1;7756:17;;;;;;;;:::i;:::-;;;;;;;;;7803:7;7786:25;;;;;;;3989:2:2;3985:15;;;;-1:-1:-1;;;;;;3981:53:2;3969:66;;4060:2;4051:12;;3840:229;7786:25:1;;;;;;;;;;;;;7775:37;;;;;;7724:18;:89::i;:::-;7717:96;;;;7688:402;7828:5;7836:1;7828:9;7825:265;;7857:89;7876:11;7889:14;7904:1;7889:17;;;;;;;;:::i;7825:265::-;7961:5;7970:1;7961:10;7958:132;;7994:89;8013:11;8026:14;8041:1;8026:17;;;;;;;;:::i;7958:132::-;-1:-1:-1;8102:5:1;7578:536;;;;;;:::o;3371:26::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3371:26:1;:::o;5541:173::-;5648:25;;5607:11;;-1:-1:-1;;;;;5648:25:1;5637:51;5689:17;5699:6;5689:9;:17::i;:::-;5637:70;;;;;;;;;;;;;2064:25:2;;2052:2;2037:18;;1918:177;5637:70:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5630:77;5541:173;-1:-1:-1;;5541:173:1:o;4600:595::-;4689:25;;4730:62;;-1:-1:-1;;;4730:62:1;;4786:4;4730:62;;;2431:51:2;4644:12:1;;-1:-1:-1;;;;;4689:25:1;;4678:51;;4689:25;;4730:47;;2404:18:2;;4730:62:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4678:115;;;;;;;;;;;;;2064:25:2;;2052:2;2037:18;;1918:177;4678:115:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4672:3;:121;4669:498;;;4809:12;4817:3;4809:7;:12::i;:::-;;4669:498;;;4867:17;;4860:70;;-1:-1:-1;;;4860:70:1;;4899:10;4860:70;;;4503:34:2;4919:4:1;4553:18:2;;;4546:43;4605:18;;;4598:34;;;-1:-1:-1;;;;;4867:17:1;;;;4860:38;;4438:18:2;;4860:70:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4852:96;;;;-1:-1:-1;;;4852:96:1;;5127:2:2;4852:96:1;;;5109:21:2;5166:2;5146:18;;;5139:30;-1:-1:-1;;;5185:18:2;;;5178:43;5238:18;;4852:96:1;;;;;;;;;4969:17;;4996:25;;4962:113;;-1:-1:-1;;;4962:113:1;;-1:-1:-1;;;;;4996:25:1;;;4962:113;;;5499:51:2;5023::1;5566:18:2;;;5559:34;4969:17:1;;;4962:33;;5472:18:2;;4962:113:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5100:25:1;;5089:66;;-1:-1:-1;;;5089:66:1;;5144:4;5089:66;;;5499:51:2;5566:18;;;5559:34;;;-1:-1:-1;;;;;5100:25:1;;;;5089:46;;5472:18:2;;5089:66:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4669:498;-1:-1:-1;5184:4:1;;4600:595;-1:-1:-1;4600:595:1:o;6594:389::-;6711:14;;6738:28;;-1:-1:-1;;;;;;6755:10:1;3989:2:2;3985:15;3981:53;6738:28:1;;;3969:66:2;6679:90:1;;6698:11;;4051:12:2;;6738:28:1;3840:229:2;6679:90:1;6670:118;;;;-1:-1:-1;;;6670:118:1;;;;;;;:::i;:::-;6818:10;6807:22;;;;:10;:22;;;;;;;;:31;6799:59;;;;-1:-1:-1;;;6799:59:1;;;;;;;:::i;:::-;6880:10;6869:22;;;;:10;:22;;;;;:27;;-1:-1:-1;;6869:27:1;6892:4;6869:27;;;;;;6922:17;-1:-1:-1;;;;;6922:17:1;;6915:34;;6963:12;6973:1;6963:9;:12::i;:::-;6915:61;;-1:-1:-1;;;;;;6915:61:1;;;;;;;-1:-1:-1;;;;;5517:32:2;;;6915:61:1;;;5499:51:2;5566:18;;;5559:34;5472:18;;6915:61:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6594:389;:::o;5720:454::-;5773:11;5795:14;5830:9;;5812:15;:27;;;;:::i;:::-;5795:44;;5861:5;;5852:6;:14;5849:57;;;-1:-1:-1;5890:5:1;;5849:57;5918:6;5928:1;5918:11;5915:236;;5975:5;;5965:6;5951:8;5960:1;5951:11;;;;;;;;:::i;:::-;;;;;;;;;:20;;;;:::i;:::-;5950:30;;;;:::i;5915:236::-;5999:6;6008:1;5999:10;5996:155;;6055:5;;6045:6;6031:8;6040:1;6031:11;;;;;;;;:::i;5996:155::-;6079:6;6088:1;6079:10;6076:75;;6135:5;;6125:6;6111:8;6120:1;6111:11;;;;;;;;:::i;6076:75::-;-1:-1:-1;6167:1:1;;5720:454;-1:-1:-1;;5720:454:1:o;5202:333::-;5242:12;5274;5463:25;;;;;;;;;-1:-1:-1;;;;;5463:25:1;-1:-1:-1;;;;;5452:49:1;;:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5408:25;;;;;;;;;-1:-1:-1;;;;;5408:25:1;-1:-1:-1;;;;;5397:48:1;;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5338:17;;5368:25;;5323:71;;-1:-1:-1;;;5323:71:1;;-1:-1:-1;;;;;5368:25:1;;;5323:71;;;2431:51:2;5338:17:1;;;5323:44;;2404:18:2;;5323:71:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:124;;;;:::i;:::-;5316:133;;:3;:133;:::i;:::-;:187;;;;:::i;:::-;5289:216;;5290:20;5289:216;:::i;3860:733::-;3953:25;;3994:62;;-1:-1:-1;;;3994:62:1;;4050:4;3994:62;;;2431:51:2;3903:12:1;;-1:-1:-1;;;;;3953:25:1;;3942:51;;3953:25;;3994:47;;2404:18:2;;3994:62:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3942:115;;;;;;;;;;;;;2064:25:2;;2052:2;2037:18;;1918:177;3942:115:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3936:3;:121;3928:178;;;;-1:-1:-1;;;3928:178:1;;7428:2:2;3928:178:1;;;7410:21:2;7467:2;7447:18;;;7440:30;7506:34;7486:18;;;7479:62;-1:-1:-1;;;7557:18:2;;;7550:42;7609:19;;3928:178:1;7226:408:2;3928:178:1;4131:17;;4124:70;;-1:-1:-1;;;4124:70:1;;4163:10;4124:70;;;4503:34:2;4183:4:1;4553:18:2;;;4546:43;4605:18;;;4598:34;;;-1:-1:-1;;;;;4131:17:1;;;;4124:38;;4438:18:2;;4124:70:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4116:96;;;;-1:-1:-1;;;4116:96:1;;5127:2:2;4116:96:1;;;5109:21:2;5166:2;5146:18;;;5139:30;-1:-1:-1;;;5185:18:2;;;5178:43;5238:18;;4116:96:1;4925:337:2;4116:96:1;4234:15;4222:9;:27;4266:17;;4293:25;;4259:113;;-1:-1:-1;;;4259:113:1;;-1:-1:-1;;;;;4293:25:1;;;4259:113;;;5499:51:2;4320::1;5566:18:2;;;5559:34;4266:17:1;;;4259:33;;5472:18:2;;4259:113:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4393:25:1;;4382:66;;-1:-1:-1;;;4382:66:1;;4437:4;4382:66;;;5499:51:2;5566:18;;;5559:34;;;-1:-1:-1;;;;;4393:25:1;;;;4382:46;;5472:18:2;;4382:66:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4458:6;4467:9;:7;:9::i;:::-;4458:18;-1:-1:-1;4500:6:1;4458:18;4504:2;4500:6;:::i;:::-;4486:8;4495:1;4486:11;;;;;;;;:::i;:::-;;;;;;;;;;:20;4530:5;:1;4534;4530:5;:::i;:::-;4516:8;4525:1;4516:11;;;;;;;;:::i;:::-;;;;;;;;;;:19;4559:5;:1;4563;4559:5;:::i;:::-;4545:8;4554:1;4545:11;;;;;;;;:::i;:::-;;;;;;;;;;:19;-1:-1:-1;4582:4:1;;3860:733;-1:-1:-1;;3860:733:1:o;2973:32::-;;;;;;;;;;;;6183:401;6312:14;;6339:28;;-1:-1:-1;;;;;;6356:10:1;3989:2:2;3985:15;3981:53;6339:28:1;;;3969:66:2;6280:90:1;;6299:11;;4051:12:2;;6339:28:1;3840:229:2;6280:90:1;6271:118;;;;-1:-1:-1;;;6271:118:1;;;;;;;:::i;:::-;6419:10;6408:22;;;;:10;:22;;;;;;;;:31;6400:59;;;;-1:-1:-1;;;6400:59:1;;;;;;;:::i;:::-;6481:10;6470:22;;;;:10;:22;;;;;:27;;-1:-1:-1;;6470:27:1;6493:4;6470:27;;;;;;6523:17;;-1:-1:-1;;;;;6523:17:1;;6516:34;;6564:12;;:9;:12::i;7028:525::-;7139:38;7146:11;7159:10;7171:5;7139:6;:38::i;:::-;7130:67;;;;-1:-1:-1;;;7130:67:1;;;;;;;:::i;:::-;7227:10;7216:22;;;;:10;:22;;;;;;;;:31;7208:59;;;;-1:-1:-1;;;7208:59:1;;;;;;;:::i;:::-;7289:10;7278:22;;;;:10;:22;;;;;:27;;-1:-1:-1;;7278:27:1;7301:4;7278:27;;;7335:25;;-1:-1:-1;;;;;7335:25:1;7324:46;7371:16;7381:5;7371:9;:16::i;:::-;7389:7;7324:73;;;;;;;;;;;;;;;7813:25:2;;;7869:2;7854:18;;7847:34;7801:2;7786:18;;7639:248;7324:73:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7422:17:1;;7462:50;;-1:-1:-1;;;7462:50:1;;7506:4;7462:50;;;2431:51:2;-1:-1:-1;;;;;7422:17:1;;;;-1:-1:-1;7415:34:1;;-1:-1:-1;7450:10:1;;7422:17;;7462:35;;2404:18:2;;7462:50:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7415:98;;-1:-1:-1;;;;;;7415:98:1;;;;;;;-1:-1:-1;;;;;5517:32:2;;;7415:98:1;;;5499:51:2;5566:18;;;5559:34;5472:18;;7415:98:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7407:139;;;;-1:-1:-1;;;7407:139:1;;8094:2:2;7407:139:1;;;8076:21:2;8133:2;8113:18;;;8106:30;8172;8152:18;;;8145:58;8220:18;;7407:139:1;7892:352:2;7407:139:1;7028:525;;;:::o;752:820::-;873:4;912;873;927:526;951:5;:12;947:1;:16;927:526;;;984:20;1007:5;1013:1;1007:8;;;;;;;;:::i;:::-;;;;;;;984:31;;1061:12;1045;:28;1041:402;;1196:44;;;;;;8406:19:2;;;8441:12;;;8434:28;;;8478:12;;1196:44:1;;;;;;;;;;;;1186:55;;;;;;1171:70;;1041:402;;;1383:44;;;;;;8406:19:2;;;8441:12;;;8434:28;;;8478:12;;1383:44:1;;;;;;;;;;;;1373:55;;;;;;1358:70;;1041:402;-1:-1:-1;965:3:1;;;;:::i;:::-;;;;927:526;;;-1:-1:-1;1545:20:1;;;;752:820;-1:-1:-1;;;752:820:1:o;14:127:2:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:902;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;307:6;294:20;333:4;356:18;393:2;389;386:10;383:36;;;399:18;;:::i;:::-;445:2;442:1;438:10;477:2;471:9;540:2;536:7;531:2;527;523:11;519:25;511:6;507:38;595:6;583:10;580:22;575:2;563:10;560:18;557:46;554:72;;;606:18;;:::i;:::-;642:2;635:22;692:18;;;768:15;;;764:24;;;726:15;;;;-1:-1:-1;800:15:2;;;797:35;;;828:1;825;818:12;797:35;864:2;856:6;852:15;841:26;;876:142;892:6;887:3;884:15;876:142;;;958:17;;946:30;;996:12;;;;909;;;;876:142;;;1036:6;146:902;-1:-1:-1;;;;;;;146:902:2:o;1053:173::-;1121:20;;-1:-1:-1;;;;;1170:31:2;;1160:42;;1150:70;;1216:1;1213;1206:12;1150:70;1053:173;;;:::o;1231:490::-;1333:6;1341;1349;1402:2;1390:9;1381:7;1377:23;1373:32;1370:52;;;1418:1;1415;1408:12;1370:52;1458:9;1445:23;1491:18;1483:6;1480:30;1477:50;;;1523:1;1520;1513:12;1477:50;1546:61;1599:7;1590:6;1579:9;1575:22;1546:61;:::i;:::-;1536:71;;;1626:38;1660:2;1649:9;1645:18;1626:38;:::i;:::-;1616:48;;1711:2;1700:9;1696:18;1683:32;1673:42;;1231:490;;;;;:::o;2100:180::-;2159:6;2212:2;2200:9;2191:7;2187:23;2183:32;2180:52;;;2228:1;2225;2218:12;2180:52;-1:-1:-1;2251:23:2;;2100:180;-1:-1:-1;2100:180:2:o;2493:186::-;2552:6;2605:2;2593:9;2584:7;2580:23;2576:32;2573:52;;;2621:1;2618;2611:12;2573:52;2644:29;2663:9;2644:29;:::i;2684:348::-;2768:6;2821:2;2809:9;2800:7;2796:23;2792:32;2789:52;;;2837:1;2834;2827:12;2789:52;2877:9;2864:23;2910:18;2902:6;2899:30;2896:50;;;2942:1;2939;2932:12;2896:50;2965:61;3018:7;3009:6;2998:9;2994:22;2965:61;:::i;:::-;2955:71;2684:348;-1:-1:-1;;;;2684:348:2:o;3219:484::-;3321:6;3329;3337;3390:2;3378:9;3369:7;3365:23;3361:32;3358:52;;;3406:1;3403;3396:12;3358:52;3446:9;3433:23;3479:18;3471:6;3468:30;3465:50;;;3511:1;3508;3501:12;3465:50;3534:61;3587:7;3578:6;3567:9;3563:22;3534:61;:::i;:::-;3524:71;3642:2;3627:18;;3614:32;;-1:-1:-1;3693:2:2;3678:18;;;3665:32;;3219:484;-1:-1:-1;;;;3219:484:2:o;3708:127::-;3769:10;3764:3;3760:20;3757:1;3750:31;3800:4;3797:1;3790:15;3824:4;3821:1;3814:15;4074:184;4144:6;4197:2;4185:9;4176:7;4172:23;4168:32;4165:52;;;4213:1;4210;4203:12;4165:52;-1:-1:-1;4236:16:2;;4074:184;-1:-1:-1;4074:184:2:o;4643:277::-;4710:6;4763:2;4751:9;4742:7;4738:23;4734:32;4731:52;;;4779:1;4776;4769:12;4731:52;4811:9;4805:16;4864:5;4857:13;4850:21;4843:5;4840:32;4830:60;;4886:1;4883;4876:12;5883:337;6085:2;6067:21;;;6124:2;6104:18;;;6097:30;-1:-1:-1;;;6158:2:2;6143:18;;6136:43;6211:2;6196:18;;5883:337::o;6225:339::-;6427:2;6409:21;;;6466:2;6446:18;;;6439:30;-1:-1:-1;;;6500:2:2;6485:18;;6478:45;6555:2;6540:18;;6225:339::o;6569:127::-;6630:10;6625:3;6621:20;6618:1;6611:31;6661:4;6658:1;6651:15;6685:4;6682:1;6675:15;6701:125;6741:4;6769:1;6766;6763:8;6760:34;;;6774:18;;:::i;:::-;-1:-1:-1;6811:9:2;;6701:125::o;6831:168::-;6871:7;6937:1;6933;6929:6;6925:14;6922:1;6919:21;6914:1;6907:9;6900:17;6896:45;6893:71;;;6944:18;;:::i;:::-;-1:-1:-1;6984:9:2;;6831:168::o;7004:217::-;7044:1;7070;7060:132;;7114:10;7109:3;7105:20;7102:1;7095:31;7149:4;7146:1;7139:15;7177:4;7174:1;7167:15;7060:132;-1:-1:-1;7206:9:2;;7004:217::o;8501:135::-;8540:3;8561:17;;;8558:43;;8581:18;;:::i;:::-;-1:-1:-1;8628:1:2;8617:13;;8501:135::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    2647,
    8213
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x116 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73B2E80E GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0x8DA58897 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA58897 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xD49B9216 EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0xF14DDABF EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xF5F21ACA EQ PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73B2E80E EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x75C53C04 EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x75FE9FBA EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x8912ED0B EQ PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4AD6D3CD GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0x4AD6D3CD EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x54FAC919 EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0x5B9EA9E5 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x60138460 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x647E03B7 EQ PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4B38CE0 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0xE2F5FB3 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x290812C2 EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0x2D8590C7 EQ PUSH2 0x167 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x129 CALLDATASIZE PUSH1 0x4 PUSH2 0x11BB JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3 JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH2 0x146 PUSH2 0x162 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST PUSH2 0x146 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH2 0x12E PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x3F0 JUMP JUMPDEST PUSH2 0x146 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x1A9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13A JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1A9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x1A9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x122B JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x21D PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x692 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x146 PUSH2 0x22D CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x7B0 JUMP JUMPDEST PUSH2 0x146 PUSH2 0x85A JUMP JUMPDEST PUSH2 0x146 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x251 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x9EF JUMP JUMPDEST PUSH2 0x146 PUSH2 0x264 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0xD6A JUMP JUMPDEST PUSH2 0x21D PUSH2 0x277 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0xD7A JUMP JUMPDEST PUSH2 0x21D PUSH2 0x28A CALLDATASIZE PUSH1 0x4 PUSH2 0x1283 JUMP JUMPDEST PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SUB PUSH2 0x302 JUMPI PUSH2 0x2FB DUP5 PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x2B1 JUMPI PUSH2 0x2B1 PUSH2 0x12D1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E0 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x103F JUMP JUMPDEST SWAP1 POP PUSH2 0x346 JUMP JUMPDEST DUP2 PUSH1 0x1 SUB PUSH2 0x322 JUMPI PUSH2 0x2FB DUP5 PUSH1 0x3 PUSH1 0x1 DUP2 SLOAD DUP2 LT PUSH2 0x2B1 JUMPI PUSH2 0x2B1 PUSH2 0x12D1 JUMP JUMPDEST DUP2 PUSH1 0x2 SUB PUSH2 0x342 JUMPI PUSH2 0x2FB DUP5 PUSH1 0x3 PUSH1 0x2 DUP2 SLOAD DUP2 LT PUSH2 0x2B1 JUMPI PUSH2 0x2B1 PUSH2 0x12D1 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x7 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAFCF89AA PUSH2 0x38B DUP5 PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EA SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xAFCF89AA SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x441 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x465 SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x483 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C4 SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 0x4DA JUMPI PUSH2 0x4D4 DUP3 PUSH2 0x9EF JUMP JUMPDEST POP PUSH2 0x68A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x531 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x555 SWAP2 SWAP1 PUSH2 0x1300 JUMP JUMPDEST PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1D1C985B9CD9995C8819985A5B PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH22 0x2AC3A4EDBBFB8014E3BA83411E915E7FFFFFFFFFFFF PUSH1 0x24 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x600 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x624 SWAP2 SWAP1 PUSH2 0x1300 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5DC8121 PUSH1 0xE3 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2EE40908 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x671 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x685 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x6B9 SWAP2 DUP4 SWAP2 PUSH1 0x34 ADD PUSH2 0x2E0 JUMP JUMPDEST PUSH2 0x6D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58D SWAP1 PUSH2 0x1322 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58D SWAP1 PUSH2 0x1349 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x73D PUSH1 0x2 PUSH2 0x7B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x788 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7AC SWAP2 SWAP1 PUSH2 0x1300 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xB SLOAD TIMESTAMP PUSH2 0x7C1 SWAP2 SWAP1 PUSH2 0x1388 JUMP JUMPDEST SWAP1 POP PUSH1 0xA SLOAD DUP2 GT ISZERO PUSH2 0x7D2 JUMPI POP PUSH1 0xA SLOAD JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0x811 JUMPI PUSH1 0xA SLOAD DUP2 PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x7F2 JUMPI PUSH2 0x7F2 PUSH2 0x12D1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x807 SWAP2 SWAP1 PUSH2 0x139F JUMP JUMPDEST PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x13BE JUMP JUMPDEST DUP3 PUSH1 0x1 SUB PUSH2 0x831 JUMPI PUSH1 0xA SLOAD DUP2 PUSH1 0x7 PUSH1 0x1 DUP2 SLOAD DUP2 LT PUSH2 0x7F2 JUMPI PUSH2 0x7F2 PUSH2 0x12D1 JUMP JUMPDEST DUP3 PUSH1 0x2 SUB PUSH2 0x851 JUMPI PUSH1 0xA SLOAD DUP2 PUSH1 0x7 PUSH1 0x2 DUP2 SLOAD DUP2 LT PUSH2 0x7F2 JUMPI PUSH2 0x7F2 PUSH2 0x12D1 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8D4 SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF03D6672 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x927 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x94B SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x997 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9BB SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST PUSH2 0x9C5 SWAP2 SWAP1 PUSH2 0x1388 JUMP JUMPDEST PUSH2 0x9D1 SWAP1 PUSH2 0x3CF PUSH2 0x139F JUMP JUMPDEST PUSH2 0x9DB SWAP2 SWAP1 PUSH2 0x13BE JUMP JUMPDEST PUSH2 0x3EA SWAP1 PUSH10 0x21E19E0C9BAB2400000 PUSH2 0x13BE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xAFCF89AA SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA40 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA64 SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA82 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA9F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAC3 SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST DUP3 GT PUSH2 0xB26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D7573742062652067726561746572207468616E2070726576696F757320746F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1D185B081D1BC81C995CD95D PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBA1 SWAP2 SWAP1 PUSH2 0x1300 JUMP JUMPDEST PUSH2 0xBDD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1D1C985B9CD9995C8819985A5B PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x58D JUMP JUMPDEST TIMESTAMP PUSH1 0xB SSTORE PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH22 0x2AC3A4EDBBFB8014E3BA83411E915E7FFFFFFFFFFFF PUSH1 0x24 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC4B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC6F SWAP2 SWAP1 PUSH2 0x1300 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5DC8121 PUSH1 0xE3 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2EE40908 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCD0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0xCDE PUSH2 0x85A JUMP JUMPDEST SWAP1 POP PUSH2 0xCEB DUP2 PUSH1 0xA PUSH2 0x139F JUMP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xCFF JUMPI PUSH2 0xCFF PUSH2 0x12D1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE PUSH2 0xD16 DUP2 PUSH1 0x3 PUSH2 0x139F JUMP JUMPDEST PUSH1 0x7 PUSH1 0x1 DUP2 SLOAD DUP2 LT PUSH2 0xD2A JUMPI PUSH2 0xD2A PUSH2 0x12D1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE PUSH2 0xD41 DUP2 PUSH1 0x1 PUSH2 0x139F JUMP JUMPDEST PUSH1 0x7 PUSH1 0x2 DUP2 SLOAD DUP2 LT PUSH2 0xD55 JUMPI PUSH2 0xD55 PUSH2 0x12D1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xDA1 SWAP2 DUP4 SWAP2 PUSH1 0x34 ADD PUSH2 0x2E0 JUMP JUMPDEST PUSH2 0xDBD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58D SWAP1 PUSH2 0x1322 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58D SWAP1 PUSH2 0x1349 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x73D SWAP1 PUSH2 0x7B0 JUMP JUMPDEST PUSH2 0xE30 DUP4 CALLER DUP5 PUSH2 0x28F JUMP JUMPDEST PUSH2 0xE4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58D SWAP1 PUSH2 0x1322 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x58D SWAP1 PUSH2 0x1349 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x441A3E70 PUSH2 0xEB0 DUP5 PUSH2 0x7B0 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED7 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 POP PUSH4 0xA9059CBB SWAP2 POP CALLER SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF7F SWAP2 SWAP1 PUSH2 0x12E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFCA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFEE SWAP2 SWAP1 PUSH2 0x1300 JUMP JUMPDEST PUSH2 0x103A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7472616374206D6179206265206F7574206F662066756E647300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x58D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x10E3 JUMPI PUSH1 0x0 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1061 JUMPI PUSH2 0x1061 PUSH2 0x12D1 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP4 GT PUSH2 0x10A3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP3 POP JUMPDEST POP DUP1 PUSH2 0x10DB DUP2 PUSH2 0x13E0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1044 JUMP JUMPDEST POP SWAP1 SWAP3 EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1115 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x1132 JUMPI PUSH2 0x1132 PUSH2 0x10EE JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x1157 JUMPI PUSH2 0x1157 PUSH2 0x10EE JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP4 DUP5 MSTORE DUP6 DUP2 ADD DUP4 ADD SWAP4 DUP4 DUP2 ADD SWAP3 POP DUP8 DUP6 GT ISZERO PUSH2 0x1175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP2 POP JUMPDEST DUP5 DUP3 LT ISZERO PUSH2 0x1194 JUMPI DUP2 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x117B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x11B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F3 DUP7 DUP3 DUP8 ADD PUSH2 0x1104 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x1202 PUSH1 0x20 DUP6 ADD PUSH2 0x119F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x123D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x346 DUP3 PUSH2 0x119F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x126F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127B DUP5 DUP3 DUP6 ADD PUSH2 0x1104 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12BB DUP7 DUP3 DUP8 ADD PUSH2 0x1104 JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x70726F6F66206661696C757265 PUSH1 0x98 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x185B1C9958591E4818DB185A5B5959 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x139A JUMPI PUSH2 0x139A PUSH2 0x1372 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x13B9 JUMPI PUSH2 0x13B9 PUSH2 0x1372 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x13DB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x13F2 JUMPI PUSH2 0x13F2 PUSH2 0x1372 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0xB7 0xBA 0xCD 0xEA 0xD7 SLT 0x5E POP SIGNEXTEND 0xD4 0xBE 0xC6 SAR DIV SWAP1 BALANCE PUSH24 0xF1069E095060A409B627C4C8A39564736F6C634300080E00 CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x116"
    },
    "25": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x73B2E80E"
    },
    "38": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "GT",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA2"
    },
    "42": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8DA58897"
    },
    "49": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "GT",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8DA58897"
    },
    "60": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x23A"
    },
    "64": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xB6B55F25"
    },
    "71": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x243"
    },
    "75": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xD49B9216"
    },
    "82": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x256"
    },
    "86": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xF14DDABF"
    },
    "93": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "94": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x269"
    },
    "97": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "98": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "99": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xF5F21ACA"
    },
    "104": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "105": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x27C"
    },
    "108": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "109": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "112": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "REVERT",
      "path": "1"
    },
    "113": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "114": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "115": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x73B2E80E"
    },
    "120": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "121": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1E7"
    },
    "124": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "125": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "126": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x75C53C04"
    },
    "131": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "132": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x20A"
    },
    "135": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "136": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "137": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x75FE9FBA"
    },
    "142": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "143": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21F"
    },
    "146": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "147": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "148": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8912ED0B"
    },
    "153": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "154": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x232"
    },
    "157": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "158": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "160": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "161": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "REVERT",
      "path": "1"
    },
    "162": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "163": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "164": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x4AD6D3CD"
    },
    "169": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "GT",
      "path": "1"
    },
    "170": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE9"
    },
    "173": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "174": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "175": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x4AD6D3CD"
    },
    "180": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "181": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x17A"
    },
    "184": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "185": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "186": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x54FAC919"
    },
    "191": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "192": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x18D"
    },
    "195": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "196": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "197": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x5B9EA9E5"
    },
    "202": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "203": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x196"
    },
    "206": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "207": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "208": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x60138460"
    },
    "213": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "214": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1C1"
    },
    "217": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "218": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "219": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x647E03B7"
    },
    "224": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "225": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1D4"
    },
    "228": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "229": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "231": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "232": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "REVERT",
      "path": "1"
    },
    "233": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "234": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "235": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x4B38CE0"
    },
    "240": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "241": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11B"
    },
    "244": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "245": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "246": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xE2F5FB3"
    },
    "251": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "252": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x143"
    },
    "255": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "256": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "257": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x290812C2"
    },
    "262": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "263": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x154"
    },
    "266": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "267": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "268": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x2D8590C7"
    },
    "273": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "EQ",
      "path": "1"
    },
    "274": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x167"
    },
    "277": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "278": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "279": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "281": {
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "DUP1",
      "path": "1"
    },
    "282": {
      "first_revert": true,
      "fn": null,
      "offset": [
        2647,
        8213
      ],
      "op": "REVERT",
      "path": "1"
    },
    "283": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "284": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E"
    },
    "287": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x129"
    },
    "290": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "291": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "293": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11BB"
    },
    "296": {
      "fn": "ForgeAirdrop.verify",
      "jump": "i",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMP",
      "path": "1"
    },
    "297": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "298": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28F"
    },
    "301": {
      "fn": "ForgeAirdrop.verify",
      "jump": "i",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMP",
      "path": "1"
    },
    "302": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "303": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "305": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "306": {
      "op": "SWAP1"
    },
    "307": {
      "op": "ISZERO"
    },
    "308": {
      "op": "ISZERO"
    },
    "309": {
      "op": "DUP2"
    },
    "310": {
      "op": "MSTORE"
    },
    "311": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "313": {
      "op": "ADD"
    },
    "314": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "315": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "317": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "318": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "DUP1",
      "path": "1"
    },
    "319": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "320": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "SUB",
      "path": "1"
    },
    "321": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "322": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "RETURN",
      "path": "1"
    },
    "323": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        8129,
        8205
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "324": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        8197,
        8198
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x3"
    },
    "326": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        8129,
        8205
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "327": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        8129,
        8205
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "329": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        8129,
        8205
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "330": {
      "op": "SWAP1"
    },
    "331": {
      "op": "DUP2"
    },
    "332": {
      "op": "MSTORE"
    },
    "333": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "335": {
      "op": "ADD"
    },
    "336": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        8129,
        8205
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13A"
    },
    "339": {
      "op": "JUMP"
    },
    "340": {
      "offset": [
        3371,
        3397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "341": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x146"
    },
    "344": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x162"
    },
    "347": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        3371,
        3397
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "348": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "350": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1212"
    },
    "353": {
      "fn": "ForgeAirdrop.getThree",
      "jump": "i",
      "offset": [
        3371,
        3397
      ],
      "op": "JUMP",
      "path": "1"
    },
    "354": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        3371,
        3397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "355": {
      "fn": "ForgeAirdrop.getThree",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x34D"
    },
    "358": {
      "fn": "ForgeAirdrop.getThree",
      "jump": "i",
      "offset": [
        3371,
        3397
      ],
      "op": "JUMP",
      "path": "1"
    },
    "359": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "360": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x146"
    },
    "363": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x175"
    },
    "366": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "367": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "369": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1212"
    },
    "372": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "jump": "i",
      "offset": [
        5541,
        5714
      ],
      "op": "JUMP",
      "path": "1"
    },
    "373": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "374": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x36E"
    },
    "377": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "jump": "i",
      "offset": [
        5541,
        5714
      ],
      "op": "JUMP",
      "path": "1"
    },
    "378": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "379": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E"
    },
    "382": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x188"
    },
    "385": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "386": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "388": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1212"
    },
    "391": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        4600,
        5195
      ],
      "op": "JUMP",
      "path": "1"
    },
    "392": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "393": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3F0"
    },
    "396": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        4600,
        5195
      ],
      "op": "JUMP",
      "path": "1"
    },
    "397": {
      "offset": [
        3489,
        3528
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "398": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3489,
        3528
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x146"
    },
    "401": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3489,
        3528
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA"
    },
    "403": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3489,
        3528
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "404": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3489,
        3528
      ],
      "op": "DUP2",
      "path": "1"
    },
    "405": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3489,
        3528
      ],
      "op": "JUMP",
      "path": "1"
    },
    "406": {
      "offset": [
        2685,
        2775
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "407": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "409": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "410": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A9"
    },
    "413": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "416": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "418": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "420": {
      "op": "SHL"
    },
    "421": {
      "op": "SUB"
    },
    "422": {
      "offset": [
        2685,
        2775
      ],
      "op": "AND",
      "path": "1"
    },
    "423": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "DUP2",
      "path": "1"
    },
    "424": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "JUMP",
      "path": "1"
    },
    "425": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "426": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "428": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2685,
        2775
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "429": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "431": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "433": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "435": {
      "op": "SHL"
    },
    "436": {
      "op": "SUB"
    },
    "437": {
      "op": "SWAP1"
    },
    "438": {
      "op": "SWAP2"
    },
    "439": {
      "op": "AND"
    },
    "440": {
      "op": "DUP2"
    },
    "441": {
      "op": "MSTORE"
    },
    "442": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "444": {
      "op": "ADD"
    },
    "445": {
      "offset": [
        2685,
        2775
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13A"
    },
    "448": {
      "op": "JUMP"
    },
    "449": {
      "offset": [
        2873,
        2967
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "450": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2873,
        2967
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "452": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2873,
        2967
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "453": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2873,
        2967
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A9"
    },
    "456": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2873,
        2967
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "457": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "459": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "461": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "463": {
      "op": "SHL"
    },
    "464": {
      "op": "SUB"
    },
    "465": {
      "offset": [
        2873,
        2967
      ],
      "op": "AND",
      "path": "1"
    },
    "466": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2873,
        2967
      ],
      "op": "DUP2",
      "path": "1"
    },
    "467": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2873,
        2967
      ],
      "op": "JUMP",
      "path": "1"
    },
    "468": {
      "offset": [
        2781,
        2867
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "469": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2781,
        2867
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "471": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2781,
        2867
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "472": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2781,
        2867
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A9"
    },
    "475": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2781,
        2867
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "478": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "480": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "482": {
      "op": "SHL"
    },
    "483": {
      "op": "SUB"
    },
    "484": {
      "offset": [
        2781,
        2867
      ],
      "op": "AND",
      "path": "1"
    },
    "485": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2781,
        2867
      ],
      "op": "DUP2",
      "path": "1"
    },
    "486": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        2781,
        2867
      ],
      "op": "JUMP",
      "path": "1"
    },
    "487": {
      "offset": [
        3441,
        3483
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "488": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E"
    },
    "491": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1F5"
    },
    "494": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "495": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "497": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x122B"
    },
    "500": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        3441,
        3483
      ],
      "op": "JUMP",
      "path": "1"
    },
    "501": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "502": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x9"
    },
    "504": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "506": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "507": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "509": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "510": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "DUP2",
      "path": "1"
    },
    "511": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "512": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "514": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "515": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "516": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "517": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "519": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "AND",
      "path": "1"
    },
    "520": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "DUP2",
      "path": "1"
    },
    "521": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        3441,
        3483
      ],
      "op": "JUMP",
      "path": "1"
    },
    "522": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "523": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21D"
    },
    "526": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x218"
    },
    "529": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "530": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "532": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1246"
    },
    "535": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "jump": "i",
      "offset": [
        6594,
        6983
      ],
      "op": "JUMP",
      "path": "1"
    },
    "536": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "537": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x692"
    },
    "540": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "jump": "i",
      "offset": [
        6594,
        6983
      ],
      "op": "JUMP",
      "path": "1"
    },
    "541": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "542": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "STOP",
      "path": "1"
    },
    "543": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "544": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x146"
    },
    "547": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x22D"
    },
    "550": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "551": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "553": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1212"
    },
    "556": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        5720,
        6174
      ],
      "op": "JUMP",
      "path": "1"
    },
    "557": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "558": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7B0"
    },
    "561": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        5720,
        6174
      ],
      "op": "JUMP",
      "path": "1"
    },
    "562": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5202,
        5535
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "563": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5202,
        5535
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x146"
    },
    "566": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5202,
        5535
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x85A"
    },
    "569": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5202,
        5535
      ],
      "op": "JUMP",
      "path": "1"
    },
    "570": {
      "offset": [
        3535,
        3577
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "571": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        3535,
        3577
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x146"
    },
    "574": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        3535,
        3577
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xB"
    },
    "576": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        3535,
        3577
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "577": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        3535,
        3577
      ],
      "op": "DUP2",
      "path": "1"
    },
    "578": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        3535,
        3577
      ],
      "op": "JUMP",
      "path": "1"
    },
    "579": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "580": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E"
    },
    "583": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x251"
    },
    "586": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "587": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "589": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1212"
    },
    "592": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        3860,
        4593
      ],
      "op": "JUMP",
      "path": "1"
    },
    "593": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "594": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9EF"
    },
    "597": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        3860,
        4593
      ],
      "op": "JUMP",
      "path": "1"
    },
    "598": {
      "offset": [
        2973,
        3005
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "599": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x146"
    },
    "602": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x264"
    },
    "605": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "606": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "608": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1212"
    },
    "611": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        2973,
        3005
      ],
      "op": "JUMP",
      "path": "1"
    },
    "612": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "613": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD6A"
    },
    "616": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        2973,
        3005
      ],
      "op": "JUMP",
      "path": "1"
    },
    "617": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "618": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21D"
    },
    "621": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x277"
    },
    "624": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "625": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "627": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1246"
    },
    "630": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "jump": "i",
      "offset": [
        6183,
        6584
      ],
      "op": "JUMP",
      "path": "1"
    },
    "631": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "632": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD7A"
    },
    "635": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "jump": "i",
      "offset": [
        6183,
        6584
      ],
      "op": "JUMP",
      "path": "1"
    },
    "636": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "637": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21D"
    },
    "640": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28A"
    },
    "643": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "644": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "646": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1283"
    },
    "649": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7028,
        7553
      ],
      "op": "JUMP",
      "path": "1"
    },
    "650": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "651": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE25"
    },
    "654": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7028,
        7553
      ],
      "op": "JUMP",
      "path": "1"
    },
    "655": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "656": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7673,
        7681
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "658": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7691,
        7696
      ],
      "op": "DUP2",
      "path": "1"
    },
    "659": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7700,
        7701
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "661": {
      "branch": 42,
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7691,
        7701
      ],
      "op": "SUB",
      "path": "1"
    },
    "662": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7688,
        8090
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x302"
    },
    "665": {
      "branch": 42,
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7688,
        8090
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "666": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7724,
        7813
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 1,
      "value": "0x2FB"
    },
    "669": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7743,
        7754
      ],
      "op": "DUP5",
      "path": "1"
    },
    "670": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7770
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "672": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7771,
        7772
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "674": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "DUP2",
      "path": "1"
    },
    "675": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "676": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "DUP2",
      "path": "1"
    },
    "677": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "LT",
      "path": "1"
    },
    "678": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B1"
    },
    "681": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "682": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B1"
    },
    "685": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "688": {
      "fn": "ForgeAirdrop.verify",
      "jump": "i",
      "offset": [
        7756,
        7773
      ],
      "op": "JUMP",
      "path": "1"
    },
    "689": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "690": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "691": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "693": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "694": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "696": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "698": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "699": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "ADD",
      "path": "1"
    },
    "700": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7756,
        7773
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "701": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7803,
        7810
      ],
      "op": "DUP6",
      "path": "1"
    },
    "702": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "704": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "705": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "707": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "ADD",
      "path": "1"
    },
    "708": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E0"
    },
    "711": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "712": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "713": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "715": {
      "op": "SWAP2"
    },
    "716": {
      "op": "SWAP1"
    },
    "717": {
      "op": "SWAP2"
    },
    "718": {
      "op": "SHL"
    },
    "719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "723": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "725": {
      "op": "SHL"
    },
    "726": {
      "op": "SUB"
    },
    "727": {
      "op": "NOT"
    },
    "728": {
      "op": "AND"
    },
    "729": {
      "op": "DUP2"
    },
    "730": {
      "op": "MSTORE"
    },
    "731": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "733": {
      "op": "ADD"
    },
    "734": {
      "op": "SWAP1"
    },
    "735": {
      "op": "JUMP"
    },
    "736": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "737": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "739": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "740": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "742": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "DUP2",
      "path": "1"
    },
    "743": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "DUP4",
      "path": "1"
    },
    "744": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "SUB",
      "path": "1"
    },
    "745": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "SUB",
      "path": "1"
    },
    "746": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "DUP2",
      "path": "1"
    },
    "747": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "748": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "749": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "751": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7786,
        7811
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "752": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7775,
        7812
      ],
      "op": "DUP1",
      "path": "1"
    },
    "753": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7775,
        7812
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "754": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7775,
        7812
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "755": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7775,
        7812
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "757": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7775,
        7812
      ],
      "op": "ADD",
      "path": "1"
    },
    "758": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7775,
        7812
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "759": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7724,
        7742
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x103F"
    },
    "762": {
      "fn": "ForgeAirdrop.verify",
      "jump": "i",
      "offset": [
        7724,
        7813
      ],
      "op": "JUMP",
      "path": "1"
    },
    "763": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7724,
        7813
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "764": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7717,
        7813
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "765": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7717,
        7813
      ],
      "op": "POP",
      "path": "1"
    },
    "766": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7717,
        7813
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x346"
    },
    "769": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7717,
        7813
      ],
      "op": "JUMP",
      "path": "1"
    },
    "770": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7688,
        8090
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "771": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7828,
        7833
      ],
      "op": "DUP2",
      "path": "1"
    },
    "772": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7836,
        7837
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "774": {
      "branch": 43,
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7828,
        7837
      ],
      "op": "SUB",
      "path": "1"
    },
    "775": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7825,
        8090
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x322"
    },
    "778": {
      "branch": 43,
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7825,
        8090
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "779": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7857,
        7946
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 2,
      "value": "0x2FB"
    },
    "782": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7876,
        7887
      ],
      "op": "DUP5",
      "path": "1"
    },
    "783": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7903
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "785": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7904,
        7905
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "787": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "DUP2",
      "path": "1"
    },
    "788": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "789": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "DUP2",
      "path": "1"
    },
    "790": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "LT",
      "path": "1"
    },
    "791": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B1"
    },
    "794": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "795": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B1"
    },
    "798": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7889,
        7906
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "801": {
      "fn": "ForgeAirdrop.verify",
      "jump": "i",
      "offset": [
        7889,
        7906
      ],
      "op": "JUMP",
      "path": "1"
    },
    "802": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7825,
        8090
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "803": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7961,
        7966
      ],
      "op": "DUP2",
      "path": "1"
    },
    "804": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7970,
        7971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "806": {
      "branch": 44,
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7961,
        7971
      ],
      "op": "SUB",
      "path": "1"
    },
    "807": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7958,
        8090
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x342"
    },
    "810": {
      "branch": 44,
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7958,
        8090
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "811": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7994,
        8083
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 3,
      "value": "0x2FB"
    },
    "814": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8013,
        8024
      ],
      "op": "DUP5",
      "path": "1"
    },
    "815": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8040
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "817": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8041,
        8042
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "819": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "DUP2",
      "path": "1"
    },
    "820": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "821": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "DUP2",
      "path": "1"
    },
    "822": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "LT",
      "path": "1"
    },
    "823": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B1"
    },
    "826": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "827": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B1"
    },
    "830": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8026,
        8043
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "833": {
      "fn": "ForgeAirdrop.verify",
      "jump": "i",
      "offset": [
        8026,
        8043
      ],
      "op": "JUMP",
      "path": "1"
    },
    "834": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7958,
        8090
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "835": {
      "op": "POP"
    },
    "836": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        8102,
        8107
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 4,
      "value": "0x0"
    },
    "838": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "839": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "840": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "841": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "POP",
      "path": "1"
    },
    "842": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "POP",
      "path": "1"
    },
    "843": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        7578,
        8114
      ],
      "op": "POP",
      "path": "1"
    },
    "844": {
      "fn": "ForgeAirdrop.verify",
      "jump": "o",
      "offset": [
        7578,
        8114
      ],
      "op": "JUMP",
      "path": "1"
    },
    "845": {
      "offset": [
        3371,
        3397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "846": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7"
    },
    "848": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "DUP2",
      "path": "1"
    },
    "849": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "DUP2",
      "path": "1"
    },
    "850": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "851": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "DUP2",
      "path": "1"
    },
    "852": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "LT",
      "path": "1"
    },
    "853": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x35D"
    },
    "856": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "857": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "859": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "DUP1",
      "path": "1"
    },
    "860": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "REVERT",
      "path": "1"
    },
    "861": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "862": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "864": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "865": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "DUP3",
      "path": "1"
    },
    "866": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "867": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "869": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "870": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "871": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "872": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "ADD",
      "path": "1"
    },
    "873": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "874": {
      "fn": "ForgeAirdrop.verify",
      "offset": [
        3371,
        3397
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "875": {
      "op": "POP"
    },
    "876": {
      "offset": [
        3371,
        3397
      ],
      "op": "DUP2",
      "path": "1"
    },
    "877": {
      "fn": "ForgeAirdrop.verify",
      "jump": "o",
      "offset": [
        3371,
        3397
      ],
      "op": "JUMP",
      "path": "1"
    },
    "878": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "879": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5648,
        5673
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 5,
      "value": "0x2"
    },
    "881": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5648,
        5673
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "882": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5607,
        5618
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "884": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5607,
        5618
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "885": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "887": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "889": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "891": {
      "op": "SHL"
    },
    "892": {
      "op": "SUB"
    },
    "893": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5648,
        5673
      ],
      "op": "AND",
      "path": "1"
    },
    "894": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5688
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xAFCF89AA"
    },
    "899": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5689,
        5706
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x38B"
    },
    "902": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5699,
        5705
      ],
      "op": "DUP5",
      "path": "1"
    },
    "903": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5689,
        5698
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7B0"
    },
    "906": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "jump": "i",
      "offset": [
        5689,
        5706
      ],
      "op": "JUMP",
      "path": "1"
    },
    "907": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5689,
        5706
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "908": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "910": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "911": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP3",
      "path": "1"
    },
    "912": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "917": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "AND",
      "path": "1"
    },
    "918": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "920": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "SHL",
      "path": "1"
    },
    "921": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP2",
      "path": "1"
    },
    "922": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "923": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "925": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "ADD",
      "path": "1"
    },
    "926": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3A9"
    },
    "929": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "930": {
      "op": "DUP2"
    },
    "931": {
      "op": "MSTORE"
    },
    "932": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "934": {
      "op": "ADD"
    },
    "935": {
      "op": "SWAP1"
    },
    "936": {
      "op": "JUMP"
    },
    "937": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "938": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "940": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "942": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "943": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP1",
      "path": "1"
    },
    "944": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP4",
      "path": "1"
    },
    "945": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "SUB",
      "path": "1"
    },
    "946": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP2",
      "path": "1"
    },
    "947": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP7",
      "path": "1"
    },
    "948": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "GAS",
      "path": "1"
    },
    "949": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "950": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "951": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP1",
      "path": "1"
    },
    "952": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "953": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3C6"
    },
    "956": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "957": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "958": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "960": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP1",
      "path": "1"
    },
    "961": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "962": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "963": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "965": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "REVERT",
      "path": "1"
    },
    "966": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "967": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "POP",
      "path": "1"
    },
    "968": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "POP",
      "path": "1"
    },
    "969": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "POP",
      "path": "1"
    },
    "970": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "POP",
      "path": "1"
    },
    "971": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "973": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "974": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "975": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "977": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "NOT",
      "path": "1"
    },
    "978": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "980": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP3",
      "path": "1"
    },
    "981": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "ADD",
      "path": "1"
    },
    "982": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "AND",
      "path": "1"
    },
    "983": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP3",
      "path": "1"
    },
    "984": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "ADD",
      "path": "1"
    },
    "985": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP1",
      "path": "1"
    },
    "986": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "988": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "989": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "POP",
      "path": "1"
    },
    "990": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "DUP2",
      "path": "1"
    },
    "991": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "ADD",
      "path": "1"
    },
    "992": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "993": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3EA"
    },
    "996": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "997": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "998": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "1001": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "jump": "i",
      "offset": [
        5637,
        5707
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1002": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5637,
        5707
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1003": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5630,
        5707
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1004": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "offset": [
        5541,
        5714
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1005": {
      "op": "POP"
    },
    "1006": {
      "op": "POP"
    },
    "1007": {
      "fn": "ForgeAirdrop.amtOutForChoiceInForge",
      "jump": "o",
      "offset": [
        5541,
        5714
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1008": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1009": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4689,
        4714
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1011": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4689,
        4714
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1012": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1014": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1015": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1020": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1022": {
      "op": "SHL"
    },
    "1023": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1024": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1025": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4786,
        4790
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "1026": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1028": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1029": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "ADD",
      "path": "1"
    },
    "1030": {
      "op": "MSTORE"
    },
    "1031": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4644,
        4656
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1033": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4644,
        4656
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1034": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1036": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1038": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1040": {
      "op": "SHL"
    },
    "1041": {
      "op": "SUB"
    },
    "1042": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4689,
        4714
      ],
      "op": "AND",
      "path": "1"
    },
    "1043": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4689,
        4714
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1044": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4729
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xAFCF89AA"
    },
    "1049": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4729
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1050": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4689,
        4714
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1051": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4689,
        4714
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1052": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4777
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x70A08231"
    },
    "1057": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4777
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1058": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1060": {
      "op": "ADD"
    },
    "1061": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1063": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1065": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1066": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1067": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1068": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "SUB",
      "path": "1"
    },
    "1069": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1070": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP7",
      "path": "1"
    },
    "1071": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "GAS",
      "path": "1"
    },
    "1072": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "1073": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1074": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1075": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1076": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x441"
    },
    "1079": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1080": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1081": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1083": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1084": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "1085": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1086": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1088": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1089": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1090": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "POP",
      "path": "1"
    },
    "1091": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "POP",
      "path": "1"
    },
    "1092": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "POP",
      "path": "1"
    },
    "1093": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "POP",
      "path": "1"
    },
    "1094": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1096": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1097": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1098": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1100": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "NOT",
      "path": "1"
    },
    "1101": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1103": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1104": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "ADD",
      "path": "1"
    },
    "1105": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "AND",
      "path": "1"
    },
    "1106": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1107": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "ADD",
      "path": "1"
    },
    "1108": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1109": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1111": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1112": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "POP",
      "path": "1"
    },
    "1113": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1114": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "ADD",
      "path": "1"
    },
    "1115": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1116": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x465"
    },
    "1119": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1120": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1121": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "1124": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        4730,
        4792
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1125": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4730,
        4792
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1126": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1128": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1129": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1130": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "1135": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "AND",
      "path": "1"
    },
    "1136": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "1138": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "SHL",
      "path": "1"
    },
    "1139": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1140": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1141": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1143": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "ADD",
      "path": "1"
    },
    "1144": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x483"
    },
    "1147": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1148": {
      "op": "DUP2"
    },
    "1149": {
      "op": "MSTORE"
    },
    "1150": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1152": {
      "op": "ADD"
    },
    "1153": {
      "op": "SWAP1"
    },
    "1154": {
      "op": "JUMP"
    },
    "1155": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1156": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1158": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1160": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1161": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1162": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1163": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "SUB",
      "path": "1"
    },
    "1164": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1165": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP7",
      "path": "1"
    },
    "1166": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "GAS",
      "path": "1"
    },
    "1167": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "1168": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1169": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1170": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1171": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4A0"
    },
    "1174": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1175": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1176": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1178": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1179": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "1180": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1181": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1183": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1184": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1185": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "POP",
      "path": "1"
    },
    "1186": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "POP",
      "path": "1"
    },
    "1187": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "POP",
      "path": "1"
    },
    "1188": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "POP",
      "path": "1"
    },
    "1189": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1191": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1192": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1193": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1195": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "NOT",
      "path": "1"
    },
    "1196": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1198": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1199": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "ADD",
      "path": "1"
    },
    "1200": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "AND",
      "path": "1"
    },
    "1201": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1202": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "ADD",
      "path": "1"
    },
    "1203": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1204": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1206": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1207": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "POP",
      "path": "1"
    },
    "1208": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1209": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "ADD",
      "path": "1"
    },
    "1210": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1211": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4C4"
    },
    "1214": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1215": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1216": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "1219": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        4678,
        4793
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1220": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4678,
        4793
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1221": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4672,
        4675
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1222": {
      "branch": 45,
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4672,
        4793
      ],
      "op": "GT",
      "path": "1"
    },
    "1223": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4669,
        5167
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1224": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4669,
        5167
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4DA"
    },
    "1227": {
      "branch": 45,
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4669,
        5167
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1228": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4809,
        4821
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 6,
      "value": "0x4D4"
    },
    "1231": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4817,
        4820
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1232": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4809,
        4816
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9EF"
    },
    "1235": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        4809,
        4821
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1236": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4809,
        4821
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1237": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4809,
        4821
      ],
      "op": "POP",
      "path": "1"
    },
    "1238": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4669,
        5167
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x68A"
    },
    "1241": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4669,
        5167
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1242": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4669,
        5167
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1243": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4867,
        4884
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 7,
      "value": "0x1"
    },
    "1245": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4867,
        4884
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1246": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1248": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1249": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "1254": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1256": {
      "op": "SHL"
    },
    "1257": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1258": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1259": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4899,
        4909
      ],
      "op": "CALLER",
      "path": "1"
    },
    "1260": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1262": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1263": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "ADD",
      "path": "1"
    },
    "1264": {
      "op": "MSTORE"
    },
    "1265": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4919,
        4923
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "1266": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1268": {
      "op": "DUP3"
    },
    "1269": {
      "op": "ADD"
    },
    "1270": {
      "op": "MSTORE"
    },
    "1271": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1273": {
      "op": "DUP2"
    },
    "1274": {
      "op": "ADD"
    },
    "1275": {
      "op": "DUP5"
    },
    "1276": {
      "op": "SWAP1"
    },
    "1277": {
      "op": "MSTORE"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1282": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1284": {
      "op": "SHL"
    },
    "1285": {
      "op": "SUB"
    },
    "1286": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4867,
        4884
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1287": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4867,
        4884
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1288": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4867,
        4884
      ],
      "op": "AND",
      "path": "1"
    },
    "1289": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4867,
        4884
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1290": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4898
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x23B872DD"
    },
    "1295": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4898
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1296": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1298": {
      "op": "ADD"
    },
    "1299": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1301": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1303": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1304": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1305": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1306": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "SUB",
      "path": "1"
    },
    "1307": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1308": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1310": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1311": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "GAS",
      "path": "1"
    },
    "1312": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "CALL",
      "path": "1"
    },
    "1313": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1314": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1315": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1316": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "1319": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1320": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1321": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1323": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1324": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "1325": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1326": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1328": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "1329": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1330": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "POP",
      "path": "1"
    },
    "1331": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "POP",
      "path": "1"
    },
    "1332": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "POP",
      "path": "1"
    },
    "1333": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "POP",
      "path": "1"
    },
    "1334": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1336": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1337": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1338": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1340": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "NOT",
      "path": "1"
    },
    "1341": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1343": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1344": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "ADD",
      "path": "1"
    },
    "1345": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "AND",
      "path": "1"
    },
    "1346": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1347": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "ADD",
      "path": "1"
    },
    "1348": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1349": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1351": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1352": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "POP",
      "path": "1"
    },
    "1353": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1354": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "ADD",
      "path": "1"
    },
    "1355": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1356": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x555"
    },
    "1359": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1360": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1361": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1300"
    },
    "1364": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        4860,
        4930
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1365": {
      "branch": 46,
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4860,
        4930
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1366": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x596"
    },
    "1369": {
      "branch": 46,
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1370": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1372": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1373": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1377": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1379": {
      "op": "SHL"
    },
    "1380": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1381": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1382": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1384": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1386": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1387": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "ADD",
      "path": "1"
    },
    "1388": {
      "op": "MSTORE"
    },
    "1389": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "1391": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1393": {
      "op": "DUP3"
    },
    "1394": {
      "op": "ADD"
    },
    "1395": {
      "op": "MSTORE"
    },
    "1396": {
      "op": "PUSH13",
      "value": "0x1D1C985B9CD9995C8819985A5B"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x9A"
    },
    "1412": {
      "op": "SHL"
    },
    "1413": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1415": {
      "op": "DUP3"
    },
    "1416": {
      "op": "ADD"
    },
    "1417": {
      "op": "MSTORE"
    },
    "1418": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1420": {
      "op": "ADD"
    },
    "1421": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1422": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1424": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1425": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1426": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1427": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "SUB",
      "path": "1"
    },
    "1428": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1429": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1430": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4852,
        4948
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1431": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4969,
        4986
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 8,
      "value": "0x1"
    },
    "1433": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4969,
        4986
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1434": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4996,
        5021
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1436": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4996,
        5021
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1437": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1439": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1440": {
      "op": "PUSH4",
      "value": "0x95EA7B3"
    },
    "1445": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1447": {
      "op": "SHL"
    },
    "1448": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1449": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1450": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1456": {
      "op": "SHL"
    },
    "1457": {
      "op": "SUB"
    },
    "1458": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4996,
        5021
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1459": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4996,
        5021
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1460": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4996,
        5021
      ],
      "op": "AND",
      "path": "1"
    },
    "1461": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1463": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1464": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "ADD",
      "path": "1"
    },
    "1465": {
      "op": "MSTORE"
    },
    "1466": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5023,
        5074
      ],
      "op": "PUSH22",
      "path": "1",
      "value": "0x2AC3A4EDBBFB8014E3BA83411E915E7FFFFFFFFFFFF"
    },
    "1489": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1491": {
      "op": "DUP3"
    },
    "1492": {
      "op": "ADD"
    },
    "1493": {
      "op": "MSTORE"
    },
    "1494": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4969,
        4986
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1495": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4969,
        4986
      ],
      "op": "AND",
      "path": "1"
    },
    "1496": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4969,
        4986
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1497": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        4995
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x95EA7B3"
    },
    "1502": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        4995
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1503": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1505": {
      "op": "ADD"
    },
    "1506": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1508": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1510": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1511": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1512": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1513": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "SUB",
      "path": "1"
    },
    "1514": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1515": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1517": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1518": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "GAS",
      "path": "1"
    },
    "1519": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "CALL",
      "path": "1"
    },
    "1520": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1521": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1522": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1523": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x600"
    },
    "1526": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1527": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1528": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1530": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1531": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "1532": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1533": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1535": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1536": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1537": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "POP",
      "path": "1"
    },
    "1538": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "POP",
      "path": "1"
    },
    "1539": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "POP",
      "path": "1"
    },
    "1540": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "POP",
      "path": "1"
    },
    "1541": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1543": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1544": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1545": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1547": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "NOT",
      "path": "1"
    },
    "1548": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1550": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1551": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "ADD",
      "path": "1"
    },
    "1552": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "AND",
      "path": "1"
    },
    "1553": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1554": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "ADD",
      "path": "1"
    },
    "1555": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1556": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1558": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1559": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "POP",
      "path": "1"
    },
    "1560": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1561": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "ADD",
      "path": "1"
    },
    "1562": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1563": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x624"
    },
    "1566": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1567": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1568": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1300"
    },
    "1571": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "i",
      "offset": [
        4962,
        5075
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1572": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4962,
        5075
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1573": {
      "op": "POP"
    },
    "1574": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5100,
        5125
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 9,
      "value": "0x2"
    },
    "1576": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5100,
        5125
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1577": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1579": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1580": {
      "op": "PUSH4",
      "value": "0x5DC8121"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "1587": {
      "op": "SHL"
    },
    "1588": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1589": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1590": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5144,
        5148
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "1591": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1593": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1594": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "ADD",
      "path": "1"
    },
    "1595": {
      "op": "MSTORE"
    },
    "1596": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1598": {
      "op": "DUP2"
    },
    "1599": {
      "op": "ADD"
    },
    "1600": {
      "op": "DUP5"
    },
    "1601": {
      "op": "SWAP1"
    },
    "1602": {
      "op": "MSTORE"
    },
    "1603": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1607": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1609": {
      "op": "SHL"
    },
    "1610": {
      "op": "SUB"
    },
    "1611": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5100,
        5125
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1612": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5100,
        5125
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1613": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5100,
        5125
      ],
      "op": "AND",
      "path": "1"
    },
    "1614": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5100,
        5125
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1615": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5135
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x2EE40908"
    },
    "1620": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5135
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1621": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1623": {
      "op": "ADD"
    },
    "1624": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1626": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1628": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1629": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1630": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1631": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "SUB",
      "path": "1"
    },
    "1632": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1633": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1635": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1636": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1637": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "1638": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1639": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1640": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1641": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x671"
    },
    "1644": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1645": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1647": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1648": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1649": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1650": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "POP",
      "path": "1"
    },
    "1651": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "GAS",
      "path": "1"
    },
    "1652": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "CALL",
      "path": "1"
    },
    "1653": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1654": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1655": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1656": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x685"
    },
    "1659": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1660": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1661": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1663": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1664": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "1665": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1666": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1668": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1669": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1670": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "POP",
      "path": "1"
    },
    "1671": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "POP",
      "path": "1"
    },
    "1672": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "POP",
      "path": "1"
    },
    "1673": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5089,
        5155
      ],
      "op": "POP",
      "path": "1"
    },
    "1674": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4669,
        5167
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1675": {
      "op": "POP"
    },
    "1676": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5184,
        5188
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 10,
      "value": "0x1"
    },
    "1678": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        5184,
        5188
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1679": {
      "fn": "ForgeAirdrop.Donation",
      "offset": [
        4600,
        5195
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1680": {
      "op": "POP"
    },
    "1681": {
      "fn": "ForgeAirdrop.Donation",
      "jump": "o",
      "offset": [
        4600,
        5195
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1682": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1683": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6711,
        6725
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 11,
      "value": "0x5"
    },
    "1685": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6711,
        6725
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1686": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6738,
        6766
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1688": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6738,
        6766
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1689": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1691": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1693": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1695": {
      "op": "SHL"
    },
    "1696": {
      "op": "SUB"
    },
    "1697": {
      "op": "NOT"
    },
    "1698": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6755,
        6765
      ],
      "op": "CALLER",
      "path": "1"
    },
    "1699": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1701": {
      "op": "SHL"
    },
    "1702": {
      "op": "AND"
    },
    "1703": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6738,
        6766
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1705": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6738,
        6766
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1706": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6738,
        6766
      ],
      "op": "ADD",
      "path": "1"
    },
    "1707": {
      "op": "MSTORE"
    },
    "1708": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6679,
        6769
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6B9"
    },
    "1711": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6679,
        6769
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1712": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6698,
        6709
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1713": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6698,
        6709
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1714": {
      "op": "PUSH1",
      "value": "0x34"
    },
    "1716": {
      "op": "ADD"
    },
    "1717": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6738,
        6766
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E0"
    },
    "1720": {
      "op": "JUMP"
    },
    "1721": {
      "branch": 47,
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6679,
        6769
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1722": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6D5"
    },
    "1725": {
      "branch": 47,
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1726": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1728": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1729": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1733": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1735": {
      "op": "SHL"
    },
    "1736": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1737": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1738": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1740": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "ADD",
      "path": "1"
    },
    "1741": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "1744": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1745": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1322"
    },
    "1748": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "jump": "i",
      "offset": [
        6670,
        6788
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1749": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6670,
        6788
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1750": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6818,
        6828
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 12
    },
    "1751": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1753": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1754": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1755": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1756": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6817
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x9"
    },
    "1758": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1760": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1761": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1763": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1764": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1765": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1766": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "1768": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6829
      ],
      "op": "AND",
      "path": "1"
    },
    "1769": {
      "branch": 48,
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6807,
        6838
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1770": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x705"
    },
    "1773": {
      "branch": 48,
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1774": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1776": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1777": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1781": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1783": {
      "op": "SHL"
    },
    "1784": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1785": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1786": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1788": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "ADD",
      "path": "1"
    },
    "1789": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "1792": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1793": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1349"
    },
    "1796": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "jump": "i",
      "offset": [
        6799,
        6858
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1797": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6799,
        6858
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1798": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6880,
        6890
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 13
    },
    "1799": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1801": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1802": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1803": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1804": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6879
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x9"
    },
    "1806": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1808": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1809": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1811": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1812": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6891
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1813": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1814": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1815": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1817": {
      "op": "NOT"
    },
    "1818": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "AND",
      "path": "1"
    },
    "1819": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6892,
        6896
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1821": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1822": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1823": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "OR",
      "path": "1"
    },
    "1824": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1825": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1826": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6869,
        6896
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1827": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6922,
        6939
      ],
      "op": "SLOAD",
      "path": "1",
      "statement": 14
    },
    "1828": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1830": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1832": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1834": {
      "op": "SHL"
    },
    "1835": {
      "op": "SUB"
    },
    "1836": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6922,
        6939
      ],
      "op": "AND",
      "path": "1"
    },
    "1837": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6922,
        6939
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1838": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6949
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xA9059CBB"
    },
    "1843": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6949
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1844": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6963,
        6975
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x73D"
    },
    "1847": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6973,
        6974
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1849": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6963,
        6972
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7B0"
    },
    "1852": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "jump": "i",
      "offset": [
        6963,
        6975
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1853": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6963,
        6975
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1854": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1856": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1857": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1859": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1861": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1863": {
      "op": "SHL"
    },
    "1864": {
      "op": "SUB"
    },
    "1865": {
      "op": "NOT"
    },
    "1866": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "1868": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1869": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1870": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "SHL",
      "path": "1"
    },
    "1871": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "AND",
      "path": "1"
    },
    "1872": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1873": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1874": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1876": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1878": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1880": {
      "op": "SHL"
    },
    "1881": {
      "op": "SUB"
    },
    "1882": {
      "op": "SWAP1"
    },
    "1883": {
      "op": "SWAP3"
    },
    "1884": {
      "op": "AND"
    },
    "1885": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1887": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1888": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "ADD",
      "path": "1"
    },
    "1889": {
      "op": "MSTORE"
    },
    "1890": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1892": {
      "op": "DUP3"
    },
    "1893": {
      "op": "ADD"
    },
    "1894": {
      "op": "MSTORE"
    },
    "1895": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1897": {
      "op": "ADD"
    },
    "1898": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1900": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1902": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1903": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1904": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1905": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "SUB",
      "path": "1"
    },
    "1906": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1907": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1909": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1910": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "GAS",
      "path": "1"
    },
    "1911": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "CALL",
      "path": "1"
    },
    "1912": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1913": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1914": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1915": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x788"
    },
    "1918": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1919": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1920": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1922": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1923": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "1924": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1925": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1927": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1928": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1929": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "POP",
      "path": "1"
    },
    "1930": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "POP",
      "path": "1"
    },
    "1931": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "POP",
      "path": "1"
    },
    "1932": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "POP",
      "path": "1"
    },
    "1933": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1935": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1936": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1937": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1939": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "NOT",
      "path": "1"
    },
    "1940": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1942": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1943": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "ADD",
      "path": "1"
    },
    "1944": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "AND",
      "path": "1"
    },
    "1945": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1946": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "ADD",
      "path": "1"
    },
    "1947": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1948": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1950": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1951": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "POP",
      "path": "1"
    },
    "1952": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1953": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "ADD",
      "path": "1"
    },
    "1954": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1955": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7AC"
    },
    "1958": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1959": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1960": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1300"
    },
    "1963": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "jump": "i",
      "offset": [
        6915,
        6976
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1964": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1965": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6915,
        6976
      ],
      "op": "POP",
      "path": "1"
    },
    "1966": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "offset": [
        6594,
        6983
      ],
      "op": "POP",
      "path": "1"
    },
    "1967": {
      "fn": "ForgeAirdrop.mintWithProofMid",
      "jump": "o",
      "offset": [
        6594,
        6983
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1968": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1969": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5773,
        5784
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1971": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5795,
        5809
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1972": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5830,
        5839
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xB"
    },
    "1974": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5830,
        5839
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1975": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5812,
        5827
      ],
      "op": "TIMESTAMP",
      "path": "1"
    },
    "1976": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5812,
        5839
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7C1"
    },
    "1979": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5812,
        5839
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1980": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5812,
        5839
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1981": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5812,
        5839
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1388"
    },
    "1984": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        5812,
        5839
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1985": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5812,
        5839
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1986": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5795,
        5839
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1987": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5795,
        5839
      ],
      "op": "POP",
      "path": "1"
    },
    "1988": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5861,
        5866
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA"
    },
    "1990": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5861,
        5866
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1991": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5852,
        5858
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1992": {
      "branch": 49,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5852,
        5866
      ],
      "op": "GT",
      "path": "1"
    },
    "1993": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5849,
        5906
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1994": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5849,
        5906
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7D2"
    },
    "1997": {
      "branch": 49,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5849,
        5906
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1998": {
      "op": "POP"
    },
    "1999": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5890,
        5895
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 15,
      "value": "0xA"
    },
    "2001": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5890,
        5895
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2002": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5849,
        5906
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2003": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5918,
        5924
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2004": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5928,
        5929
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2006": {
      "branch": 50,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5918,
        5929
      ],
      "op": "SUB",
      "path": "1"
    },
    "2007": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5915,
        6151
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x811"
    },
    "2010": {
      "branch": 50,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5915,
        6151
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2011": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5975,
        5980
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 16,
      "value": "0xA"
    },
    "2013": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5975,
        5980
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2014": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5965,
        5971
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2015": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5959
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7"
    },
    "2017": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5960,
        5961
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2019": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2020": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2021": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2022": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "LT",
      "path": "1"
    },
    "2023": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F2"
    },
    "2026": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2027": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F2"
    },
    "2030": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "2033": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        5951,
        5962
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2034": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2035": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2036": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2038": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2039": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2041": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2043": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2044": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "ADD",
      "path": "1"
    },
    "2045": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5962
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2046": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5971
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x807"
    },
    "2049": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5971
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2050": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5971
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2051": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5971
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x139F"
    },
    "2054": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        5951,
        5971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2055": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5951,
        5971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2056": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5950,
        5980
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x346"
    },
    "2059": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5950,
        5980
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2060": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5950,
        5980
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2061": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5950,
        5980
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13BE"
    },
    "2064": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        5950,
        5980
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2065": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5915,
        6151
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2066": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5999,
        6005
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2067": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6008,
        6009
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2069": {
      "branch": 51,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5999,
        6009
      ],
      "op": "SUB",
      "path": "1"
    },
    "2070": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5996,
        6151
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x831"
    },
    "2073": {
      "branch": 51,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5996,
        6151
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2074": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6055,
        6060
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 17,
      "value": "0xA"
    },
    "2076": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6055,
        6060
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2077": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6045,
        6051
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2078": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6039
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7"
    },
    "2080": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6040,
        6041
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2082": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2083": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2084": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2085": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "LT",
      "path": "1"
    },
    "2086": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F2"
    },
    "2089": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2090": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F2"
    },
    "2093": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6031,
        6042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "2096": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        6031,
        6042
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2097": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5996,
        6151
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2098": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6079,
        6085
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2099": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6088,
        6089
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2101": {
      "branch": 52,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6079,
        6089
      ],
      "op": "SUB",
      "path": "1"
    },
    "2102": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6076,
        6151
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x851"
    },
    "2105": {
      "branch": 52,
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6076,
        6151
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2106": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6135,
        6140
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 18,
      "value": "0xA"
    },
    "2108": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6135,
        6140
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2109": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6125,
        6131
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2110": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6119
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7"
    },
    "2112": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6120,
        6121
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2114": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2115": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2116": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2117": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "LT",
      "path": "1"
    },
    "2118": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F2"
    },
    "2121": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2122": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F2"
    },
    "2125": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6111,
        6122
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "2128": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "i",
      "offset": [
        6111,
        6122
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2129": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6076,
        6151
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2130": {
      "op": "POP"
    },
    "2131": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6167,
        6168
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 19,
      "value": "0x0"
    },
    "2133": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        6167,
        6168
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2134": {
      "fn": "ForgeAirdrop.amountOut",
      "offset": [
        5720,
        6174
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2135": {
      "op": "POP"
    },
    "2136": {
      "op": "POP"
    },
    "2137": {
      "fn": "ForgeAirdrop.amountOut",
      "jump": "o",
      "offset": [
        5720,
        6174
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2138": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5202,
        5535
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2139": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5242,
        5254
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2141": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5274,
        5286
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2142": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2144": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2146": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2147": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2148": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2149": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "2152": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "EXP",
      "path": "1"
    },
    "2153": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2154": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "DIV",
      "path": "1"
    },
    "2155": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2157": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2159": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2161": {
      "op": "SHL"
    },
    "2162": {
      "op": "SUB"
    },
    "2163": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5463,
        5488
      ],
      "op": "AND",
      "path": "1"
    },
    "2164": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2166": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2168": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2170": {
      "op": "SHL"
    },
    "2171": {
      "op": "SUB"
    },
    "2172": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5501
      ],
      "op": "AND",
      "path": "1"
    },
    "2173": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5501
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x18160DDD"
    },
    "2178": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2180": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2181": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2182": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "2187": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "AND",
      "path": "1"
    },
    "2188": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "2190": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "SHL",
      "path": "1"
    },
    "2191": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2192": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2193": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2195": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "ADD",
      "path": "1"
    },
    "2196": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2198": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2200": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2201": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2202": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2203": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "SUB",
      "path": "1"
    },
    "2204": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2205": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2206": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "GAS",
      "path": "1"
    },
    "2207": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "2208": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2209": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2210": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2211": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8B0"
    },
    "2214": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2215": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2216": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2218": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2219": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "2220": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2221": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2223": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2224": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2225": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "POP",
      "path": "1"
    },
    "2226": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "POP",
      "path": "1"
    },
    "2227": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "POP",
      "path": "1"
    },
    "2228": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "POP",
      "path": "1"
    },
    "2229": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2231": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2232": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2233": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2235": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "NOT",
      "path": "1"
    },
    "2236": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2238": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2239": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "ADD",
      "path": "1"
    },
    "2240": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "AND",
      "path": "1"
    },
    "2241": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2242": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "ADD",
      "path": "1"
    },
    "2243": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2244": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2246": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2247": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "POP",
      "path": "1"
    },
    "2248": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2249": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "ADD",
      "path": "1"
    },
    "2250": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2251": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8D4"
    },
    "2254": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2255": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2256": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "2259": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5452,
        5503
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2260": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5452,
        5503
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2261": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2263": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2265": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2266": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2267": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2268": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "2271": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "EXP",
      "path": "1"
    },
    "2272": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2273": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "DIV",
      "path": "1"
    },
    "2274": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2276": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2278": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2280": {
      "op": "SHL"
    },
    "2281": {
      "op": "SUB"
    },
    "2282": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5408,
        5433
      ],
      "op": "AND",
      "path": "1"
    },
    "2283": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2285": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2287": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2289": {
      "op": "SHL"
    },
    "2290": {
      "op": "SUB"
    },
    "2291": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5445
      ],
      "op": "AND",
      "path": "1"
    },
    "2292": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5445
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xF03D6672"
    },
    "2297": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2299": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2300": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2301": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "2306": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "AND",
      "path": "1"
    },
    "2307": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "2309": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "SHL",
      "path": "1"
    },
    "2310": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2311": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2312": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2314": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "ADD",
      "path": "1"
    },
    "2315": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2317": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2319": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2320": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2321": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2322": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "SUB",
      "path": "1"
    },
    "2323": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2324": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2325": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "GAS",
      "path": "1"
    },
    "2326": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "2327": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2328": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2329": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2330": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x927"
    },
    "2333": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2334": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2335": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2337": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2338": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "2339": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2340": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2342": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2343": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2344": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "POP",
      "path": "1"
    },
    "2345": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "POP",
      "path": "1"
    },
    "2346": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "POP",
      "path": "1"
    },
    "2347": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "POP",
      "path": "1"
    },
    "2348": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2350": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2351": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2352": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2354": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "NOT",
      "path": "1"
    },
    "2355": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2357": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2358": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "ADD",
      "path": "1"
    },
    "2359": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "AND",
      "path": "1"
    },
    "2360": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2361": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "ADD",
      "path": "1"
    },
    "2362": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2363": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2365": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2366": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "POP",
      "path": "1"
    },
    "2367": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2368": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "ADD",
      "path": "1"
    },
    "2369": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2370": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x94B"
    },
    "2373": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2374": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2375": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "2378": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5397,
        5447
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2379": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5397,
        5447
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2380": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5338,
        5355
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2382": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5338,
        5355
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2383": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5368,
        5393
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2385": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5368,
        5393
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2386": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2388": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2389": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2394": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2396": {
      "op": "SHL"
    },
    "2397": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2398": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2403": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2405": {
      "op": "SHL"
    },
    "2406": {
      "op": "SUB"
    },
    "2407": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5368,
        5393
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2408": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5368,
        5393
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2409": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5368,
        5393
      ],
      "op": "AND",
      "path": "1"
    },
    "2410": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2412": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2413": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "ADD",
      "path": "1"
    },
    "2414": {
      "op": "MSTORE"
    },
    "2415": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5338,
        5355
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2416": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5338,
        5355
      ],
      "op": "AND",
      "path": "1"
    },
    "2417": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5338,
        5355
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2418": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5367
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x70A08231"
    },
    "2423": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5367
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2424": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2426": {
      "op": "ADD"
    },
    "2427": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2429": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2431": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2432": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2433": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2434": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "SUB",
      "path": "1"
    },
    "2435": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2436": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2437": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "GAS",
      "path": "1"
    },
    "2438": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "2439": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2440": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2441": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2442": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x997"
    },
    "2445": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2446": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2447": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2449": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2450": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "2451": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2452": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2454": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2455": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2456": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "POP",
      "path": "1"
    },
    "2457": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "POP",
      "path": "1"
    },
    "2458": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "POP",
      "path": "1"
    },
    "2459": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "POP",
      "path": "1"
    },
    "2460": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2462": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2463": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2464": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2466": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "NOT",
      "path": "1"
    },
    "2467": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2469": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2470": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "ADD",
      "path": "1"
    },
    "2471": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "AND",
      "path": "1"
    },
    "2472": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2473": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "ADD",
      "path": "1"
    },
    "2474": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2475": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2477": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2478": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "POP",
      "path": "1"
    },
    "2479": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2480": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "ADD",
      "path": "1"
    },
    "2481": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2482": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9BB"
    },
    "2485": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2486": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2487": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "2490": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5323,
        5394
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2491": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5394
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2492": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5447
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9C5"
    },
    "2495": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5447
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2496": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5447
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2497": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5447
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1388"
    },
    "2500": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5323,
        5447
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2501": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5323,
        5447
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2502": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5449
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9D1"
    },
    "2505": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5449
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2506": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5319
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3CF"
    },
    "2509": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5449
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x139F"
    },
    "2512": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5316,
        5449
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2513": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5449
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2514": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5503
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9DB"
    },
    "2517": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5503
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2518": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5503
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2519": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5503
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13BE"
    },
    "2522": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5316,
        5503
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2523": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5316,
        5503
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2524": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5289,
        5505
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3EA"
    },
    "2527": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5289,
        5505
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2528": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5290,
        5310
      ],
      "op": "PUSH10",
      "path": "1",
      "value": "0x21E19E0C9BAB2400000"
    },
    "2539": {
      "fn": "ForgeAirdrop.perfect",
      "offset": [
        5289,
        5505
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13BE"
    },
    "2542": {
      "fn": "ForgeAirdrop.perfect",
      "jump": "i",
      "offset": [
        5289,
        5505
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2543": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2544": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3953,
        3978
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 20,
      "value": "0x2"
    },
    "2546": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3953,
        3978
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2547": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2549": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2550": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2555": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2557": {
      "op": "SHL"
    },
    "2558": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2559": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2560": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4050,
        4054
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "2561": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2563": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2564": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "ADD",
      "path": "1"
    },
    "2565": {
      "op": "MSTORE"
    },
    "2566": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3903,
        3915
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2568": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3903,
        3915
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2569": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2573": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2575": {
      "op": "SHL"
    },
    "2576": {
      "op": "SUB"
    },
    "2577": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3953,
        3978
      ],
      "op": "AND",
      "path": "1"
    },
    "2578": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3953,
        3978
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2579": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        3993
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xAFCF89AA"
    },
    "2584": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        3993
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2585": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3953,
        3978
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2586": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3953,
        3978
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2587": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4041
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x70A08231"
    },
    "2592": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4041
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2593": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2595": {
      "op": "ADD"
    },
    "2596": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2598": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2600": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2601": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2602": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2603": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "SUB",
      "path": "1"
    },
    "2604": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2605": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2606": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "GAS",
      "path": "1"
    },
    "2607": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "2608": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2609": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2610": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2611": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA40"
    },
    "2614": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2615": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2616": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2618": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2619": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "2620": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2621": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2623": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2624": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2625": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "POP",
      "path": "1"
    },
    "2626": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "POP",
      "path": "1"
    },
    "2627": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "POP",
      "path": "1"
    },
    "2628": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "POP",
      "path": "1"
    },
    "2629": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2631": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2632": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2633": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2635": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "NOT",
      "path": "1"
    },
    "2636": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2638": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2639": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "ADD",
      "path": "1"
    },
    "2640": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "AND",
      "path": "1"
    },
    "2641": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2642": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "ADD",
      "path": "1"
    },
    "2643": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2644": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2646": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2647": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "POP",
      "path": "1"
    },
    "2648": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2649": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "ADD",
      "path": "1"
    },
    "2650": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2651": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA64"
    },
    "2654": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2655": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2656": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "2659": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        3994,
        4056
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2660": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3994,
        4056
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2661": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2663": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2664": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2665": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "2670": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "AND",
      "path": "1"
    },
    "2671": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "2673": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "SHL",
      "path": "1"
    },
    "2674": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2675": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2676": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2678": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "ADD",
      "path": "1"
    },
    "2679": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA82"
    },
    "2682": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2683": {
      "op": "DUP2"
    },
    "2684": {
      "op": "MSTORE"
    },
    "2685": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2687": {
      "op": "ADD"
    },
    "2688": {
      "op": "SWAP1"
    },
    "2689": {
      "op": "JUMP"
    },
    "2690": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2691": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2693": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2695": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2696": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2697": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2698": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "SUB",
      "path": "1"
    },
    "2699": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2700": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2701": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "GAS",
      "path": "1"
    },
    "2702": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "2703": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2704": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2705": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2706": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA9F"
    },
    "2709": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2710": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2711": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2713": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2714": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "2715": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2716": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2718": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2719": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2720": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "POP",
      "path": "1"
    },
    "2721": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "POP",
      "path": "1"
    },
    "2722": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "POP",
      "path": "1"
    },
    "2723": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "POP",
      "path": "1"
    },
    "2724": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2726": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2727": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2728": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2730": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "NOT",
      "path": "1"
    },
    "2731": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2733": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2734": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "ADD",
      "path": "1"
    },
    "2735": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "AND",
      "path": "1"
    },
    "2736": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2737": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "ADD",
      "path": "1"
    },
    "2738": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2739": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2741": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2742": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "POP",
      "path": "1"
    },
    "2743": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2744": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "ADD",
      "path": "1"
    },
    "2745": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2746": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xAC3"
    },
    "2749": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2750": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2751": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "2754": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        3942,
        4057
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2755": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3942,
        4057
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2756": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3936,
        3939
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2757": {
      "branch": 53,
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3936,
        4057
      ],
      "op": "GT",
      "path": "1"
    },
    "2758": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB26"
    },
    "2761": {
      "branch": 53,
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2762": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2764": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2765": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2769": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2771": {
      "op": "SHL"
    },
    "2772": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2773": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2774": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2776": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2778": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2779": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "ADD",
      "path": "1"
    },
    "2780": {
      "op": "MSTORE"
    },
    "2781": {
      "op": "PUSH1",
      "value": "0x2C"
    },
    "2783": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2785": {
      "op": "DUP3"
    },
    "2786": {
      "op": "ADD"
    },
    "2787": {
      "op": "MSTORE"
    },
    "2788": {
      "op": "PUSH32",
      "value": "0x6D7573742062652067726561746572207468616E2070726576696F757320746F"
    },
    "2821": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2823": {
      "op": "DUP3"
    },
    "2824": {
      "op": "ADD"
    },
    "2825": {
      "op": "MSTORE"
    },
    "2826": {
      "op": "PUSH12",
      "value": "0x1D185B081D1BC81C995CD95D"
    },
    "2839": {
      "op": "PUSH1",
      "value": "0xA2"
    },
    "2841": {
      "op": "SHL"
    },
    "2842": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2844": {
      "op": "DUP3"
    },
    "2845": {
      "op": "ADD"
    },
    "2846": {
      "op": "MSTORE"
    },
    "2847": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2849": {
      "op": "ADD"
    },
    "2850": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "2853": {
      "op": "JUMP"
    },
    "2854": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3928,
        4106
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2855": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4131,
        4148
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 21,
      "value": "0x1"
    },
    "2857": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4131,
        4148
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2858": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2860": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2861": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2866": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2868": {
      "op": "SHL"
    },
    "2869": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2870": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2871": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4163,
        4173
      ],
      "op": "CALLER",
      "path": "1"
    },
    "2872": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2874": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2875": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "ADD",
      "path": "1"
    },
    "2876": {
      "op": "MSTORE"
    },
    "2877": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4183,
        4187
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "2878": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2880": {
      "op": "DUP3"
    },
    "2881": {
      "op": "ADD"
    },
    "2882": {
      "op": "MSTORE"
    },
    "2883": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2885": {
      "op": "DUP2"
    },
    "2886": {
      "op": "ADD"
    },
    "2887": {
      "op": "DUP5"
    },
    "2888": {
      "op": "SWAP1"
    },
    "2889": {
      "op": "MSTORE"
    },
    "2890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2894": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2896": {
      "op": "SHL"
    },
    "2897": {
      "op": "SUB"
    },
    "2898": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4131,
        4148
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2899": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4131,
        4148
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2900": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4131,
        4148
      ],
      "op": "AND",
      "path": "1"
    },
    "2901": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4131,
        4148
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2902": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4162
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x23B872DD"
    },
    "2907": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4162
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2908": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2910": {
      "op": "ADD"
    },
    "2911": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2913": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2915": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2916": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2917": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2918": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "SUB",
      "path": "1"
    },
    "2919": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2920": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2922": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP8",
      "path": "1"
    },
    "2923": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "GAS",
      "path": "1"
    },
    "2924": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "CALL",
      "path": "1"
    },
    "2925": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2926": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2927": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2928": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB7D"
    },
    "2931": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2932": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2933": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2935": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2936": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "2937": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2938": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2940": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2941": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2942": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "POP",
      "path": "1"
    },
    "2943": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "POP",
      "path": "1"
    },
    "2944": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "POP",
      "path": "1"
    },
    "2945": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "POP",
      "path": "1"
    },
    "2946": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2948": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2949": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2950": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2952": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "NOT",
      "path": "1"
    },
    "2953": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2955": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2956": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "ADD",
      "path": "1"
    },
    "2957": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "AND",
      "path": "1"
    },
    "2958": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2959": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "ADD",
      "path": "1"
    },
    "2960": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2961": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2963": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2964": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "POP",
      "path": "1"
    },
    "2965": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2966": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "ADD",
      "path": "1"
    },
    "2967": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2968": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBA1"
    },
    "2971": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2972": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2973": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1300"
    },
    "2976": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4124,
        4194
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2977": {
      "branch": 54,
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4124,
        4194
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2978": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBDD"
    },
    "2981": {
      "branch": 54,
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2982": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2984": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2985": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2989": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2991": {
      "op": "SHL"
    },
    "2992": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2993": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2994": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2996": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2998": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2999": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "ADD",
      "path": "1"
    },
    "3000": {
      "op": "MSTORE"
    },
    "3001": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "3003": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3005": {
      "op": "DUP3"
    },
    "3006": {
      "op": "ADD"
    },
    "3007": {
      "op": "MSTORE"
    },
    "3008": {
      "op": "PUSH13",
      "value": "0x1D1C985B9CD9995C8819985A5B"
    },
    "3022": {
      "op": "PUSH1",
      "value": "0x9A"
    },
    "3024": {
      "op": "SHL"
    },
    "3025": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3027": {
      "op": "DUP3"
    },
    "3028": {
      "op": "ADD"
    },
    "3029": {
      "op": "MSTORE"
    },
    "3030": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3032": {
      "op": "ADD"
    },
    "3033": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "3036": {
      "op": "JUMP"
    },
    "3037": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4116,
        4212
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3038": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4234,
        4249
      ],
      "op": "TIMESTAMP",
      "path": "1",
      "statement": 22
    },
    "3039": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4222,
        4231
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xB"
    },
    "3041": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4222,
        4249
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3042": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4266,
        4283
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 23,
      "value": "0x1"
    },
    "3044": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4266,
        4283
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3045": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4293,
        4318
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "3047": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4293,
        4318
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3048": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3050": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3051": {
      "op": "PUSH4",
      "value": "0x95EA7B3"
    },
    "3056": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3058": {
      "op": "SHL"
    },
    "3059": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3060": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3061": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3063": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3065": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3067": {
      "op": "SHL"
    },
    "3068": {
      "op": "SUB"
    },
    "3069": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4293,
        4318
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3070": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4293,
        4318
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3071": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4293,
        4318
      ],
      "op": "AND",
      "path": "1"
    },
    "3072": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3074": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3075": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "ADD",
      "path": "1"
    },
    "3076": {
      "op": "MSTORE"
    },
    "3077": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4320,
        4371
      ],
      "op": "PUSH22",
      "path": "1",
      "value": "0x2AC3A4EDBBFB8014E3BA83411E915E7FFFFFFFFFFFF"
    },
    "3100": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3102": {
      "op": "DUP3"
    },
    "3103": {
      "op": "ADD"
    },
    "3104": {
      "op": "MSTORE"
    },
    "3105": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4266,
        4283
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3106": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4266,
        4283
      ],
      "op": "AND",
      "path": "1"
    },
    "3107": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4266,
        4283
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3108": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4292
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x95EA7B3"
    },
    "3113": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4292
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3114": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3116": {
      "op": "ADD"
    },
    "3117": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3119": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3121": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3122": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3123": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3124": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "SUB",
      "path": "1"
    },
    "3125": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3126": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3128": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP8",
      "path": "1"
    },
    "3129": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "GAS",
      "path": "1"
    },
    "3130": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "CALL",
      "path": "1"
    },
    "3131": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3132": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3133": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3134": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC4B"
    },
    "3137": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3138": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3139": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3141": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3142": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "3143": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3144": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3146": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3147": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3148": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "POP",
      "path": "1"
    },
    "3149": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "POP",
      "path": "1"
    },
    "3150": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "POP",
      "path": "1"
    },
    "3151": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "POP",
      "path": "1"
    },
    "3152": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3154": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3155": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3156": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "3158": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "NOT",
      "path": "1"
    },
    "3159": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "3161": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3162": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "ADD",
      "path": "1"
    },
    "3163": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "AND",
      "path": "1"
    },
    "3164": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3165": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "ADD",
      "path": "1"
    },
    "3166": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3167": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3169": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3170": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "POP",
      "path": "1"
    },
    "3171": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3172": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "ADD",
      "path": "1"
    },
    "3173": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3174": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC6F"
    },
    "3177": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3178": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3179": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1300"
    },
    "3182": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4259,
        4372
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3183": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4259,
        4372
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3184": {
      "op": "POP"
    },
    "3185": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4393,
        4418
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 24,
      "value": "0x2"
    },
    "3187": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4393,
        4418
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3188": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3190": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3191": {
      "op": "PUSH4",
      "value": "0x5DC8121"
    },
    "3196": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "3198": {
      "op": "SHL"
    },
    "3199": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3200": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3201": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4437,
        4441
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "3202": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3204": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3205": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "ADD",
      "path": "1"
    },
    "3206": {
      "op": "MSTORE"
    },
    "3207": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3209": {
      "op": "DUP2"
    },
    "3210": {
      "op": "ADD"
    },
    "3211": {
      "op": "DUP5"
    },
    "3212": {
      "op": "SWAP1"
    },
    "3213": {
      "op": "MSTORE"
    },
    "3214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3216": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3218": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3220": {
      "op": "SHL"
    },
    "3221": {
      "op": "SUB"
    },
    "3222": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4393,
        4418
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3223": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4393,
        4418
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3224": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4393,
        4418
      ],
      "op": "AND",
      "path": "1"
    },
    "3225": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4393,
        4418
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3226": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4428
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x2EE40908"
    },
    "3231": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4428
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3232": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3234": {
      "op": "ADD"
    },
    "3235": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3237": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3239": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3240": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3241": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3242": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "SUB",
      "path": "1"
    },
    "3243": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3244": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3246": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP8",
      "path": "1"
    },
    "3247": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3248": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "3249": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3250": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3251": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3252": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCBC"
    },
    "3255": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3256": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3258": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3259": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3260": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3261": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "POP",
      "path": "1"
    },
    "3262": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "GAS",
      "path": "1"
    },
    "3263": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "CALL",
      "path": "1"
    },
    "3264": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3265": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3266": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3267": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCD0"
    },
    "3270": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3271": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3272": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3274": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3275": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "3276": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3277": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3279": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3280": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3281": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "POP",
      "path": "1"
    },
    "3282": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "POP",
      "path": "1"
    },
    "3283": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "POP",
      "path": "1"
    },
    "3284": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4382,
        4448
      ],
      "op": "POP",
      "path": "1"
    },
    "3285": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4458,
        4464
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3287": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4467,
        4476
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCDE"
    },
    "3290": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4467,
        4474
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x85A"
    },
    "3293": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4467,
        4476
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3294": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4467,
        4476
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3295": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4458,
        4476
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3296": {
      "op": "POP"
    },
    "3297": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4500,
        4506
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 25,
      "value": "0xCEB"
    },
    "3300": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4458,
        4476
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3301": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4504,
        4506
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA"
    },
    "3303": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4500,
        4506
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x139F"
    },
    "3306": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4500,
        4506
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3307": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4500,
        4506
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3308": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4494
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7"
    },
    "3310": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4495,
        4496
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3312": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3313": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3314": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3315": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "LT",
      "path": "1"
    },
    "3316": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCFF"
    },
    "3319": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3320": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCFF"
    },
    "3323": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "3326": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4486,
        4497
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3327": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3328": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3330": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3331": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3332": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3333": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3335": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3336": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3337": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3338": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4497
      ],
      "op": "ADD",
      "path": "1"
    },
    "3339": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4486,
        4506
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3340": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4530,
        4535
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 26,
      "value": "0xD16"
    },
    "3343": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4530,
        4531
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3344": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4534,
        4535
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "3346": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4530,
        4535
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x139F"
    },
    "3349": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4530,
        4535
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3350": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4530,
        4535
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3351": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4524
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7"
    },
    "3353": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4525,
        4526
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "3355": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3356": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3357": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3358": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "LT",
      "path": "1"
    },
    "3359": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD2A"
    },
    "3362": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3363": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD2A"
    },
    "3366": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "3369": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4516,
        4527
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3370": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3371": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3373": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3374": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3375": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3376": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3378": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3379": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3380": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3381": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4527
      ],
      "op": "ADD",
      "path": "1"
    },
    "3382": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4516,
        4535
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3383": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4559,
        4564
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 27,
      "value": "0xD41"
    },
    "3386": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4559,
        4560
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3387": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4563,
        4564
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "3389": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4559,
        4564
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x139F"
    },
    "3392": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4559,
        4564
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3393": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4559,
        4564
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3394": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4553
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x7"
    },
    "3396": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4554,
        4555
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "3398": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3399": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3400": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3401": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "LT",
      "path": "1"
    },
    "3402": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD55"
    },
    "3405": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3406": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD55"
    },
    "3409": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "3412": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "i",
      "offset": [
        4545,
        4556
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3413": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3414": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3416": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3417": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3418": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3419": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3421": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3422": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3423": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3424": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4556
      ],
      "op": "ADD",
      "path": "1"
    },
    "3425": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4545,
        4564
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3426": {
      "op": "POP"
    },
    "3427": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4582,
        4586
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 28,
      "value": "0x1"
    },
    "3429": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        4582,
        4586
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3430": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        3860,
        4593
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3431": {
      "op": "POP"
    },
    "3432": {
      "op": "POP"
    },
    "3433": {
      "fn": "ForgeAirdrop.deposit",
      "jump": "o",
      "offset": [
        3860,
        4593
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3434": {
      "offset": [
        2973,
        3005
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3435": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "3437": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3438": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3439": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3440": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3441": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "LT",
      "path": "1"
    },
    "3442": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x35D"
    },
    "3445": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3446": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3448": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3449": {
      "fn": "ForgeAirdrop.deposit",
      "offset": [
        2973,
        3005
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3450": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6183,
        6584
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3451": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6312,
        6326
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 29,
      "value": "0x4"
    },
    "3453": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6312,
        6326
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3454": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6339,
        6367
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3456": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6339,
        6367
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3457": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3459": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3461": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3463": {
      "op": "SHL"
    },
    "3464": {
      "op": "SUB"
    },
    "3465": {
      "op": "NOT"
    },
    "3466": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6356,
        6366
      ],
      "op": "CALLER",
      "path": "1"
    },
    "3467": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3469": {
      "op": "SHL"
    },
    "3470": {
      "op": "AND"
    },
    "3471": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6339,
        6367
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3473": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6339,
        6367
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3474": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6339,
        6367
      ],
      "op": "ADD",
      "path": "1"
    },
    "3475": {
      "op": "MSTORE"
    },
    "3476": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6280,
        6370
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDA1"
    },
    "3479": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6280,
        6370
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3480": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6299,
        6310
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3481": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6299,
        6310
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3482": {
      "op": "PUSH1",
      "value": "0x34"
    },
    "3484": {
      "op": "ADD"
    },
    "3485": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6339,
        6367
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E0"
    },
    "3488": {
      "op": "JUMP"
    },
    "3489": {
      "branch": 55,
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6280,
        6370
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3490": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDBD"
    },
    "3493": {
      "branch": 55,
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3494": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3496": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3497": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3501": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3503": {
      "op": "SHL"
    },
    "3504": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3505": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3506": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3508": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "ADD",
      "path": "1"
    },
    "3509": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "3512": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3513": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1322"
    },
    "3516": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "jump": "i",
      "offset": [
        6271,
        6389
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3517": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6271,
        6389
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3518": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6419,
        6429
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 30
    },
    "3519": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3521": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3522": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3523": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3524": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6418
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x9"
    },
    "3526": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3528": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3529": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3531": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3532": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3533": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3534": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "3536": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6430
      ],
      "op": "AND",
      "path": "1"
    },
    "3537": {
      "branch": 56,
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6408,
        6439
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3538": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDED"
    },
    "3541": {
      "branch": 56,
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3542": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3544": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3545": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3549": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3551": {
      "op": "SHL"
    },
    "3552": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3553": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3554": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3556": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "ADD",
      "path": "1"
    },
    "3557": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "3560": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3561": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1349"
    },
    "3564": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "jump": "i",
      "offset": [
        6400,
        6459
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3565": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6400,
        6459
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3566": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6481,
        6491
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 31
    },
    "3567": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3569": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3570": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3571": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3572": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6480
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x9"
    },
    "3574": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3576": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3577": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3579": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3580": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6492
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3581": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3582": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3583": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3585": {
      "op": "NOT"
    },
    "3586": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "AND",
      "path": "1"
    },
    "3587": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6493,
        6497
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "3589": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3590": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3591": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "OR",
      "path": "1"
    },
    "3592": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3593": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3594": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6470,
        6497
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3595": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6523,
        6540
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 32
    },
    "3596": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6523,
        6540
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3599": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3601": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3603": {
      "op": "SHL"
    },
    "3604": {
      "op": "SUB"
    },
    "3605": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6523,
        6540
      ],
      "op": "AND",
      "path": "1"
    },
    "3606": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6523,
        6540
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3607": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6516,
        6550
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xA9059CBB"
    },
    "3612": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6516,
        6550
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3613": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6564,
        6576
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x73D"
    },
    "3616": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6564,
        6576
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3617": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "offset": [
        6564,
        6573
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7B0"
    },
    "3620": {
      "fn": "ForgeAirdrop.mintWithProofTop",
      "jump": "i",
      "offset": [
        6564,
        6576
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3621": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3622": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7139,
        7177
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 33,
      "value": "0xE30"
    },
    "3625": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7146,
        7157
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3626": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7159,
        7169
      ],
      "op": "CALLER",
      "path": "1"
    },
    "3627": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7171,
        7176
      ],
      "op": "DUP5",
      "path": "1"
    },
    "3628": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7139,
        7145
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28F"
    },
    "3631": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7139,
        7177
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3632": {
      "branch": 57,
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7139,
        7177
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3633": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE4C"
    },
    "3636": {
      "branch": 57,
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3637": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3639": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3640": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3644": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3646": {
      "op": "SHL"
    },
    "3647": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3648": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3649": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3651": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "ADD",
      "path": "1"
    },
    "3652": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "3655": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3656": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1322"
    },
    "3659": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7130,
        7197
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3660": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7130,
        7197
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3661": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7227,
        7237
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 34
    },
    "3662": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3664": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3665": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3666": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3667": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7226
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x9"
    },
    "3669": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3671": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3672": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3674": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3675": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3676": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3677": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "3679": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7238
      ],
      "op": "AND",
      "path": "1"
    },
    "3680": {
      "branch": 58,
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7216,
        7247
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3681": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE7C"
    },
    "3684": {
      "branch": 58,
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3685": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3687": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3688": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3692": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3694": {
      "op": "SHL"
    },
    "3695": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3696": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3697": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3699": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "ADD",
      "path": "1"
    },
    "3700": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "3703": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3704": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1349"
    },
    "3707": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7208,
        7267
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3708": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7208,
        7267
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3709": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7289,
        7299
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 35
    },
    "3710": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3712": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3713": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3714": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3715": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7288
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x9"
    },
    "3717": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3719": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3720": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3722": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3723": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7300
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3724": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7305
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3725": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7305
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3726": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3728": {
      "op": "NOT"
    },
    "3729": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7305
      ],
      "op": "AND",
      "path": "1"
    },
    "3730": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7301,
        7305
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "3732": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7305
      ],
      "op": "OR",
      "path": "1"
    },
    "3733": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7305
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3734": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7278,
        7305
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3735": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7335,
        7360
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 36,
      "value": "0x2"
    },
    "3737": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7335,
        7360
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3738": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3740": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3742": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3744": {
      "op": "SHL"
    },
    "3745": {
      "op": "SUB"
    },
    "3746": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7335,
        7360
      ],
      "op": "AND",
      "path": "1"
    },
    "3747": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7370
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x441A3E70"
    },
    "3752": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7371,
        7387
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEB0"
    },
    "3755": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7381,
        7386
      ],
      "op": "DUP5",
      "path": "1"
    },
    "3756": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7371,
        7380
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7B0"
    },
    "3759": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7371,
        7387
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3760": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7371,
        7387
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3761": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7389,
        7396
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3762": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3764": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3765": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3766": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "3771": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "AND",
      "path": "1"
    },
    "3772": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "3774": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "SHL",
      "path": "1"
    },
    "3775": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3776": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3777": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3779": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "ADD",
      "path": "1"
    },
    "3780": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xED7"
    },
    "3783": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3784": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3785": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3786": {
      "op": "SWAP2"
    },
    "3787": {
      "op": "DUP3"
    },
    "3788": {
      "op": "MSTORE"
    },
    "3789": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3791": {
      "op": "DUP3"
    },
    "3792": {
      "op": "ADD"
    },
    "3793": {
      "op": "MSTORE"
    },
    "3794": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3796": {
      "op": "ADD"
    },
    "3797": {
      "op": "SWAP1"
    },
    "3798": {
      "op": "JUMP"
    },
    "3799": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3800": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3802": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3804": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3805": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3806": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3807": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "SUB",
      "path": "1"
    },
    "3808": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3809": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3811": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP8",
      "path": "1"
    },
    "3812": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3813": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "3814": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3815": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3816": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3817": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEF1"
    },
    "3820": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3821": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3823": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3824": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3825": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3826": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "POP",
      "path": "1"
    },
    "3827": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "GAS",
      "path": "1"
    },
    "3828": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "CALL",
      "path": "1"
    },
    "3829": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3830": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3831": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3832": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF05"
    },
    "3835": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3836": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3837": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3839": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3840": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "3841": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3842": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3844": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3845": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7324,
        7397
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3846": {
      "op": "POP"
    },
    "3847": {
      "op": "POP"
    },
    "3848": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 37,
      "value": "0x1"
    },
    "3850": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3851": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3853": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3854": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "3859": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3861": {
      "op": "SHL"
    },
    "3862": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3863": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3864": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7506,
        7510
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "3865": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3867": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3868": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "ADD",
      "path": "1"
    },
    "3869": {
      "op": "MSTORE"
    },
    "3870": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3872": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3874": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3876": {
      "op": "SHL"
    },
    "3877": {
      "op": "SUB"
    },
    "3878": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3879": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3880": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "AND",
      "path": "1"
    },
    "3881": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3882": {
      "op": "POP"
    },
    "3883": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7449
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xA9059CBB"
    },
    "3888": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7449
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3889": {
      "op": "POP"
    },
    "3890": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7450,
        7460
      ],
      "op": "CALLER",
      "path": "1"
    },
    "3891": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7450,
        7460
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3892": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3893": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7422,
        7439
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3894": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7497
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x70A08231"
    },
    "3899": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7497
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3900": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3902": {
      "op": "ADD"
    },
    "3903": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3905": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3907": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3908": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3909": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3910": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "SUB",
      "path": "1"
    },
    "3911": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3912": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP7",
      "path": "1"
    },
    "3913": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "GAS",
      "path": "1"
    },
    "3914": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "3915": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3916": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3917": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3918": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF5B"
    },
    "3921": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3922": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3923": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3925": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3926": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "3927": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3928": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3930": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "REVERT",
      "path": "1"
    },
    "3931": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3932": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "POP",
      "path": "1"
    },
    "3933": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "POP",
      "path": "1"
    },
    "3934": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "POP",
      "path": "1"
    },
    "3935": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "POP",
      "path": "1"
    },
    "3936": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3938": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3939": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "3940": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "3942": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "NOT",
      "path": "1"
    },
    "3943": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "3945": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3946": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "ADD",
      "path": "1"
    },
    "3947": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "AND",
      "path": "1"
    },
    "3948": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3949": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "ADD",
      "path": "1"
    },
    "3950": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3951": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3953": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3954": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "POP",
      "path": "1"
    },
    "3955": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3956": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "ADD",
      "path": "1"
    },
    "3957": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3958": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF7F"
    },
    "3961": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3962": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3963": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E7"
    },
    "3966": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7462,
        7512
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3967": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7462,
        7512
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3968": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3970": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3971": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3973": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3975": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3977": {
      "op": "SHL"
    },
    "3978": {
      "op": "SUB"
    },
    "3979": {
      "op": "NOT"
    },
    "3980": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "3982": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP6",
      "path": "1"
    },
    "3983": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3984": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "SHL",
      "path": "1"
    },
    "3985": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "AND",
      "path": "1"
    },
    "3986": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3987": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3988": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3990": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3992": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3994": {
      "op": "SHL"
    },
    "3995": {
      "op": "SUB"
    },
    "3996": {
      "op": "SWAP1"
    },
    "3997": {
      "op": "SWAP3"
    },
    "3998": {
      "op": "AND"
    },
    "3999": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4001": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4002": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "ADD",
      "path": "1"
    },
    "4003": {
      "op": "MSTORE"
    },
    "4004": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4006": {
      "op": "DUP3"
    },
    "4007": {
      "op": "ADD"
    },
    "4008": {
      "op": "MSTORE"
    },
    "4009": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4011": {
      "op": "ADD"
    },
    "4012": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4014": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4016": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4017": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4018": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4019": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "SUB",
      "path": "1"
    },
    "4020": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4021": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4023": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP8",
      "path": "1"
    },
    "4024": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "GAS",
      "path": "1"
    },
    "4025": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "CALL",
      "path": "1"
    },
    "4026": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4027": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4028": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4029": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xFCA"
    },
    "4032": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4033": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "4034": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4036": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4037": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "4038": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "4039": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4041": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "REVERT",
      "path": "1"
    },
    "4042": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4043": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "POP",
      "path": "1"
    },
    "4044": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "POP",
      "path": "1"
    },
    "4045": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "POP",
      "path": "1"
    },
    "4046": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "POP",
      "path": "1"
    },
    "4047": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4049": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4050": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "4051": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "4053": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "NOT",
      "path": "1"
    },
    "4054": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "4056": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4057": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "ADD",
      "path": "1"
    },
    "4058": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "AND",
      "path": "1"
    },
    "4059": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4060": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "ADD",
      "path": "1"
    },
    "4061": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4062": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4064": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4065": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "POP",
      "path": "1"
    },
    "4066": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4067": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "ADD",
      "path": "1"
    },
    "4068": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4069": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xFEE"
    },
    "4072": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4073": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4074": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1300"
    },
    "4077": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "i",
      "offset": [
        7415,
        7513
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4078": {
      "branch": 59,
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7415,
        7513
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4079": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x103A"
    },
    "4082": {
      "branch": 59,
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4083": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4085": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4086": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4090": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4092": {
      "op": "SHL"
    },
    "4093": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4094": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4095": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4097": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4099": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4100": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "ADD",
      "path": "1"
    },
    "4101": {
      "op": "MSTORE"
    },
    "4102": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "4104": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4106": {
      "op": "DUP3"
    },
    "4107": {
      "op": "ADD"
    },
    "4108": {
      "op": "MSTORE"
    },
    "4109": {
      "op": "PUSH32",
      "value": "0x636F6E7472616374206D6179206265206F7574206F662066756E647300000000"
    },
    "4142": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4144": {
      "op": "DUP3"
    },
    "4145": {
      "op": "ADD"
    },
    "4146": {
      "op": "MSTORE"
    },
    "4147": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4149": {
      "op": "ADD"
    },
    "4150": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58D"
    },
    "4153": {
      "op": "JUMP"
    },
    "4154": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7407,
        7546
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4155": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "POP",
      "path": "1"
    },
    "4156": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "POP",
      "path": "1"
    },
    "4157": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "offset": [
        7028,
        7553
      ],
      "op": "POP",
      "path": "1"
    },
    "4158": {
      "fn": "ForgeAirdrop.mintWithProofALL",
      "jump": "o",
      "offset": [
        7028,
        7553
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4159": {
      "fn": "MerkleProof.verify",
      "offset": [
        752,
        1572
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4160": {
      "fn": "MerkleProof.verify",
      "offset": [
        873,
        877
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4162": {
      "fn": "MerkleProof.verify",
      "offset": [
        912,
        916
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4163": {
      "fn": "MerkleProof.verify",
      "offset": [
        873,
        877
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4164": {
      "fn": "MerkleProof.verify",
      "offset": [
        927,
        1453
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4165": {
      "fn": "MerkleProof.verify",
      "offset": [
        951,
        956
      ],
      "op": "DUP6",
      "path": "1"
    },
    "4166": {
      "fn": "MerkleProof.verify",
      "offset": [
        951,
        963
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4167": {
      "fn": "MerkleProof.verify",
      "offset": [
        947,
        948
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4168": {
      "fn": "MerkleProof.verify",
      "offset": [
        947,
        963
      ],
      "op": "LT",
      "path": "1"
    },
    "4169": {
      "fn": "MerkleProof.verify",
      "offset": [
        927,
        1453
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4170": {
      "fn": "MerkleProof.verify",
      "offset": [
        927,
        1453
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10E3"
    },
    "4173": {
      "fn": "MerkleProof.verify",
      "offset": [
        927,
        1453
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4174": {
      "fn": "MerkleProof.verify",
      "offset": [
        984,
        1004
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4176": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1012
      ],
      "op": "DUP7",
      "path": "1"
    },
    "4177": {
      "fn": "MerkleProof.verify",
      "offset": [
        1013,
        1014
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4178": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4179": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4180": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4181": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "LT",
      "path": "1"
    },
    "4182": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1061"
    },
    "4185": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4186": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1061"
    },
    "4189": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D1"
    },
    "4192": {
      "fn": "MerkleProof.verify",
      "jump": "i",
      "offset": [
        1007,
        1015
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4193": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4194": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4196": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "MUL",
      "path": "1"
    },
    "4197": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4199": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "ADD",
      "path": "1"
    },
    "4200": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "ADD",
      "path": "1"
    },
    "4201": {
      "fn": "MerkleProof.verify",
      "offset": [
        1007,
        1015
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4202": {
      "fn": "MerkleProof.verify",
      "offset": [
        984,
        1015
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4203": {
      "fn": "MerkleProof.verify",
      "offset": [
        984,
        1015
      ],
      "op": "POP",
      "path": "1"
    },
    "4204": {
      "fn": "MerkleProof.verify",
      "offset": [
        1061,
        1073
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4205": {
      "fn": "MerkleProof.verify",
      "offset": [
        1045,
        1057
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4206": {
      "branch": 60,
      "fn": "MerkleProof.verify",
      "offset": [
        1045,
        1073
      ],
      "op": "GT",
      "path": "1"
    },
    "4207": {
      "fn": "MerkleProof.verify",
      "offset": [
        1041,
        1443
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10A3"
    },
    "4210": {
      "branch": 60,
      "fn": "MerkleProof.verify",
      "offset": [
        1041,
        1443
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4211": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 38,
      "value": "0x40"
    },
    "4213": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4214": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4215": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4217": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4218": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "ADD",
      "path": "1"
    },
    "4219": {
      "op": "DUP6"
    },
    "4220": {
      "op": "SWAP1"
    },
    "4221": {
      "op": "MSTORE"
    },
    "4222": {
      "op": "SWAP1"
    },
    "4223": {
      "op": "DUP2"
    },
    "4224": {
      "op": "ADD"
    },
    "4225": {
      "op": "DUP3"
    },
    "4226": {
      "op": "SWAP1"
    },
    "4227": {
      "op": "MSTORE"
    },
    "4228": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4230": {
      "op": "ADD"
    },
    "4231": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4233": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4234": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4236": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4237": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4238": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "SUB",
      "path": "1"
    },
    "4239": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "SUB",
      "path": "1"
    },
    "4240": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4241": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4242": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4243": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4245": {
      "fn": "MerkleProof.verify",
      "offset": [
        1196,
        1240
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4246": {
      "fn": "MerkleProof.verify",
      "offset": [
        1186,
        1241
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4247": {
      "fn": "MerkleProof.verify",
      "offset": [
        1186,
        1241
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4248": {
      "fn": "MerkleProof.verify",
      "offset": [
        1186,
        1241
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4249": {
      "fn": "MerkleProof.verify",
      "offset": [
        1186,
        1241
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4251": {
      "fn": "MerkleProof.verify",
      "offset": [
        1186,
        1241
      ],
      "op": "ADD",
      "path": "1"
    },
    "4252": {
      "fn": "MerkleProof.verify",
      "offset": [
        1186,
        1241
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "4253": {
      "fn": "MerkleProof.verify",
      "offset": [
        1171,
        1241
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4254": {
      "fn": "MerkleProof.verify",
      "offset": [
        1171,
        1241
      ],
      "op": "POP",
      "path": "1"
    },
    "4255": {
      "fn": "MerkleProof.verify",
      "offset": [
        1041,
        1443
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10D0"
    },
    "4258": {
      "fn": "MerkleProof.verify",
      "offset": [
        1041,
        1443
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4259": {
      "fn": "MerkleProof.verify",
      "offset": [
        1041,
        1443
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4260": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 39,
      "value": "0x40"
    },
    "4262": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4263": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4264": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4266": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4267": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "ADD",
      "path": "1"
    },
    "4268": {
      "op": "DUP4"
    },
    "4269": {
      "op": "SWAP1"
    },
    "4270": {
      "op": "MSTORE"
    },
    "4271": {
      "op": "SWAP1"
    },
    "4272": {
      "op": "DUP2"
    },
    "4273": {
      "op": "ADD"
    },
    "4274": {
      "op": "DUP5"
    },
    "4275": {
      "op": "SWAP1"
    },
    "4276": {
      "op": "MSTORE"
    },
    "4277": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4279": {
      "op": "ADD"
    },
    "4280": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4282": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4283": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4285": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4286": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4287": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "SUB",
      "path": "1"
    },
    "4288": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "SUB",
      "path": "1"
    },
    "4289": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4290": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4291": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4292": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4294": {
      "fn": "MerkleProof.verify",
      "offset": [
        1383,
        1427
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4295": {
      "fn": "MerkleProof.verify",
      "offset": [
        1373,
        1428
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4296": {
      "fn": "MerkleProof.verify",
      "offset": [
        1373,
        1428
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4297": {
      "fn": "MerkleProof.verify",
      "offset": [
        1373,
        1428
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4298": {
      "fn": "MerkleProof.verify",
      "offset": [
        1373,
        1428
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4300": {
      "fn": "MerkleProof.verify",
      "offset": [
        1373,
        1428
      ],
      "op": "ADD",
      "path": "1"
    },
    "4301": {
      "fn": "MerkleProof.verify",
      "offset": [
        1373,
        1428
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "4302": {
      "fn": "MerkleProof.verify",
      "offset": [
        1358,
        1428
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4303": {
      "fn": "MerkleProof.verify",
      "offset": [
        1358,
        1428
      ],
      "op": "POP",
      "path": "1"
    },
    "4304": {
      "fn": "MerkleProof.verify",
      "offset": [
        1041,
        1443
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4305": {
      "op": "POP"
    },
    "4306": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 40
    },
    "4307": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10DB"
    },
    "4310": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4311": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13E0"
    },
    "4314": {
      "fn": "MerkleProof.verify",
      "jump": "i",
      "offset": [
        965,
        968
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4315": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4316": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "4317": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "POP",
      "path": "1"
    },
    "4318": {
      "fn": "MerkleProof.verify",
      "offset": [
        965,
        968
      ],
      "op": "POP",
      "path": "1"
    },
    "4319": {
      "fn": "MerkleProof.verify",
      "offset": [
        927,
        1453
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1044"
    },
    "4322": {
      "fn": "MerkleProof.verify",
      "offset": [
        927,
        1453
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4323": {
      "fn": "MerkleProof.verify",
      "offset": [
        927,
        1453
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4324": {
      "op": "POP"
    },
    "4325": {
      "fn": "MerkleProof.verify",
      "offset": [
        1545,
        1565
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 41
    },
    "4326": {
      "fn": "MerkleProof.verify",
      "offset": [
        1545,
        1565
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4327": {
      "fn": "MerkleProof.verify",
      "offset": [
        1545,
        1565
      ],
      "op": "EQ",
      "path": "1"
    },
    "4328": {
      "fn": "MerkleProof.verify",
      "offset": [
        1545,
        1565
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "4329": {
      "fn": "MerkleProof.verify",
      "offset": [
        752,
        1572
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4330": {
      "op": "POP"
    },
    "4331": {
      "op": "POP"
    },
    "4332": {
      "op": "POP"
    },
    "4333": {
      "fn": "MerkleProof.verify",
      "jump": "o",
      "offset": [
        752,
        1572
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4334": {
      "op": "JUMPDEST"
    },
    "4335": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4340": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4342": {
      "op": "SHL"
    },
    "4343": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4345": {
      "op": "MSTORE"
    },
    "4346": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "4348": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4350": {
      "op": "MSTORE"
    },
    "4351": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4353": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4355": {
      "op": "REVERT"
    },
    "4356": {
      "op": "JUMPDEST"
    },
    "4357": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4359": {
      "op": "DUP3"
    },
    "4360": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4362": {
      "op": "DUP4"
    },
    "4363": {
      "op": "ADD"
    },
    "4364": {
      "op": "SLT"
    },
    "4365": {
      "op": "PUSH2",
      "value": "0x1115"
    },
    "4368": {
      "op": "JUMPI"
    },
    "4369": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4371": {
      "op": "DUP1"
    },
    "4372": {
      "op": "REVERT"
    },
    "4373": {
      "op": "JUMPDEST"
    },
    "4374": {
      "op": "DUP2"
    },
    "4375": {
      "op": "CALLDATALOAD"
    },
    "4376": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4378": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4387": {
      "op": "DUP1"
    },
    "4388": {
      "op": "DUP4"
    },
    "4389": {
      "op": "GT"
    },
    "4390": {
      "op": "ISZERO"
    },
    "4391": {
      "op": "PUSH2",
      "value": "0x1132"
    },
    "4394": {
      "op": "JUMPI"
    },
    "4395": {
      "op": "PUSH2",
      "value": "0x1132"
    },
    "4398": {
      "op": "PUSH2",
      "value": "0x10EE"
    },
    "4401": {
      "jump": "i",
      "op": "JUMP"
    },
    "4402": {
      "op": "JUMPDEST"
    },
    "4403": {
      "op": "DUP3"
    },
    "4404": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "4406": {
      "op": "SHL"
    },
    "4407": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4409": {
      "op": "MLOAD"
    },
    "4410": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4412": {
      "op": "NOT"
    },
    "4413": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "4415": {
      "op": "DUP4"
    },
    "4416": {
      "op": "ADD"
    },
    "4417": {
      "op": "AND"
    },
    "4418": {
      "op": "DUP2"
    },
    "4419": {
      "op": "ADD"
    },
    "4420": {
      "op": "DUP2"
    },
    "4421": {
      "op": "DUP2"
    },
    "4422": {
      "op": "LT"
    },
    "4423": {
      "op": "DUP5"
    },
    "4424": {
      "op": "DUP3"
    },
    "4425": {
      "op": "GT"
    },
    "4426": {
      "op": "OR"
    },
    "4427": {
      "op": "ISZERO"
    },
    "4428": {
      "op": "PUSH2",
      "value": "0x1157"
    },
    "4431": {
      "op": "JUMPI"
    },
    "4432": {
      "op": "PUSH2",
      "value": "0x1157"
    },
    "4435": {
      "op": "PUSH2",
      "value": "0x10EE"
    },
    "4438": {
      "jump": "i",
      "op": "JUMP"
    },
    "4439": {
      "op": "JUMPDEST"
    },
    "4440": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4442": {
      "op": "MSTORE"
    },
    "4443": {
      "op": "SWAP4"
    },
    "4444": {
      "op": "DUP5"
    },
    "4445": {
      "op": "MSTORE"
    },
    "4446": {
      "op": "DUP6"
    },
    "4447": {
      "op": "DUP2"
    },
    "4448": {
      "op": "ADD"
    },
    "4449": {
      "op": "DUP4"
    },
    "4450": {
      "op": "ADD"
    },
    "4451": {
      "op": "SWAP4"
    },
    "4452": {
      "op": "DUP4"
    },
    "4453": {
      "op": "DUP2"
    },
    "4454": {
      "op": "ADD"
    },
    "4455": {
      "op": "SWAP3"
    },
    "4456": {
      "op": "POP"
    },
    "4457": {
      "op": "DUP8"
    },
    "4458": {
      "op": "DUP6"
    },
    "4459": {
      "op": "GT"
    },
    "4460": {
      "op": "ISZERO"
    },
    "4461": {
      "op": "PUSH2",
      "value": "0x1175"
    },
    "4464": {
      "op": "JUMPI"
    },
    "4465": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4467": {
      "op": "DUP1"
    },
    "4468": {
      "op": "REVERT"
    },
    "4469": {
      "op": "JUMPDEST"
    },
    "4470": {
      "op": "DUP4"
    },
    "4471": {
      "op": "DUP8"
    },
    "4472": {
      "op": "ADD"
    },
    "4473": {
      "op": "SWAP2"
    },
    "4474": {
      "op": "POP"
    },
    "4475": {
      "op": "JUMPDEST"
    },
    "4476": {
      "op": "DUP5"
    },
    "4477": {
      "op": "DUP3"
    },
    "4478": {
      "op": "LT"
    },
    "4479": {
      "op": "ISZERO"
    },
    "4480": {
      "op": "PUSH2",
      "value": "0x1194"
    },
    "4483": {
      "op": "JUMPI"
    },
    "4484": {
      "op": "DUP2"
    },
    "4485": {
      "op": "CALLDATALOAD"
    },
    "4486": {
      "op": "DUP4"
    },
    "4487": {
      "op": "MSTORE"
    },
    "4488": {
      "op": "SWAP2"
    },
    "4489": {
      "op": "DUP4"
    },
    "4490": {
      "op": "ADD"
    },
    "4491": {
      "op": "SWAP2"
    },
    "4492": {
      "op": "SWAP1"
    },
    "4493": {
      "op": "DUP4"
    },
    "4494": {
      "op": "ADD"
    },
    "4495": {
      "op": "SWAP1"
    },
    "4496": {
      "op": "PUSH2",
      "value": "0x117B"
    },
    "4499": {
      "op": "JUMP"
    },
    "4500": {
      "op": "JUMPDEST"
    },
    "4501": {
      "op": "SWAP8"
    },
    "4502": {
      "op": "SWAP7"
    },
    "4503": {
      "op": "POP"
    },
    "4504": {
      "op": "POP"
    },
    "4505": {
      "op": "POP"
    },
    "4506": {
      "op": "POP"
    },
    "4507": {
      "op": "POP"
    },
    "4508": {
      "op": "POP"
    },
    "4509": {
      "op": "POP"
    },
    "4510": {
      "jump": "o",
      "op": "JUMP"
    },
    "4511": {
      "op": "JUMPDEST"
    },
    "4512": {
      "op": "DUP1"
    },
    "4513": {
      "op": "CALLDATALOAD"
    },
    "4514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4516": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4518": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4520": {
      "op": "SHL"
    },
    "4521": {
      "op": "SUB"
    },
    "4522": {
      "op": "DUP2"
    },
    "4523": {
      "op": "AND"
    },
    "4524": {
      "op": "DUP2"
    },
    "4525": {
      "op": "EQ"
    },
    "4526": {
      "op": "PUSH2",
      "value": "0x11B6"
    },
    "4529": {
      "op": "JUMPI"
    },
    "4530": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4532": {
      "op": "DUP1"
    },
    "4533": {
      "op": "REVERT"
    },
    "4534": {
      "op": "JUMPDEST"
    },
    "4535": {
      "op": "SWAP2"
    },
    "4536": {
      "op": "SWAP1"
    },
    "4537": {
      "op": "POP"
    },
    "4538": {
      "jump": "o",
      "op": "JUMP"
    },
    "4539": {
      "op": "JUMPDEST"
    },
    "4540": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4542": {
      "op": "DUP1"
    },
    "4543": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4545": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4547": {
      "op": "DUP5"
    },
    "4548": {
      "op": "DUP7"
    },
    "4549": {
      "op": "SUB"
    },
    "4550": {
      "op": "SLT"
    },
    "4551": {
      "op": "ISZERO"
    },
    "4552": {
      "op": "PUSH2",
      "value": "0x11D0"
    },
    "4555": {
      "op": "JUMPI"
    },
    "4556": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4558": {
      "op": "DUP1"
    },
    "4559": {
      "op": "REVERT"
    },
    "4560": {
      "op": "JUMPDEST"
    },
    "4561": {
      "op": "DUP4"
    },
    "4562": {
      "op": "CALLDATALOAD"
    },
    "4563": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4572": {
      "op": "DUP2"
    },
    "4573": {
      "op": "GT"
    },
    "4574": {
      "op": "ISZERO"
    },
    "4575": {
      "op": "PUSH2",
      "value": "0x11E7"
    },
    "4578": {
      "op": "JUMPI"
    },
    "4579": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4581": {
      "op": "DUP1"
    },
    "4582": {
      "op": "REVERT"
    },
    "4583": {
      "op": "JUMPDEST"
    },
    "4584": {
      "op": "PUSH2",
      "value": "0x11F3"
    },
    "4587": {
      "op": "DUP7"
    },
    "4588": {
      "op": "DUP3"
    },
    "4589": {
      "op": "DUP8"
    },
    "4590": {
      "op": "ADD"
    },
    "4591": {
      "op": "PUSH2",
      "value": "0x1104"
    },
    "4594": {
      "jump": "i",
      "op": "JUMP"
    },
    "4595": {
      "op": "JUMPDEST"
    },
    "4596": {
      "op": "SWAP4"
    },
    "4597": {
      "op": "POP"
    },
    "4598": {
      "op": "POP"
    },
    "4599": {
      "op": "PUSH2",
      "value": "0x1202"
    },
    "4602": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4604": {
      "op": "DUP6"
    },
    "4605": {
      "op": "ADD"
    },
    "4606": {
      "op": "PUSH2",
      "value": "0x119F"
    },
    "4609": {
      "jump": "i",
      "op": "JUMP"
    },
    "4610": {
      "op": "JUMPDEST"
    },
    "4611": {
      "op": "SWAP2"
    },
    "4612": {
      "op": "POP"
    },
    "4613": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4615": {
      "op": "DUP5"
    },
    "4616": {
      "op": "ADD"
    },
    "4617": {
      "op": "CALLDATALOAD"
    },
    "4618": {
      "op": "SWAP1"
    },
    "4619": {
      "op": "POP"
    },
    "4620": {
      "op": "SWAP3"
    },
    "4621": {
      "op": "POP"
    },
    "4622": {
      "op": "SWAP3"
    },
    "4623": {
      "op": "POP"
    },
    "4624": {
      "op": "SWAP3"
    },
    "4625": {
      "jump": "o",
      "op": "JUMP"
    },
    "4626": {
      "op": "JUMPDEST"
    },
    "4627": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4629": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4631": {
      "op": "DUP3"
    },
    "4632": {
      "op": "DUP5"
    },
    "4633": {
      "op": "SUB"
    },
    "4634": {
      "op": "SLT"
    },
    "4635": {
      "op": "ISZERO"
    },
    "4636": {
      "op": "PUSH2",
      "value": "0x1224"
    },
    "4639": {
      "op": "JUMPI"
    },
    "4640": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4642": {
      "op": "DUP1"
    },
    "4643": {
      "op": "REVERT"
    },
    "4644": {
      "op": "JUMPDEST"
    },
    "4645": {
      "op": "POP"
    },
    "4646": {
      "op": "CALLDATALOAD"
    },
    "4647": {
      "op": "SWAP2"
    },
    "4648": {
      "op": "SWAP1"
    },
    "4649": {
      "op": "POP"
    },
    "4650": {
      "jump": "o",
      "op": "JUMP"
    },
    "4651": {
      "op": "JUMPDEST"
    },
    "4652": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4654": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4656": {
      "op": "DUP3"
    },
    "4657": {
      "op": "DUP5"
    },
    "4658": {
      "op": "SUB"
    },
    "4659": {
      "op": "SLT"
    },
    "4660": {
      "op": "ISZERO"
    },
    "4661": {
      "op": "PUSH2",
      "value": "0x123D"
    },
    "4664": {
      "op": "JUMPI"
    },
    "4665": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4667": {
      "op": "DUP1"
    },
    "4668": {
      "op": "REVERT"
    },
    "4669": {
      "op": "JUMPDEST"
    },
    "4670": {
      "op": "PUSH2",
      "value": "0x346"
    },
    "4673": {
      "op": "DUP3"
    },
    "4674": {
      "op": "PUSH2",
      "value": "0x119F"
    },
    "4677": {
      "jump": "i",
      "op": "JUMP"
    },
    "4678": {
      "op": "JUMPDEST"
    },
    "4679": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4681": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4683": {
      "op": "DUP3"
    },
    "4684": {
      "op": "DUP5"
    },
    "4685": {
      "op": "SUB"
    },
    "4686": {
      "op": "SLT"
    },
    "4687": {
      "op": "ISZERO"
    },
    "4688": {
      "op": "PUSH2",
      "value": "0x1258"
    },
    "4691": {
      "op": "JUMPI"
    },
    "4692": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4694": {
      "op": "DUP1"
    },
    "4695": {
      "op": "REVERT"
    },
    "4696": {
      "op": "JUMPDEST"
    },
    "4697": {
      "op": "DUP2"
    },
    "4698": {
      "op": "CALLDATALOAD"
    },
    "4699": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4708": {
      "op": "DUP2"
    },
    "4709": {
      "op": "GT"
    },
    "4710": {
      "op": "ISZERO"
    },
    "4711": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4714": {
      "op": "JUMPI"
    },
    "4715": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4717": {
      "op": "DUP1"
    },
    "4718": {
      "op": "REVERT"
    },
    "4719": {
      "op": "JUMPDEST"
    },
    "4720": {
      "op": "PUSH2",
      "value": "0x127B"
    },
    "4723": {
      "op": "DUP5"
    },
    "4724": {
      "op": "DUP3"
    },
    "4725": {
      "op": "DUP6"
    },
    "4726": {
      "op": "ADD"
    },
    "4727": {
      "op": "PUSH2",
      "value": "0x1104"
    },
    "4730": {
      "jump": "i",
      "op": "JUMP"
    },
    "4731": {
      "op": "JUMPDEST"
    },
    "4732": {
      "op": "SWAP5"
    },
    "4733": {
      "op": "SWAP4"
    },
    "4734": {
      "op": "POP"
    },
    "4735": {
      "op": "POP"
    },
    "4736": {
      "op": "POP"
    },
    "4737": {
      "op": "POP"
    },
    "4738": {
      "jump": "o",
      "op": "JUMP"
    },
    "4739": {
      "op": "JUMPDEST"
    },
    "4740": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4742": {
      "op": "DUP1"
    },
    "4743": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4745": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4747": {
      "op": "DUP5"
    },
    "4748": {
      "op": "DUP7"
    },
    "4749": {
      "op": "SUB"
    },
    "4750": {
      "op": "SLT"
    },
    "4751": {
      "op": "ISZERO"
    },
    "4752": {
      "op": "PUSH2",
      "value": "0x1298"
    },
    "4755": {
      "op": "JUMPI"
    },
    "4756": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4758": {
      "op": "DUP1"
    },
    "4759": {
      "op": "REVERT"
    },
    "4760": {
      "op": "JUMPDEST"
    },
    "4761": {
      "op": "DUP4"
    },
    "4762": {
      "op": "CALLDATALOAD"
    },
    "4763": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4772": {
      "op": "DUP2"
    },
    "4773": {
      "op": "GT"
    },
    "4774": {
      "op": "ISZERO"
    },
    "4775": {
      "op": "PUSH2",
      "value": "0x12AF"
    },
    "4778": {
      "op": "JUMPI"
    },
    "4779": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4781": {
      "op": "DUP1"
    },
    "4782": {
      "op": "REVERT"
    },
    "4783": {
      "op": "JUMPDEST"
    },
    "4784": {
      "op": "PUSH2",
      "value": "0x12BB"
    },
    "4787": {
      "op": "DUP7"
    },
    "4788": {
      "op": "DUP3"
    },
    "4789": {
      "op": "DUP8"
    },
    "4790": {
      "op": "ADD"
    },
    "4791": {
      "op": "PUSH2",
      "value": "0x1104"
    },
    "4794": {
      "jump": "i",
      "op": "JUMP"
    },
    "4795": {
      "op": "JUMPDEST"
    },
    "4796": {
      "op": "SWAP7"
    },
    "4797": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4799": {
      "op": "DUP7"
    },
    "4800": {
      "op": "ADD"
    },
    "4801": {
      "op": "CALLDATALOAD"
    },
    "4802": {
      "op": "SWAP7"
    },
    "4803": {
      "op": "POP"
    },
    "4804": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4806": {
      "op": "SWAP1"
    },
    "4807": {
      "op": "SWAP6"
    },
    "4808": {
      "op": "ADD"
    },
    "4809": {
      "op": "CALLDATALOAD"
    },
    "4810": {
      "op": "SWAP5"
    },
    "4811": {
      "op": "SWAP4"
    },
    "4812": {
      "op": "POP"
    },
    "4813": {
      "op": "POP"
    },
    "4814": {
      "op": "POP"
    },
    "4815": {
      "op": "POP"
    },
    "4816": {
      "jump": "o",
      "op": "JUMP"
    },
    "4817": {
      "op": "JUMPDEST"
    },
    "4818": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4823": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4825": {
      "op": "SHL"
    },
    "4826": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4828": {
      "op": "MSTORE"
    },
    "4829": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "4831": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4833": {
      "op": "MSTORE"
    },
    "4834": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4836": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4838": {
      "op": "REVERT"
    },
    "4839": {
      "op": "JUMPDEST"
    },
    "4840": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4842": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4844": {
      "op": "DUP3"
    },
    "4845": {
      "op": "DUP5"
    },
    "4846": {
      "op": "SUB"
    },
    "4847": {
      "op": "SLT"
    },
    "4848": {
      "op": "ISZERO"
    },
    "4849": {
      "op": "PUSH2",
      "value": "0x12F9"
    },
    "4852": {
      "op": "JUMPI"
    },
    "4853": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4855": {
      "op": "DUP1"
    },
    "4856": {
      "op": "REVERT"
    },
    "4857": {
      "op": "JUMPDEST"
    },
    "4858": {
      "op": "POP"
    },
    "4859": {
      "op": "MLOAD"
    },
    "4860": {
      "op": "SWAP2"
    },
    "4861": {
      "op": "SWAP1"
    },
    "4862": {
      "op": "POP"
    },
    "4863": {
      "jump": "o",
      "op": "JUMP"
    },
    "4864": {
      "op": "JUMPDEST"
    },
    "4865": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4867": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4869": {
      "op": "DUP3"
    },
    "4870": {
      "op": "DUP5"
    },
    "4871": {
      "op": "SUB"
    },
    "4872": {
      "op": "SLT"
    },
    "4873": {
      "op": "ISZERO"
    },
    "4874": {
      "op": "PUSH2",
      "value": "0x1312"
    },
    "4877": {
      "op": "JUMPI"
    },
    "4878": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4880": {
      "op": "DUP1"
    },
    "4881": {
      "op": "REVERT"
    },
    "4882": {
      "op": "JUMPDEST"
    },
    "4883": {
      "op": "DUP2"
    },
    "4884": {
      "op": "MLOAD"
    },
    "4885": {
      "op": "DUP1"
    },
    "4886": {
      "op": "ISZERO"
    },
    "4887": {
      "op": "ISZERO"
    },
    "4888": {
      "op": "DUP2"
    },
    "4889": {
      "op": "EQ"
    },
    "4890": {
      "op": "PUSH2",
      "value": "0x346"
    },
    "4893": {
      "op": "JUMPI"
    },
    "4894": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4896": {
      "op": "DUP1"
    },
    "4897": {
      "op": "REVERT"
    },
    "4898": {
      "op": "JUMPDEST"
    },
    "4899": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4901": {
      "op": "DUP1"
    },
    "4902": {
      "op": "DUP3"
    },
    "4903": {
      "op": "MSTORE"
    },
    "4904": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "4906": {
      "op": "SWAP1"
    },
    "4907": {
      "op": "DUP3"
    },
    "4908": {
      "op": "ADD"
    },
    "4909": {
      "op": "MSTORE"
    },
    "4910": {
      "op": "PUSH13",
      "value": "0x70726F6F66206661696C757265"
    },
    "4924": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "4926": {
      "op": "SHL"
    },
    "4927": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4929": {
      "op": "DUP3"
    },
    "4930": {
      "op": "ADD"
    },
    "4931": {
      "op": "MSTORE"
    },
    "4932": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4934": {
      "op": "ADD"
    },
    "4935": {
      "op": "SWAP1"
    },
    "4936": {
      "jump": "o",
      "op": "JUMP"
    },
    "4937": {
      "op": "JUMPDEST"
    },
    "4938": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4940": {
      "op": "DUP1"
    },
    "4941": {
      "op": "DUP3"
    },
    "4942": {
      "op": "MSTORE"
    },
    "4943": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "4945": {
      "op": "SWAP1"
    },
    "4946": {
      "op": "DUP3"
    },
    "4947": {
      "op": "ADD"
    },
    "4948": {
      "op": "MSTORE"
    },
    "4949": {
      "op": "PUSH15",
      "value": "0x185B1C9958591E4818DB185A5B5959"
    },
    "4965": {
      "op": "PUSH1",
      "value": "0x8A"
    },
    "4967": {
      "op": "SHL"
    },
    "4968": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4970": {
      "op": "DUP3"
    },
    "4971": {
      "op": "ADD"
    },
    "4972": {
      "op": "MSTORE"
    },
    "4973": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4975": {
      "op": "ADD"
    },
    "4976": {
      "op": "SWAP1"
    },
    "4977": {
      "jump": "o",
      "op": "JUMP"
    },
    "4978": {
      "op": "JUMPDEST"
    },
    "4979": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4984": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4986": {
      "op": "SHL"
    },
    "4987": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4989": {
      "op": "MSTORE"
    },
    "4990": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4992": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4994": {
      "op": "MSTORE"
    },
    "4995": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4997": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4999": {
      "op": "REVERT"
    },
    "5000": {
      "op": "JUMPDEST"
    },
    "5001": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5003": {
      "op": "DUP3"
    },
    "5004": {
      "op": "DUP3"
    },
    "5005": {
      "op": "LT"
    },
    "5006": {
      "op": "ISZERO"
    },
    "5007": {
      "op": "PUSH2",
      "value": "0x139A"
    },
    "5010": {
      "op": "JUMPI"
    },
    "5011": {
      "op": "PUSH2",
      "value": "0x139A"
    },
    "5014": {
      "op": "PUSH2",
      "value": "0x1372"
    },
    "5017": {
      "jump": "i",
      "op": "JUMP"
    },
    "5018": {
      "op": "JUMPDEST"
    },
    "5019": {
      "op": "POP"
    },
    "5020": {
      "op": "SUB"
    },
    "5021": {
      "op": "SWAP1"
    },
    "5022": {
      "jump": "o",
      "op": "JUMP"
    },
    "5023": {
      "op": "JUMPDEST"
    },
    "5024": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5026": {
      "op": "DUP2"
    },
    "5027": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5029": {
      "op": "NOT"
    },
    "5030": {
      "op": "DIV"
    },
    "5031": {
      "op": "DUP4"
    },
    "5032": {
      "op": "GT"
    },
    "5033": {
      "op": "DUP3"
    },
    "5034": {
      "op": "ISZERO"
    },
    "5035": {
      "op": "ISZERO"
    },
    "5036": {
      "op": "AND"
    },
    "5037": {
      "op": "ISZERO"
    },
    "5038": {
      "op": "PUSH2",
      "value": "0x13B9"
    },
    "5041": {
      "op": "JUMPI"
    },
    "5042": {
      "op": "PUSH2",
      "value": "0x13B9"
    },
    "5045": {
      "op": "PUSH2",
      "value": "0x1372"
    },
    "5048": {
      "jump": "i",
      "op": "JUMP"
    },
    "5049": {
      "op": "JUMPDEST"
    },
    "5050": {
      "op": "POP"
    },
    "5051": {
      "op": "MUL"
    },
    "5052": {
      "op": "SWAP1"
    },
    "5053": {
      "jump": "o",
      "op": "JUMP"
    },
    "5054": {
      "op": "JUMPDEST"
    },
    "5055": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5057": {
      "op": "DUP3"
    },
    "5058": {
      "op": "PUSH2",
      "value": "0x13DB"
    },
    "5061": {
      "op": "JUMPI"
    },
    "5062": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5067": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5069": {
      "op": "SHL"
    },
    "5070": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5072": {
      "op": "MSTORE"
    },
    "5073": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "5075": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5077": {
      "op": "MSTORE"
    },
    "5078": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5080": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5082": {
      "op": "REVERT"
    },
    "5083": {
      "op": "JUMPDEST"
    },
    "5084": {
      "op": "POP"
    },
    "5085": {
      "op": "DIV"
    },
    "5086": {
      "op": "SWAP1"
    },
    "5087": {
      "jump": "o",
      "op": "JUMP"
    },
    "5088": {
      "op": "JUMPDEST"
    },
    "5089": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5091": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5093": {
      "op": "DUP3"
    },
    "5094": {
      "op": "ADD"
    },
    "5095": {
      "op": "PUSH2",
      "value": "0x13F2"
    },
    "5098": {
      "op": "JUMPI"
    },
    "5099": {
      "op": "PUSH2",
      "value": "0x13F2"
    },
    "5102": {
      "op": "PUSH2",
      "value": "0x1372"
    },
    "5105": {
      "jump": "i",
      "op": "JUMP"
    },
    "5106": {
      "op": "JUMPDEST"
    },
    "5107": {
      "op": "POP"
    },
    "5108": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5110": {
      "op": "ADD"
    },
    "5111": {
      "op": "SWAP1"
    },
    "5112": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "3e278d5c0674f851b3956b05a042ea442cb208ea",
  "source": "/**\n *Submitted for verification at polygonscan.com on 2022-05-22\n*/\n\n// Forge Airdrop Contract\n// https://airdrop.forgetoken.org\n// Claim up to 100, 30 or 10 Forge in this new twist on airdrops! \n// The longer you wait the more your claim unlocks, but dont let the contract run dry without claiming!\n// Allows contract to be recharged by anyone to restart the Airdrop!\n\n\npragma solidity ^0.8.12;\n\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];           \n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n\n\n interface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract ForgeGuess{\n    function balanceOf(address account) public view returns (uint256) {}\n    uint256 public unreleased;\n    uint256 public totalSupply;\n    function stakeFor(address forWhom, uint256 amount) public virtual {}\n    function withdraw(uint256 amount, uint256 maxLoss) public virtual {}\n    \n    function withEstimator(uint256 amountOut) public view returns (uint256) {}\n    }\n\n\n\ncontract ForgeAirdrop {\n    \n    \n    address public ForgeTokenAddressREAL = address(0xF44fB43066F7ECC91058E3A614Fb8A15A2735276);\n    address public ForgeTokenAddress = address(0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074);\n    address public ForgeGuessContractAddress = address(0xDe256EC57E864eC847c030e14c5b97AB233A521E);\n    bytes32 [] public _merkleRootAll;\n    bytes32 internal _merkleRootTop = 0xdd82af2bc4b721bfd5be08111d4f422fd07d1578a0072d6701f26ea4fff33845;\n    bytes32 internal _merkleRootMid = 0x15893a9b8d3638149dd9461fde79f589e565a2fc76a861ec1aebb83736151566;\n    bytes32 internal _merkleRootBot = 0x316b4323ca91ba63304a4e0ada24b09f8689ac1f80aca8e9d5c4213fc9ba7848;\n                                         \n    uint256 [] public amtClaim;\n    uint256 internal nextTokenId = 0;\n    mapping(address => bool) public hasClaimed;\n    uint256 public decay = 24* 60 * 60 * 30;\n\n    uint256 public starttime = block.timestamp;\n    \n\n    constructor()  {\n        _merkleRootAll.push(_merkleRootTop);\n        _merkleRootAll.push(_merkleRootMid);\n        _merkleRootAll.push(_merkleRootBot);\n        amtClaim.push(1000000000000);\n        amtClaim.push(100000000);\n        amtClaim.push(100000);\n    }  \n\n \n\n    function deposit(uint amt) public returns (bool success){\n\n\n        require(amt > ForgeGuess(ForgeGuessContractAddress).withEstimator(ForgeGuess(ForgeGuessContractAddress).balanceOf(address(this))), \"must be greater than previous total to reset\");\n        require(IERC20(ForgeTokenAddress).transferFrom(msg.sender, address(this), amt), \"transfer fail\");\n        starttime = block.timestamp;\n        IERC20(ForgeTokenAddress).approve(ForgeGuessContractAddress, 999999999999999999999999999999999999999999999999999);\n        ForgeGuess(ForgeGuessContractAddress).stakeFor(address(this), amt);\n        uint x = perfect();\n        amtClaim[0] = x * 10;\n        amtClaim[1] = x * 3;\n        amtClaim[2] = x * 1;\n\n        return true;\n    }\n\n\n    function Donation(uint amt) public returns (bool success){ \n\n        if(amt > ForgeGuess(ForgeGuessContractAddress).withEstimator(ForgeGuess(ForgeGuessContractAddress).balanceOf(address(this)))){\n\n            deposit(amt);\n\n        }else{\n\n            require(IERC20(ForgeTokenAddress).transferFrom(msg.sender, address(this), amt), \"transfer fail\");\n            IERC20(ForgeTokenAddress).approve(ForgeGuessContractAddress, 999999999999999999999999999999999999999999999999999);\n            ForgeGuess(ForgeGuessContractAddress).stakeFor(address(this), amt);\n\n        }\n\n        return true;\n    }\n\n\n    function perfect() public view returns (uint256 amtz){\n        \n        uint256 test = (10 * 10 ** 18 * 1000) / ((975 * (IERC20(address(ForgeTokenAddress)).balanceOf(ForgeGuessContractAddress) - ForgeGuess(ForgeGuessContractAddress).unreleased() ) / ForgeGuess(ForgeGuessContractAddress).totalSupply()));\n\n\n        return test;\n    }\n\n    function amtOutForChoiceInForge(uint choice) public view returns (uint256 out){\n\n        return ForgeGuess(ForgeGuessContractAddress).withEstimator(amountOut(choice));\n    }\n\n\n   function amountOut(uint choice) public view returns (uint256 out){\n        uint256 durdur = block.timestamp - starttime;\n        if(durdur > decay){\n            durdur = decay;\n        }\n        if(choice == 0){\n           return (amtClaim[0] * durdur) / decay;\n        }else if(choice ==1){\n           return (amtClaim[1] * durdur) / decay;\n        }else if(choice ==2){\n           return (amtClaim[2] * durdur) / decay;\n        }\n        return 0;\n   }\n   \n    function mintWithProofTop(bytes32[] memory merkleProof ) public {\n    \n        \n        require( MerkleProof.verify(merkleProof, _merkleRootTop, keccak256( abi.encodePacked(msg.sender)) ) , 'proof failure');\n\n        require(hasClaimed[msg.sender] == false, 'already claimed');\n\n        hasClaimed[msg.sender]=true;\n        \n        IERC20(ForgeTokenAddress).transfer(msg.sender,  amountOut(1));\n    }\n    \n    function mintWithProofMid(bytes32[] memory merkleProof ) public {\n \n        require( MerkleProof.verify(merkleProof, _merkleRootMid, keccak256( abi.encodePacked(msg.sender)) ) , 'proof failure');\n\n        require(hasClaimed[msg.sender] == false, 'already claimed');\n\n        hasClaimed[msg.sender]=true;\n        \n        IERC20(ForgeTokenAddress).transfer(msg.sender,  amountOut(2));\n    }\n    //0= 0%-10%, 1= 10%-40%, 2= 50%-90%\n    function mintWithProofALL(bytes32[] memory merkleProof, uint claim, uint maxLoss ) public {\n \n        require( verify(merkleProof, msg.sender, claim)  , 'proof failure');\n\n        require(hasClaimed[msg.sender] == false, 'already claimed');\n\n        hasClaimed[msg.sender]=true;\n        \n        ForgeGuess(ForgeGuessContractAddress).withdraw(amountOut(claim), maxLoss);\n        require(IERC20(ForgeTokenAddress).transfer(msg.sender, IERC20(ForgeTokenAddress).balanceOf(address(this))), \"contract may be out of funds\");\n    }\n\n    //verify claim\n    function verify(bytes32[] memory merkleProof, address claimer, uint claim)public view returns (bool ver){\n    if(claim == 0){\n    \n        return MerkleProof.verify(merkleProof, _merkleRootAll[0], keccak256( abi.encodePacked(claimer)));\n    }else if(claim ==1 ){\n\n        return MerkleProof.verify(merkleProof, _merkleRootAll[1], keccak256( abi.encodePacked(claimer)));\n    }else if(claim == 2){\n    \n        return MerkleProof.verify(merkleProof, _merkleRootAll[2], keccak256( abi.encodePacked(claimer)));\n    }\n    return false;\n    }\n    \n    \n    function getThree() public view returns (uint256) {\n\n        return 3;\n    }\n    \n\n}\n",
  "sourceMap": "2647:5566:1:-:0;;;2685:90;;;-1:-1:-1;;;;;;2685:90:1;;;2732:42;2685:90;;;;2781:86;;;;2824:42;2781:86;;;2873:94;;;;;;2924:42;2873:94;;;3045:66;3011:100;;3151:66;3117:100;;3257:66;3223:100;;3403:32;;3512:16;3489:39;;3562:15;3535:42;;3589:260;;;;;;;;;-1:-1:-1;3634:14:1;;3614;:35;;;;;;;;;;;;;;;;3679:14;;3659:35;;;;;;;;;;3724:14;;3704:35;;;;;;;;;;;3749:8;:28;;;;;;;-1:-1:-1;3749:28:1;;;3763:13;3749:28;;;;;3787:24;;;;;;;3801:9;3787:24;;;;3821:21;;;;;;;;3835:6;3821:21;;;2647:5566;;;;;;",
  "sourcePath": "contracts/Merkletree.sol",
  "type": "contract"
}