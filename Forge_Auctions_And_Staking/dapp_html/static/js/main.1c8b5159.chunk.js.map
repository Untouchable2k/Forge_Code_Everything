{"version":3,"sources":["features/Header.tsx","eth.png","dai.png","pow2.png","components/SliderInput.tsx","components/BalanceMsg.tsx","components/ConnectionRequiredMsg.tsx","hooks/useStakeTokens.ts","hooks/AuctionStats.ts","hooks/AuctionStats2.ts","hooks/AuctionStats3.ts","hooks/ApprovStats.ts","hooks/StakeOnly.ts","hooks/distributeReward.ts","hooks/try3.ts","hooks/useStakingBalance.ts","hooks/try.ts","hooks/useStakingBalance2.ts","hooks/useStakingBalance3.ts","features/yourWallet/StakeForm.tsx","hooks/AuctionStats6.ts","hooks/ApprovStats2.ts","hooks/AuctionStats7.ts","hooks/distAuction2.ts","hooks/useAuctions.ts","hooks/AdvanceAuctions.ts","hooks/try4.ts","hooks/try2.ts","hooks/AuctionNoApprove.ts","hooks/ApprovOnly2.ts","hooks/AuctionOnly.ts","hooks/distAuction.ts","hooks/AuctionStats8.ts","hooks/AuctionStats4.ts","hooks/AuctionStats5.ts","features/yourWallet/WalletBalance.tsx","features/yourWallet/YourWallet.tsx","features/tokenFarmContract/Unstake.tsx","hooks/useStakingBalanceOTHER.ts","hooks/useStakingBalanceOTHER3.ts","hooks/useStakingBalanceOTHER4.ts","hooks/useStakingBalance5.ts","hooks/ProofOfWorkStats2.ts","hooks/useStakingBalance6Forged.ts","hooks/useStakingBalance6xBTC.ts","hooks/useStakingBalance4.ts","hooks/useStakingBalanceOTHER2.ts","hooks/useUnstakeTokens.ts","hooks/useUnstakeTokens2.ts","hooks/useUnstakeTokens22.ts","hooks/useUnstakeTokens22Other.ts","hooks/useUnstakeTokens22Otherf.ts","hooks/ApprovOnly.ts","features/tokenFarmContract/TokenFarmContract.tsx","features/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","display","justifyContent","gap","Header","classes","useEthers","account","activateBrowserWallet","deactivate","isConnected","undefined","test","className","Button","color","variant","href","rel","slice","onClick","size","inputsContainer","gridTemplateRows","gridTemplateColumns","slider","SliderInput","sliderMarks","label","id","maxValue","minValue","value","onChange","disabled","rest","sliderStep","inputStep","Typography","gutterBottom","Slider","step","event","newValue","max","min","marks","Input","margin","target","Number","onBlur","inputProps","type","alignItems","tokenImg","width","amount","fontWeight","BalanceMsg","tokenImgSrc","component","src","alt","justifyItems","ConnectionRequiredMsg","style","useStakeTokens","tokenAddress","chainId","networkName","helperConfig","LPRewardAddress","brownieConfig","constants","AddressZero","rewardABI","LPFarm","abi","LPFarmInterface","utils","Interface","LPRewardsContract","Contract","useContractFunction","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","Erc20","tokenContract","approveErc20Send","approveErc20State","useState","amountToStake","setAmountToStake","useEffect","status","setState","AuctionStats","address","AuctionAddress","Auctionz","AuctionInterface","useContractCall","method","args","AuctionStats2","Math","round","Date","now","AuctionStats3","test2","stakingBalance","nothing","toString","GetApprovalAmt","LPTokenAddresss","Mock","MockInterface","StakeThatCake","unstakeTokensState22v3","DistributeReward2","pow_token","zeroAbi","Zero","LPFarmInterface2","xpw","useStakeTokens6","useStakingBalance","useUnstakeTokens4","xbtc","testabi","mock","useStakingBalance2","useStakingBalance3","flexDirection","maxWidth","StakeForm","token","error","name","zeroxBTCAddress","auctionaddress","LP_token","proofOfWorkAddress","tokenBalance","useTokenBalance","xbtcbalance","notifications","useNotifications","auctionPot","approvalamt","auctionPotYOURS","AuctionStats6","tokenBalancez","aprovamt","approvalamt2","auction","GetApprovalAmt2","aprovamt2","currentday","fday","tb","name2","setAmount","eraz","setAmountEra","fmtInputzz","erazz","testz","ex","parseFloat","cdaystring","parseInt","TotalOwedAll","ff2f2","time555","console","log","AuctionStats7","startingauction","setAmountz","auctionnumber","setAmountzz","didFetch","setDidFetch","totalPot","urpercent","urpercentz","numberofAuctions","name23","setName2","name233","setName22","addy","auctionAddress","auc","unstakeTokensState2za","DistributeAuction2","getAuctionTokens2","AuctionsABI","AuctionContract","stakeTokensState2","useAuctions1","stakeTokensSend2","Addy","era","TokenFarm","tests","fsdfdsfds","str","AdvAuctions","advAuction1","auctionState2","formattedTokenBalance","formatUnits","formattedTokenBalance2","check","stakeTokensSend6","useStakeTokens7","unstakeTokensSend","unstakeTokensState","forge","useUnstakeTokens5","b2","AuctionNoApprove","stakeOnlyzAuction","LPAdd","mockABI","Mock0xBTC","mockInterface","ApproveOnlyMax2","b22","unstakeTokensState223z","AuctionThatCake","auctionOnlyz","unstakeTokensSend22","DistributeAuction","auctionOnly2","amountAsWei","parseEther","div","auctionOnly","fuck8","toFixed","xxx","xxxx","xxx2","percentzz2","percentz","percentzz","coinz","showErc20ApprovalSuccess3","setShowErc20ApprovalSuccess3","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","showClaimSuccess","setShowClaimSuccess","handleCloseSnack","handleCloseSnack4","filter","notification","length","fuck","tva","isMining","isMining2","isMining3","isMining4","isMining6","isMining7","isMiningClaim","isMining5","isMining51","fuck2","approvetomuch2","hasZeroBalance2","te","endt","cur","hasZeroAmountSelected","timeEnd","timeleft","auctionmsg","tokenBalancef","timelftmsg","sec","secPerDay2","secPerDay","AuctionStats8","hour","teeoff","amt","time","AuctionPlayerStats","teeoff2","AuctionPlayerStats2","totz2","noaucgrab","msgowed","msgowed2","toolow","toolow3","toolow2","TextField","helperText","placeholder","e","CircularProgress","StylesProvider","injectFirst","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","severity","fsdfosd","ffedf","msg6","msg7","maxp","maxapproved","day","decimalsLimit","decimalScale","onValueChange","contentContainer","WalletBalance","image","LPTokenAddress","xbtcTokenAddress","balance22","formattedBalance2","balance223","formattedBalance22","balance3","msg","gezz","formattedBalance3","balance322","formattedBalance32","balance3223","formattedBalance322","image2","imagez","imagezz","tabContent","box","backgroundColor","borderRadius","header","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","Box","TabContext","TabList","map","index","Tab","TabPanel","slider2","Unstake","balance","balance2","stake","stake2","LPRewardAddressOLD","useStakingBalanceOTHER","stake4","useStakingBalanceOTHER3","stake5","useStakingBalanceOTHER4","urshareofpool","stakingBalance2","dead","useStakingBalance5","epoch","zeroAddress","ZeroInterface","ProofOfWorkStats2","oldLP","tokenBalanceOldLP","tokenBalanceStaking","LPTOKEN","stakingBalance3","unibal","urUNIBal","sushiABI","UniV2Pair","sushiInterface","ff2","ddddd","useStakingBalance6Forged","tokenBalanceStakingxBTC","stakingBalance6","ddddd2","useStakingBalance6xBTC","balStakingForge","balStakingxBTC","balOldLP","sharepool","circ","fug","rewardrate2","apyz","apyz22","useStakingBalance4","dayz","circfinal","balanceff","stakeOnlyz","formattedBalanceff","formattedBalanceffff","formattedBalanceffff5","formattedBalance","balance223zz","useStakingBalanceOTHER2","formattedBalance22zz","useUnstakeTokens","useUnstakeTokens2","unstakeTokensSend2","unstakeTokensState2","useUnstakeTokens22","useUnstakeTokens22Other","unstakeTokensSend220","useUnstakeTokens22Otherf","unstakeTokensSend220f","handleUnstakeSubmit22","showUnstakeSuccess","setShowUnstakeSuccess","handleCloseSnack2","showUnstakeSuccess2","setShowUnstakeSuccess2","handleCloseSnack3","unstakeTokensSend22z","b","potineth","mockLPContract","fff","ApproveOnlyMax","msgold","approvetomuch","hastoolittle","isMining8","showErc20ApprovalSuccess33","setShowErc20ApprovalSuccess33","msgbalz","msgBalz2","ps","fuck7","fuck9","ted","zeroBalz","textz","TokenFarmContract","title","palette","common","white","textAlign","Main","dai","pow","eth","supportedTokens2","showNetworkError","setShowNetworkError","handleCloseNetworkError","reason","root","App","DAppProvider","config","supportedChains","ChainId","Polygon","expirationPeriod","checkInterval","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c8b5159.chunk.js","sourcesContent":["import { Button, Link, makeStyles} from \"@material-ui/core\"\nimport { useEthers } from \"@usedapp/core\"\n\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4),\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    gap: theme.spacing(1)\n  },\n}))\n\nexport const Header = () => {\n  const classes = useStyles()\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n  var test =\"\"\n  if(isConnected){\n   test = \"https://polygonscan.com/token/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276?a=\"+account;\n}\n  return (\n    <div className={classes.container}>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org\" rel=\"noopener noreferrer\">Home</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://quickswap.exchange/#/swap?inputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978&outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\" rel=\"noopener noreferrer\">Buy Forge</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org/whitepaper.html\"rel=\"noopener noreferrer\">Info</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org/stats.html\" rel=\"noopener noreferrer\">Stats</a>\n      </Button>\n      \n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n          <a  className=\"buttonD\" href={test} rel=\"noopener noreferrer\">{`${account?.slice(0, 4)}...${account?.slice(-3)}`}</a>\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          className=\"buttonW\"\n          color=\"primary\"\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n    </div>\n  )\n}","export default __webpack_public_path__ + \"static/media/eth.6e1743e3.png\";","export default __webpack_public_path__ + \"static/media/dai.a2c311e8.png\";","export default __webpack_public_path__ + \"static/media/pow2.56016ef0.png\";","import React from \"react\";\nimport { Slider, Input, Typography, makeStyles } from \"@material-ui/core\";\n\ninterface SliderInputProps {\n  label?: string;\n  id?: string;\n  maxValue: number;\n  minValue: number;\n  size?: string;\n  value: number | string | (string | number)[];\n  onChange: (newValue: number | string | Array<number | string>) => void;\n  disabled?: boolean;\n  [x: string]: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  inputsContainer: {\n    display: \"grid\",\n    gap: theme.spacing(3),\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: \"1fr auto\",\n  },\n  slider: {},\n}));\n\nexport const SliderInput = ({\n  label = \"\",\n  id = \"input-slider\",\n  maxValue,\n  minValue,\n  value,\n  size,\n  onChange,\n  disabled = false,\n  ...rest\n}: SliderInputProps) => {\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    onChange(newValue);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      onChange(0);\n    } else if (value > maxValue) {\n      onChange(maxValue);\n    }\n  };\n\n  const sliderStep = maxValue / 100;\n  const inputStep = maxValue / 50;\n  let sliderMarks\n  const classes = useStyles();\nif(value >= minValue){\n\n\n  sliderMarks = [\n    {\n      value: 0,\n      label: \"0%\",\n    },   {\n      value: maxValue/4,\n      label: \"25%\",\n    },   {\n      value: maxValue/2,\n      label: \"50%\",\n    },   {\n      value: maxValue*3/4,\n      label: \"75%\",\n    },\n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n}else{\n\n  sliderMarks = [\n    \n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n}\n\n  // ... is a \"Spread\" operator\n  // standard javascript thing\n  // works on iterables\n  // expands a list\n  return (\n    <div {...rest}>\n      {label && (\n        <Typography id={id} gutterBottom>\n          {label}\n        </Typography>\n      )}\n      <div className={classes.inputsContainer}>\n        <div>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            step={sliderStep}\n            onChange={handleSliderChange}\n            aria-labelledby={id}\n            max={maxValue}\n            min={minValue}\n            disabled={disabled}\n            marks={disabled ? [] : sliderMarks}\n          />\n        </div>\n        <div>\n          <Input\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            disabled={disabled}\n            inputProps={{\n              step: inputStep,\n              min: minValue,\n              max: maxValue,\n              type: \"number\",\n              \"aria-labelledby\": id,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\"\nimport { Typography, makeStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\"\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    }\n}))\n\ninterface BalanceMsgProps {\n    label: string;\n    amount: number | string;\n    tokenImgSrc: string\n}\n\nexport const BalanceMsg = ({ label, amount, tokenImgSrc }: BalanceMsgProps) => {\n\n    const classes = useStyles()\n\n    return <div className={classes.container}>\n        <Typography component=\"span\">{label}:</Typography>\n        <Typography className={classes.amount} component=\"span\">{amount}</Typography>\n        <img className={classes.tokenImg} src={tokenImgSrc} alt=\"token logo\" />\n    </div>\n}","import React from \"react\";\nimport { Typography, makeStyles, Button } from \"@material-ui/core\";\n\nimport { useEthers } from \"@usedapp/core\"\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"grid\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    gridTemplateRows: \"150px\"\n  },\n}));\n\nexport const ConnectionRequiredMsg = () => {\n  const classes = useStyles();\n\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n  return (     \n      \n      \n      <div className={classes.container}>\n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n            {`${account?.slice(0, 4)}...${account?.slice(-3)}`}\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          className=\"buttonW\"\n          color=\"primary\"\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Typography variant=\"h6\" component=\"span\">Please connect your Metamask account.     <br></br> **Sometimes requires reload after login if not on chrome**\n      <br></br>You must be on POLYGON Network <a href=\"https://chainlist.org/\">Go here to add Polygon</a> \n      <br></br> Search for Polygon in <a href=\"https://chainlist.org/\">Chainlist</a> to add the network \n      </Typography>\n      \n      \n      \n      </div>\n      \n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contract\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(LPRewardsContract, \"stake\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(tokenAddress, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n\n  const GAZ = chainId ? brownieConfig[\"networks\"][networkName][\"GAS\"] : constants.AddressZero\n  var options ={ gasPrice: GAZ}\n  \n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(LPRewardAddress, \"123000000000000000000\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n    var t = account\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"currentDay\",\n        args: [],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats2 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    \n  \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"nextDayTime\",\n        args: [],\n      }) ?? []\n  \n    return time\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats3 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\n    \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, test2 ],\n      }) ?? []\n      \n    return time\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Mock from \"../chain-info/AMock.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const GetApprovalAmt = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTokenAddresss = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n\n  const rewardABI = Mock.abi\n  const MockInterface = new utils.Interface(rewardABI)\n    \n  /*\n    const [stakingBalance] =\n      useContractCall({\n        abi: sushiInterface,\n        address: sushi,\n        method: \"allowance\",\n        args: [account, LPRewardAddress],\n      }) ?? []\n      console.log(\"F U \", stakingBalance)\n\n      */\n    const [stakingBalance] =\n    useContractCall({\n      abi: MockInterface,\n      address: LPTokenAddresss,\n      method: \"allowance\",\n      args: [account, LPRewardAddress],\n    }) ?? []\n\t\n    return stakingBalance\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const StakeThatCake = (tokenAddress: string) => {\n  const { chainId} = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n  )  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"stake\", {\n  transactionName: \"Stake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(amount)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeReward2 = (tokenAddress: string) => {\n  const { chainId} = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n const zeroAbi = Zero.abi\n\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(xpw, \"ARewardSender\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send()\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens6 = (tokenAddress: string) => {\n\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"setRewardParamsALL\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"5\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  //const { abi } = TokenFarm\n  //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  //const tokenFarmInterface = new utils.Interface(abi)\n\n  //MY STUFF\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n\n\n  \n\n  const [stakingBalance] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"earned\",\n      args: [account],\n    }) ?? []\n  return stakingBalance\n}\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport { Contract } from \"@ethersproject/contracts\"\nimport Mock from \"../chain-info/AMock.json\"\n\nimport helperConfig from \"../helper-config.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens4 = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const xbtc   = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n  const testabi = Mock.abi\n  const LPFarmInterface2 = new utils.Interface(testabi)\n  const mock = new Contract(\n    xbtc, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(mock, \"withdrawToken\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(amount)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance2 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"earned2\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance3 = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n    return stakingBalance\n  }","import React, { useEffect, useState } from \"react\"\nimport { SliderInput } from \"../../components\"\nimport { useEthers, useTokenBalance, useNotifications, addressEqual } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\"\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport Web3 from \"web3\";\nimport \"../../styles.css\";\nimport CurrencyInput from 'react-currency-input-field';\nimport { Token } from \"../Main\"\nimport { useStakeTokens,AuctionStats8, ApproveOnlyMax2, DistributeAuction2, DistributeReward2, AuctionStats7, AuctionStats6, AdvAuctions, AuctionNoApprove, GetApprovalAmt2, AuctionThatCake, StakeThatCake,GetApprovalAmt,  DistributeAuction, AuctionPlayerStats2, GetLPStats, useStakeTokens6, useStakeTokens7, AuctionStats, AuctionStats2, useUnstakeTokens4, useUnstakeTokens5, useAuctions1, AuctionStats3, AuctionPlayerStats } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\nimport { stringifyString } from \"yaml/util\"\nimport { stringify } from \"yaml\"\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n\n  const { chainId, error } = useEthers()\n  const { address: tokenAddress, name } = token\n  \n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const zeroxBTCAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\nconst proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  const { account } = useEthers()\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n\n  const xbtctokenBalance = useTokenBalance(proofOfWorkAddress, account)\n  const xbtcbalance = useTokenBalance(zeroxBTCAddress, account)\n  const { notifications } = useNotifications()\n  const classes = useStyles()\n  const auctionPot = AuctionStats3(tokenAddress)\n  var approvalamt = GetApprovalAmt(tokenAddress)\n  const auctionPotYOURS = AuctionStats6(tokenAddress)\n  const tokenBalancez = useTokenBalance(LP_token, account);\n\n  let nothing\nvar aprovamt = \"0\"\n//LP Approval\n  if(approvalamt !== nothing)\n{\n    aprovamt = approvalamt.toString()\n}\nvar approvalamt2 = GetApprovalAmt2(tokenAddress)\n\n  //Auction Approval\nvar aprovamt2 = \"0\"\nif(approvalamt2 !== nothing)\n{\n  aprovamt2 = approvalamt2.toString()\n}\n\n  let arrayofdaysauction = []\n  var currentday = 0\n  \n  const fday = AuctionStats(tokenAddress)\n  var maxprevday = \"0\"\n  \n\n  var tb = \"0\"\n  if(tokenBalancez !== nothing)\n  {\n    tb = tokenBalancez.toString()\n  }\n\n  const [name2, setName] = useState(\"\");\n  var [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n    var [amountsdfsd, setAmountsdfsd] =\n      useState<number | string | Array<number | string>>(1)\n    const [amount2, setAmount2] =\n      useState<number | string | Array<number | string>>(0)\n\n  const [eraz, setAmountEra] =\n  useState<string | undefined | Array<number | string>>(\"1\")\n  \n  var [fmtInputzz, setInput] =\n  useState<string | undefined | Array<number | string>>(tb)\n  var fmtInputz = \"2\"\n  if(fmtInputzz !== nothing)\n  {\n    fmtInputz = fmtInputzz.toString();\n  }\n  var erazz = \"1\"\n  if(eraz !== nothing)\n{\n  erazz = eraz.toString()\n}\n  const [paddy, setAddress] =\n  useState<string | undefined | Array<number | string>>(\"0\")\n  //GETS CURRENT day 10 amt\n   var testz = amount.toString()\n   var ex = parseFloat(testz)\n   var ex1 = Math.round(ex)\n\n   //var testing = AuctionPlayerStats(tokenAddress, \"10\")\n   \nvar cdaystring = \"0\"\n\n   if(fday !== nothing )\n   {\n     currentday = parseInt(fday.toString())\n     var temp = currentday - 1 \n     maxprevday = temp.toString()\n      cdaystring = fday.toString()\n \n   }\n   var TotalOwedAll =0\n   var test\n   var adds\n    test =  AuctionStats7(1)\n    if(test !== nothing){\n    \n    TotalOwedAll = TotalOwedAll + parseInt(test.toString())\n    }\n   \n  \n\n   var [startingauction, setAmountz] =\n   useState<string | undefined | Array<number | string>>(cdaystring)\n   \n   var [auctionnumber, setAmountzz] =\n   useState<string | undefined | Array<number | string>>(\"1\")\n\n  var daysnow = cdaystring\n\n  const [didFetch,setDidFetch] = useState(false)\n\n\n     if(!didFetch && cdaystring !== \"0\"){\n       setAmountz(cdaystring)\n       setDidFetch(true)\n     }\n  var numberofAuctions = 1\n  if(auctionnumber !== nothing)\n  {\n    numberofAuctions = parseFloat(auctionnumber.toString())\n  }\nif(startingauction !== nothing && numberofAuctions > (600- parseFloat(startingauction.toString()) -1)){\n  numberofAuctions = 600-parseFloat(startingauction.toString()) - 1\n}\n\n    var totalPot\n  var urpercent\n  var urpercentz\n  var [name23, setName2] = useState(account);\n  var [name233, setName22] = useState(account);\n  \n  const { send: getAuctionTokens2, state: unstakeTokensState2za } =\n  DistributeAuction2(name233)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const { send: stakeTokensSend2, state: stakeTokensState2 } =\n    useAuctions1(tokenAddress)\n\n    const { send: advAuction1, state: auctionState2 } =\n    AdvAuctions(tokenAddress, startingauction, numberofAuctions, name23, eraz  )\n\n  \n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n    const formattedTokenBalancezz: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 0))\n    : 0\n\t\n\n\n    var check2 = 0\n    if(formattedTokenBalance > 0)\n    {\n      check2 = formattedTokenBalance\n    }\n\n\n    const formattedTokenBalance2: number = xbtcbalance\n  ? parseFloat(formatUnits(xbtcbalance, 8))\n  : 0 \n  var check = 0\n  if(formattedTokenBalance2 > 0)\n  {\n    check = formattedTokenBalance2\n  }\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n  const handleStakeSubmitzz = () => {\n\n    var fuck7\n  if(typeof amount === 'number')\n  {\n    fuck7 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n  }\n  else{\n    fuck7 =  \"0\"\n  }\n    const amountAsWei = fuck7\n\t\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n\n\n  const handleStakeSubmit2 = () => {\n    const amountAsWei = utils.parseEther((Number(amount).toFixed(8)).toString()).div(1e10)\n    return stakeTokensSend2(amountAsWei.toString())\n  }\n  //TESTING V\n\n  // advanced auction submit\n\n  const handleStakeSubmitAdvAuction = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return advAuction1(amountAsWei.toString())\n  }\n\n  //sets up LPRewards to run\n\n  const { send: stakeTokensSend6, state: stakeTokensState5 } =\n    useStakeTokens6(tokenAddress)\n\n  const rewardStart = () => {\n    return stakeTokensSend6()\n  }\n\n  const { send: stakeTokensSend7, state: stakeTokensState6 } =\n    useStakeTokens7(tokenAddress)\n\n  const rewardStart2 = () => {\n    return stakeTokensSend7()\n  }\n  //lp run done\n\n\n  //LP faucet\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n  useUnstakeTokens4(tokenAddress)\n\n  //0xBTC faucet\n    const { send: unstakeTokensSend2, state: unstakeTokensState22 } =\n    useUnstakeTokens5(tokenAddress)\n\n    const { send: unstakeTokensSend2z, state: unstakeTokensState221 } =\n    useUnstakeTokens4(zeroxBTCAddress)\n//stake only no approve\n    const { send: stakeOnlyz, state: unstakeTokensState22v3 } =\n    StakeThatCake(tokenAddress)\n\n\n    const { send: stakeOnlyzAuction, state: b2 } =\n    AuctionNoApprove(tokenAddress, startingauction, numberofAuctions, name23, eraz  )\n\n    const { send: maxApprove2, state: b22 } =\n    ApproveOnlyMax2(tokenAddress )\n/*\nconst web3 = new Web3('https://polygon-mainnet.g.alchemy.com/v2/c72TXAwpsKRgCm4AthFzyXfe05_1AKpp')\nvar tet = web3.eth.getGasPrice()\nconsole.log(\"PRINTZ : \", tet)\nvar vev = tet.then( value => {console.log(\"VV \", value)})\nconsole.log(\"PP:< \", vev) */\nvar account22 = \"0x\"\nuseEffect(() => {\n  // You may want to check that id is truthy first\n  if (account) {\n    setName22(account)\n    setName2(account)\n  }\n}, [account]);\n    const { send: auctionOnlyz, state: unstakeTokensState223z } =\n    AuctionThatCake(tokenAddress)\n//admin\n    const { send: unstakeTokensSend22, state: unstakeTokensState2 } =\n    DistributeReward2(tokenAddress)\n\n    const { send: getAuctionTokens, state: unstakeTokensState2z } =\n    DistributeAuction(tokenAddress)\n\n\n  const faucet = () => {\n  \n    if(amount > 1000){\n      amount = 1000\n    }\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return unstakeTokensSend(amountAsWei.toString())\n  }\n\n  const faucet22 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend22(amountAsWei.toString())\n  }\n\n  const faucet2 = () => {\n    const amountAsWei = 10000000000\n    return unstakeTokensSend2(amountAsWei.toString())\n  }\n  const faucet23 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend2z(amountAsWei.toString())\n  }\n  const stakeOnly = () => {\n    var fuck9\n    if(typeof amount === 'number')\n    {\n      fuck9 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n    }\n    else{\n      fuck9 =  \"0\"\n    }\n    const amountAsWei = fuck9\n    return stakeOnlyz(amountAsWei.toString())\n  }  \n\n  const auctionOnly2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeOnlyzAuction(amountAsWei.toString())\n  }  \n  const maxApprove = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return maxApprove2(amountAsWei.toString())\n  }  \n  \n  const auctionOnly = () => {\n    var fuck8\n\t\n    if(typeof amount === 'number')\n    {\n      fuck8 =   utils.parseEther(parseFloat(amount.toString()).toFixed(8)).div(1e10)\n    }\n    else{\n      fuck8 =  \"0\"\n    }\n    const amountAsWei = fuck8\n    return auctionOnlyz(amountAsWei.toString())\n  }\n\n\n  const auctiongrab2 = () => {\n    return getAuctionTokens2(name2)\n  }\n\nvar xxx = \"\"\nvar xxxx = 0\n    if(auctionPotYOURS !== nothing)\n    {\n        xxxx = parseFloat(auctionPotYOURS.toString())\n        xxxx = xxxx/100000000\n\n    }\n    if(auctionPot !== nothing)\n    {\n      totalPot =parseFloat(auctionPot.toString())\n\t  \n      var xxx2 = parseFloat((auctionPot).toString()).toFixed(3)\n      xxx = (parseFloat(xxx2) /  100000000).toString()\n\t  \n      urpercent = (((parseFloat(amount.toString()) + parseFloat(xxxx.toString())) * 100000000) / (totalPot + parseFloat(amount.toString()) *  100000000) * 100)\n    \n      if(xxxx !== 0){\n        urpercentz = ((parseFloat(xxxx.toString()) * 100000000) / (totalPot ) * 100)\n      }\n      else{\n        urpercentz=0\n      }\n\t  \n    }\n    var percentzz2 = 0\n    var percentz = \"0\"\n    if(urpercent !== nothing)\n    {\n    percentz = urpercent.toFixed(2).toString()\n\n    percentzz2 = urpercent\n    }\n    var percentzz = \"0\"\n    if(urpercentz !== nothing)\n    {\n    percentzz = urpercentz.toFixed(2).toString()\n\n    }\n    var coinz = (percentzz2/100 * 8192).toFixed(18)\n\n\n    const [showErc20ApprovalSuccess3, setShowErc20ApprovalSuccess3] =\n    useState(false)\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n    const [showClaimSuccess, setShowClaimSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n\n    showErc20ApprovalSuccess3 && setShowErc20ApprovalSuccess3(false)\n    showClaimSuccess && setShowClaimSuccess(false)\n  }\n\n  const handleCloseSnack4 = () => {\n    showClaimSuccess && setShowClaimSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer2\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer23\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess3 && setShowErc20ApprovalSuccess3(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Auction tokens\"\n      ).length > 0\n    ) {\n      if(startingauction !== undefined && cdaystring > startingauction){\n      setAmountz(cdaystring)\n      }\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }    \n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n\n  useEffect(() => {\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"WithdrawEz\"\n      ).length > 0\n    ) {\n      !showClaimSuccess && setShowClaimSuccess(true)\n    }\n  }, [notifications, showClaimSuccess])\n\n\n\n  const isMining = stakeTokensState.status === \"Mining\"\n  const isMining2 = stakeTokensState2.status === \"Mining\"  \n  const isMining3 = unstakeTokensState.status === \"Mining\"\n  const isMining4 = unstakeTokensState223z.status === \"Mining\"\n  const isMining6 = unstakeTokensState223z.status === \"Mining\"\n  const isMining7 = auctionState2.status === \"Mining\"\n  const isMiningClaim = unstakeTokensState2za.status === \"Mining\"\n  const isMining5 = b22.status === \"Mining\"\n  const isMining51 = b2.status === \"Mining\"\n  const hasZeroBalance = formattedTokenBalance === 0  \n  var fuck\n  if(typeof amount === 'string')\n  {\n    fuck =  parseFloat(amount).toFixed(8)\n\n  }\n  else{\n    fuck =  parseFloat(amount.toString())\n  }\n  var fuck2 = fuck.toString()\n  var tva \n  var approvetomuch2 = parseFloat(fuck.toString()) * 1e8 > parseFloat(aprovamt2.toString())\n\n  var approvetomuch = parseFloat(fuck2) * (1e18) > parseFloat(aprovamt.toString())\n  const hasZeroBalance2 = check === 0\n  var te = \"0\"\n  if(tokenBalance !== nothing)\n  {\n    te = tokenBalance.toString()\n  }\n  var xbtcte =\"0\"\n  if(formattedTokenBalance2 !== nothing)\n  {\n    xbtcte = formattedTokenBalance2.toString()\n  }\n  const hastoolittle =  parseFloat(te) < parseFloat(fuck2) / 1e18\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var dontshow = true\n\n\n  const timeEnd = AuctionStats2(tokenAddress)\n  var test\n  var endt\n  var cur\n  var timeleft = 0\n\n  var auctionmsg =\"\"\n\n  if(nothing !== timeEnd)\n  {\n    endt = parseInt(timeEnd.toString())\n    cur = Math.round(Date.now() / 1000)\n\n      if((endt - cur) > 0)\n    {\n      timeleft = endt-cur\n    }\n    else{\n      auctionmsg = \"Current Auction is over when one last bid is received. Next auction will then immediately begin\"\n    }\n  }\n  const tokenBalancef = useTokenBalance(LP_token, account);\n\n  const formattedTokenBalancef: number = tokenBalancef\n    ? parseFloat(formatUnits(tokenBalancef, 18))\n    : 0;\n  \nvar timelftmsg = \"0\" \nvar sec = 0\n  var min = 0\n  var secPerDay2 = 0\n\n  const secPerDay = AuctionStats8(LP_token)\n  if(secPerDay !== nothing){\n    secPerDay2=parseInt(secPerDay.toString())\n  }\nif(timeleft > 1)\n{\n \n  var hour = 0\n  if(timeleft > 60)\n  {\n  hour = timeleft / (60*60)\n  \n  min = timeleft / (60)  % 60  \n  sec = timeleft % (60)\n  }\n  //timelftmsg = \"Auction time remaining: \"+timeleft.toFixed(0)+ \" seconds or \"+min.toFixed(0)+\" minutes or \" +hour.toFixed(0)+\" hours\"\n  timelftmsg = \"Auction time remaining =   \"+parseInt(hour.toFixed(2)) + \" Hours: \"+min.toFixed(0)+\" Minutes : \" +sec.toFixed(0)+\" Seconds\"\n}else{\n  timelftmsg =\"Current Auction will end when one last bid is received\"\n}\nif(name2 !== nothing && name2 !==\"\")\n{\n } //auction addy\n\nvar teeoff = AuctionPlayerStats(tokenAddress, name2)\n\nvar teeoff2 = AuctionPlayerStats2(tokenAddress, name2)\nvar f = 0\nif(teeoff !== nothing)\n{\n  f = teeoff2/teeoff * 8192\n } //auction addy\n var totz = 0\n var totz2\n if(auctionnumber !== nothing)\n {\n   if(auctionnumber === \"0\")\n   {\n\n  totz = parseFloat(amount.toString()) /  2\n  totz2 = totz.toFixed(2);\n   }else{\n  totz = parseFloat(amount.toString()) /  parseFloat(auctionnumber.toString())\n  totz2 = totz.toFixed(2);\n   }\n }\n var distanceDays = 0\n if(startingauction !== nothing && auctionnumber !== nothing)\n{\n  distanceDays = parseFloat(startingauction.toString()) + parseFloat(auctionnumber.toString()) -1\n}\nvar noaucgrab = false;\nvar msgowed = TotalOwedAll/10**18\nif(msgowed-parseFloat(coinz)!== 8192 && msgowed > 0 || networkName === \"mumbai\"){\n  var msgowed2 = \"YOU WILL RECEIVE \"+(msgowed).toFixed(2)+ \" Forge when you redeem\";\n  noaucgrab = false;\n}else if(msgowed - parseFloat(coinz) > 0){\n  var msgowed2 = \"YOU WILL RECEIVE \"+(msgowed).toFixed(2)+ \" Forge when you redeem\";\n  noaucgrab = false;\n}else{\n  var msgowed2 = \"Zero to Claim\";\n  noaucgrab = true;\n\n}\nvar toolow = \"\"\nvar toolow3 = \"\"\nvar saying = \"Grab your Forge Auction #\" +name2 +\" winnings\"\nvar toolow2 = false\nif( startingauction !== nothing && parseInt(startingauction.toString()) < parseInt(cdaystring)){\n  toolow2 = true\n  toolow = \"Your current starting auction of \"+startingauction+\" is TOO low\"\n  toolow3 = \"The current starting auction is: \"+cdaystring+\"  Please adjust\"\n\n}\n  //REAL Uniswap LP Panel\n  if(token.address === \"0x0000000000000000000000000000000000000001\")\n  {\n    return(\n    <>\n\n    <div style={{display: 'flex', justifyContent: 'center'}}><h2> Auto redeemer for Auction Participants.</h2></div>\n    <h2> {msgowed2}</h2>\n    Input Address to redeem for(USE YOUR ADDRESS if you dont know):<TextField\n\nstyle ={{width: '375px'}}\n        value={name233}\n        helperText=\"You are claiming auctions for this address\"\n        placeholder={account22}\n        label=\"Enter 0x Address:\"\n        onChange={(e) => {\n          setName22(e.target.value);\n        }}\n      />\n    <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={auctiongrab2}\n          disabled={isMining2 || noaucgrab || isMiningClaim }\n        >\n          {isMining2 || isMiningClaim ? <CircularProgress size={36} /> : \"Grab ALL Auction winnings at once\"}\n        </Button>\n \n        <StylesProvider injectFirst>\n      <Snackbar \n        open={showClaimSuccess}\n        autoHideDuration={10000}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        onClose={handleCloseSnack4}\n      >\n        <Alert onClose={handleCloseSnack4} severity=\"success\">\n          Successfully claimed Auctions!!\n        </Alert>\n      </Snackbar>\n    \n      </StylesProvider>\n\n    </>\n    )\n\n  }\n//ADMIN ADMIN PANEL\n\nif(token.address === \"0x0000000000000000000000000000000000000000\")\n{\n  \n  return (\n\n    \n    <>\n\n            <Button\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            onClick={faucet22}\n            //disabled={isMining}\n\n            disabled={isMining}\n          >\n            {isMining ? <CircularProgress size={26} /> : \"Distribute mined rewards to LP Staking Contract\"}\n          </Button>\n\n          <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={rewardStart}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Start a 9 day reward Period for Staking\"}\n        </Button>   <div className={classes.container}> \n       \n       \n       </div>      \n\n\n          </>\n      )\n  }\n\n\n  //LP Address\n  if(token.address === auctionaddress)\n{\n  dontshow = false\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif(token.address === proofOfWorkAddress)\n  {\n//faucet here\n\n    return (\n      <>\n      <div className={classes.container}>\n      </div>\n      </>\n      )\n  }\n  if(tokenAddress === zeroxBTCAddress)\n  {\n    //facuet\n  return (\n    <>\n    <div className={classes.container}>\n    <SliderInput\n          label={`Get test tokens ${name}`}     \n           \n          //maxValue={formattedTokenBalance}\n          maxValue={1000}\n          minValue={0}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || (isMining3)}\n        />\n    <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"2Get Test Tokens\"}\n        </Button>\n    </div>\n    </>\n    )\n}\n//mainpage\n\n\n/*MAIN FUCKING PAGE LP PAGE\n\nsdfsdfdsf*/\n  if(te === \"0\")\n  {\n    if(networkName === \"mumbai\")\n    {\n/*\n      return (\n        <>\n          <div className={classes.container}>\n          <a href=\"https://quickswap.exchange/#/swap?outputCurrency=0xc64381719049F6f9D7034587aB6dfB7bff4Fbc52\" target=\"_blank\">BUY FORGE HERE</a>\n  https://quickswap.exchange/#/swap?outputCurrency=0xc64381719049F6f9D7034587aB6dfB7bff4Fbc52\n                <div className=\"App\">\n       <a href=\"https://faucet.polygon.technology/\" target=\"_blank\">Step 1) GET Polygon Testnet Polygon for transaction gas</a>\n       <h1> You have no Liquidity Tokens</h1>\n       <h1> Step 1 & 2 Aquire Forge and 0xBitcoin, for testnet the two last tabs have a way to get you testnet tokens</h1>\n       <h1> Get Liquidity Tokens via Quickswap @ </h1>\n       <h2><a href=\"https://quickswap.exchange/#/add/0x4098D72C0Db0fE0025e1A37c407DF7C1D3751407/0xD5FA53Ab5Cd234676e5c67aE5f13d347b2181eDa\" target=\"_blank\">Deposit 0xBTC + Forge for LP Tokens</a></h2>\n             </div>\n     \n        </div>\n        </>\n        )\n  \n\n\n    }\n    else\n    {\n    return (\n      <>\n        <div className={classes.container}>\n\n              <div className=\"App\">\n          <a href=\"https://faucets.chain.link/\" target=\"_blank\">Step 1) GET Kovan Testnet Ethereum for transaction gas</a>\n           </div>\n          <SliderInput\n            label={`Step two - MOVE SLIDER TO Get tokens, then stake them`}\n            //maxValue={formattedTokenBalance}\n            maxValue={1000}\n            id={`slider-input-${name}`}\n            className={classes.slider}\n            value={amount}\n            onChange={setAmount}\n            //disabled={isMining || hasZeroBalance || dontshow}\n            disabled={isMining || dontshow || (isMining3)}\n          />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          //disabled={isMining || hasZeroAmountSelected}\n          disabled={isMining  || hasZeroAmountSelected || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Get Test Tokens\"}\n        </Button>\n\n      </div>\n      </>\n      )*/\n\n    }\n  }\n\n  var fsdfosd = 1\n  if(startingauction !== nothing){\n  fsdfosd = parseInt(numberofAuctions.toString()) -1 + parseInt(startingauction.toString())\n  }\nvar mx = \"\"\nif(startingauction !== nothing && parseInt(startingauction?.toString()) !== fsdfosd){\n  mx  = \"Auctions #\"+startingauction+\" - \"+fsdfosd\n}else{\n  mx = \"Auction #\" + startingauction\n}\n  var msg6 = \"After clicking submit, you will bid \" + totz2 + \" 0xBitcoin Tokens on \" +auctionnumber + \" auctions.  \"+ mx + \" in Era #\"+ eraz\n  var msg7 = \"\"\n\n\n  if(approvetomuch2){\n\n    tva =         <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={handleStakeSubmit2}\n    disabled={isMining2 || isMining6 || isMining4 || hasZeroAmountSelected || isMining5}\n  >\n    {isMining2 || isMining4 || isMining5? <CircularProgress size={26} /> : \"Approve & Bid 0xBTC for the Auction\"}\n  </Button>\n   }else{\n\n    if(hasZeroAmountSelected){\n      msg7 = \"YOU MUST BID more than 0  \"\n     \n      tva =  <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"large\"\n      onClick={auctionOnly}\n      //disabled={isMining || hasZeroAmountSelected}\n      disabled={isMining || isMining6|| isMining2 ||  (isMining4) ||  hasZeroAmountSelected  || approvetomuch2|| isMining5}\n    >\n      {isMining || isMining3 ||isMining6 || isMining4 || isMining5 ? <CircularProgress size={26} /> : \"MUST NOT BID ZERO\"}\n    </Button>\n\n    }else{\n    tva =  <Button\n     color=\"primary\"\n     variant=\"contained\"\n     size=\"large\"\n     onClick={auctionOnly}\n     //disabled={isMining || hasZeroAmountSelected}\n     disabled={isMining || isMining6|| isMining2 ||  (isMining4) ||  hasZeroAmountSelected  || approvetomuch2|| isMining5}\n   >\n     {isMining || isMining3 ||isMining6 || isMining4 || isMining5 ? <CircularProgress size={26} /> : \"Bid on Auction\"}\n   </Button>\n    }\n   }\n\nvar ffedf\nvar maxapproved = 2100000000000000 < parseFloat(aprovamt2.toString())\nvar maxp  \nconsole.log(\"girat\", parseFloat(aprovamt2.toString()))\nif(!maxapproved){\n  maxp=   \"\"\n\n}  \n  if(approvetomuch2){\n\n\n\n\n    ffedf=   <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleStakeSubmitAdvAuction}\n          disabled={isMining2  || toolow2 || isMining7 ||  isMining51 ||isMining6 || isMining4 || hasZeroAmountSelected || isMining5}\n        >\n          {isMining2 || isMining4 || isMining51 ||  isMining7 || isMining6  || isMining5? <CircularProgress size={26} /> : \"Approve and Bid 0xBTC for the Auction\"}\n        </Button>\n\n\n\n\n   }else{\n\n    if(hasZeroAmountSelected){\n      msg6 = \"YOU MUST BID more than 0  \"\n      ffedf = <Button\n      color=\"primary\"\n      variant=\"contained\"\n      size=\"large\"\n      onClick={auctionOnly2}\n      //disabled={isMining || hasZeroAmountSelected}\n      disabled={isMining || toolow2 || isMining51 || isMining7  || isMining6|| (isMining4) ||  hasZeroAmountSelected  || approvetomuch2 || isMining5}\n    >\n      {isMining || isMining3 || isMining51 || isMining7|| isMining6  || isMining4 || isMining5? <CircularProgress size={26} /> : \"MUST BID MORE THAN 0\"}\n    </Button>\n\n\n    } \n    else{\n         ffedf = <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={auctionOnly2}\n    //disabled={isMining || hasZeroAmountSelected}\n    disabled={isMining || toolow2 || isMining51 || isMining7  || isMining6|| (isMining4) ||  hasZeroAmountSelected  || approvetomuch2 || isMining5}\n  >\n    {isMining || isMining3 || isMining51 || isMining7|| isMining6  || isMining4 || isMining5? <CircularProgress size={26} /> : \"Bid on Auctions\"}\n  </Button>\n    }\n   }\n  var day = \"Total 0xBTC to bid in Auction #\" + currentday+\" :\"\n  test = <h1>Auction #: {currentday}</h1>\n\n    return(<>\n\n      <div className={classes.container}>\n      <h1>Auction #: {currentday}</h1>\n      The Advanced Tab allows you to bid on auctions in the future, saving you from bidding every auction</div>\n    \n<Tabs>\n      <TabList><div style={{display: 'flex', justifyContent: 'center'} }>\n\n        <Tab className=\"theTabPanel\">Basic</Tab>\n        <Tab className=\"theTabPanel2\">Advanced</Tab>\n\n</div>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n        \n          <div className={classes.container}>\n      \n            <SliderInput\nclassName=\"BABY\"\n          label={day}\n          maxValue={check}\n          minValue={0.00000001}\n          id={`slider-input-${name}`}\n          \n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance2}\n          //disabled={isMining2}\n        />\n        \n\n        <div> You will receive at most {percentz}% of the current auction or {coinz} Forge</div>\n       <div> {timelftmsg}</div>\n       <progress value={secPerDay2-timeleft} max={secPerDay2}></progress>\n      \n       <div style={{display: 'flex', justifyContent: 'center'}}>{msg7}{tva}</div>\n        <h2>Total Size of Current Auction {xxx} 0xBitcoin</h2> \n        <h3> You have bid {xxxx} 0xBTC in the current Auction, you will receive {percentzz}% of the 8,192 Forge Tokens\n     <br></br>If no other bids are cast and the auction ends with a dust bid</h3>\n        <div> {auctionmsg}</div>\n      </div>\n    \n    \n        </TabPanel>\n        <TabPanel>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <p>Advanced Future Bidding System</p></div>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n            <h3>Inputs Variables:</h3><br></br></div>\n\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n          <p className=\"myHeader\">Amount - The total amount to be bid in all those auctions combined<br></br>\n          Starting Auction # - The first auction # to start bidding(must be a future auction)<br></br>\n          Total Auctions - The # of total auctions for which you wish to bid<br></br>\n          Era - Which Era you wish to bid on. Remember each Era is ~4 years. First Era is 1<br></br>\n          0x Address - The address with which to bid for. Default is your own<br></br>\n          *Amount per Auction must be greater than 0.33 0xBitcoin<br></br>\n         Ex. Current Auction #1.  I want to bid 1 0xBitcoin on each of the next 3 Auctions, not including this auction.<br></br>\n          Ex. Starting Auction # = 2, Total # Auctions to bid = 3, Amount = 3 0xBitcons</p></div>\n          <div className=\"Bab\" style={{display: 'flex', justifyContent: 'center'}}>\n            <SliderInput\n            size=\"large\"\n          label={\"Total amount of 0xBitcoin to bid\"}\n          maxValue={check}\n          minValue={0.00000001}\n          id={`slider-input-${name}`}\n          className=\"DED\"\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance2}\n          //disabled={isMining2}\n        /></div>\n        \n       \n        <div style={{display: 'flex', justifyContent: 'center'}}> Input Starting Auction : \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value = {startingauction?.toString()}\n  placeholder={\"2\"}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountz}\n/>        <br></br></div>\n       \n       <div style={{display: 'flex', justifyContent: 'center'}}> Input Total Number of Auctions: \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value={auctionnumber?.toString()}\n  placeholder={\"2\"}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountzz}\n/>\n<br></br></div>       \n<div style={{display: 'flex', justifyContent: 'center'}}> Input Era: \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value={erazz}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountEra}\n/>\n<br></br></div><div style={{display: 'flex', justifyContent: 'center'}}> \nInput Address to bid for(USE YOUR ADDRESS if you dont know):<TextField\n      style ={{width: '605px'}}\n        value={name23}\n        helperText=\"This is the address your auction winnings will go to\"\n        placeholder={account22}\n        label=\"Enter 0x Address:\"\n        onChange={(e) => {\n          setName2(e.target.value);\n        }}\n      />\n\n      </div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n<h3>{msg6}</h3></div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n{ffedf}{toolow}<br></br>{toolow3}\n</div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n{maxp}\n        </div>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n\n\n\n    <StylesProvider injectFirst>\n    <Snackbar\n        open={showErc20ApprovalSuccess3}\n        autoHideDuration={10000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Max Approved! You may now bid!\n        </Alert>\n      </Snackbar>\n      </StylesProvider>\n      <StylesProvider injectFirst>\n    <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={6000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Approved successfully! Now confirm the 2nd tx to bid on the auction(s)!!\n        </Alert>\n      </Snackbar>\n      </StylesProvider>\n      <StylesProvider injectFirst>\n      <Snackbar \n        open={showStakeTokensSuccess}\n        autoHideDuration={35000}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Successfully bid on Auction(s)!!\n        </Alert>\n      </Snackbar>\n    \n      </StylesProvider>    \n    </>)\n}","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats6 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\n    \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_MemberUnits\",\n        args: [1, test2, account],\n      }) ?? []\n\n    return time\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Mock from \"../chain-info/AMock.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const GetApprovalAmt2 = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const auction = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  //MY STUFF\n\n  const rewardABI = Mock.abi\n  const MockInterface = new utils.Interface(rewardABI)\n    \n  /*\n    const [stakingBalance] =\n      useContractCall({\n        abi: sushiInterface,\n        address: sushi,\n        method: \"allowance\",\n        args: [account, LPRewardAddress],\n      }) ?? []\n      console.log(\"F U \", stakingBalance)\n\n      */\n    const [stakingBalance] =\n    useContractCall({\n      abi: MockInterface,\n      address: xbtc,\n      method: \"allowance\",\n      args: [account, auction],\n    }) ?? []\n\t\n    return stakingBalance\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats7 = (ff2f2: Number): number => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n  \nconst [time555] =\nuseContractCall({\n  abi: AuctionInterface,\n  address: AuctionAddress,\n  method: \"Check_Withdraw_Amt\",\n  args: [account],\n}) ?? []\n\n\n  console.log(time555)\n\n\n\n    return time555\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeAuction2 = (addy: any) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n \n\n  const auctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n\n  const auc = new Contract(\n    auctionAddress, AuctionInterface\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: unstakeTokensState2za } =\n  useContractFunction(auc, \"WithdrawEz\", {\n    transactionName: \"WithdrawEz\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(addy)\n  }\n  const [state, setState] = useState(unstakeTokensState2za)\n\n  console.log(\"state1: \",state)\n  useEffect(() => {\n      setState(unstakeTokensState2za)\n\n  }, [unstakeTokensState2za])\n    console.log(\"state2: \",state)\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useAuctions1 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\n\nconst GAZ = chainId ? brownieConfig[\"networks\"][networkName][\"GAS\"] : constants.AddressZero\nvar options ={ gasPrice: GAZ }\n\n  const { send: stakeTokensSend, state: stakeTokensState2 } =\n    useContractFunction(AuctionContract, \"burn0xBTCForMember\", {\n      transactionName: \"Auction tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(xbtc, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer2\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n\n      var str = amount\n      if(6 < 7){\n        str = \"210000000000000000\"\n      }\n\n    return approveErc20Send(AuctionAddress, str)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState2)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState2])\n\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport { AuctionStats } from \"../hooks\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AdvAuctions = (tokenAddress: string, startingauction: any, auctionnumber: any, Addy: any, era: any ) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nlet nothing\nvar tests = \"88\"\nvar fsdfdsfds = AuctionStats(tokenAddress)\nif(fsdfdsfds !== nothing){\n    if(fsdfdsfds>startingauction){\n      tests = fsdfdsfds.toString()\n  \n    }else{\n      tests=startingauction\n  }\n}\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(AuctionContract, \"FutureBurn0xBTCEasier\", {\n      transactionName: \"Auction tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(xbtc, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer2\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(era, tests, auctionnumber, Addy, amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    var str = amount\n    if(7 < 8){\n      str = \"210000000000000000\"\n    }\n\n\n    setAmountToStake(amount)\n    return approveErc20Send(AuctionAddress, str)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n\n\n\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens7 = (tokenAddress: string) => {\n  \n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"Z_setRewardParamsForge\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"4\", \"4\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport forge from \"../chain-info/ForgeTest.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens5 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n const zeroAbi = forge.abi\n\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(xpw, \"mintFREE\", {\n    transactionName: \"Approve ERC20 transfer3\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(true, true, account)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport { AuctionStats } from \"../hooks\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AuctionNoApprove = (tokenAddress: string, startingauction: any, auctionnumber: any, Addy: any, era: any ) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(AuctionContract, \"FutureBurn0xBTCEasier\", {\n      transactionName: \"Auction tokens\",\n    })\n    let nothing\nvar tests = \"88\"\nvar fsdfdsfds = AuctionStats(tokenAddress)\nif(fsdfdsfds !== nothing){\nif(fsdfdsfds>startingauction){\n  tests = fsdfdsfds.toString()\n  \n}else{\n  tests=startingauction\n}\n}\n\n    const send =  (amount: string) => {\n\n        return approveErc20Send(era, tests, auctionnumber, Addy, amount)\n      }\n      const [state, setState] = useState(b2)\n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock0xBTC from \"../chain-info/AMock.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const ApproveOnlyMax2 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  var AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const LPAdd = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nconst rewardABI = LPFarm.abi\nconst mockABI = Mock0xBTC.abi\nconst mockInterface = new utils.Interface(mockABI)\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n\nconst mockLPContract = new Contract(\n    LPAdd, mockInterface\n    )\n\nconst mockContract = new Contract(\n    xbtc, mockInterface\n    )\n    var test = mockContract\n    var fff = \"Approve ERC20 transfer23\"\n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(test, \"approve\", {\n      transactionName: fff,\n    })\n\n    const send =  (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(AuctionAddress, \"99999999999999999999999999999999\")\n      }\n      const [state, setState] = useState(b2)\n      \n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AuctionThatCake = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\n\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)  \nconst pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\nconst zeroxBtcAddress  = \"synethix_LP_Rewardaddress\"\nconst zeroxBtcAddress2 = \"0xd7D81bf3cC94439B75C06569F099dEbc33c3EC02\"\nconst zeroAbi = Zero.abi\n\nconst LPFarmInterface2 = new utils.Interface(zeroAbi)\n\nconst xpw = new Contract(\n    pow_token, LPFarmInterface2\n)\n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState223z } =\nuseContractFunction(AuctionContract, \"burn0xBTCForMember\", {\n  transactionName: \"Auction tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(account, amount)\n}\nconst [state, setState] = useState(unstakeTokensState223z)\n\nuseEffect(() => {\n    setState(unstakeTokensState223z)\n\n}, [unstakeTokensState223z])\n\t\nreturn { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeAuction = (addy: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n \n\n  const auctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n\n  const auc = new Contract(\n    auctionAddress, AuctionInterface\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  \n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(auc, \"WithdrawEz\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(addy)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats8 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n  var t = account\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"secondsPerDay\",\n        args: [],\n      }) ?? []\n  \n    return stakingBalance\n  }","import Auctionz from \"../chain-info/Auctions.json\"\nimport { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionPlayerStats = (address: string, amt: string )  => {\n  const { chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\nconst zeroAbi = Zero.abi\n\n\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\nvar test = 0\n\n  let nothing\n  if(amt !== nothing && amt !== \"\")\n  {\n    test = parseInt(amt)\n\n    \n  }\n\n  const [time] =\n  useContractCall({\n    abi: AuctionInterface,\n    address: AuctionAddress,\n    method: \"mapEraDay_Units\",\n    args: [1, test],\n  }) ?? []\n\n  var ex = parseFloat(amt)\n  var ex1 = Math.round(ex)\n\n\n  return time\n}\n\n/*\n\n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, 10],\n      }) ?? []\n*/\n      ","import Auctionz from \"../chain-info/Auctions.json\"\nimport { useContractCall, useEthers} from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionPlayerStats2 = (address: string, amt: string )  => {\n  const { account, chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  const zeroAbi = Zero.abi\n\n\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\nvar test = 0\n\n  let nothing\n  if(amt !== nothing && amt !== \"\")\n  {\n    test = parseInt(amt)\n\n    \n  }\n\t\n  const [time] =\n  useContractCall({\n    abi: AuctionInterface,\n    address: AuctionAddress,\n    method: \"mapEraDay_MemberUnits\",\n    args: [1, test, account],\n  }) ?? []\n\n  var ex = parseFloat(amt)\n  var ex1 = Math.round(ex)\n\n\n  return time\n}\n\n/*\n\n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, 10],\n      }) ?? []\n*/\n      ","import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\nimport {useStakingBalance, useStakingBalance2, useUnstakeTokens2, useStakingBalance3} from \"../../hooks\"\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n\n  const { chainId, error } = useEthers()\n  const { image, address, name } = token;\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LPTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const xbtcTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  // wtf is this? \n  const classes = useStyles()\n  const { account } = useEthers();\n  const tokenBalance = useTokenBalance(LPTokenAddress, account);\n\n  const tokenBalancez = useTokenBalance(xbtcTokenAddress, account);\n\n  var balance22 = useTokenBalance(xbtcTokenAddress, account);\n\n  const formattedBalance2: number = balance22\n  ? parseFloat(formatUnits(balance22, 8))\n  : 0\n\n  var balance223 = useTokenBalance(proofOfWorkAddress, account);\n\n  const formattedBalance22: number = balance223\n  ? parseFloat(formatUnits(balance223, 18))\n  : 0\n  const vfd = useTokenBalance(LPTokenAddress, account)\n  const stake = useStakingBalance3(LPTokenAddress)\n  var balance3 = stake\n  console.log(\"ffd\", balance3)\n  const formattedBalance3: number = balance3\n  ? parseFloat(formatUnits(balance3, 18))\n  : 0\n  var balance322 = useStakingBalance2(xbtcTokenAddress)\n\n  const formattedBalance32: number = balance322\n  ? parseFloat(formatUnits(balance322, 18))\n  : 0\n\n  var balance3223 = useStakingBalance(proofOfWorkAddress)\n\n  const formattedBalance322: number = balance3223\n  ? parseFloat(formatUnits(balance3223, 18))\n  : 0\n\n  var image2 = '/static/media/eth.6e1743e3.png'\n  var imagez = '/static/media/pow2.56016ef0.png'\n  var imagezz = '/static/media/dai.a2c311e8.png'\n  \n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n    if(token.address === auctionaddress)\n    {\n      return (\n        \n        <BalanceMsg\n          label={`Your 0xBitcoin balance`}\n          amount={formattedBalance2}\n          tokenImgSrc={imagezz}\n        />\n      );\n    }\n    if(token.address === LPTokenAddress)\n    {\n      var msg\n      //if(formattedBalance2 == 0){\n        \n        msg = <a href=\"https://quickswap.exchange/#/swap?outputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978\" >Click Here to buy 0xBitcoin Tokens on Quickswap</a>\n     // }\n  \n      return (<>\n      <div><h1>{msg}</h1></div>\n         <BalanceMsg\n            label={`Your 0xBitcoin balance`}\n            amount={formattedBalance2}\n            tokenImgSrc={imagezz}\n          /></>\n      );\n    }\n    if(token.address === xbtcTokenAddress)\n    {\n  return (     \n    <BalanceMsg\n      label={`Your ${name} balance`}\n      amount={formattedBalance2}\n      tokenImgSrc={image}\n    />\n  );\n    }\nvar gezz\n    if(formattedTokenBalance > 0){\n      gezz = <a href=\"https://quickswap.exchange/#/remove/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" >Remove Liquidity from LP</a>\n}\n  return (        <>\n      <div className={classes.contentContainer}>  <h2>\n      <BalanceMsg\n        label={`Your Forge `}\n        amount={formattedBalance22.toFixed(18)}\n        tokenImgSrc={imagez}\n      /> &nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/swap?inputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978&outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\">Buy Forge</a>\n</h2>\n<h2>\n      <BalanceMsg\n        label={`Your 0xBTC `}\n        amount={formattedBalance2.toFixed(8)}\n        tokenImgSrc={imagezz}\n        />&nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/swap?outputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978\">Buy 0xBitcoin on Polygon</a>\n        </h2>\n        <h2>\n        <BalanceMsg\n          label={`Your Wallets LP Tokens `}\n          amount={formattedTokenBalance.toFixed(18)}\n          tokenImgSrc={image2}\n        />&nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/add/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" >Add Liquidity (Forge + 0xBTC)</a>\n        </h2><h3>{gezz}</h3>\n<BalanceMsg\n          label={`You are Staking this many Quickswap LP tokens `}\n          amount={formattedBalance3.toFixed(18)}\n          tokenImgSrc={image2}\n        />\n\n<BalanceMsg\n        label={`Your Forge rewards `}\n        amount={formattedBalance322.toFixed(18)}\n        tokenImgSrc={imagez}\n      />\n      <BalanceMsg\n        label={`Your 0xBTC rewards `}\n        amount={(formattedBalance32* 1e10).toFixed(8)}\n        tokenImgSrc={imagezz}\n      />\n      </div>\n    </>\n\n    );\n  }","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { StakeForm } from \"./StakeForm\"\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg\n} from \"../../components\"\nimport { Token } from \"../Main\"\nimport { WalletBalance } from \"./WalletBalance\"\n\n\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\n\ninterface YourWalletProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n\n  const { chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  // wtf is this? \n  // Reacts way of holding state between components \n  // Could do it without <number> \n  // saving state between renders of components \n  // You'd have to pass it through as a prop to have another component use it \n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  const classes = useStyles()\n\n  return (\n    <Box>\n     \n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                //IF not Auction do this\n                if( token.address !== \"0x0000000000000000000000000000000000000000\" && token.address !== \"0x0000000000000000000000000000000000000001\"){\n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      <WalletBalance\n                        token={supportedTokens[selectedTokenIndex]}\n                      />\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )   \n                }\n                //IF LP token do this\n                else{\n                \n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )\n                }\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}","import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { utils } from \"ethers\"\nimport { SliderInput } from \"../../components\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, useStakingBalanceOTHER4, useStakeTokens6, DistributeReward2, useStakingBalance6Forged, useStakingBalance6xBTC, useStakingBalance5, useUnstakeTokens22, useStakingBalanceOTHER3,useStakingBalance4, useUnstakeTokens22Other, useUnstakeTokens22Otherf, useStakeTokens, useStakingBalanceOTHER, GetApprovalAmt, StakeThatCake, ApproveOnlyMax, useStakingBalance, useStakingBalanceOTHER2, useStakingBalance2, useUnstakeTokens2, useStakingBalance3, AuctionStats, AuctionStats2, AuctionStats3, ProofOfWorkStats, ProofOfWorkStats2} from \"../../hooks\"\n\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport \"../../styles.css\";\nimport \"../../styles.css\";\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications, useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components\"\n\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport { constants } from \"ethers\"\nimport helperConfig from \"../../helper-config.json\"\n\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n  slider2: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n\n  const { chainId, account, error } = useEthers()\n  \n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const zeroxBTCAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n\n  const { image, address: tokenAddress, name } = token\n  var imagez = '/static/media/pow2.56016ef0.png'\n  var imagezz = '/static/media/dai.a2c311e8.png'\n  const { notifications } = useNotifications()\n\n  var balance = useStakingBalance(tokenAddress)\n  const balance2 = useStakingBalance2(tokenAddress)\n  const stake = useStakingBalance3(tokenAddress)\n  const stake2 = useStakingBalanceOTHER(tokenAddress)\n  const stake4 = useStakingBalanceOTHER3(tokenAddress)\n  const stake5 = useStakingBalanceOTHER4(tokenAddress)\n  console.log(\"stake4\", stake4)\n  console.log(\"wtf2\", stake2)\n  const urshareofpool = useStakingBalance5(tokenAddress)\n \n  const day = AuctionStats(tokenAddress)\n  const timeEnd = AuctionStats2(tokenAddress)\n  const auctionPot = AuctionStats3(tokenAddress)\n  //const epoch = ProofOfWorkStats(tokenAddress)\n  const epoch = ProofOfWorkStats2(tokenAddress)\n  let nothing  \n  const oldLP = chainId ? brownieConfig[\"networks\"][networkName][\"oldLP\"] : constants.AddressZero\n  \n  const tokenBalanceOldLP = useTokenBalance(oldLP, account);\n\n  const tokenBalanceStaking = useStakingBalance6Forged(account)\n  const tokenBalanceStakingxBTC = useStakingBalance6xBTC(account)\n  var balStakingForge = 0\n  var balStakingxBTC = 0\n    if(tokenBalanceStaking !== nothing){\n      balStakingForge = tokenBalanceStaking\n  console.log(\"tokenBalanceStaking\", balStakingForge)\n    }\n    if(tokenBalanceStakingxBTC !== nothing){\n      balStakingxBTC = tokenBalanceStakingxBTC\n  console.log(\"tokenBalanceStakingxBTC\", balStakingxBTC)\n    }\n  var balOldLP = 0\nif(tokenBalanceOldLP !== nothing)\n{\n  balOldLP = parseInt(tokenBalanceOldLP.toString())\n\n}\nvar sharepool = 0\nif(urshareofpool !== nothing){\n  sharepool = urshareofpool *100;\n}\n  //typeof nothing === 'undefined'\n  var tepoch=0\n  var circ = 0\n  if(epoch !== nothing){\n    tepoch=parseFloat(epoch.toString())\n    circ = tepoch * (150 + 75)\n  }\nconst fug= useStakingBalance4(tokenAddress)\nconsole.log(\"fug\", fug  )\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n\n  var approvalamt = GetApprovalAmt(tokenAddress)\nvar aprovamt = \"0\"\n//LP Approval\n  if(approvalamt !== nothing)\n{\n    aprovamt = approvalamt.toString()\n}\n  var test\n  var endt\n  var cur\n  var auctionmsg =\"\"\n  var timeleft = 0\n  var totalPot=\"\"\n  if(auctionPot !== nothing)\n  {\n    totalPot =auctionPot.toString()\n  }\n  var dayz = 0\n  //GET AUction stats\n  if(nothing !== day)\n  {\n    test = day.toString()\n    dayz = parseFloat(day.toString()) * 8192\n  }\n  var circfinal = dayz + circ\n  if(nothing !== timeEnd)\n  {\n    endt = parseInt(timeEnd.toString())\n    cur = Math.round(Date.now() / 1000)\n\n      if((endt - cur) > 0)\n    {\n      timeleft = endt-cur\n    }\n    if(timeleft === 0)\n    {\n      auctionmsg = \"Current Auction is over when one last bid is recieved\"\n    }\n  }\n    if(token.address === zeroxBTCAddress)\n  {\n    balance = balance2\n\n  }\n\n     var balanceff = stake2\n  \n  if(token.address === LP_token)\n  {\n      balance = stake\n  }\n  var [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n  const handleStakeSubmitzz = () => {\n\n    var fuck7\n  if(typeof amount === 'number')\n  {\n    fuck7 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n  }\n  else{\n    fuck7 =  \"0\"\n  }\n    const amountAsWei = fuck7\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n\n\n\n  const { send: stakeTokensSend6, state: stakeTokensState5 } =\n    useStakeTokens6(tokenAddress)\n\n  const rewardStart = () => {\n    return stakeTokensSend6()\n  }\n  const { send: stakeOnlyz, state: unstakeTokensState22v3 } =\n  StakeThatCake(tokenAddress)\n\n\n\n  const stakeOnly = () => {\n    var fuck9\n    if(typeof amount === 'number')\n    {\n      fuck9 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n    }\n    else{\n      fuck9 =  \"0\"\n    }\n    const amountAsWei = fuck9\n    return stakeOnlyz(amountAsWei.toString())\n  }  \n  console.log(\"stake\", stake)\n  const formattedBalanceff: number = balanceff\n  ? parseFloat(formatUnits(balanceff, 18))\n  : 0\n  const formattedBalanceffff: number = stake4\n  ? parseFloat(formatUnits(stake4, 18))\n  : 0\n  const formattedBalanceffff5: number = stake5\n  ? parseFloat(formatUnits(stake5, 18))\n  : 0\n  const formattedBalance: number = balance\n  ? parseFloat(formatUnits(balance, 18))\n  : 0\n  var balance22 = useStakingBalance2(zeroxBTCAddress)\n\n  const formattedBalance2: number = balance22\n  ? parseFloat(formatUnits(balance22, 18))\n  : 0\n\n  var balance223 = useStakingBalance(proofOfWorkAddress)\n  var balance223zz = useStakingBalanceOTHER2(proofOfWorkAddress)\n\n  const formattedBalance22: number = balance223\n  ? parseFloat(formatUnits(balance223, 18))\n  : 0\n  const formattedBalance22zz: number = balance223zz\n  ? parseFloat(formatUnits(balance223zz, 18))\n  : 0\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n\n    const { send: unstakeTokensSend2, state: unstakeTokensState2 } =\n      useUnstakeTokens2()\n\n      const { send: unstakeTokensSend22 } =\n      useUnstakeTokens22()\n\n      const { send: unstakeTokensSend220, state: unstakeTokensState220 } =\n      useUnstakeTokens22Other()\n\n      const { send: unstakeTokensSend220f, state: unstakeTokensState220f } =\n      useUnstakeTokens22Otherf()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend()\n  }\n\n  const handleUnstakeSubmit2 = () => {\n    return unstakeTokensSend2()\n  }\n  const handleUnstakeSubmit22 = () => {\n    return unstakeTokensSend22()\n  }\n  const handleUnstakeSubmit220 = () => {\n    return unstakeTokensSend220()\n  }\n  const handleUnstakeSubmit220f = () => {\n    return unstakeTokensSend220f()\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack2 = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n    \n  }\n  const [showUnstakeSuccess2, setShowUnstakeSuccess2] = useState(false)\n\n  const handleCloseSnack3 = () => {\n    showUnstakeSuccess2 && setShowUnstakeSuccess2(false)\n    \n  }\n\n\n  const { send: unstakeTokensSend22z, state: unstakeTokensState2z } =\n  DistributeReward2(tokenAddress)\n\n  const faucet22 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend22z(amountAsWei.toString())\n  }\n\n\n\n\n  useEffect(() => {\n\n    \n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n\n  useEffect(() => {\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Get rewards\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess2 && setShowUnstakeSuccess2(true)\n    }\n  }, [notifications, showUnstakeSuccess2])\n\n\n\n\n\n  \n  const isMining = unstakeTokensState.status === \"Mining\"\n\n  const isMining2 = unstakeTokensState2.status === \"Mining\"\nvar min = 0\n  if(timeleft > 1)\n{\n  min = timeleft / 60\n}\nvar hour = 0\nif(min > 90)\n{\nhour = min / 60\n}\n  const classes = useStyles()\n  var potineth = (parseFloat(totalPot)/100000000).toFixed(18)\n\n\n  const { send: maxApprove2, state: b22 } =\n  ApproveOnlyMax(tokenAddress )\n\n\n\n\n  const maxApprove = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return maxApprove2(amountAsWei.toString())\n  }  \nvar msgold = \"\"\nvar b\n  if(balOldLP > 0){\n    b = <a href =\"https://quickswap.exchange/#/remove/0xc64381719049f6f9d7034587ab6dfb7bff4fbc52/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" target=\"_blank\">CLICK HERE to Withdraw Old liquidity</a>\n    msgold = \"WITHDRAW YOUR LIQUIDITY \"\n  }\n\n\n\n\n\n\n\n\n\n\n  var fuck\n  if(typeof amount === 'string')\n  {\n    fuck =  parseFloat(amount).toFixed(8)\n\n  }\n  else{\n    fuck =  parseFloat(amount.toString())\n  }\n  var fuck2 = fuck.toString()\n\n  var approvetomuch = parseFloat(fuck2) * (1e18) > parseFloat(aprovamt.toString())\n  var te = \"0\"\n  if(tokenBalance !== nothing)\n  {\n    te = tokenBalance.toString()\n  }\n  const hastoolittle =  parseFloat(te) < parseFloat(fuck2) / 1e18\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n\n\n  const isMining4 = unstakeTokensState22v3.status === \"Mining\"\n  const isMining1 =  stakeTokensState.status === \"Mining\"\n  const isMining3 = unstakeTokensState.status === \"Mining\"\n  const isMining5 = b22.status === \"Mining\"\n  const isMining8 = stakeTokensState.status === \"Mining\"\n\nvar fsdfsdfsdf  =\"\"\n\n\n\n  const [showErc20ApprovalSuccess33, setShowErc20ApprovalSuccess33] =\n  useState(false)\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n  const [showStakeTokensSuccess2, setShowStakeTokensSuccess2] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showErc20ApprovalSuccess33 && setShowErc20ApprovalSuccess33(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n\n\n      if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer21\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess33 && setShowErc20ApprovalSuccess33(true)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\nif(token.address === auctionaddress)\n{\n  return(<>\n   <div> Current Auction: {test}</div>\n   <div> EndTime =  {endt} </div>\n   <div> Current Time: {cur}</div>\n   <div> TIme remaining: {timeleft} seconds or {min} minutes or {hour} hours</div> \n   <div>  {auctionmsg} </div>\n    <div> Total Pot Size of Current Auction {potineth} 0xBitcoin </div>\n    <div> Total Circulating Supply of 0xPW: {circfinal}</div>\n    <div> Total Maximum Supply of 0xPW: 53,000,000</div>\n  </>)\n}\nif(token.address === zeroxBTCAddress)\n{\nreturn (\n  <>\n    <div className={classes.contentContainer}>\n      <BalanceMsg\n        label={`Your Rewards = ${name} balance`}\n        amount={formattedBalance* 1e10}\n        tokenImgSrc={image}\n      />\n       <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit22}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n      </Button>\n    </div>\n    <Snackbar\n      open={showUnstakeSuccess}\n      autoHideDuration={5000}\n      onClose={handleCloseSnack}\n    >\n      <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens unstaked successfully!\n      </Alert>\n    </Snackbar>\n  </>\n)\n}\n\nvar msgbalz  = \"Your liquidity (Staked and Unstaked) is worth a total of \"+(balStakingForge/10**18).toFixed(3)+\" Forge and \"+(balStakingxBTC/10**8).toFixed(3)+\" 0xBitcoin Tokens\"\nvar msgBalz2 = <h3>{msgbalz}</h3>\n\nconsole.log('fsdfds',formattedBalanceffff )\n\nif(token.address === \"0x0000000000000000000000000000000000000000\")\n{\n  \n  return (\n\n    \n    <>\n\n<div className={classes.contentContainer}>\n            <Button\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            onClick={faucet22}\n            //disabled={isMining}\n\n            disabled={isMining}\n          >\n            {isMining ? <CircularProgress size={26} /> : \"Distribute mined rewards to LP Staking Contract\"}\n          </Button>\n          <br></br><br></br>\n          <br></br><br></br>\n          <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={rewardStart}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Start a 9 day reward Period for Staking\"}\n        </Button>  Only works when staking rewards have stopped\n          <br></br><br></br>\n          <br></br><br></br>\n\n</div>\n          </>\n      )\n  }\n\n\nif(token.address !== LP_token || formattedBalanceff || formattedBalanceffff || formattedBalanceffff5)\n{\nreturn (\n  <>\n    <div className={classes.contentContainer}>\n\n  <h1> OLD CONTRACTS IS DEPRECIATED, PLEASE REMOVE ALL FUNDS FROM ALL THREE CONTRACTS</h1>\n  <h1> Please submit Exit Transaction</h1>\n    <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE FIRST OLD CONTRACT`}\n          amount={formattedBalanceffff5}\n          tokenImgSrc={image}\n        />\n\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit220f}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM FIRST CONTRACT`}\n      </Button>\n  <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE 2nd OLD CONTRACT`}\n          amount={formattedBalanceffff}\n          tokenImgSrc={image}\n        />\n\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit220}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM FIRST CONTRACT`}\n      </Button>\n    <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE 3rd OLD CONTRACT`}\n          amount={formattedBalanceff}\n          tokenImgSrc={image}\n        />\n\n      <BalanceMsg\n        label={`Your Rewards OLD Forge`}\n        amount={formattedBalance22zz}\n        tokenImgSrc={imagez}\n      />\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit22}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM SECOND CONTRACT`}\n      </Button>\n    </div>\n    <Snackbar\n      open={showUnstakeSuccess}\n      autoHideDuration={5000}\n      onClose={handleCloseSnack2}\n    >\n      <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens unstaked successfully!\n      </Alert>\n    </Snackbar>\n  </>\n)\n}\nvar ps = <h2>Your % of the Staking Pool: {sharepool.toFixed(4)}%</h2>\nif(approvetomuch)\n{\ntest = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleStakeSubmitzz}\n  disabled= {isMining || isMining8||hastoolittle || hasZeroAmountSelected  || (isMining3)|| isMining5 }\n>\n  {isMining || isMining3 ||isMining8|| isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"Approve & Stake\"}\n</Button>\n}\nelse{\n  test = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={stakeOnly}\n  //disabled={isMining || hasZeroAmountSelected}\n  disabled={isMining || isMining8||(isMining3) || hastoolittle  || hasZeroAmountSelected  || approvetomuch|| isMining5 }\n>\n  {isMining || isMining3 || isMining8||isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"Stake\"}\n</Button>\n}\nvar ted = formattedTokenBalance.toFixed(18)\nvar zeroBalz = formattedTokenBalance === 0\nvar textz =<a></a>\nif(parseFloat(ted) >= 0.000000000000071130){\n  var textz = <a href=\"https://quickswap.exchange/#/remove/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" ><h3>To Remove your Tokens from the Quickswap LP Click Here</h3></a>\n        \n\n}\nvar msg = <h1> <a href=\"https://quickswap.exchange/#/add/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" >Click here to get Quickswap LP tokens<br></br> by depositing Forge and 0xBitcoins into the Liquidity Pool</a></h1>\n      \nif(networkName === \"mumbai\"){\n  msg = <h1> <a href=\"https://quickswap.exchange/#/add/0x0B72b2Ff0e87ff84EFf98451163B78408486Ee5c/0x6d098aD51D2E49e2F51dCba9c26612EAc0368030\" >Click here to get Quickswap LP tokens<br></br> by depositing Forge and 0xBitcoins into the Liquidity Pool</a></h1>\n      \n}else{\n\n\n}\n  return (\n    <>\n      <div className={classes.contentContainer}>\n      {msg}       {textz}\n            <h2>Current Staking APY: {fug?.toFixed(0)}%</h2>\n            {msgBalz2}\n      <BalanceMsg\n          label={`Your un-staked Quickswap LP balance`}\n          amount={ted}\n          tokenImgSrc={image}\n        />\n        <SliderInput\n       \n          label={`Stake Quickswap LP Tokens - Move slider to amount desired`}\n  \n          maxValue={formattedTokenBalance}\n          minValue={0}\n          id={`slider-input14-${name}`}\n          className=\"BABY\"\n          value={amount}\n          onChange={setAmount}\n          //disabled={isMining || hasZeroBalance || dontshow}\n          disabled={isMining || isMining8|| (isMining3)|| isMining5 || zeroBalz }\n        />\n         {test}\n        \n     \n{ps}\n        <BalanceMsg\n          label={`You are Staking this many LP tokens`}\n          amount={formattedBalance.toFixed(18)}\n          tokenImgSrc={image}\n        />\n\n<BalanceMsg\n        label={`Your Forge rewards `}\n        amount={formattedBalance22.toFixed(18)}\n        tokenImgSrc={imagez}\n      />\n      <BalanceMsg\n        label={`Your 0xBTC rewards `}\n        amount={(formattedBalance2* 1e10).toFixed(8)}\n        tokenImgSrc={imagezz}\n      />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit}\n          disabled={isMining}\n        >\n          {isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : `Get Rewards Only`}\n        </Button>        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit2}\n          disabled={isMining2}\n        >\n          {isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n        </Button>\n\n\n\n{msgold}{b}\n\n        </div>\n\n        <StylesProvider injectFirst>\n<Snackbar\n  open={showErc20ApprovalSuccess}\n  autoHideDuration={12000}\n  onClose={handleCloseSnack}\n>\n  <Alert onClose={handleCloseSnack} severity=\"success\">\n    Approved successfully! Now approve the 2nd tx to stake!\n  </Alert>\n</Snackbar>\n\n</StylesProvider>\n\n<StylesProvider injectFirst>\n<Snackbar\n  open={showStakeTokensSuccess}\n  autoHideDuration={12000}\n  onClose={handleCloseSnack}\n>\n  <Alert onClose={handleCloseSnack} severity=\"success\">\n    Tokens staked successfully!\n  </Alert>\n</Snackbar>\n\n</StylesProvider>\n\n<StylesProvider injectFirst>\n<Snackbar\n  open={showUnstakeSuccess2}\n  autoHideDuration={12000}\n  onClose={handleCloseSnack3}\n>\n  <Alert onClose={handleCloseSnack3} severity=\"success\">\n    Reward successfully Claimed!\n  </Alert>\n</Snackbar>\n      </StylesProvider>\n\n\n    <StylesProvider injectFirst>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={12000}\n        onClose={handleCloseSnack2}\n      >\n        <Alert onClose={handleCloseSnack2} severity=\"success\">\n          Tokens unstaked successfully!\n        </Alert>\n      </Snackbar>\n      </StylesProvider>\n\n\n    <StylesProvider injectFirst>\n      <Snackbar\n        open={showErc20ApprovalSuccess33}\n        autoHideDuration={12000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Max Approved! You may now Stake w/o Approve!!\n        </Alert>\n      </Snackbar>\n\n      </StylesProvider>\n    </>\n  )\n}\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER3 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP2\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER4 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP3\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance5 = (address: string): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    var dead = 0\n    if(stakingBalance2 !== nothing && stakingBalance !== nothing){\n      dead = stakingBalance /  stakingBalance2\n    }\n\n    \n    \n    return dead\n  }","import { useContractCall, useEthers} from \"@usedapp/core\"\n\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const ProofOfWorkStats2 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const zeroAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n    //MY STUFF\n    const zeroAbi = Zero.abi\n\n    const ZeroInterface = new utils.Interface(zeroAbi)\n\n\n    const [epochCount] =\n    useContractCall({\n      abi: ZeroInterface,\n      address: zeroAddress,\n      method: \"getEpoch\",\n      args: [],\n    }) ?? []\nreturn epochCount\n  }\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance6Forged = (address: any): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance3] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate\",\n      args: [],\n    }) ?? []\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    if(stakingBalance3 !== nothing && stakingBalance2 !== nothing && stakingBalance !== nothing){\n     rateperyear = parseInt(stakingBalance3.toString()) / (4*10**16) * 10 *3600*7*24 / 10**18 *56 //10 /(4*10^16) *parseInt(stakingBalance.toString())/parseInt(stakingBalance.toString()) \n     Contractshare =parseInt(stakingBalance2.toString()) \n    }\n\n    const [unibal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [urUNIBal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"balanceOf\",\n      args: [account],\n    }) ?? []\n\n    const sushiABI = UniV2Pair.abi\n    const sushiInterface = new utils.Interface(sushiABI)\n    \n  \n    const [stakingBalance6, ff2, fff2] =\n      useContractCall({\n        abi: sushiInterface,\n        address: LPTOKEN,\n        method: \"getReserves\",\n        args: [],\n      }) ?? []\nvar dead =0\nvar apyz = 0\nvar ddddd = 0\nvar ddddd2 = 0\n    if(unibal !==nothing && stakingBalance !==nothing && stakingBalance2 !==nothing && urUNIBal !== nothing){\n      Contractshare =parseInt(stakingBalance2.toString()) *ff2/unibal\n    var urUniper = 1/parseInt(unibal.toString())*100\n    var unitotalForge = parseInt(ff2.toString())/(10**18)\n    var urUniTotal = urUniper\n    var TotalAPY = rateperyear/(Contractshare*2 )* 10**20\n     dead = TotalAPY \n      var fffff = stakingBalance3/(10**16)*(60*60*24*365)\n      ddddd = (ff2 * (stakingBalance)) / unibal + (ff2 * (urUNIBal)) / unibal\n      //0xbtc\n      \n      ddddd2 = stakingBalance6 * (stakingBalance) / unibal +  stakingBalance6 * (urUNIBal) / unibal\n\n    }\n    //total staked currently in Forge\n    return ddddd;\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance6xBTC = (address: any): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance3] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate\",\n      args: [],\n    }) ?? []\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    if(stakingBalance3 !== nothing && stakingBalance2 !== nothing && stakingBalance !== nothing){\n     rateperyear = parseInt(stakingBalance3.toString()) / (4*10**16) * 10 *3600*7*24 / 10**18 *56 //10 /(4*10^16) *parseInt(stakingBalance.toString())/parseInt(stakingBalance.toString()) \n     Contractshare =parseInt(stakingBalance2.toString()) \n    }\n\n    const [unibal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const sushiABI = UniV2Pair.abi\n    const sushiInterface = new utils.Interface(sushiABI)\n    \n  \n    const [urUNIBal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"balanceOf\",\n      args: [account],\n    }) ?? []\n\n    const [stakingBalance6, ff2, fff2] =\n      useContractCall({\n        abi: sushiInterface,\n        address: LPTOKEN,\n        method: \"getReserves\",\n        args: [],\n      }) ?? []\nvar dead =0\nvar apyz = 0\nvar ddddd = 0\nvar ddddd2 = 0\n    if(unibal !==nothing && stakingBalance !==nothing && stakingBalance2 !==nothing){\n      Contractshare =parseInt(stakingBalance2.toString()) *ff2/unibal\n    var urUniper = 1/parseInt(unibal.toString())*100\n    var unitotalForge = parseInt(ff2.toString())/(10**18)\n    var urUniTotal = urUniper\n    var TotalAPY = rateperyear/(Contractshare*2 )* 10**20\n     dead = TotalAPY \n      var fffff = stakingBalance3/(10**16)*(60*60*24*365)\n      ddddd = ff2 *stakingBalance / unibal\n      //0xbtc\n      ddddd2 = stakingBalance6 * (stakingBalance) / unibal +  stakingBalance6 * (urUNIBal) / unibal\n      apyz = fffff/ddddd\n\n    }\n    //total staked currently in Forge\n    return ddddd2;\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance4 = (address: string): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance3] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate\",\n      args: [],\n    }) ?? []\n    const [rewardrate2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate2\",\n      args: [],\n    }) ?? []\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    if(stakingBalance3 !== nothing && stakingBalance2 !== nothing && stakingBalance !== nothing){\n     rateperyear = parseInt(stakingBalance3.toString()) / (4*10**16) * 10 *3600*7*24 / 10**18 *56 //10 /(4*10^16) *parseInt(stakingBalance.toString())/parseInt(stakingBalance.toString()) \n     Contractshare =parseInt(stakingBalance2.toString()) \n    }\n\n    const [unibal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const sushiABI = UniV2Pair.abi\n    const sushiInterface = new utils.Interface(sushiABI)\n    \n  \n    const [stakingBalance6, ff2, fff2] =\n      useContractCall({\n        abi: sushiInterface,\n        address: LPTOKEN,\n        method: \"getReserves\",\n        args: [],\n      }) ?? []\nvar dead =0\nvar apyz = 0\n    if(unibal !==nothing && stakingBalance !==nothing && stakingBalance2 !==nothing){\n      Contractshare =parseInt(stakingBalance2.toString()) *ff2/unibal\n    var urUniper = 1/parseInt(unibal.toString())*100\n    var unitotalForge = parseInt(ff2.toString())/(10**18)\n    var urUniTotal = urUniper\n    var TotalAPY = rateperyear/(Contractshare*2 )* 10**20\n     dead = TotalAPY \n      var fffff = stakingBalance3/(10**16)*(60*60*24*365)\n      var ddddd = ff2 *stakingBalance2 / unibal\n      apyz = fffff/ddddd\n\n    }\n    var apyz22 = 0\n    if(unibal !==nothing && stakingBalance6 !==nothing && stakingBalance2 !==nothing){\n      var fffff3 = rewardrate2/(10**16)*(60*60*24*365)\n      var ddddd3 = stakingBalance6 *stakingBalance2 / unibal\n      apyz22 = (fffff3/ddddd3) / 2 * 100\n      console.log(\"apyzz \", apyz22)\n    }\n    return apyz/2*100 + apyz22\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER2 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n  //const { abi } = TokenFarm\n  //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  //const tokenFarmInterface = new utils.Interface(abi)\n\n  //MY STUFF\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n\n\n  \n\n  const [stakingBalance] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"earned\",\n      args: [account],\n    }) ?? []\n  return stakingBalance\n}\n","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens = () => {\n  \n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  \n\n\n\n  return useContractFunction(LPRewardsContract, \"getReward\", {\n    transactionName: \"Get rewards\",\n  })\n}\n","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens2 = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22 = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22Other = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP2\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22Otherf = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP3\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock0xBTC from \"../chain-info/AMock.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const ApproveOnlyMax = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  var AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const LPAdd = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nconst rewardABI = LPFarm.abi\nconst mockABI = Mock0xBTC.abi\nconst mockInterface = new utils.Interface(mockABI)\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n\nconst mockLPContract = new Contract(\n    LPAdd, mockInterface\n    )\n\nconst mockContract = new Contract(\n    xbtc, mockInterface\n    )\n    var test = mockContract\n    var fff = \"Approve ERC20 transfer23\"\nif(tokenAddress === LPAdd)\n{\n    test = mockLPContract\n    AuctionAddress = LPRewardAddress\n    fff = \"Approve ERC20 transfer21\"\n    \n}\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(test, \"approve\", {\n      transactionName: fff,\n    })\n\n    const send =  (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(AuctionAddress, \"99999999999999999999999999999999\")\n      }\n      const [state, setState] = useState(b2)\n      \n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg,\n} from \"../../components\"\nimport { Tab, Box, makeStyles } from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { Unstake } from \"./Unstake\"\n\ninterface TokenFarmContractProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n    margin: `${theme.spacing(4)}px 0`,\n    padding: theme.spacing(2),\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\n\nexport const TokenFarmContract = ({\n  supportedTokens,\n}: TokenFarmContractProps) => {\n  const classes = useStyles()\n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  return (\n    <Box><br></br>\n      <h1 className=\"MuiTypography-root\">Staking</h1>\n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                return (\n                  <TabPanel value={(index).toString()} key={index} >\n                    <Unstake token={token} />\n                  </TabPanel>\n                )\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}\n","/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport pow from \"../pow2.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\n//import DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport \"../styles.css\";\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const {account, chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n\n  const zxbtc_token = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n  const auction_addy = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n  var supportedTokens\n  if(account === \"0x543c3F3Ee66Cf54746d4c4011d5cACf544a427f5\" || networkName === \"mumbai\")\n  {\n\n    supportedTokens= [\n      {\n        image: dai,\n        address: LP_token,\n        name: \"Auctions\",\n      },\n      {\n        image: pow,\n        address: \"0x0000000000000000000000000000000000000001\",\n        name: \"Auction Reedemer\",\n      },\n      {\n        image: pow,\n        address: pow_token,\n        name: \"Your Wallet\",\n      }\n    ]\n  }else{\n\n\n   supportedTokens = [\n    {\n      image: eth,\n      address: LP_token,\n      name: \"Auctions\",\n    },\n    {\n      image: pow,\n      address: \"0x0000000000000000000000000000000000000001\",\n      name: \"Auction Reedemer\",\n    },\n    {\n      image: pow,\n      address: pow_token,\n      name: \"Your Wallet\",\n    }\n  ]\n}\n  const supportedTokens2: Array<Token> = [\n    {\n      image: eth,\n      address: LP_token,\n      name: \"Staking\",\n    },\n    {\n      image: pow,\n      address: \"0x0000000000000000000000000000000000000000\",\n      name: \"Extra Contract Stuff\",\n    }\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && (error.name === \"UnsupportedChainIdError\" || error.name === \"t\")) {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)      \n    }\n  }, [error, showNetworkError])\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: \"MuiTypography-root\",\n        }}\n      >Forge Auction & Staking DAPP\n      </Typography><h1>Auctions</h1>\n      <YourWallet supportedTokens={supportedTokens} />\n      <TokenFarmContract supportedTokens={supportedTokens2} />\n          <br></br><br></br>\n          <br></br><br></br>\n          <br></br><br></br>\n          <br></br><br></br>\n          <br></br><br></br>\n          <br></br><br></br>\n          <br></br><br></br>\n          <br></br><br></br>\n\n      <StylesProvider injectFirst>\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          Change Network to Polygon\n        </Alert>\n      </Snackbar>\n      </StylesProvider>\n    </>\n  )\n}\n","import React from \"react\"\nimport { Header } from \"./features/Header\"\nimport { Main } from \"./features/Main\"\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Container } from \"@material-ui/core\"\nimport discordimg from \"./discord.png\"\nimport forgedappimg from \"./forge22222.png\"\nexport const App = () => {\n  return (\n    <DAppProvider config={{\n      supportedChains: [ChainId.Polygon],\n      notifications: {\n        expirationPeriod: 6000,\n        checkInterval: 1000\n      }\n    }}>\n      <Header />\n      <Container maxWidth=\"lg\">\n\n        <Main />\n        \n      </Container>\n\n    </DAppProvider>\n\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}