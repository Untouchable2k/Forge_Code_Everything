{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "UsersGuess",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betID",
          "type": "uint256"
        }
      ],
      "name": "GuessNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "UsersGuess",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Result",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWagered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "AddressOfGuesser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "AmountWon",
          "type": "uint256"
        }
      ],
      "name": "ShowAnswer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "guess",
          "type": "uint256"
        }
      ],
      "name": "MaxINForGuess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betOdds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betResults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betidIN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        }
      ],
      "name": "estOUTPUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlank",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "guess",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "thres",
          "type": "uint256"
        }
      ],
      "name": "perfectWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "score",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "score2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forWhom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unreleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wagered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "withEstimator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Guess.sol",
    "1": "contracts/VRFConsumerBase.sol",
    "2": "contracts/VRFRequestIDBase.sol"
  },
  "ast": {
    "absolutePath": "contracts/Guess.sol",
    "exportedSymbols": {
      "ForgeGuess": [
        949
      ],
      "IERC20": [
        70
      ],
      "LinkTokenInterface": [
        1215
      ],
      "VRFConsumerBase": [
        1070
      ],
      "VRFRequestIDBase": [
        1120
      ]
    },
    "id": 950,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:0"
      },
      {
        "absolutePath": "contracts/VRFConsumerBase.sol",
        "file": "./VRFConsumerBase.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 950,
        "sourceUnit": 1071,
        "src": "57:31:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IERC20",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3,
          "nodeType": "StructuredDocumentation",
          "src": "217:214:0",
          "text": " Request testnet LINK and ETH here: https://faucets.chain.link/\n Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/"
        },
        "fullyImplemented": false,
        "id": 70,
        "linearizedBaseContracts": [
          70
        ],
        "name": "IERC20",
        "nameLocation": "443:6:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "18160ddd",
            "id": 8,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "465:11:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "476:2:0"
            },
            "returnParameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 8,
                  "src": "502:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "502:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "501:9:0"
            },
            "scope": 70,
            "src": "456:55:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "70a08231",
            "id": 15,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "525:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "543:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 15,
                  "src": "535:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "535:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "534:17:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 15,
                  "src": "575:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 12,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "575:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "574:9:0"
            },
            "scope": 70,
            "src": "516:68:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "a9059cbb",
            "id": 24,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nameLocation": "598:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 20,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "615:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 24,
                  "src": "607:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 16,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "607:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "634:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 24,
                  "src": "626:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "626:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "606:35:0"
            },
            "returnParameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 22,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24,
                  "src": "660:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 21,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "660:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "659:6:0"
            },
            "scope": 70,
            "src": "589:77:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "dd62ed3e",
            "id": 33,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "680:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 29,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "698:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 33,
                  "src": "690:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "690:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "713:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 33,
                  "src": "705:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "705:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "689:32:0"
            },
            "returnParameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 33,
                  "src": "745:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 30,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "745:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "744:9:0"
            },
            "scope": 70,
            "src": "671:83:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "095ea7b3",
            "id": 42,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "768:7:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 38,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "784:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 42,
                  "src": "776:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "776:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 37,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "801:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 42,
                  "src": "793:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 36,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "793:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "775:33:0"
            },
            "returnParameters": {
              "id": 41,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 42,
                  "src": "827:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 39,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "827:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "826:6:0"
            },
            "scope": 70,
            "src": "759:74:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "23b872dd",
            "id": 53,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "847:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "868:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 53,
                  "src": "860:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 43,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "860:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "884:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 53,
                  "src": "876:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "876:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "903:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 53,
                  "src": "895:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 47,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "895:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "859:51:0"
            },
            "returnParameters": {
              "id": 52,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 51,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 53,
                  "src": "929:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 50,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "929:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "928:6:0"
            },
            "scope": 70,
            "src": "838:97:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "id": 61,
            "name": "Transfer",
            "nameLocation": "951:8:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 55,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "976:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 61,
                  "src": "960:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "960:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "998:2:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 61,
                  "src": "982:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 56,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "982:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1010:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 61,
                  "src": "1002:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1002:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "959:57:0"
            },
            "src": "945:72:0"
          },
          {
            "anonymous": false,
            "id": 69,
            "name": "Approval",
            "nameLocation": "1028:8:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 63,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1053:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 69,
                  "src": "1037:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 62,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1037:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 65,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "1076:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 69,
                  "src": "1060:23:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 64,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1060:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 67,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1093:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 69,
                  "src": "1085:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 66,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1085:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1036:63:0"
            },
            "src": "1022:78:0"
          }
        ],
        "scope": 950,
        "src": "433:669:0",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 71,
              "name": "VRFConsumerBase",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1070,
              "src": "1127:15:0"
            },
            "id": 72,
            "nodeType": "InheritanceSpecifier",
            "src": "1127:15:0"
          }
        ],
        "canonicalName": "ForgeGuess",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 949,
        "linearizedBaseContracts": [
          949,
          1070,
          1120
        ],
        "name": "ForgeGuess",
        "nameLocation": "1113:10:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 74,
            "mutability": "mutable",
            "name": "keyHash",
            "nameLocation": "1171:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1154:24:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 73,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1154:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 76,
            "mutability": "mutable",
            "name": "fee",
            "nameLocation": "1201:3:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1184:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 75,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1184:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "16462ad3",
            "id": 79,
            "mutability": "mutable",
            "name": "betid",
            "nameLocation": "1225:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1210:24:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 77,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1210:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 78,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1233:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0d82675e",
            "id": 82,
            "mutability": "mutable",
            "name": "betidIN",
            "nameLocation": "1255:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1240:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 80,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1240:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 81,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1265:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "530d3bc8",
            "id": 86,
            "mutability": "mutable",
            "name": "betResults",
            "nameLocation": "1327:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1292:45:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 85,
              "keyType": {
                "id": 83,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1300:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1292:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueType": {
                "id": 84,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1311:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "edcbbef8",
            "id": 90,
            "mutability": "mutable",
            "name": "betAmt",
            "nameLocation": "1378:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1343:41:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 89,
              "keyType": {
                "id": 87,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1351:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1343:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueType": {
                "id": 88,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1362:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "984d63cf",
            "id": 94,
            "mutability": "mutable",
            "name": "betOdds",
            "nameLocation": "1425:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1390:42:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 93,
              "keyType": {
                "id": 91,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1398:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1390:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueType": {
                "id": 92,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1409:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "d1730f1f",
            "id": 98,
            "mutability": "mutable",
            "name": "score",
            "nameLocation": "1473:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1438:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 97,
              "keyType": {
                "id": 95,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1446:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1438:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueType": {
                "id": 96,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1457:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "e2f1cca8",
            "id": 102,
            "mutability": "mutable",
            "name": "score2",
            "nameLocation": "1519:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1484:41:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 101,
              "keyType": {
                "id": 99,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1492:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1484:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueType": {
                "id": 100,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1503:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "d63bc599",
            "id": 106,
            "mutability": "mutable",
            "name": "betee",
            "nameLocation": "1566:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1531:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 105,
              "keyType": {
                "id": 103,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1539:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1531:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 104,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1550:7:0",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5d57ab28",
            "id": 110,
            "mutability": "mutable",
            "name": "winnings",
            "nameLocation": "1612:8:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1577:43:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "typeName": {
              "id": 109,
              "keyType": {
                "id": 107,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1585:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1577:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                "typeString": "mapping(uint256 => uint256)"
              },
              "valueType": {
                "id": 108,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1596:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "42619f66",
            "id": 112,
            "mutability": "mutable",
            "name": "randomResult",
            "nameLocation": "1641:12:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1626:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 111,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1626:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f03d6672",
            "id": 115,
            "mutability": "mutable",
            "name": "unreleased",
            "nameLocation": "1674:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1659:27:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 113,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1659:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 114,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1685:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "18160ddd",
            "id": 118,
            "mutability": "mutable",
            "name": "totalSupply",
            "nameLocation": "1707:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1692:30:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 116,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1692:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 117,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1721:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "71ca337d",
            "id": 120,
            "mutability": "mutable",
            "name": "ratio",
            "nameLocation": "1743:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1728:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 119,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1728:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "851c1933",
            "id": 123,
            "mutability": "mutable",
            "name": "wagered",
            "nameLocation": "1769:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1754:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 121,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1754:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 122,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1779:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 127,
            "mutability": "mutable",
            "name": "_balances",
            "nameLocation": "1822:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1786:45:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 126,
              "keyType": {
                "id": 124,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1794:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1786:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 125,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1805:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "cc7a262e",
            "id": 133,
            "mutability": "mutable",
            "name": "stakedToken",
            "nameLocation": "1851:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "1837:78:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IERC20_$70",
              "typeString": "contract IERC20"
            },
            "typeName": {
              "id": 129,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 128,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 70,
                "src": "1837:6:0"
              },
              "referencedDeclaration": 70,
              "src": "1837:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$70",
                "typeString": "contract IERC20"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307830423732623246663065383766663834454666393834353131363342373834303834383645653563",
                  "id": 131,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1872:42:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0x0B72b2Ff0e87ff84EFf98451163B78408486Ee5c"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 130,
                "name": "IERC20",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 70,
                "src": "1865:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_contract$_IERC20_$70_$",
                  "typeString": "type(contract IERC20)"
                }
              },
              "id": 132,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "1865:50:0",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$70",
                "typeString": "contract IERC20"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 139,
            "name": "Staked",
            "nameLocation": "1932:6:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 138,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 135,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "1955:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1939:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 134,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1939:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 137,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1969:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1961:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 136,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1961:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1938:38:0"
            },
            "src": "1926:51:0"
          },
          {
            "anonymous": false,
            "id": 145,
            "name": "Withdrawn",
            "nameLocation": "1988:9:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 141,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "2014:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 145,
                  "src": "1998:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 140,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1998:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 143,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2028:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 145,
                  "src": "2020:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 142,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2020:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1997:38:0"
            },
            "src": "1982:54:0"
          },
          {
            "anonymous": false,
            "id": 155,
            "name": "GuessNote",
            "nameLocation": "2047:9:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 147,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "UsersGuess",
                  "nameLocation": "2065:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 155,
                  "src": "2057:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 146,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2057:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 149,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2085:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 155,
                  "src": "2077:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 148,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2077:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 151,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "2109:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 155,
                  "src": "2093:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 150,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2093:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 153,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "betID",
                  "nameLocation": "2123:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 155,
                  "src": "2115:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 152,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2115:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2056:73:0"
            },
            "src": "2041:89:0"
          },
          {
            "anonymous": false,
            "id": 169,
            "name": "ShowAnswer",
            "nameLocation": "2141:10:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 168,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 157,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "UsersGuess",
                  "nameLocation": "2160:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "2152:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 156,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2152:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 159,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "Result",
                  "nameLocation": "2180:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "2172:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 158,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2172:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 161,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amountWagered",
                  "nameLocation": "2196:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "2188:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2188:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 163,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "betID",
                  "nameLocation": "2219:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "2211:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 162,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2211:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 165,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "AddressOfGuesser",
                  "nameLocation": "2242:16:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "2226:32:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 164,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2226:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 167,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "AmountWon",
                  "nameLocation": "2268:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "2260:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 166,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2260:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2151:127:0"
            },
            "src": "2135:144:0"
          },
          {
            "body": {
              "id": 180,
              "nodeType": "Block",
              "src": "2350:42:0",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 176,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 127,
                      "src": "2367:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 178,
                    "indexExpression": {
                      "id": 177,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 171,
                      "src": "2377:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2367:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 175,
                  "id": 179,
                  "nodeType": "Return",
                  "src": "2360:25:0"
                }
              ]
            },
            "functionSelector": "70a08231",
            "id": 181,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "2293:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 172,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 171,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2311:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 181,
                  "src": "2303:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 170,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2303:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2302:17:0"
            },
            "returnParameters": {
              "id": 175,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 174,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 181,
                  "src": "2341:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 173,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2341:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2340:9:0"
            },
            "scope": 949,
            "src": "2284:108:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 184,
            "mutability": "constant",
            "name": "_transferErrorMessage",
            "nameLocation": "2414:21:0",
            "nodeType": "VariableDeclaration",
            "scope": 949,
            "src": "2398:70:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 182,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "2398:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "7374616b656420746f6b656e207472616e73666572206661696c6564",
              "id": 183,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2438:30:0",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_9e1e47ae49200cef4f77efcafaf774e9939d6c293d046c7955c132378593749d",
                "typeString": "literal_string \"staked token transfer failed\""
              },
              "value": "staked token transfer failed"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 204,
              "nodeType": "Block",
              "src": "3022:141:0",
              "statements": [
                {
                  "expression": {
                    "id": 194,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 192,
                      "name": "keyHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 74,
                      "src": "3032:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "307836653735623536396130316566353664313863616236613865373165363630306436636538353338333464346135373438623732306430366638373862336134",
                      "id": 193,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3042:66:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_49962386514484245166271493471135870425413786137407811871694296720549827097508_by_1",
                        "typeString": "int_const 4996...(69 digits omitted)...7508"
                      },
                      "value": "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4"
                    },
                    "src": "3032:76:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 195,
                  "nodeType": "ExpressionStatement",
                  "src": "3032:76:0"
                },
                {
                  "expression": {
                    "id": 202,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 196,
                      "name": "fee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 76,
                      "src": "3118:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_rational_100000000000000_by_1",
                        "typeString": "int_const 100000000000000"
                      },
                      "id": 201,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "302e30303031",
                        "id": 197,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3124:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_10000",
                          "typeString": "rational_const 1 / 10000"
                        },
                        "value": "0.0001"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "id": 200,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 198,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3133:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "3138",
                          "id": 199,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3139:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_18_by_1",
                            "typeString": "int_const 18"
                          },
                          "value": "18"
                        },
                        "src": "3133:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      },
                      "src": "3124:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100000000000000_by_1",
                        "typeString": "int_const 100000000000000"
                      }
                    },
                    "src": "3118:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 203,
                  "nodeType": "ExpressionStatement",
                  "src": "3118:23:0"
                }
              ]
            },
            "documentation": {
              "id": 185,
              "nodeType": "StructuredDocumentation",
              "src": "2479:339:0",
              "text": " Constructor inherits VRFConsumerBase\n \n Network: Kovan\n Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\n LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\n Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4"
            },
            "id": 205,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "307838433733383246394438663536623333373831664535303645383937613446316532643137323535",
                    "id": 188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2875:42:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255"
                  },
                  {
                    "hexValue": "307833323643393737453665666338344535313262423943333066373645333063313630654430364642",
                    "id": 189,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2950:42:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0x326C977E6efc84E512bB9C30f76E30c160eD06FB"
                  }
                ],
                "id": 190,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 187,
                  "name": "VRFConsumerBase",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1070,
                  "src": "2846:15:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "2846:171:0"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 186,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2834:2:0"
            },
            "returnParameters": {
              "id": 191,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3022:0:0"
            },
            "scope": 949,
            "src": "2823:340:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 408,
              "nodeType": "Block",
              "src": "3306:1236:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 218,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 216,
                          "name": "guess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 208,
                          "src": "3324:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "hexValue": "3938",
                          "id": 217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3330:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_98_by_1",
                            "typeString": "int_const 98"
                          },
                          "value": "98"
                        },
                        "src": "3324:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d757374206775657373206c6f776572207468616e203938",
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3334:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0c5b84b1f2db9fef4da940937e900bfc72f5b811cc7a583b415fce31ceb7a81d",
                          "typeString": "literal_string \"Must guess lower than 98\""
                        },
                        "value": "Must guess lower than 98"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0c5b84b1f2db9fef4da940937e900bfc72f5b811cc7a583b415fce31ceb7a81d",
                          "typeString": "literal_string \"Must guess lower than 98\""
                        }
                      ],
                      "id": 215,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3316:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3316:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 221,
                  "nodeType": "ExpressionStatement",
                  "src": "3316:45:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 225,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3404:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 226,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3404:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 229,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "3424:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                  "typeString": "contract ForgeGuess"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                  "typeString": "contract ForgeGuess"
                                }
                              ],
                              "id": 228,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3416:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 227,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3416:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 230,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3416:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 231,
                            "name": "amt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 210,
                            "src": "3431:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 223,
                            "name": "stakedToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 133,
                            "src": "3379:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$70",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 53,
                          "src": "3379:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3379:56:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5472616e73666572206d75737420776f726b",
                        "id": 233,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3437:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_28301ba7834024e216c6b786fde267432d28b8c58862b15378b7f57e1180824c",
                          "typeString": "literal_string \"Transfer must work\""
                        },
                        "value": "Transfer must work"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_28301ba7834024e216c6b786fde267432d28b8c58862b15378b7f57e1180824c",
                          "typeString": "literal_string \"Transfer must work\""
                        }
                      ],
                      "id": 222,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3371:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3371:87:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 235,
                  "nodeType": "ExpressionStatement",
                  "src": "3371:87:0"
                },
                {
                  "assignments": [
                    237
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 237,
                      "mutability": "mutable",
                      "name": "lBal",
                      "nameLocation": "3476:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 408,
                      "src": "3468:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 236,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3468:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 245,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 242,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "3506:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                              "typeString": "contract ForgeGuess"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                              "typeString": "contract ForgeGuess"
                            }
                          ],
                          "id": 241,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3498:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 240,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3498:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3498:13:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 238,
                        "name": "LINK",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1023,
                        "src": "3483:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_LinkTokenInterface_$1215",
                          "typeString": "contract LinkTokenInterface"
                        }
                      },
                      "id": 239,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1147,
                      "src": "3483:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 244,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3483:29:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3468:44:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 246,
                      "name": "amt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 210,
                      "src": "3525:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      },
                      "id": 251,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "31",
                        "id": 247,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3531:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3535:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "3138",
                          "id": 249,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3541:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_18_by_1",
                            "typeString": "int_const 18"
                          },
                          "value": "18"
                        },
                        "src": "3535:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      },
                      "src": "3531:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      }
                    },
                    "src": "3525:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 272,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 266,
                        "name": "amt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 210,
                        "src": "3626:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_rational_50000000000000000000_by_1",
                          "typeString": "int_const 50000000000000000000"
                        },
                        "id": 271,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3530",
                          "id": 267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3632:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_50_by_1",
                            "typeString": "int_const 50"
                          },
                          "value": "50"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "id": 270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3130",
                            "id": 268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3637:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "hexValue": "3138",
                            "id": 269,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3643:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_18_by_1",
                              "typeString": "int_const 18"
                            },
                            "value": "18"
                          },
                          "src": "3637:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          }
                        },
                        "src": "3632:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_50000000000000000000_by_1",
                          "typeString": "int_const 50000000000000000000"
                        }
                      },
                      "src": "3626:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 299,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 297,
                          "name": "guess",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 208,
                          "src": "3798:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "hexValue": "3933",
                          "id": 298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3807:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_93_by_1",
                            "typeString": "int_const 93"
                          },
                          "value": "93"
                        },
                        "src": "3798:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 339,
                        "nodeType": "Block",
                        "src": "3956:124:0",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 324,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 320,
                                "name": "lBal",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 237,
                                "src": "3973:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 323,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 321,
                                  "name": "fee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 76,
                                  "src": "3980:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "hexValue": "3131",
                                  "id": 322,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3984:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_11_by_1",
                                    "typeString": "int_const 11"
                                  },
                                  "value": "11"
                                },
                                "src": "3980:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3973:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 338,
                            "nodeType": "IfStatement",
                            "src": "3970:100:0",
                            "trueBody": {
                              "id": 337,
                              "nodeType": "Block",
                              "src": "3988:82:0",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "expression": {
                                          "id": 328,
                                          "name": "msg",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -15,
                                          "src": "4024:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_message",
                                            "typeString": "msg"
                                          }
                                        },
                                        "id": 329,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "sender",
                                        "nodeType": "MemberAccess",
                                        "src": "4024:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "id": 332,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -28,
                                            "src": "4044:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                              "typeString": "contract ForgeGuess"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                              "typeString": "contract ForgeGuess"
                                            }
                                          ],
                                          "id": 331,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "4036:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 330,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "4036:7:0",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 333,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "4036:13:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 334,
                                        "name": "fee",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 76,
                                        "src": "4051:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 325,
                                        "name": "LINK",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1023,
                                        "src": "4006:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_LinkTokenInterface_$1215",
                                          "typeString": "contract LinkTokenInterface"
                                        }
                                      },
                                      "id": 327,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "transferFrom",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1214,
                                      "src": "4006:17:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                        "typeString": "function (address,address,uint256) external returns (bool)"
                                      }
                                    },
                                    "id": 335,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4006:49:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 336,
                                  "nodeType": "ExpressionStatement",
                                  "src": "4006:49:0"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "id": 340,
                      "nodeType": "IfStatement",
                      "src": "3795:285:0",
                      "trueBody": {
                        "id": 319,
                        "nodeType": "Block",
                        "src": "3819:124:0",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 304,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 300,
                                "name": "lBal",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 237,
                                "src": "3836:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 303,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 301,
                                  "name": "fee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 76,
                                  "src": "3843:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "hexValue": "3131",
                                  "id": 302,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3847:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_11_by_1",
                                    "typeString": "int_const 11"
                                  },
                                  "value": "11"
                                },
                                "src": "3843:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3836:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 318,
                            "nodeType": "IfStatement",
                            "src": "3833:100:0",
                            "trueBody": {
                              "id": 317,
                              "nodeType": "Block",
                              "src": "3851:82:0",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "expression": {
                                          "id": 308,
                                          "name": "msg",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -15,
                                          "src": "3887:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_message",
                                            "typeString": "msg"
                                          }
                                        },
                                        "id": 309,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "sender",
                                        "nodeType": "MemberAccess",
                                        "src": "3887:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "id": 312,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -28,
                                            "src": "3907:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                              "typeString": "contract ForgeGuess"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                              "typeString": "contract ForgeGuess"
                                            }
                                          ],
                                          "id": 311,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "3899:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 310,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "3899:7:0",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 313,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "3899:13:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 314,
                                        "name": "fee",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 76,
                                        "src": "3914:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 305,
                                        "name": "LINK",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1023,
                                        "src": "3869:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_LinkTokenInterface_$1215",
                                          "typeString": "contract LinkTokenInterface"
                                        }
                                      },
                                      "id": 307,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "transferFrom",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1214,
                                      "src": "3869:17:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                        "typeString": "function (address,address,uint256) external returns (bool)"
                                      }
                                    },
                                    "id": 315,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3869:49:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 316,
                                  "nodeType": "ExpressionStatement",
                                  "src": "3869:49:0"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "id": 341,
                    "nodeType": "IfStatement",
                    "src": "3623:457:0",
                    "trueBody": {
                      "id": 296,
                      "nodeType": "Block",
                      "src": "3647:143:0",
                      "statements": [
                        {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 281,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 275,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 273,
                                "name": "betidIN",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 82,
                                "src": "3664:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 274,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3674:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "3664:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 280,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 276,
                                "name": "lBal",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 237,
                                "src": "3682:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 279,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 277,
                                  "name": "fee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 76,
                                  "src": "3689:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "hexValue": "39",
                                  "id": 278,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3695:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_9_by_1",
                                    "typeString": "int_const 9"
                                  },
                                  "value": "9"
                                },
                                "src": "3689:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3682:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "3664:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 295,
                          "nodeType": "IfStatement",
                          "src": "3661:119:0",
                          "trueBody": {
                            "id": 294,
                            "nodeType": "Block",
                            "src": "3697:83:0",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 285,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "3734:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 286,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "3734:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "id": 289,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "3754:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        ],
                                        "id": 288,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "3746:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 287,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "3746:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 290,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "3746:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 291,
                                      "name": "fee",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 76,
                                      "src": "3761:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 282,
                                      "name": "LINK",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1023,
                                      "src": "3716:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_LinkTokenInterface_$1215",
                                        "typeString": "contract LinkTokenInterface"
                                      }
                                    },
                                    "id": 284,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "transferFrom",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1214,
                                    "src": "3716:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 292,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3716:49:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 293,
                                "nodeType": "ExpressionStatement",
                                "src": "3716:49:0"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "id": 342,
                  "nodeType": "IfStatement",
                  "src": "3522:558:0",
                  "trueBody": {
                    "id": 265,
                    "nodeType": "Block",
                    "src": "3544:74:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 256,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "3576:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3576:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 260,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "3596:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                    "typeString": "contract ForgeGuess"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                    "typeString": "contract ForgeGuess"
                                  }
                                ],
                                "id": 259,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3588:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 258,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3588:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 261,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3588:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 262,
                              "name": "fee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 76,
                              "src": "3603:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 253,
                              "name": "LINK",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1023,
                              "src": "3558:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$1215",
                                "typeString": "contract LinkTokenInterface"
                              }
                            },
                            "id": 255,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1214,
                            "src": "3558:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,address,uint256) external returns (bool)"
                            }
                          },
                          "id": 263,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3558:49:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 264,
                        "nodeType": "ExpressionStatement",
                        "src": "3558:49:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 361,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 346,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 344,
                              "name": "amt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 210,
                              "src": "4097:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "hexValue": "3235",
                              "id": 345,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4101:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_25_by_1",
                                "typeString": "int_const 25"
                              },
                              "value": "25"
                            },
                            "src": "4097:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 347,
                            "name": "guess",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 208,
                            "src": "4104:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4097:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 357,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 353,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "4144:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        ],
                                        "id": 352,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "4136:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 351,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "4136:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 354,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4136:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 349,
                                      "name": "stakedToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 133,
                                      "src": "4114:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$70",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 350,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 15,
                                    "src": "4114:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 355,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4114:36:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 356,
                                  "name": "unreleased",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 115,
                                  "src": "4153:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4114:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 358,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4113:51:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "3230",
                            "id": 359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4167:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_20_by_1",
                              "typeString": "int_const 20"
                            },
                            "value": "20"
                          },
                          "src": "4113:56:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4097:72:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42616e6b726f6c6c20746f6f206c6f7720666f722074686973206265742c20506c65617365206c6f77657220626574",
                        "id": 362,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4172:49:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_680aeddfb93aa763602e82e47d6ff4bb9e28a69517b4b48327c12dbd3db6850e",
                          "typeString": "literal_string \"Bankroll too low for this bet, Please lower bet\""
                        },
                        "value": "Bankroll too low for this bet, Please lower bet"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_680aeddfb93aa763602e82e47d6ff4bb9e28a69517b4b48327c12dbd3db6850e",
                          "typeString": "literal_string \"Bankroll too low for this bet, Please lower bet\""
                        }
                      ],
                      "id": 343,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4089:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4089:133:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 364,
                  "nodeType": "ExpressionStatement",
                  "src": "4089:133:0"
                },
                {
                  "expression": {
                    "id": 369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 365,
                        "name": "betOdds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 94,
                        "src": "4267:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        }
                      },
                      "id": 367,
                      "indexExpression": {
                        "id": 366,
                        "name": "betidIN",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 82,
                        "src": "4275:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4267:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 368,
                      "name": "guess",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "4286:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4267:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 370,
                  "nodeType": "ExpressionStatement",
                  "src": "4267:24:0"
                },
                {
                  "expression": {
                    "id": 375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 371,
                        "name": "betAmt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 90,
                        "src": "4301:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        }
                      },
                      "id": 373,
                      "indexExpression": {
                        "id": 372,
                        "name": "betidIN",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 82,
                        "src": "4308:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4301:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 374,
                      "name": "amt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 210,
                      "src": "4319:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4301:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 376,
                  "nodeType": "ExpressionStatement",
                  "src": "4301:21:0"
                },
                {
                  "expression": {
                    "id": 382,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 377,
                        "name": "betee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 106,
                        "src": "4332:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 379,
                      "indexExpression": {
                        "id": 378,
                        "name": "betidIN",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 82,
                        "src": "4338:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4332:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 380,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4349:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 381,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4349:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4332:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 383,
                  "nodeType": "ExpressionStatement",
                  "src": "4332:27:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 385,
                        "name": "guess",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 208,
                        "src": "4384:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 386,
                        "name": "amt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 210,
                        "src": "4391:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 387,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4396:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 388,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4396:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 389,
                        "name": "betidIN",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 82,
                        "src": "4408:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 384,
                      "name": "GuessNote",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 155,
                      "src": "4374:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,address,uint256)"
                      }
                    },
                    "id": 390,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4374:42:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 391,
                  "nodeType": "EmitStatement",
                  "src": "4369:47:0"
                },
                {
                  "expression": {
                    "id": 393,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "4426:9:0",
                    "subExpression": {
                      "id": 392,
                      "name": "betidIN",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 82,
                      "src": "4426:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 394,
                  "nodeType": "ExpressionStatement",
                  "src": "4426:9:0"
                },
                {
                  "expression": {
                    "id": 397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 395,
                      "name": "unreleased",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 115,
                      "src": "4445:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 396,
                      "name": "amt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 210,
                      "src": "4460:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4445:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 398,
                  "nodeType": "ExpressionStatement",
                  "src": "4445:18:0"
                },
                {
                  "expression": {
                    "id": 401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 399,
                      "name": "wagered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 123,
                      "src": "4473:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 400,
                      "name": "amt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 210,
                      "src": "4484:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4473:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 402,
                  "nodeType": "ExpressionStatement",
                  "src": "4473:14:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 404,
                        "name": "keyHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 74,
                        "src": "4522:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 405,
                        "name": "fee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "4531:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 403,
                      "name": "requestRandomness",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1020,
                      "src": "4504:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32,uint256) returns (bytes32)"
                      }
                    },
                    "id": 406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4504:31:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 214,
                  "id": 407,
                  "nodeType": "Return",
                  "src": "4497:38:0"
                }
              ]
            },
            "documentation": {
              "id": 206,
              "nodeType": "StructuredDocumentation",
              "src": "3173:40:0",
              "text": " Requests randomness "
            },
            "functionSelector": "6e68fc0a",
            "id": 409,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRandomNumber",
            "nameLocation": "3227:15:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 211,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 208,
                  "mutability": "mutable",
                  "name": "guess",
                  "nameLocation": "3251:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 409,
                  "src": "3243:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 207,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3243:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 210,
                  "mutability": "mutable",
                  "name": "amt",
                  "nameLocation": "3266:3:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 409,
                  "src": "3258:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 209,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3258:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3242:28:0"
            },
            "returnParameters": {
              "id": 214,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 213,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "3295:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 409,
                  "src": "3287:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 212,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3287:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3286:19:0"
            },
            "scope": 949,
            "src": "3218:1324:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 434,
              "nodeType": "Block",
              "src": "4652:97:0",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 430,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "components": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 427,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 424,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "id": 420,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -28,
                                            "src": "4702:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                              "typeString": "contract ForgeGuess"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                              "typeString": "contract ForgeGuess"
                                            }
                                          ],
                                          "id": 419,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "4694:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 418,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "4694:7:0",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 421,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "4694:13:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "id": 416,
                                        "name": "stakedToken",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 133,
                                        "src": "4672:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IERC20_$70",
                                          "typeString": "contract IERC20"
                                        }
                                      },
                                      "id": 417,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "balanceOf",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 15,
                                      "src": "4672:21:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                        "typeString": "function (address) view external returns (uint256)"
                                      }
                                    },
                                    "id": 422,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4672:36:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 423,
                                    "name": "unreleased",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 115,
                                    "src": "4711:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4672:49:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 425,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4671:51:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "3230",
                              "id": 426,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4725:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              },
                              "value": "20"
                            },
                            "src": "4671:56:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 428,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "4670:58:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "id": 429,
                        "name": "guess",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 411,
                        "src": "4731:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4670:66:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "3235",
                      "id": 431,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4739:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_25_by_1",
                        "typeString": "int_const 25"
                      },
                      "value": "25"
                    },
                    "src": "4670:71:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 415,
                  "id": 433,
                  "nodeType": "Return",
                  "src": "4663:78:0"
                }
              ]
            },
            "functionSelector": "3a64cfd5",
            "id": 435,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "MaxINForGuess",
            "nameLocation": "4594:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 412,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 411,
                  "mutability": "mutable",
                  "name": "guess",
                  "nameLocation": "4616:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 435,
                  "src": "4608:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 410,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4608:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4607:15:0"
            },
            "returnParameters": {
              "id": 415,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 414,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 435,
                  "src": "4644:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 413,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4644:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4643:9:0"
            },
            "scope": 949,
            "src": "4585:164:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 457,
              "nodeType": "Block",
              "src": "4845:115:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 443,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4873:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4873:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 447,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "4893:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                              "typeString": "contract ForgeGuess"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ForgeGuess_$949",
                              "typeString": "contract ForgeGuess"
                            }
                          ],
                          "id": 446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4885:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 445,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4885:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4885:13:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 449,
                        "name": "fee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "4900:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 440,
                        "name": "LINK",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1023,
                        "src": "4855:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_LinkTokenInterface_$1215",
                          "typeString": "contract LinkTokenInterface"
                        }
                      },
                      "id": 442,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1214,
                      "src": "4855:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,address,uint256) external returns (bool)"
                      }
                    },
                    "id": 450,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4855:49:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 451,
                  "nodeType": "ExpressionStatement",
                  "src": "4855:49:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 453,
                        "name": "keyHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 74,
                        "src": "4940:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 454,
                        "name": "fee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "4949:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 452,
                      "name": "requestRandomness",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1020,
                      "src": "4922:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32,uint256) returns (bytes32)"
                      }
                    },
                    "id": 455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4922:31:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 439,
                  "id": 456,
                  "nodeType": "Return",
                  "src": "4915:38:0"
                }
              ]
            },
            "functionSelector": "5b692eba",
            "id": 458,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBlank",
            "nameLocation": "4799:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 436,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4807:2:0"
            },
            "returnParameters": {
              "id": 439,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 438,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "4834:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 458,
                  "src": "4826:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 437,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4826:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4825:19:0"
            },
            "scope": 949,
            "src": "4790:170:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              964
            ],
            "body": {
              "id": 575,
              "nodeType": "Block",
              "src": "5116:758:0",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 467,
                      "name": "betid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "5129:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 468,
                      "name": "betidIN",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 82,
                      "src": "5138:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5129:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 472,
                  "nodeType": "IfStatement",
                  "src": "5126:51:0",
                  "trueBody": {
                    "id": 471,
                    "nodeType": "Block",
                    "src": "5146:31:0",
                    "statements": [
                      {
                        "functionReturnParameters": 466,
                        "id": 470,
                        "nodeType": "Return",
                        "src": "5160:7:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 476,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 474,
                          "name": "betid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79,
                          "src": "5194:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 475,
                          "name": "betidIN",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 82,
                          "src": "5202:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5194:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d7573742068617665206e65772062657473",
                        "id": 477,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5211:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ba2bc481ef2d895ce2b0f74fefec723fdc83e2cb06e4a617d2b2118d0ade8549",
                          "typeString": "literal_string \"Must have new bets\""
                        },
                        "value": "Must have new bets"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ba2bc481ef2d895ce2b0f74fefec723fdc83e2cb06e4a617d2b2118d0ade8549",
                          "typeString": "literal_string \"Must have new bets\""
                        }
                      ],
                      "id": 473,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5186:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5186:46:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 479,
                  "nodeType": "ExpressionStatement",
                  "src": "5186:46:0"
                },
                {
                  "expression": {
                    "id": 482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 480,
                      "name": "randomResult",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 112,
                      "src": "5242:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 481,
                      "name": "randomness",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 463,
                      "src": "5257:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5242:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 483,
                  "nodeType": "ExpressionStatement",
                  "src": "5242:25:0"
                },
                {
                  "expression": {
                    "id": 488,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 484,
                        "name": "score",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 98,
                        "src": "5277:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        }
                      },
                      "id": 486,
                      "indexExpression": {
                        "id": 485,
                        "name": "betid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "5283:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5277:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 487,
                      "name": "randomness",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 463,
                      "src": "5292:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5277:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 489,
                  "nodeType": "ExpressionStatement",
                  "src": "5277:25:0"
                },
                {
                  "expression": {
                    "id": 496,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 490,
                        "name": "betResults",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 86,
                        "src": "5312:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        }
                      },
                      "id": 492,
                      "indexExpression": {
                        "id": 491,
                        "name": "betid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "5323:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5312:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 495,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 493,
                        "name": "randomness",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 463,
                        "src": "5332:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "%",
                      "rightExpression": {
                        "hexValue": "313030",
                        "id": 494,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5345:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100_by_1",
                          "typeString": "int_const 100"
                        },
                        "value": "100"
                      },
                      "src": "5332:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5312:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 497,
                  "nodeType": "ExpressionStatement",
                  "src": "5312:36:0"
                },
                {
                  "assignments": [
                    499
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 499,
                      "mutability": "mutable",
                      "name": "Guesser",
                      "nameLocation": "5366:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 575,
                      "src": "5358:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 498,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5358:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 503,
                  "initialValue": {
                    "baseExpression": {
                      "id": 500,
                      "name": "betee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 106,
                      "src": "5376:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                        "typeString": "mapping(uint256 => address)"
                      }
                    },
                    "id": 502,
                    "indexExpression": {
                      "id": 501,
                      "name": "betid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "5382:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5376:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5358:30:0"
                },
                {
                  "assignments": [
                    505
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 505,
                      "mutability": "mutable",
                      "name": "odds",
                      "nameLocation": "5406:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 575,
                      "src": "5398:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 504,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5398:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 509,
                  "initialValue": {
                    "baseExpression": {
                      "id": 506,
                      "name": "betOdds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 94,
                      "src": "5413:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      }
                    },
                    "id": 508,
                    "indexExpression": {
                      "id": 507,
                      "name": "betid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "5421:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5413:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5398:29:0"
                },
                {
                  "assignments": [
                    511
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 511,
                      "mutability": "mutable",
                      "name": "betAmount",
                      "nameLocation": "5445:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 575,
                      "src": "5437:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 510,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5437:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 515,
                  "initialValue": {
                    "baseExpression": {
                      "id": 512,
                      "name": "betAmt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 90,
                      "src": "5457:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      }
                    },
                    "id": 514,
                    "indexExpression": {
                      "id": 513,
                      "name": "betid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "5464:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5457:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5437:33:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 520,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 518,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 516,
                        "name": "randomness",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 463,
                        "src": "5483:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "%",
                      "rightExpression": {
                        "hexValue": "313030",
                        "id": 517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5494:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100_by_1",
                          "typeString": "int_const 100"
                        },
                        "value": "100"
                      },
                      "src": "5483:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 519,
                      "name": "odds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 505,
                      "src": "5500:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5483:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 553,
                    "nodeType": "Block",
                    "src": "5636:90:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 543,
                              "name": "Guesser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 499,
                              "src": "5671:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "hexValue": "31",
                              "id": 544,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5680:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              }
                            ],
                            "expression": {
                              "id": 540,
                              "name": "stakedToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 133,
                              "src": "5650:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$70",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 542,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 24,
                            "src": "5650:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 545,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5650:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 546,
                        "nodeType": "ExpressionStatement",
                        "src": "5650:32:0"
                      },
                      {
                        "expression": {
                          "id": 551,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 547,
                              "name": "winnings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 110,
                              "src": "5696:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 549,
                            "indexExpression": {
                              "id": 548,
                              "name": "betid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79,
                              "src": "5705:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5696:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "31",
                            "id": 550,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5714:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "5696:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 552,
                        "nodeType": "ExpressionStatement",
                        "src": "5696:19:0"
                      }
                    ]
                  },
                  "id": 554,
                  "nodeType": "IfStatement",
                  "src": "5480:246:0",
                  "trueBody": {
                    "id": 539,
                    "nodeType": "Block",
                    "src": "5505:127:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 521,
                              "name": "winnings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 110,
                              "src": "5519:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 523,
                            "indexExpression": {
                              "id": 522,
                              "name": "betid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79,
                              "src": "5528:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5519:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 525,
                                "name": "betAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 511,
                                "src": "5545:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 526,
                                "name": "odds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 505,
                                "src": "5556:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 524,
                              "name": "estOUTPUT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 801,
                              "src": "5535:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) view returns (uint256)"
                              }
                            },
                            "id": 527,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5535:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5519:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 529,
                        "nodeType": "ExpressionStatement",
                        "src": "5519:42:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 533,
                              "name": "Guesser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 499,
                              "src": "5596:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "id": 534,
                                "name": "winnings",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 110,
                                "src": "5605:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                  "typeString": "mapping(uint256 => uint256)"
                                }
                              },
                              "id": 536,
                              "indexExpression": {
                                "id": 535,
                                "name": "betid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 79,
                                "src": "5614:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5605:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 530,
                              "name": "stakedToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 133,
                              "src": "5575:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$70",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 532,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 24,
                            "src": "5575:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) external returns (bool)"
                            }
                          },
                          "id": 537,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5575:46:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 538,
                        "nodeType": "ExpressionStatement",
                        "src": "5575:46:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 557,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 555,
                      "name": "unreleased",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 115,
                      "src": "5735:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 556,
                      "name": "betAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 511,
                      "src": "5749:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5735:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 558,
                  "nodeType": "ExpressionStatement",
                  "src": "5735:23:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 560,
                        "name": "odds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 505,
                        "src": "5784:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 563,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 561,
                          "name": "randomness",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 463,
                          "src": "5790:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "%",
                        "rightExpression": {
                          "hexValue": "313030",
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5801:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100_by_1",
                            "typeString": "int_const 100"
                          },
                          "value": "100"
                        },
                        "src": "5790:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 564,
                        "name": "betAmount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 511,
                        "src": "5806:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 565,
                        "name": "betid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "5818:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 566,
                        "name": "Guesser",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 499,
                        "src": "5825:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 567,
                          "name": "winnings",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 110,
                          "src": "5834:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                            "typeString": "mapping(uint256 => uint256)"
                          }
                        },
                        "id": 569,
                        "indexExpression": {
                          "id": 568,
                          "name": "betid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79,
                          "src": "5843:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5834:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 559,
                      "name": "ShowAnswer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 169,
                      "src": "5773:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256,uint256,uint256,address,uint256)"
                      }
                    },
                    "id": 570,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5773:77:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 571,
                  "nodeType": "EmitStatement",
                  "src": "5768:82:0"
                },
                {
                  "expression": {
                    "id": 573,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "5860:7:0",
                    "subExpression": {
                      "id": 572,
                      "name": "betid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 79,
                      "src": "5860:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 574,
                  "nodeType": "ExpressionStatement",
                  "src": "5860:7:0"
                }
              ]
            },
            "documentation": {
              "id": 459,
              "nodeType": "StructuredDocumentation",
              "src": "4967:60:0",
              "text": " Callback function used by VRF Coordinator"
            },
            "id": 576,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillRandomness",
            "nameLocation": "5041:17:0",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 465,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5107:8:0"
            },
            "parameters": {
              "id": 464,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 461,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "5067:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 576,
                  "src": "5059:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 460,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5059:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 463,
                  "mutability": "mutable",
                  "name": "randomness",
                  "nameLocation": "5086:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 576,
                  "src": "5078:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 462,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5078:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5058:39:0"
            },
            "returnParameters": {
              "id": 466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5116:0:0"
            },
            "scope": 949,
            "src": "5032:842:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 659,
              "nodeType": "Block",
              "src": "5988:532:0",
              "statements": [
                {
                  "assignments": [
                    585
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 585,
                      "mutability": "mutable",
                      "name": "st",
                      "nameLocation": "6005:2:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 659,
                      "src": "5998:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$70",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 584,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 583,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 70,
                          "src": "5998:6:0"
                        },
                        "referencedDeclaration": 70,
                        "src": "5998:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$70",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 587,
                  "initialValue": {
                    "id": 586,
                    "name": "stakedToken",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 133,
                    "src": "6010:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$70",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5998:23:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 589,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6039:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 590,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "6039:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 591,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6052:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6039:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f6e2d7a65726f20657468",
                        "id": 593,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6055:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_439dfbaf094298a24a53fd67dd13fcfc711c596ed68f9bb03010390e77d1882e",
                          "typeString": "literal_string \"non-zero eth\""
                        },
                        "value": "non-zero eth"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_439dfbaf094298a24a53fd67dd13fcfc711c596ed68f9bb03010390e77d1882e",
                          "typeString": "literal_string \"non-zero eth\""
                        }
                      ],
                      "id": 588,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6031:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 594,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6031:39:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 595,
                  "nodeType": "ExpressionStatement",
                  "src": "6031:39:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 599,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 597,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 580,
                          "src": "6088:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 598,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6097:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6088:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e6e6f74207374616b652030",
                        "id": 600,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6100:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab",
                          "typeString": "literal_string \"Cannot stake 0\""
                        },
                        "value": "Cannot stake 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab",
                          "typeString": "literal_string \"Cannot stake 0\""
                        }
                      ],
                      "id": 596,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6080:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6080:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 602,
                  "nodeType": "ExpressionStatement",
                  "src": "6080:37:0"
                },
                {
                  "id": 639,
                  "nodeType": "UncheckedBlock",
                  "src": "6127:235:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 620,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 603,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 127,
                            "src": "6152:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 605,
                          "indexExpression": {
                            "id": 604,
                            "name": "forWhom",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 578,
                            "src": "6162:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6152:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 619,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 608,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 606,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 580,
                              "src": "6174:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 607,
                              "name": "totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 118,
                              "src": "6183:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6174:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 617,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 613,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "6228:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        ],
                                        "id": 612,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "6220:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 611,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "6220:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 614,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "6220:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 609,
                                      "name": "stakedToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 133,
                                      "src": "6198:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$70",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 610,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 15,
                                    "src": "6198:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 615,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6198:36:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 616,
                                  "name": "unreleased",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 115,
                                  "src": "6237:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6198:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 618,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "6197:51:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6174:74:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6152:96:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 621,
                      "nodeType": "ExpressionStatement",
                      "src": "6152:96:0"
                    },
                    {
                      "expression": {
                        "id": 637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 622,
                          "name": "totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 118,
                          "src": "6262:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 636,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 625,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 623,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 580,
                              "src": "6277:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 624,
                              "name": "totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 118,
                              "src": "6286:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6277:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 634,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 630,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "6331:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        ],
                                        "id": 629,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "6323:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 628,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "6323:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 631,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "6323:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 626,
                                      "name": "stakedToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 133,
                                      "src": "6301:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$70",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 627,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 15,
                                    "src": "6301:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 632,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6301:36:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 633,
                                  "name": "unreleased",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 115,
                                  "src": "6340:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6301:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 635,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "6300:51:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6277:74:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6262:89:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 638,
                      "nodeType": "ExpressionStatement",
                      "src": "6262:89:0"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 643,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "6404:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 644,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "6404:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 647,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "6424:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                  "typeString": "contract ForgeGuess"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                  "typeString": "contract ForgeGuess"
                                }
                              ],
                              "id": 646,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6416:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 645,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "6416:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 648,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6416:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 649,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 580,
                            "src": "6431:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 641,
                            "name": "st",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 585,
                            "src": "6388:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$70",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 642,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 53,
                          "src": "6388:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 650,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6388:50:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "id": 651,
                        "name": "_transferErrorMessage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 184,
                        "src": "6440:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 640,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6380:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 652,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6380:82:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 653,
                  "nodeType": "ExpressionStatement",
                  "src": "6380:82:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 655,
                        "name": "forWhom",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 578,
                        "src": "6497:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 656,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 580,
                        "src": "6506:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 654,
                      "name": "Staked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 139,
                      "src": "6490:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 657,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6490:23:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 658,
                  "nodeType": "EmitStatement",
                  "src": "6485:28:0"
                }
              ]
            },
            "functionSelector": "2ee40908",
            "id": 660,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "stakeFor",
            "nameLocation": "5923:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 581,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 578,
                  "mutability": "mutable",
                  "name": "forWhom",
                  "nameLocation": "5940:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 660,
                  "src": "5932:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 577,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5932:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 580,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "5957:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 660,
                  "src": "5949:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 579,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5949:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5931:33:0"
            },
            "returnParameters": {
              "id": 582,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5988:0:0"
            },
            "scope": 949,
            "src": "5914:606:0",
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 800,
              "nodeType": "Block",
              "src": "6659:794:0",
              "statements": [
                {
                  "assignments": [
                    670
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 670,
                      "mutability": "mutable",
                      "name": "ratioz",
                      "nameLocation": "6677:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 800,
                      "src": "6669:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 669,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6669:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 683,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 682,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 679,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 675,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "6717:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                      "typeString": "contract ForgeGuess"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                      "typeString": "contract ForgeGuess"
                                    }
                                  ],
                                  "id": 674,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6709:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 673,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6709:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 676,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6709:13:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 671,
                                "name": "stakedToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 133,
                                "src": "6687:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$70",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 672,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 15,
                              "src": "6687:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 677,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6687:36:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 678,
                            "name": "unreleased",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 115,
                            "src": "6726:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6687:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 680,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6686:51:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "id": 681,
                      "name": "betAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 662,
                      "src": "6740:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6686:63:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6669:80:0"
                },
                {
                  "assignments": [
                    685
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 685,
                      "mutability": "mutable",
                      "name": "estOutput",
                      "nameLocation": "6767:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 800,
                      "src": "6759:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 684,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6759:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 687,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 686,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6779:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6759:21:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 690,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 688,
                      "name": "ratioz",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 670,
                      "src": "6797:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "hexValue": "3230",
                      "id": 689,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6806:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_20_by_1",
                        "typeString": "int_const 20"
                      },
                      "value": "20"
                    },
                    "src": "6797:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 708,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 706,
                        "name": "ratioz",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 670,
                        "src": "6895:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "hexValue": "3530",
                        "id": 707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6904:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_50_by_1",
                          "typeString": "int_const 50"
                        },
                        "value": "50"
                      },
                      "src": "6895:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 726,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 724,
                          "name": "ratioz",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 670,
                          "src": "6991:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "hexValue": "313030",
                          "id": 725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7000:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100_by_1",
                            "typeString": "int_const 100"
                          },
                          "value": "100"
                        },
                        "src": "6991:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 744,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 742,
                            "name": "ratioz",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 670,
                            "src": "7106:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "313530",
                            "id": 743,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7115:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_150_by_1",
                              "typeString": "int_const 150"
                            },
                            "value": "150"
                          },
                          "src": "7106:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 762,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 760,
                              "name": "ratioz",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 670,
                              "src": "7223:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "hexValue": "333030",
                              "id": 761,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7232:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_300_by_1",
                                "typeString": "int_const 300"
                              },
                              "value": "300"
                            },
                            "src": "7223:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "id": 792,
                            "nodeType": "Block",
                            "src": "7319:96:0",
                            "statements": [
                              {
                                "expression": {
                                  "id": 790,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 778,
                                    "name": "estOutput",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 685,
                                    "src": "7334:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 789,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 783,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "commonType": {
                                              "typeIdentifier": "t_rational_99500_by_1",
                                              "typeString": "int_const 99500"
                                            },
                                            "id": 781,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "hexValue": "313030",
                                              "id": 779,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "7347:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_100_by_1",
                                                "typeString": "int_const 100"
                                              },
                                              "value": "100"
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "hexValue": "393935",
                                              "id": 780,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "7353:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_995_by_1",
                                                "typeString": "int_const 995"
                                              },
                                              "value": "995"
                                            },
                                            "src": "7347:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_99500_by_1",
                                              "typeString": "int_const 99500"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "id": 782,
                                            "name": "betAmount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 662,
                                            "src": "7359:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "7347:21:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 784,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "7346:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "/",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 787,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 785,
                                            "name": "odds",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 664,
                                            "src": "7371:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "hexValue": "31303030",
                                            "id": 786,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "7378:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1000_by_1",
                                              "typeString": "int_const 1000"
                                            },
                                            "value": "1000"
                                          },
                                          "src": "7371:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 788,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "7370:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "7346:37:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "7334:49:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 791,
                                "nodeType": "ExpressionStatement",
                                "src": "7334:49:0"
                              }
                            ]
                          },
                          "id": 793,
                          "nodeType": "IfStatement",
                          "src": "7220:195:0",
                          "trueBody": {
                            "id": 777,
                            "nodeType": "Block",
                            "src": "7236:79:0",
                            "statements": [
                              {
                                "expression": {
                                  "id": 775,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 763,
                                    "name": "estOutput",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 685,
                                    "src": "7251:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 774,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 768,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "commonType": {
                                              "typeIdentifier": "t_rational_99000_by_1",
                                              "typeString": "int_const 99000"
                                            },
                                            "id": 766,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "hexValue": "313030",
                                              "id": 764,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "7264:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_100_by_1",
                                                "typeString": "int_const 100"
                                              },
                                              "value": "100"
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "hexValue": "393930",
                                              "id": 765,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "7270:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_990_by_1",
                                                "typeString": "int_const 990"
                                              },
                                              "value": "990"
                                            },
                                            "src": "7264:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_99000_by_1",
                                              "typeString": "int_const 99000"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "id": 767,
                                            "name": "betAmount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 662,
                                            "src": "7276:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "7264:21:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 769,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "7263:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "/",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 772,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 770,
                                            "name": "odds",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 664,
                                            "src": "7288:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "hexValue": "31303030",
                                            "id": 771,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "7295:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1000_by_1",
                                              "typeString": "int_const 1000"
                                            },
                                            "value": "1000"
                                          },
                                          "src": "7288:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 773,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "7287:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "7263:37:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "7251:49:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 776,
                                "nodeType": "ExpressionStatement",
                                "src": "7251:49:0"
                              }
                            ]
                          }
                        },
                        "id": 794,
                        "nodeType": "IfStatement",
                        "src": "7103:312:0",
                        "trueBody": {
                          "id": 759,
                          "nodeType": "Block",
                          "src": "7119:96:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 757,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 745,
                                  "name": "estOutput",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 685,
                                  "src": "7134:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 756,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 750,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "commonType": {
                                            "typeIdentifier": "t_rational_98500_by_1",
                                            "typeString": "int_const 98500"
                                          },
                                          "id": 748,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "hexValue": "313030",
                                            "id": 746,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "7147:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_100_by_1",
                                              "typeString": "int_const 100"
                                            },
                                            "value": "100"
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "hexValue": "393835",
                                            "id": 747,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "7153:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_985_by_1",
                                              "typeString": "int_const 985"
                                            },
                                            "value": "985"
                                          },
                                          "src": "7147:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_98500_by_1",
                                            "typeString": "int_const 98500"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "id": 749,
                                          "name": "betAmount",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 662,
                                          "src": "7159:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7147:21:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 751,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "7146:23:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 754,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 752,
                                          "name": "odds",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 664,
                                          "src": "7171:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "hexValue": "31303030",
                                          "id": 753,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "7178:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_1000_by_1",
                                            "typeString": "int_const 1000"
                                          },
                                          "value": "1000"
                                        },
                                        "src": "7171:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 755,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "7170:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "7146:37:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "7134:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 758,
                              "nodeType": "ExpressionStatement",
                              "src": "7134:49:0"
                            }
                          ]
                        }
                      },
                      "id": 795,
                      "nodeType": "IfStatement",
                      "src": "6988:427:0",
                      "trueBody": {
                        "id": 741,
                        "nodeType": "Block",
                        "src": "7004:94:0",
                        "statements": [
                          {
                            "expression": {
                              "id": 739,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 727,
                                "name": "estOutput",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 685,
                                "src": "7019:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 738,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 732,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_rational_9800_by_1",
                                          "typeString": "int_const 9800"
                                        },
                                        "id": 730,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "hexValue": "313030",
                                          "id": 728,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "7032:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_100_by_1",
                                            "typeString": "int_const 100"
                                          },
                                          "value": "100"
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "hexValue": "3938",
                                          "id": 729,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "7038:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_98_by_1",
                                            "typeString": "int_const 98"
                                          },
                                          "value": "98"
                                        },
                                        "src": "7032:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_9800_by_1",
                                          "typeString": "int_const 9800"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 731,
                                        "name": "betAmount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 662,
                                        "src": "7043:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7032:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 733,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7031:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 736,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 734,
                                        "name": "odds",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 664,
                                        "src": "7055:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "hexValue": "313030",
                                        "id": 735,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7062:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_100_by_1",
                                          "typeString": "int_const 100"
                                        },
                                        "value": "100"
                                      },
                                      "src": "7055:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 737,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7054:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "7031:35:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7019:47:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 740,
                            "nodeType": "ExpressionStatement",
                            "src": "7019:47:0"
                          }
                        ]
                      }
                    },
                    "id": 796,
                    "nodeType": "IfStatement",
                    "src": "6892:523:0",
                    "trueBody": {
                      "id": 723,
                      "nodeType": "Block",
                      "src": "6907:76:0",
                      "statements": [
                        {
                          "expression": {
                            "id": 721,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 709,
                              "name": "estOutput",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 685,
                              "src": "6922:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 720,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 714,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_9500_by_1",
                                        "typeString": "int_const 9500"
                                      },
                                      "id": 712,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "313030",
                                        "id": 710,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6935:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_100_by_1",
                                          "typeString": "int_const 100"
                                        },
                                        "value": "100"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "hexValue": "3935",
                                        "id": 711,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6941:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_95_by_1",
                                          "typeString": "int_const 95"
                                        },
                                        "value": "95"
                                      },
                                      "src": "6935:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_9500_by_1",
                                        "typeString": "int_const 9500"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 713,
                                      "name": "betAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 662,
                                      "src": "6946:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6935:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 715,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "6934:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 718,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 716,
                                      "name": "odds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 664,
                                      "src": "6958:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "hexValue": "313030",
                                      "id": 717,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6963:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    },
                                    "src": "6958:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 719,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "6957:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6934:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6922:45:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 722,
                          "nodeType": "ExpressionStatement",
                          "src": "6922:45:0"
                        }
                      ]
                    }
                  },
                  "id": 797,
                  "nodeType": "IfStatement",
                  "src": "6794:621:0",
                  "trueBody": {
                    "id": 705,
                    "nodeType": "Block",
                    "src": "6809:78:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 703,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 691,
                            "name": "estOutput",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 685,
                            "src": "6824:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 702,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 696,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_rational_9300_by_1",
                                      "typeString": "int_const 9300"
                                    },
                                    "id": 694,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "hexValue": "313030",
                                      "id": 692,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6837:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "hexValue": "3933",
                                      "id": 693,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6843:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_93_by_1",
                                        "typeString": "int_const 93"
                                      },
                                      "value": "93"
                                    },
                                    "src": "6837:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_9300_by_1",
                                      "typeString": "int_const 9300"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 695,
                                    "name": "betAmount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 662,
                                    "src": "6849:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "6837:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 697,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "6836:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 700,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 698,
                                    "name": "odds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 664,
                                    "src": "6861:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "hexValue": "313030",
                                    "id": 699,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "6868:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_100_by_1",
                                      "typeString": "int_const 100"
                                    },
                                    "value": "100"
                                  },
                                  "src": "6861:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 701,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "6860:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6836:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6824:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 704,
                        "nodeType": "ExpressionStatement",
                        "src": "6824:48:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 798,
                    "name": "estOutput",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 685,
                    "src": "7435:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 668,
                  "id": 799,
                  "nodeType": "Return",
                  "src": "7428:16:0"
                }
              ]
            },
            "functionSelector": "6864af0c",
            "id": 801,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "estOUTPUT",
            "nameLocation": "6587:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 665,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 662,
                  "mutability": "mutable",
                  "name": "betAmount",
                  "nameLocation": "6605:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 801,
                  "src": "6597:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 661,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6597:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 664,
                  "mutability": "mutable",
                  "name": "odds",
                  "nameLocation": "6624:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 801,
                  "src": "6616:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 663,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6616:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6596:33:0"
            },
            "returnParameters": {
              "id": 668,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 667,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 801,
                  "src": "6651:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 666,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6651:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6650:9:0"
            },
            "scope": 949,
            "src": "6578:875:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 835,
              "nodeType": "Block",
              "src": "7557:141:0",
              "statements": [
                {
                  "assignments": [
                    809
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 809,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "7575:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 835,
                      "src": "7567:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 808,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7567:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 832,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 831,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 812,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3938",
                        "id": 810,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7579:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_98_by_1",
                          "typeString": "int_const 98"
                        },
                        "value": "98"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "id": 811,
                        "name": "amountOut",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 803,
                        "src": "7584:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7579:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 829,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 826,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 817,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "7628:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        ],
                                        "id": 816,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "7620:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 815,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "7620:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 818,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "7620:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 813,
                                      "name": "stakedToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 133,
                                      "src": "7598:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$70",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 814,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 15,
                                    "src": "7598:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 819,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7598:36:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 824,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 822,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 820,
                                          "name": "unreleased",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 115,
                                          "src": "7638:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "hexValue": "35",
                                          "id": 821,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "7651:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_5_by_1",
                                            "typeString": "int_const 5"
                                          },
                                          "value": "5"
                                        },
                                        "src": "7638:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "hexValue": "33",
                                        "id": 823,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7655:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_3_by_1",
                                          "typeString": "int_const 3"
                                        },
                                        "value": "3"
                                      },
                                      "src": "7638:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 825,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "7637:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "7598:59:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 827,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "7597:61:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 828,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 118,
                            "src": "7661:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7597:75:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 830,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "7596:77:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7579:94:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7567:106:0"
                },
                {
                  "expression": {
                    "id": 833,
                    "name": "v",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 809,
                    "src": "7690:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 807,
                  "id": 834,
                  "nodeType": "Return",
                  "src": "7683:8:0"
                }
              ]
            },
            "functionSelector": "afcf89aa",
            "id": 836,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withEstimator",
            "nameLocation": "7494:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 803,
                  "mutability": "mutable",
                  "name": "amountOut",
                  "nameLocation": "7516:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 836,
                  "src": "7508:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 802,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7508:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7507:19:0"
            },
            "returnParameters": {
              "id": 807,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 806,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 836,
                  "src": "7548:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 805,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7548:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7547:9:0"
            },
            "scope": 949,
            "src": "7485:213:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 856,
              "nodeType": "Block",
              "src": "7808:112:0",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 845,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 843,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 841,
                        "name": "betidIN",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 82,
                        "src": "7821:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 842,
                        "name": "betid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "7831:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7821:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 844,
                      "name": "thres",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 838,
                      "src": "7839:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7821:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 855,
                  "nodeType": "IfStatement",
                  "src": "7818:96:0",
                  "trueBody": {
                    "id": 854,
                    "nodeType": "Block",
                    "src": "7846:68:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 849,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "7891:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 850,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "7891:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 847,
                                  "name": "stakedToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 133,
                                  "src": "7869:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$70",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                "id": 848,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balanceOf",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 15,
                                "src": "7869:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view external returns (uint256)"
                                }
                              },
                              "id": 851,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7869:33:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 846,
                            "name": "withdraw",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 948,
                            "src": "7860:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 852,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7860:43:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 853,
                        "nodeType": "ExpressionStatement",
                        "src": "7860:43:0"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "4ea97c07",
            "id": 857,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "perfectWithdraw",
            "nameLocation": "7771:15:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 839,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 838,
                  "mutability": "mutable",
                  "name": "thres",
                  "nameLocation": "7795:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 857,
                  "src": "7787:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 837,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7787:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7786:15:0"
            },
            "returnParameters": {
              "id": 840,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7808:0:0"
            },
            "scope": 949,
            "src": "7762:158:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 947,
              "nodeType": "Block",
              "src": "8053:543:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 868,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 863,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 859,
                          "src": "8071:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "baseExpression": {
                            "id": 864,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 127,
                            "src": "8081:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 867,
                          "indexExpression": {
                            "expression": {
                              "id": 865,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "8091:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 866,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8091:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8081:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8071:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "77697468647261773a2062616c616e6365206973206c6f776572",
                        "id": 869,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8104:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_61a50b027a87ba51d1aa02918bce161d9bc3da6949d5298d8be3a01e58acd7d2",
                          "typeString": "literal_string \"withdraw: balance is lower\""
                        },
                        "value": "withdraw: balance is lower"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_61a50b027a87ba51d1aa02918bce161d9bc3da6949d5298d8be3a01e58acd7d2",
                          "typeString": "literal_string \"withdraw: balance is lower\""
                        }
                      ],
                      "id": 862,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8063:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 870,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8063:70:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 871,
                  "nodeType": "ExpressionStatement",
                  "src": "8063:70:0"
                },
                {
                  "assignments": [
                    874
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 874,
                      "mutability": "mutable",
                      "name": "st",
                      "nameLocation": "8151:2:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 947,
                      "src": "8144:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$70",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 873,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 872,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 70,
                          "src": "8144:6:0"
                        },
                        "referencedDeclaration": 70,
                        "src": "8144:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$70",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 876,
                  "initialValue": {
                    "id": 875,
                    "name": "stakedToken",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 133,
                    "src": "8156:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$70",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8144:23:0"
                },
                {
                  "assignments": [
                    878
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 878,
                      "mutability": "mutable",
                      "name": "amt",
                      "nameLocation": "8185:3:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 947,
                      "src": "8177:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 877,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8177:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 899,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 898,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 879,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 859,
                      "src": "8191:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 896,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 893,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 884,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "8232:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                            "typeString": "contract ForgeGuess"
                                          }
                                        ],
                                        "id": 883,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "8224:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 882,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "8224:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 885,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8224:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 880,
                                      "name": "stakedToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 133,
                                      "src": "8202:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$70",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 881,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 15,
                                    "src": "8202:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 886,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8202:36:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 891,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 889,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 887,
                                          "name": "unreleased",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 115,
                                          "src": "8242:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "hexValue": "35",
                                          "id": 888,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "8255:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_5_by_1",
                                            "typeString": "int_const 5"
                                          },
                                          "value": "5"
                                        },
                                        "src": "8242:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "hexValue": "33",
                                        "id": 890,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8259:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_3_by_1",
                                          "typeString": "int_const 3"
                                        },
                                        "value": "3"
                                      },
                                      "src": "8242:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 892,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "8241:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "8202:59:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 894,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "8201:61:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 895,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 118,
                            "src": "8265:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8201:75:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 897,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "8200:77:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8191:86:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8177:100:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 905,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "8325:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                  "typeString": "contract ForgeGuess"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_ForgeGuess_$949",
                                  "typeString": "contract ForgeGuess"
                                }
                              ],
                              "id": 904,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8317:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 903,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8317:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 906,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8317:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 909,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 907,
                                  "name": "amt",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 878,
                                  "src": "8333:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "hexValue": "3530",
                                  "id": 908,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8339:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_50_by_1",
                                    "typeString": "int_const 50"
                                  },
                                  "value": "50"
                                },
                                "src": "8333:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 910,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "8332:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 901,
                            "name": "stakedToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 133,
                            "src": "8296:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$70",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 902,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 24,
                          "src": "8296:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 911,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8296:47:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 900,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8288:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 912,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8288:56:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 913,
                  "nodeType": "ExpressionStatement",
                  "src": "8288:56:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 917,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "8383:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 918,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8383:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 923,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 921,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 919,
                                "name": "amt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 878,
                                "src": "8395:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "hexValue": "3439",
                                "id": 920,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8401:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_49_by_1",
                                  "typeString": "int_const 49"
                                },
                                "value": "49"
                              },
                              "src": "8395:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "hexValue": "3530",
                              "id": 922,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8406:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_50_by_1",
                                "typeString": "int_const 50"
                              },
                              "value": "50"
                            },
                            "src": "8395:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 915,
                            "name": "stakedToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 133,
                            "src": "8362:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$70",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 916,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 24,
                          "src": "8362:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 924,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8362:47:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 914,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8354:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 925,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8354:56:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 926,
                  "nodeType": "ExpressionStatement",
                  "src": "8354:56:0"
                },
                {
                  "id": 940,
                  "nodeType": "UncheckedBlock",
                  "src": "8420:114:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 932,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 927,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 127,
                            "src": "8444:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 930,
                          "indexExpression": {
                            "expression": {
                              "id": 928,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "8454:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 929,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "8454:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "8444:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "-=",
                        "rightHandSide": {
                          "id": 931,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 859,
                          "src": "8469:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8444:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 933,
                      "nodeType": "ExpressionStatement",
                      "src": "8444:31:0"
                    },
                    {
                      "expression": {
                        "id": 938,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 934,
                          "name": "totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 118,
                          "src": "8489:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 937,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 935,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 118,
                            "src": "8503:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 936,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 859,
                            "src": "8517:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8503:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8489:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 939,
                      "nodeType": "ExpressionStatement",
                      "src": "8489:34:0"
                    }
                  ]
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 942,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8570:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 943,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8570:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 944,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 859,
                        "src": "8582:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 941,
                      "name": "Withdrawn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 145,
                      "src": "8560:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8560:29:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 946,
                  "nodeType": "EmitStatement",
                  "src": "8555:34:0"
                }
              ]
            },
            "functionSelector": "2e1a7d4d",
            "id": 948,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "8013:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 860,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 859,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8030:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 948,
                  "src": "8022:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 858,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8022:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8021:16:0"
            },
            "returnParameters": {
              "id": 861,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8053:0:0"
            },
            "scope": 949,
            "src": "8004:592:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 950,
        "src": "1104:7494:0",
        "usedErrors": []
      }
    ],
    "src": "32:8567:0"
  },
  "bytecode": "60c0604052600060038190556004819055600d8190556001600e55601055601280546001600160a01b031916730b72b2ff0e87ff84eff98451163b78408486ee5c17905534801561004f57600080fd5b50738c7382f9d8f56b33781fe506e897a4f1e2d1725560a05273326c977e6efc84e512bb9c30f76e30c160ed06fb6080527f6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4600155655af3107a400060025560805160a051611add6100fd600039600081816113080152611473015260008181610b9401528181610eb601528181610f5501528181611025015281816110a701526114440152611add6000f3fe6080604052600436106101665760003560e01c80636e68fc0a116100d1578063afcf89aa1161008a578063d63bc59911610064578063d63bc5991461042e578063e2f1cca814610464578063edcbbef814610491578063f03d6672146104be57600080fd5b8063afcf89aa146103a9578063cc7a262e146103c9578063d1730f1f1461040157600080fd5b80636e68fc0a146102da57806370a08231146102fa57806371ca337d14610330578063851c19331461034657806394985ddd1461035c578063984d63cf1461037c57600080fd5b806342619f661161012357806342619f66146102155780634ea97c071461022b578063530d3bc81461024b5780635b692eba146102785780635d57ab281461028d5780636864af0c146102ba57600080fd5b80630d82675e1461016b57806316462ad31461019457806318160ddd146101aa5780632e1a7d4d146101c05780632ee40908146101e25780633a64cfd5146101f5575b600080fd5b34801561017757600080fd5b5061018160045481565b6040519081526020015b60405180910390f35b3480156101a057600080fd5b5061018160035481565b3480156101b657600080fd5b50610181600e5481565b3480156101cc57600080fd5b506101e06101db36600461185f565b6104d4565b005b6101e06101f0366004611894565b61078a565b34801561020157600080fd5b5061018161021036600461185f565b610a48565b34801561022157600080fd5b50610181600c5481565b34801561023757600080fd5b506101e061024636600461185f565b610aef565b34801561025757600080fd5b5061018161026636600461185f565b60056020526000908152604090205481565b34801561028457600080fd5b50610181610b77565b34801561029957600080fd5b506101816102a836600461185f565b600b6020526000908152604090205481565b3480156102c657600080fd5b506101816102d53660046118be565b610c22565b3480156102e657600080fd5b506101816102f53660046118be565b610d94565b34801561030657600080fd5b506101816103153660046118e0565b6001600160a01b031660009081526011602052604090205490565b34801561033c57600080fd5b50610181600f5481565b34801561035257600080fd5b5061018160105481565b34801561036857600080fd5b506101e06103773660046118be565b6112fd565b34801561038857600080fd5b5061018161039736600461185f565b60076020526000908152604090205481565b3480156103b557600080fd5b506101816103c436600461185f565b611383565b3480156103d557600080fd5b506012546103e9906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b34801561040d57600080fd5b5061018161041c36600461185f565b60086020526000908152604090205481565b34801561043a57600080fd5b506103e961044936600461185f565b600a602052600090815260409020546001600160a01b031681565b34801561047057600080fd5b5061018161047f36600461185f565b60096020526000908152604090205481565b34801561049d57600080fd5b506101816104ac36600461185f565b60066020526000908152604090205481565b3480156104ca57600080fd5b50610181600d5481565b336000908152601160205260409020548111156105385760405162461bcd60e51b815260206004820152601a60248201527f77697468647261773a2062616c616e6365206973206c6f77657200000000000060448201526064015b60405180910390fd5b601254600e54600d546001600160a01b03909216916000919060039061055f906005611911565b6105699190611946565b6012546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d5919061195a565b6105df9190611973565b6105e99190611946565b6105f39084611911565b6012549091506001600160a01b031663a9059cbb30610613603285611946565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561065e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610682919061198a565b61068b57600080fd5b6012546001600160a01b031663a9059cbb3360326106aa856031611911565b6106b49190611946565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610723919061198a565b61072c57600080fd5b336000818152601160205260409081902080548690039055600e80548690039055517f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59061077d9086815260200190565b60405180910390a2505050565b6012546001600160a01b031634156107d35760405162461bcd60e51b815260206004820152600c60248201526b0dcdedc5af4cae4de40cae8d60a31b604482015260640161052f565b600082116108145760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015260640161052f565b600d546012546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610883919061195a565b03600e5483028161089657610896611930565b6001600160a01b0385811660009081526011602052604090819020805494909304909301909155600d5460125492516370a0823160e01b81523060048201529092909116906370a0823190602401602060405180830381865afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610925919061195a565b03600e5483028161093857610938611930565b600e80549290910490910190556040516323b872dd60e01b81526001600160a01b038216906323b872dd90610975903390309087906004016119ac565b6020604051808303816000875af1158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b8919061198a565b6040518060400160405280601c81526020017f7374616b656420746f6b656e207472616e73666572206661696c65640000000081525090610a0c5760405162461bcd60e51b815260040161052f9190611a1d565b50826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161077d91815260200190565b600d546012546040516370a0823160e01b81523060048201526000926019928592601492916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac1919061195a565b610acb9190611973565b610ad59190611946565b610adf9190611911565b610ae99190611946565b92915050565b80600354600454610b009190611973565b1015610b74576012546040516370a0823160e01b8152336004820152610b74916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db919061195a565b50565b6002546040516323b872dd60e01b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610bcb91339130916004016119ac565b6020604051808303816000875af1158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061198a565b50610c1d600154600254611440565b905090565b600d546012546040516370a0823160e01b8152306004820152600092839286926001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c98919061195a565b610ca29190611973565b610cac9190611946565b905060006014821015610ce157610cc4846064611911565b610cd086612454611911565b610cda9190611946565b9050610d8c565b6032821015610d0157610cf5846064611911565b610cd08661251c611911565b6064821015610d2157610d15846064611911565b610cd086612648611911565b6096821015610d4357610d36846103e8611911565b610cd086620180c4611911565b61012c821015610d6657610d59846103e8611911565b610cd086620182b8611911565b610d72846103e8611911565b610d7f86620184ac611911565b610d899190611946565b90505b949350505050565b600060628310610de65760405162461bcd60e51b815260206004820152601860248201527f4d757374206775657373206c6f776572207468616e2039380000000000000000604482015260640161052f565b6012546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e1a903390309087906004016119ac565b6020604051808303816000875af1158015610e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5d919061198a565b610e9e5760405162461bcd60e51b81526020600482015260126024820152715472616e73666572206d75737420776f726b60701b604482015260640161052f565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f29919061195a565b9050670de0b6b3a7640000831015610fd6576002546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610f8d9133913091906004016119ac565b6020604051808303816000875af1158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd0919061198a565b50611124565b6802b5e3af16b1880000831015611062576103e86004541080156110065750600254611003906009611911565b81115b1561105d576002546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610f8d9133913091906004016119ac565b611124565b605d84116110785760025461100390600b611911565b60025461108690600b611911565b811115611124576002546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916110df9133913091906004016119ac565b6020604051808303816000875af11580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611122919061198a565b505b600d546012546040516370a0823160e01b8152306004820152601492916001600160a01b0316906370a0823190602401602060405180830381865afa158015611171573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611195919061195a565b61119f9190611973565b6111a99190611946565b846111b5856019611911565b6111bf9190611946565b11156112255760405162461bcd60e51b815260206004820152602f60248201527f42616e6b726f6c6c20746f6f206c6f7720666f722074686973206265742c205060448201526e1b19585cd9481b1bddd95c8818995d608a1b606482015260840161052f565b600480546000908152600760209081526040808320889055835483526006825280832087905583548352600a8252918290208054336001600160a01b03199091168117909155925482518881529182018790528183015290517fea3a2986b784b5ff3af1de7908eb0898970dec44692bec64512b80606842eaf69181900360600190a2600480549060006112b883611a30565b919050555082600d60008282546112cf9190611a4b565b9250508190555082601060008282546112e89190611a4b565b92505081905550610d8c600154600254611440565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113755760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015260640161052f565b61137f82826115b7565b5050565b600080600e546003600d54600561139a9190611911565b6113a49190611946565b6012546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611410919061195a565b61141a9190611973565b6114249190611946565b61142f846062611911565b6114399190611911565b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016114b0929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016114dd93929190611a63565b6020604051808303816000875af11580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611520919061198a565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a09091019092528151918301919091208684529290915261157a906001611a4b565b6000858152602081815260409182902092909255805180830187905280820184905281518082038301815260609091019091528051910120610d8c565b600454600354106115c6575050565b6004546003541061160e5760405162461bcd60e51b81526020600482015260126024820152714d7573742068617665206e6577206265747360701b604482015260640161052f565b600c8190556003546000908152600860205260409020819055611632606482611a93565b6003805460009081526005602090815260408083209490945591548152600a82528281205460078352838220546006909352929020546001600160a01b039092169181611680606486611a93565b101561172b576116908183610c22565b600380546000908152600b6020526040808220939093556012549154815282902054915163a9059cbb60e01b81526001600160a01b038681166004830152602482019390935291169063a9059cbb906044016020604051808303816000875af1158015611701573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611725919061198a565b506117b9565b60125460405163a9059cbb60e01b81526001600160a01b038581166004830152600160248301529091169063a9059cbb906044016020604051808303816000875af115801561177e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a2919061198a565b506003546000908152600b60205260409020600190555b80600d60008282546117cb9190611973565b90915550506001600160a01b0383167f24b1c86427a74774a014f51a56ea4641e764a82aef418326ecf9e634b78f074b83611807606488611a93565b6003546000818152600b60209081526040918290205482519586529085019390935283018690526060830152608082015260a00160405180910390a26003805490600061185383611a30565b91905055505050505050565b60006020828403121561187157600080fd5b5035919050565b80356001600160a01b038116811461188f57600080fd5b919050565b600080604083850312156118a757600080fd5b6118b083611878565b946020939093013593505050565b600080604083850312156118d157600080fd5b50508035926020909101359150565b6000602082840312156118f257600080fd5b61143982611878565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561192b5761192b6118fb565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261195557611955611930565b500490565b60006020828403121561196c57600080fd5b5051919050565b600082821015611985576119856118fb565b500390565b60006020828403121561199c57600080fd5b8151801515811461143957600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000815180845260005b818110156119f6576020818501810151868301820152016119da565b81811115611a08576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061143960208301846119d0565b6000600019821415611a4457611a446118fb565b5060010190565b60008219821115611a5e57611a5e6118fb565b500190565b60018060a01b0384168152826020820152606060408201526000611a8a60608301846119d0565b95945050505050565b600082611aa257611aa2611930565b50069056fea264697066735822122082a9eefcf228023634d2b6d7b8fefc9e58f70673c29a801a1ed07c9a834699bd64736f6c634300080b0033",
  "bytecodeSha1": "811bf00b4427d14eb7a862cb4f4a9a4063a79ed5",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.11+commit.d7f03943"
  },
  "contractName": "ForgeGuess",
  "coverageMap": {
    "branches": {
      "0": {
        "ForgeGuess.estOUTPUT": {
          "63": [
            6797,
            6808,
            false
          ],
          "64": [
            6895,
            6906,
            false
          ],
          "65": [
            6991,
            7003,
            false
          ],
          "66": [
            7106,
            7118,
            false
          ],
          "67": [
            7223,
            7235,
            false
          ]
        },
        "ForgeGuess.fulfillRandomness": {
          "77": [
            5129,
            5145,
            false
          ],
          "78": [
            5194,
            5209,
            true
          ],
          "79": [
            5483,
            5504,
            false
          ]
        },
        "ForgeGuess.getRandomNumber": {
          "68": [
            3324,
            3332,
            true
          ],
          "69": [
            3379,
            3435,
            true
          ],
          "70": [
            3525,
            3543,
            false
          ],
          "71": [
            3626,
            3645,
            false
          ],
          "72": [
            3664,
            3678,
            false
          ],
          "73": [
            3682,
            3696,
            false
          ],
          "74": [
            3798,
            3809,
            false
          ],
          "75": [
            3973,
            3986,
            false
          ],
          "76": [
            4097,
            4169,
            true
          ]
        },
        "ForgeGuess.perfectWithdraw": {
          "62": [
            7821,
            7844,
            false
          ]
        },
        "ForgeGuess.stakeFor": {
          "59": [
            6039,
            6053,
            true
          ],
          "60": [
            6088,
            6098,
            true
          ],
          "61": [
            6388,
            6438,
            true
          ]
        },
        "ForgeGuess.withdraw": {
          "56": [
            8071,
            8102,
            true
          ],
          "57": [
            8296,
            8343,
            true
          ],
          "58": [
            8362,
            8409,
            true
          ]
        }
      },
      "1": {
        "VRFConsumerBase.rawFulfillRandomness": {
          "80": [
            9859,
            9887,
            true
          ]
        }
      },
      "2": {}
    },
    "statements": {
      "0": {
        "ForgeGuess.MaxINForGuess": {
          "13": [
            4663,
            4741
          ]
        },
        "ForgeGuess.balanceOf": {
          "0": [
            2360,
            2385
          ]
        },
        "ForgeGuess.estOUTPUT": {
          "17": [
            6824,
            6872
          ],
          "18": [
            6922,
            6967
          ],
          "19": [
            7019,
            7066
          ],
          "20": [
            7134,
            7183
          ],
          "21": [
            7251,
            7300
          ],
          "22": [
            7334,
            7383
          ],
          "23": [
            7428,
            7444
          ]
        },
        "ForgeGuess.fulfillRandomness": {
          "45": [
            5186,
            5232
          ],
          "46": [
            5242,
            5267
          ],
          "47": [
            5277,
            5302
          ],
          "48": [
            5312,
            5348
          ],
          "49": [
            5519,
            5561
          ],
          "50": [
            5575,
            5621
          ],
          "51": [
            5650,
            5682
          ],
          "52": [
            5696,
            5715
          ],
          "53": [
            5735,
            5758
          ],
          "54": [
            5768,
            5850
          ],
          "55": [
            5860,
            5867
          ]
        },
        "ForgeGuess.getBlank": {
          "15": [
            4855,
            4904
          ],
          "16": [
            4915,
            4953
          ]
        },
        "ForgeGuess.getRandomNumber": {
          "24": [
            3316,
            3361
          ],
          "25": [
            3371,
            3458
          ],
          "26": [
            3558,
            3607
          ],
          "27": [
            3716,
            3765
          ],
          "28": [
            4006,
            4055
          ],
          "29": [
            4089,
            4222
          ],
          "30": [
            4267,
            4291
          ],
          "31": [
            4301,
            4322
          ],
          "32": [
            4332,
            4359
          ],
          "33": [
            4369,
            4416
          ],
          "34": [
            4426,
            4435
          ],
          "35": [
            4445,
            4463
          ],
          "36": [
            4473,
            4487
          ],
          "37": [
            4497,
            4535
          ]
        },
        "ForgeGuess.perfectWithdraw": {
          "14": [
            7860,
            7903
          ]
        },
        "ForgeGuess.stakeFor": {
          "7": [
            6031,
            6070
          ],
          "8": [
            6080,
            6117
          ],
          "9": [
            6152,
            6248
          ],
          "10": [
            6262,
            6351
          ],
          "11": [
            6380,
            6462
          ],
          "12": [
            6485,
            6513
          ]
        },
        "ForgeGuess.withdraw": {
          "1": [
            8063,
            8133
          ],
          "2": [
            8288,
            8344
          ],
          "3": [
            8354,
            8410
          ],
          "4": [
            8444,
            8475
          ],
          "5": [
            8489,
            8523
          ],
          "6": [
            8555,
            8589
          ]
        }
      },
      "1": {
        "VRFConsumerBase.rawFulfillRandomness": {
          "38": [
            9851,
            9923
          ],
          "39": [
            9930,
            9970
          ]
        },
        "VRFConsumerBase.requestRandomness": {
          "40": [
            7986,
            8073
          ],
          "42": [
            8826,
            8865
          ],
          "44": [
            8872,
            8911
          ]
        }
      },
      "2": {
        "VRFRequestIDBase.makeRequestId": {
          "43": [
            1555,
            1614
          ]
        },
        "VRFRequestIDBase.makeVRFInputSeed": {
          "41": [
            977,
            1055
          ]
        }
      }
    }
  },
  "dependencies": [
    "IERC20",
    "VRFConsumerBase",
    "VRFRequestIDBase"
  ],
  "deployedBytecode": "6080604052600436106101665760003560e01c80636e68fc0a116100d1578063afcf89aa1161008a578063d63bc59911610064578063d63bc5991461042e578063e2f1cca814610464578063edcbbef814610491578063f03d6672146104be57600080fd5b8063afcf89aa146103a9578063cc7a262e146103c9578063d1730f1f1461040157600080fd5b80636e68fc0a146102da57806370a08231146102fa57806371ca337d14610330578063851c19331461034657806394985ddd1461035c578063984d63cf1461037c57600080fd5b806342619f661161012357806342619f66146102155780634ea97c071461022b578063530d3bc81461024b5780635b692eba146102785780635d57ab281461028d5780636864af0c146102ba57600080fd5b80630d82675e1461016b57806316462ad31461019457806318160ddd146101aa5780632e1a7d4d146101c05780632ee40908146101e25780633a64cfd5146101f5575b600080fd5b34801561017757600080fd5b5061018160045481565b6040519081526020015b60405180910390f35b3480156101a057600080fd5b5061018160035481565b3480156101b657600080fd5b50610181600e5481565b3480156101cc57600080fd5b506101e06101db36600461185f565b6104d4565b005b6101e06101f0366004611894565b61078a565b34801561020157600080fd5b5061018161021036600461185f565b610a48565b34801561022157600080fd5b50610181600c5481565b34801561023757600080fd5b506101e061024636600461185f565b610aef565b34801561025757600080fd5b5061018161026636600461185f565b60056020526000908152604090205481565b34801561028457600080fd5b50610181610b77565b34801561029957600080fd5b506101816102a836600461185f565b600b6020526000908152604090205481565b3480156102c657600080fd5b506101816102d53660046118be565b610c22565b3480156102e657600080fd5b506101816102f53660046118be565b610d94565b34801561030657600080fd5b506101816103153660046118e0565b6001600160a01b031660009081526011602052604090205490565b34801561033c57600080fd5b50610181600f5481565b34801561035257600080fd5b5061018160105481565b34801561036857600080fd5b506101e06103773660046118be565b6112fd565b34801561038857600080fd5b5061018161039736600461185f565b60076020526000908152604090205481565b3480156103b557600080fd5b506101816103c436600461185f565b611383565b3480156103d557600080fd5b506012546103e9906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b34801561040d57600080fd5b5061018161041c36600461185f565b60086020526000908152604090205481565b34801561043a57600080fd5b506103e961044936600461185f565b600a602052600090815260409020546001600160a01b031681565b34801561047057600080fd5b5061018161047f36600461185f565b60096020526000908152604090205481565b34801561049d57600080fd5b506101816104ac36600461185f565b60066020526000908152604090205481565b3480156104ca57600080fd5b50610181600d5481565b336000908152601160205260409020548111156105385760405162461bcd60e51b815260206004820152601a60248201527f77697468647261773a2062616c616e6365206973206c6f77657200000000000060448201526064015b60405180910390fd5b601254600e54600d546001600160a01b03909216916000919060039061055f906005611911565b6105699190611946565b6012546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d5919061195a565b6105df9190611973565b6105e99190611946565b6105f39084611911565b6012549091506001600160a01b031663a9059cbb30610613603285611946565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561065e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610682919061198a565b61068b57600080fd5b6012546001600160a01b031663a9059cbb3360326106aa856031611911565b6106b49190611946565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610723919061198a565b61072c57600080fd5b336000818152601160205260409081902080548690039055600e80548690039055517f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59061077d9086815260200190565b60405180910390a2505050565b6012546001600160a01b031634156107d35760405162461bcd60e51b815260206004820152600c60248201526b0dcdedc5af4cae4de40cae8d60a31b604482015260640161052f565b600082116108145760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b604482015260640161052f565b600d546012546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610883919061195a565b03600e5483028161089657610896611930565b6001600160a01b0385811660009081526011602052604090819020805494909304909301909155600d5460125492516370a0823160e01b81523060048201529092909116906370a0823190602401602060405180830381865afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610925919061195a565b03600e5483028161093857610938611930565b600e80549290910490910190556040516323b872dd60e01b81526001600160a01b038216906323b872dd90610975903390309087906004016119ac565b6020604051808303816000875af1158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b8919061198a565b6040518060400160405280601c81526020017f7374616b656420746f6b656e207472616e73666572206661696c65640000000081525090610a0c5760405162461bcd60e51b815260040161052f9190611a1d565b50826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161077d91815260200190565b600d546012546040516370a0823160e01b81523060048201526000926019928592601492916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac1919061195a565b610acb9190611973565b610ad59190611946565b610adf9190611911565b610ae99190611946565b92915050565b80600354600454610b009190611973565b1015610b74576012546040516370a0823160e01b8152336004820152610b74916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db919061195a565b50565b6002546040516323b872dd60e01b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610bcb91339130916004016119ac565b6020604051808303816000875af1158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061198a565b50610c1d600154600254611440565b905090565b600d546012546040516370a0823160e01b8152306004820152600092839286926001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c98919061195a565b610ca29190611973565b610cac9190611946565b905060006014821015610ce157610cc4846064611911565b610cd086612454611911565b610cda9190611946565b9050610d8c565b6032821015610d0157610cf5846064611911565b610cd08661251c611911565b6064821015610d2157610d15846064611911565b610cd086612648611911565b6096821015610d4357610d36846103e8611911565b610cd086620180c4611911565b61012c821015610d6657610d59846103e8611911565b610cd086620182b8611911565b610d72846103e8611911565b610d7f86620184ac611911565b610d899190611946565b90505b949350505050565b600060628310610de65760405162461bcd60e51b815260206004820152601860248201527f4d757374206775657373206c6f776572207468616e2039380000000000000000604482015260640161052f565b6012546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e1a903390309087906004016119ac565b6020604051808303816000875af1158015610e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5d919061198a565b610e9e5760405162461bcd60e51b81526020600482015260126024820152715472616e73666572206d75737420776f726b60701b604482015260640161052f565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f29919061195a565b9050670de0b6b3a7640000831015610fd6576002546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610f8d9133913091906004016119ac565b6020604051808303816000875af1158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd0919061198a565b50611124565b6802b5e3af16b1880000831015611062576103e86004541080156110065750600254611003906009611911565b81115b1561105d576002546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd91610f8d9133913091906004016119ac565b611124565b605d84116110785760025461100390600b611911565b60025461108690600b611911565b811115611124576002546040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916110df9133913091906004016119ac565b6020604051808303816000875af11580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611122919061198a565b505b600d546012546040516370a0823160e01b8152306004820152601492916001600160a01b0316906370a0823190602401602060405180830381865afa158015611171573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611195919061195a565b61119f9190611973565b6111a99190611946565b846111b5856019611911565b6111bf9190611946565b11156112255760405162461bcd60e51b815260206004820152602f60248201527f42616e6b726f6c6c20746f6f206c6f7720666f722074686973206265742c205060448201526e1b19585cd9481b1bddd95c8818995d608a1b606482015260840161052f565b600480546000908152600760209081526040808320889055835483526006825280832087905583548352600a8252918290208054336001600160a01b03199091168117909155925482518881529182018790528183015290517fea3a2986b784b5ff3af1de7908eb0898970dec44692bec64512b80606842eaf69181900360600190a2600480549060006112b883611a30565b919050555082600d60008282546112cf9190611a4b565b9250508190555082601060008282546112e89190611a4b565b92505081905550610d8c600154600254611440565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113755760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015260640161052f565b61137f82826115b7565b5050565b600080600e546003600d54600561139a9190611911565b6113a49190611946565b6012546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611410919061195a565b61141a9190611973565b6114249190611946565b61142f846062611911565b6114399190611911565b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016114b0929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016114dd93929190611a63565b6020604051808303816000875af11580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611520919061198a565b5060008381526020818152604080832054815180840188905280830185905230606082015260808082018390528351808303909101815260a09091019092528151918301919091208684529290915261157a906001611a4b565b6000858152602081815260409182902092909255805180830187905280820184905281518082038301815260609091019091528051910120610d8c565b600454600354106115c6575050565b6004546003541061160e5760405162461bcd60e51b81526020600482015260126024820152714d7573742068617665206e6577206265747360701b604482015260640161052f565b600c8190556003546000908152600860205260409020819055611632606482611a93565b6003805460009081526005602090815260408083209490945591548152600a82528281205460078352838220546006909352929020546001600160a01b039092169181611680606486611a93565b101561172b576116908183610c22565b600380546000908152600b6020526040808220939093556012549154815282902054915163a9059cbb60e01b81526001600160a01b038681166004830152602482019390935291169063a9059cbb906044016020604051808303816000875af1158015611701573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611725919061198a565b506117b9565b60125460405163a9059cbb60e01b81526001600160a01b038581166004830152600160248301529091169063a9059cbb906044016020604051808303816000875af115801561177e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a2919061198a565b506003546000908152600b60205260409020600190555b80600d60008282546117cb9190611973565b90915550506001600160a01b0383167f24b1c86427a74774a014f51a56ea4641e764a82aef418326ecf9e634b78f074b83611807606488611a93565b6003546000818152600b60209081526040918290205482519586529085019390935283018690526060830152608082015260a00160405180910390a26003805490600061185383611a30565b91905055505050505050565b60006020828403121561187157600080fd5b5035919050565b80356001600160a01b038116811461188f57600080fd5b919050565b600080604083850312156118a757600080fd5b6118b083611878565b946020939093013593505050565b600080604083850312156118d157600080fd5b50508035926020909101359150565b6000602082840312156118f257600080fd5b61143982611878565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561192b5761192b6118fb565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261195557611955611930565b500490565b60006020828403121561196c57600080fd5b5051919050565b600082821015611985576119856118fb565b500390565b60006020828403121561199c57600080fd5b8151801515811461143957600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000815180845260005b818110156119f6576020818501810151868301820152016119da565b81811115611a08576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061143960208301846119d0565b6000600019821415611a4457611a446118fb565b5060010190565b60008219821115611a5e57611a5e6118fb565b500190565b60018060a01b0384168152826020820152606060408201526000611a8a60608301846119d0565b95945050505050565b600082611aa257611aa2611930565b50069056fea264697066735822122082a9eefcf228023634d2b6d7b8fefc9e58f70673c29a801a1ed07c9a834699bd64736f6c634300080b0033",
  "deployedSourceMap": "1104:7494:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1240:26;;;;;;;;;;;;;;;;;;;160:25:4;;;148:2;133:18;1240:26:0;;;;;;;;1210:24;;;;;;;;;;;;;;;;1692:30;;;;;;;;;;;;;;;;8004:592;;;;;;;;;;-1:-1:-1;8004:592:0;;;;;:::i;:::-;;:::i;:::-;;5914:606;;;;;;:::i;:::-;;:::i;4585:164::-;;;;;;;;;;-1:-1:-1;4585:164:0;;;;;:::i;:::-;;:::i;1626:27::-;;;;;;;;;;;;;;;;7762:158;;;;;;;;;;-1:-1:-1;7762:158:0;;;;;:::i;:::-;;:::i;1292:45::-;;;;;;;;;;-1:-1:-1;1292:45:0;;;;;:::i;:::-;;;;;;;;;;;;;;4790:170;;;;;;;;;;;;;:::i;1577:43::-;;;;;;;;;;-1:-1:-1;1577:43:0;;;;;:::i;:::-;;;;;;;;;;;;;;6578:875;;;;;;;;;;-1:-1:-1;6578:875:0;;;;;:::i;:::-;;:::i;3218:1324::-;;;;;;;;;;-1:-1:-1;3218:1324:0;;;;;:::i;:::-;;:::i;2284:108::-;;;;;;;;;;-1:-1:-1;2284:108:0;;;;;:::i;:::-;-1:-1:-1;;;;;2367:18:0;2341:7;2367:18;;;:9;:18;;;;;;;2284:108;1728:20;;;;;;;;;;;;;;;;1754:26;;;;;;;;;;;;;;;;9766:210:1;;;;;;;;;;-1:-1:-1;9766:210:1;;;;;:::i;:::-;;:::i;1390:42:0:-;;;;;;;;;;-1:-1:-1;1390:42:0;;;;;:::i;:::-;;;;;;;;;;;;;;7485:213;;;;;;;;;;-1:-1:-1;7485:213:0;;;;;:::i;:::-;;:::i;1837:78::-;;;;;;;;;;-1:-1:-1;1837:78:0;;;;-1:-1:-1;;;;;1837:78:0;;;;;;-1:-1:-1;;;;;1874:32:4;;;1856:51;;1844:2;1829:18;1837:78:0;1697:216:4;1438:40:0;;;;;;;;;;-1:-1:-1;1438:40:0;;;;;:::i;:::-;;;;;;;;;;;;;;1531;;;;;;;;;;-1:-1:-1;1531:40:0;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1531:40:0;;;1484:41;;;;;;;;;;-1:-1:-1;1484:41:0;;;;;:::i;:::-;;;;;;;;;;;;;;1343;;;;;;;;;;-1:-1:-1;1343:41:0;;;;;:::i;:::-;;;;;;;;;;;;;;1659:27;;;;;;;;;;;;;;;;8004:592;8091:10;8081:21;;;;:9;:21;;;;;;8071:31;;;8063:70;;;;-1:-1:-1;;;8063:70:0;;2328:2:4;8063:70:0;;;2310:21:4;2367:2;2347:18;;;2340:30;2406:28;2386:18;;;2379:56;2452:18;;8063:70:0;;;;;;;;;8156:11;;8265;;8242:10;;-1:-1:-1;;;;;8156:11:0;;;;8144:9;;8265:11;8259:1;;8242:14;;8255:1;8242:14;:::i;:::-;:18;;;;:::i;:::-;8202:11;;:36;;-1:-1:-1;;;8202:36:0;;8232:4;8202:36;;;1856:51:4;-1:-1:-1;;;;;8202:11:0;;;;:21;;1829:18:4;;8202:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:59;;;;:::i;:::-;8201:75;;;;:::i;:::-;8191:86;;:6;:86;:::i;:::-;8296:11;;8177:100;;-1:-1:-1;;;;;;8296:11:0;:20;8325:4;8333:8;8339:2;8177:100;8333:8;:::i;:::-;8296:47;;-1:-1:-1;;;;;;8296:47:0;;;;;;;-1:-1:-1;;;;;3554:32:4;;;8296:47:0;;;3536:51:4;3603:18;;;3596:34;3509:18;;8296:47:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8288:56;;;;;;8362:11;;-1:-1:-1;;;;;8362:11:0;:20;8383:10;8406:2;8395:8;:3;8401:2;8395:8;:::i;:::-;:13;;;;:::i;:::-;8362:47;;-1:-1:-1;;;;;;8362:47:0;;;;;;;-1:-1:-1;;;;;3554:32:4;;;8362:47:0;;;3536:51:4;3603:18;;;3596:34;3509:18;;8362:47:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8354:56;;;;;;8454:10;8444:21;;;;:9;:21;;;;;;;:31;;;;;;;8503:11;;;:20;;;8489:34;;8560:29;;;;;8469:6;160:25:4;;148:2;133:18;;14:177;8560:29:0;;;;;;;;8053:543;;8004:592;:::o;5914:606::-;6010:11;;-1:-1:-1;;;;;6010:11:0;6039:9;:14;6031:39;;;;-1:-1:-1;;;6031:39:0;;4125:2:4;6031:39:0;;;4107:21:4;4164:2;4144:18;;;4137:30;-1:-1:-1;;;4183:18:4;;;4176:42;4235:18;;6031:39:0;3923:336:4;6031:39:0;6097:1;6088:6;:10;6080:37;;;;-1:-1:-1;;;6080:37:0;;4466:2:4;6080:37:0;;;4448:21:4;4505:2;4485:18;;;4478:30;-1:-1:-1;;;4524:18:4;;;4517:44;4578:18;;6080:37:0;4264:338:4;6080:37:0;6237:10;;6198:11;;:36;;-1:-1:-1;;;6198:36:0;;6228:4;6198:36;;;1856:51:4;-1:-1:-1;;;;;6198:11:0;;;;:21;;1829:18:4;;6198:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;6183:11;;6174:6;:20;:74;;;;;:::i;:::-;-1:-1:-1;;;;;6152:18:0;;;;;;;:9;:18;;;;;;;:96;;6174:74;;;;6152:96;;;;;;6340:10;;6301:11;;:36;;-1:-1:-1;;;6301:36:0;;6331:4;6301:36;;;1856:51:4;6340:10:0;;6301:11;;;;:21;;1829:18:4;;6301:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;6286:11;;6277:6;:20;:74;;;;;:::i;:::-;6262:11;:89;;6277:74;;;;6262:89;;;;;6388:50;;-1:-1:-1;;;6388:50:0;;-1:-1:-1;;;;;6388:15:0;;;;;:50;;6404:10;;6424:4;;6431:6;;6388:50;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6440:21;;;;;;;;;;;;;;;;;6380:82;;;;;-1:-1:-1;;;6380:82:0;;;;;;;;:::i;:::-;;6497:7;-1:-1:-1;;;;;6490:23:0;;6506:6;6490:23;;;;160:25:4;;148:2;133:18;;14:177;4585:164:0;4711:10;;4672:11;;:36;;-1:-1:-1;;;4672:36:0;;4702:4;4672:36;;;1856:51:4;4644:7:0;;4739:2;;4731:5;;4725:2;;4711:10;-1:-1:-1;;;;;4672:11:0;;:21;;1829:18:4;;4672:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;;;;:::i;:::-;4671:56;;;;:::i;:::-;4670:66;;;;:::i;:::-;:71;;;;:::i;:::-;4663:78;4585:164;-1:-1:-1;;4585:164:0:o;7762:158::-;7839:5;7831;;7821:7;;:15;;;;:::i;:::-;:23;7818:96;;;7869:11;;:33;;-1:-1:-1;;;7869:33:0;;7891:10;7869:33;;;1856:51:4;7860:43:0;;-1:-1:-1;;;;;7869:11:0;;:21;;1829:18:4;;7869:33:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7860:43::-;7762:158;:::o;4790:170::-;4900:3;;4855:49;;-1:-1:-1;;;4855:49:0;;4826:17;;-1:-1:-1;;;;;4855:4:0;:17;;;;:49;;4873:10;;4893:4;;4855:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4922:31;4940:7;;4949:3;;4922:17;:31::i;:::-;4915:38;;4790:170;:::o;6578:875::-;6726:10;;6687:11;;:36;;-1:-1:-1;;;6687:36:0;;6717:4;6687:36;;;1856:51:4;6651:7:0;;;;6740:9;;-1:-1:-1;;;;;6687:11:0;;;;:21;;1829:18:4;;6687:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;;;;:::i;:::-;6686:63;;;;:::i;:::-;6669:80;;6759:17;6806:2;6797:6;:11;6794:621;;;6861:10;:4;6868:3;6861:10;:::i;:::-;6837:21;6849:9;6837:8;:21;:::i;:::-;6836:36;;;;:::i;:::-;6824:48;;6794:621;;;6904:2;6895:6;:11;6892:523;;;6958:8;:4;6963:3;6958:8;:::i;:::-;6935:20;6946:9;6935:8;:20;:::i;6892:523::-;7000:3;6991:6;:12;6988:427;;;7055:10;:4;7062:3;7055:10;:::i;:::-;7032:20;7043:9;7032:8;:20;:::i;6988:427::-;7115:3;7106:6;:12;7103:312;;;7171:11;:4;7178;7171:11;:::i;:::-;7147:21;7159:9;7147;:21;:::i;7103:312::-;7232:3;7223:6;:12;7220:195;;;7288:11;:4;7295;7288:11;:::i;:::-;7264:21;7276:9;7264;:21;:::i;7220:195::-;7371:11;:4;7378;7371:11;:::i;:::-;7347:21;7359:9;7347;:21;:::i;:::-;7346:37;;;;:::i;:::-;7334:49;;7220:195;7435:9;6578:875;-1:-1:-1;;;;6578:875:0:o;3218:1324::-;3287:17;3330:2;3324:5;:8;3316:45;;;;-1:-1:-1;;;3316:45:0;;5891:2:4;3316:45:0;;;5873:21:4;5930:2;5910:18;;;5903:30;5969:26;5949:18;;;5942:54;6013:18;;3316:45:0;5689:348:4;3316:45:0;3379:11;;:56;;-1:-1:-1;;;3379:56:0;;-1:-1:-1;;;;;3379:11:0;;;;:24;;:56;;3404:10;;3424:4;;3431:3;;3379:56;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3371:87;;;;-1:-1:-1;;;3371:87:0;;6244:2:4;3371:87:0;;;6226:21:4;6283:2;6263:18;;;6256:30;-1:-1:-1;;;6302:18:4;;;6295:48;6360:18;;3371:87:0;6042:342:4;3371:87:0;3483:29;;-1:-1:-1;;;3483:29:0;;3506:4;3483:29;;;1856:51:4;3468:12:0;;3483:4;-1:-1:-1;;;;;3483:14:0;;;;1829:18:4;;3483:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3468:44;;3531:12;3525:3;:18;3522:558;;;3603:3;;3558:49;;-1:-1:-1;;;3558:49:0;;-1:-1:-1;;;;;3558:4:0;:17;;;;:49;;3576:10;;3596:4;;3603:3;3558:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3522:558;;;3632:13;3626:3;:19;3623:457;;;3674:4;3664:7;;:14;:32;;;;-1:-1:-1;3689:3:0;;:7;;3695:1;3689:7;:::i;:::-;3682:4;:14;3664:32;3661:119;;;3761:3;;3716:49;;-1:-1:-1;;;3716:49:0;;-1:-1:-1;;;;;3716:4:0;:17;;;;:49;;3734:10;;3754:4;;3761:3;3716:49;;;:::i;3661:119::-;3623:457;;;3807:2;3798:5;:11;3795:285;;3843:3;;:6;;3847:2;3843:6;:::i;3795:285::-;3980:3;;:6;;3984:2;3980:6;:::i;:::-;3973:4;:13;3970:100;;;4051:3;;4006:49;;-1:-1:-1;;;4006:49:0;;-1:-1:-1;;;;;4006:4:0;:17;;;;:49;;4024:10;;4044:4;;4051:3;4006:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3970:100;4153:10;;4114:11;;:36;;-1:-1:-1;;;4114:36:0;;4144:4;4114:36;;;1856:51:4;4167:2:0;;4153:10;-1:-1:-1;;;;;4114:11:0;;:21;;1829:18:4;;4114:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;;;;:::i;:::-;4113:56;;;;:::i;:::-;4104:5;4097:6;:3;4101:2;4097:6;:::i;:::-;:12;;;;:::i;:::-;:72;;4089:133;;;;-1:-1:-1;;;4089:133:0;;6591:2:4;4089:133:0;;;6573:21:4;6630:2;6610:18;;;6603:30;6669:34;6649:18;;;6642:62;-1:-1:-1;;;6720:18:4;;;6713:45;6775:19;;4089:133:0;6389:411:4;4089:133:0;4275:7;;;4267:16;;;;:7;:16;;;;;;;;:24;;;4308:7;;4301:15;;:6;:15;;;;;:21;;;4338:7;;4332:14;;:5;:14;;;;;;:27;;4349:10;-1:-1:-1;;;;;;4332:27:0;;;;;;;;4408:7;;4374:42;;7007:25:4;;;7048:18;;;7041:34;;;7091:18;;;7084:34;4374:42:0;;;;;;;6995:2:4;4374:42:0;;;4426:7;:9;;;:7;:9;;;:::i;:::-;;;;;;4460:3;4445:10;;:18;;;;;;;:::i;:::-;;;;;;;;4484:3;4473:7;;:14;;;;;;;:::i;:::-;;;;;;;;4504:31;4522:7;;4531:3;;4504:17;:31::i;9766:210:1:-;9859:10;-1:-1:-1;;;;;9873:14:1;9859:28;;9851:72;;;;-1:-1:-1;;;9851:72:1;;7604:2:4;9851:72:1;;;7586:21:4;7643:2;7623:18;;;7616:30;7682:33;7662:18;;;7655:61;7733:18;;9851:72:1;7402:355:4;9851:72:1;9930:40;9948:9;9959:10;9930:17;:40::i;:::-;9766:210;;:::o;7485:213:0:-;7548:7;7567:9;7661:11;;7655:1;7638:10;;7651:1;7638:14;;;;:::i;:::-;:18;;;;:::i;:::-;7598:11;;:36;;-1:-1:-1;;;7598:36:0;;7628:4;7598:36;;;1856:51:4;-1:-1:-1;;;;;7598:11:0;;;;:21;;1829:18:4;;7598:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:59;;;;:::i;:::-;7597:75;;;;:::i;:::-;7579:14;7584:9;7579:2;:14;:::i;:::-;:94;;;;:::i;:::-;7567:106;7485:213;-1:-1:-1;;;7485:213:0:o;7883:1034:1:-;7960:17;7986:4;-1:-1:-1;;;;;7986:20:1;;8007:14;8023:4;8040:8;6713:1;8029:43;;;;;;;;7936:25:4;;;7992:2;7977:18;;7970:34;7924:2;7909:18;;7762:248;8029:43:1;;;;;;;;;;;;;7986:87;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;8308:15:1;8391:16;;;;;;;;;;;;1002:51:2;;;;;9856:25:4;;;9897:18;;;9890:34;;;8384:4:1;9940:18:4;;;9933:60;10009:18;;;;10002:34;;;1002:51:2;;;;;;;;;;9828:19:4;;;;1002:51:2;;;992:62;;;;;;;;;8845:16:1;;;;;;;:20;;8864:1;8845:20;:::i;:::-;8826:6;:16;;;;;;;;;;;;:39;;;;1572:41:2;;;;;10204:19:4;;;10239:12;;;10232:28;;;1572:41:2;;;;;;;;;10276:12:4;;;;1572:41:2;;;1562:52;;;;;8879:32:1;1452:168:2;5032:842:0;5138:7;;5129:5;;:16;5126:51;;5032:842;;:::o;5126:51::-;5202:7;;5194:5;;:15;5186:46;;;;-1:-1:-1;;;5186:46:0;;8608:2:4;5186:46:0;;;8590:21:4;8647:2;8627:18;;;8620:30;-1:-1:-1;;;8666:18:4;;;8659:48;8724:18;;5186:46:0;8406:342:4;5186:46:0;5242:12;:25;;;5283:5;;5277:12;;;;:5;:12;;;;;:25;;;5332:16;5345:3;5257:10;5332:16;:::i;:::-;5323:5;;;5312:17;;;;:10;:17;;;;;;;;:36;;;;5382:5;;5376:12;;:5;:12;;;;;;5413:7;:14;;;;;;5457:6;:13;;;;;;;-1:-1:-1;;;;;5376:12:0;;;;5413:14;5483;5494:3;5483:10;:14;:::i;:::-;:21;5480:246;;;5535:26;5545:9;5556:4;5535:9;:26::i;:::-;5528:5;;;5519:15;;;;:8;:15;;;;;;:42;;;;5575:11;;5614:5;;5605:15;;;;;;5575:46;;-1:-1:-1;;;5575:46:0;;-1:-1:-1;;;;;3554:32:4;;;5575:46:0;;;3536:51:4;3603:18;;;3596:34;;;;5575:11:0;;;:20;;3509:18:4;;5575:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5480:246;;;5650:11;;:32;;-1:-1:-1;;;5650:32:0;;-1:-1:-1;;;;;3554:32:4;;;5650::0;;;3536:51:4;5650:11:0;3603:18:4;;;3596:34;5650:11:0;;;;:20;;3509:18:4;;5650:32:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5705:5:0;;5696:15;;;;:8;:15;;;;;5714:1;5696:19;;5480:246;5749:9;5735:10;;:23;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;5773:77:0;;;5784:4;5790:14;5801:3;5790:10;:14;:::i;:::-;5818:5;;5834:15;;;;:8;:15;;;;;;;;;;5773:77;;9416:25:4;;;9457:18;;;9450:34;;;;9500:18;;9493:34;;;9558:2;9543:18;;9536:34;9601:3;9586:19;;9579:35;9403:3;9388:19;5773:77:0;;;;;;;5860:5;:7;;;:5;:7;;;:::i;:::-;;;;;;5116:758;;;5032:842;;:::o;196:180:4:-;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;-1:-1:-1;347:23:4;;196:180;-1:-1:-1;196:180:4:o;381:173::-;449:20;;-1:-1:-1;;;;;498:31:4;;488:42;;478:70;;544:1;541;534:12;478:70;381:173;;;:::o;559:254::-;627:6;635;688:2;676:9;667:7;663:23;659:32;656:52;;;704:1;701;694:12;656:52;727:29;746:9;727:29;:::i;:::-;717:39;803:2;788:18;;;;775:32;;-1:-1:-1;;;559:254:4:o;1000:248::-;1068:6;1076;1129:2;1117:9;1108:7;1104:23;1100:32;1097:52;;;1145:1;1142;1135:12;1097:52;-1:-1:-1;;1168:23:4;;;1238:2;1223:18;;;1210:32;;-1:-1:-1;1000:248:4:o;1253:186::-;1312:6;1365:2;1353:9;1344:7;1340:23;1336:32;1333:52;;;1381:1;1378;1371:12;1333:52;1404:29;1423:9;1404:29;:::i;2481:127::-;2542:10;2537:3;2533:20;2530:1;2523:31;2573:4;2570:1;2563:15;2597:4;2594:1;2587:15;2613:168;2653:7;2719:1;2715;2711:6;2707:14;2704:1;2701:21;2696:1;2689:9;2682:17;2678:45;2675:71;;;2726:18;;:::i;:::-;-1:-1:-1;2766:9:4;;2613:168::o;2786:127::-;2847:10;2842:3;2838:20;2835:1;2828:31;2878:4;2875:1;2868:15;2902:4;2899:1;2892:15;2918:120;2958:1;2984;2974:35;;2989:18;;:::i;:::-;-1:-1:-1;3023:9:4;;2918:120::o;3043:184::-;3113:6;3166:2;3154:9;3145:7;3141:23;3137:32;3134:52;;;3182:1;3179;3172:12;3134:52;-1:-1:-1;3205:16:4;;3043:184;-1:-1:-1;3043:184:4:o;3232:125::-;3272:4;3300:1;3297;3294:8;3291:34;;;3305:18;;:::i;:::-;-1:-1:-1;3342:9:4;;3232:125::o;3641:277::-;3708:6;3761:2;3749:9;3740:7;3736:23;3732:32;3729:52;;;3777:1;3774;3767:12;3729:52;3809:9;3803:16;3862:5;3855:13;3848:21;3841:5;3838:32;3828:60;;3884:1;3881;3874:12;4607:375;-1:-1:-1;;;;;4865:15:4;;;4847:34;;4917:15;;;;4912:2;4897:18;;4890:43;4964:2;4949:18;;4942:34;;;;4797:2;4782:18;;4607:375::o;4987:472::-;5029:3;5067:5;5061:12;5094:6;5089:3;5082:19;5119:1;5129:162;5143:6;5140:1;5137:13;5129:162;;;5205:4;5261:13;;;5257:22;;5251:29;5233:11;;;5229:20;;5222:59;5158:12;5129:162;;;5309:6;5306:1;5303:13;5300:87;;;5375:1;5368:4;5359:6;5354:3;5350:16;5346:27;5339:38;5300:87;-1:-1:-1;5441:2:4;5420:15;-1:-1:-1;;5416:29:4;5407:39;;;;5448:4;5403:50;;4987:472;-1:-1:-1;;4987:472:4:o;5464:220::-;5613:2;5602:9;5595:21;5576:4;5633:45;5674:2;5663:9;5659:18;5651:6;5633:45;:::i;7129:135::-;7168:3;-1:-1:-1;;7189:17:4;;7186:43;;;7209:18;;:::i;:::-;-1:-1:-1;7256:1:4;7245:13;;7129:135::o;7269:128::-;7309:3;7340:1;7336:6;7333:1;7330:13;7327:39;;;7346:18;;:::i;:::-;-1:-1:-1;7382:9:4;;7269:128::o;8015:386::-;8247:1;8243;8238:3;8234:11;8230:19;8222:6;8218:32;8207:9;8200:51;8287:6;8282:2;8271:9;8267:18;8260:34;8330:2;8325;8314:9;8310:18;8303:30;8181:4;8350:45;8391:2;8380:9;8376:18;8368:6;8350:45;:::i;:::-;8342:53;8015:386;-1:-1:-1;;;;;8015:386:4:o;8753:112::-;8785:1;8811;8801:35;;8816:18;;:::i;:::-;-1:-1:-1;8850:9:4;;8753:112::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "notice": "Constructor inherits VRFConsumerBase  Network: Kovan Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9 LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088 Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4"
      },
      "getRandomNumber(uint256,uint256)": {
        "notice": "Requests randomness "
      }
    },
    "version": 1
  },
  "offset": [
    1104,
    8598
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x166 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6E68FC0A GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xAFCF89AA GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD63BC599 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD63BC599 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0xE2F1CCA8 EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xEDCBBEF8 EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xF03D6672 EQ PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAFCF89AA EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xCC7A262E EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0xD1730F1F EQ PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6E68FC0A EQ PUSH2 0x2DA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0x71CA337D EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x851C1933 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x94985DDD EQ PUSH2 0x35C JUMPI DUP1 PUSH4 0x984D63CF EQ PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42619F66 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x42619F66 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0x4EA97C07 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x530D3BC8 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x5B692EBA EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x5D57AB28 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x6864AF0C EQ PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD82675E EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x16462AD3 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x2EE40908 EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x3A64CFD5 EQ PUSH2 0x1F5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E0 PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH2 0x4D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E0 PUSH2 0x1F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1894 JUMP JUMPDEST PUSH2 0x78A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x210 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH2 0xA48 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E0 PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH2 0xAEF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0xB77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BE JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x2F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BE JUMP JUMPDEST PUSH2 0xD94 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x18E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E0 PUSH2 0x377 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BE JUMP JUMPDEST PUSH2 0x12FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x397 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH2 0x1383 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x12 SLOAD PUSH2 0x3E9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x41C CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E9 PUSH2 0x449 CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x47F CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x185F JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x181 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x538 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261773A2062616C616E6365206973206C6F776572000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x12 SLOAD PUSH1 0xE SLOAD PUSH1 0xD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x3 SWAP1 PUSH2 0x55F SWAP1 PUSH1 0x5 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x569 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D5 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x5E9 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH2 0x5F3 SWAP1 DUP5 PUSH2 0x1911 JUMP JUMPDEST PUSH1 0x12 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB ADDRESS PUSH2 0x613 PUSH1 0x32 DUP6 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x682 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x68B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER PUSH1 0x32 PUSH2 0x6AA DUP6 PUSH1 0x31 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x6B4 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x723 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x72C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH1 0xE DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE MLOAD PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH2 0x77D SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE ISZERO PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0xDCDEDC5AF4CAE4DE40CAE8D PUSH1 0xA3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x52F JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x814 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x43616E6E6F74207374616B65203 PUSH1 0x94 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x52F JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x85F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x883 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST SUB PUSH1 0xE SLOAD DUP4 MUL DUP2 PUSH2 0x896 JUMPI PUSH2 0x896 PUSH2 0x1930 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD SWAP5 SWAP1 SWAP4 DIV SWAP1 SWAP4 ADD SWAP1 SWAP2 SSTORE PUSH1 0xD SLOAD PUSH1 0x12 SLOAD SWAP3 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP3 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x901 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x925 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST SUB PUSH1 0xE SLOAD DUP4 MUL DUP2 PUSH2 0x938 JUMPI PUSH2 0x938 PUSH2 0x1930 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x975 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x19AC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x994 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9B8 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7374616B656420746F6B656E207472616E73666572206661696C656400000000 DUP2 MSTORE POP SWAP1 PUSH2 0xA0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x52F SWAP2 SWAP1 PUSH2 0x1A1D JUMP JUMPDEST POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D DUP4 PUSH1 0x40 MLOAD PUSH2 0x77D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 PUSH1 0x19 SWAP3 DUP6 SWAP3 PUSH1 0x14 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA9D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAC1 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST PUSH2 0xACB SWAP2 SWAP1 PUSH2 0x1973 JUMP JUMPDEST PUSH2 0xAD5 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH2 0xADF SWAP2 SWAP1 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xAE9 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH2 0xB00 SWAP2 SWAP1 PUSH2 0x1973 JUMP JUMPDEST LT ISZERO PUSH2 0xB74 JUMPI PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0xB74 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB50 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH2 0xBCB SWAP2 CALLER SWAP2 ADDRESS SWAP2 PUSH1 0x4 ADD PUSH2 0x19AC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC0E SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST POP PUSH2 0xC1D PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0x1440 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP7 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC74 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC98 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST PUSH2 0xCA2 SWAP2 SWAP1 PUSH2 0x1973 JUMP JUMPDEST PUSH2 0xCAC SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x14 DUP3 LT ISZERO PUSH2 0xCE1 JUMPI PUSH2 0xCC4 DUP5 PUSH1 0x64 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xCD0 DUP7 PUSH2 0x2454 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xCDA SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST SWAP1 POP PUSH2 0xD8C JUMP JUMPDEST PUSH1 0x32 DUP3 LT ISZERO PUSH2 0xD01 JUMPI PUSH2 0xCF5 DUP5 PUSH1 0x64 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xCD0 DUP7 PUSH2 0x251C PUSH2 0x1911 JUMP JUMPDEST PUSH1 0x64 DUP3 LT ISZERO PUSH2 0xD21 JUMPI PUSH2 0xD15 DUP5 PUSH1 0x64 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xCD0 DUP7 PUSH2 0x2648 PUSH2 0x1911 JUMP JUMPDEST PUSH1 0x96 DUP3 LT ISZERO PUSH2 0xD43 JUMPI PUSH2 0xD36 DUP5 PUSH2 0x3E8 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xCD0 DUP7 PUSH3 0x180C4 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x12C DUP3 LT ISZERO PUSH2 0xD66 JUMPI PUSH2 0xD59 DUP5 PUSH2 0x3E8 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xCD0 DUP7 PUSH3 0x182B8 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xD72 DUP5 PUSH2 0x3E8 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xD7F DUP7 PUSH3 0x184AC PUSH2 0x1911 JUMP JUMPDEST PUSH2 0xD89 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x62 DUP4 LT PUSH2 0xDE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206775657373206C6F776572207468616E2039380000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x52F JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0xE1A SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x19AC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE5D SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST PUSH2 0xE9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x5472616E73666572206D75737420776F726B PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF29 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP4 LT ISZERO PUSH2 0xFD6 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH2 0xF8D SWAP2 CALLER SWAP2 ADDRESS SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x19AC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xFAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFD0 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST POP PUSH2 0x1124 JUMP JUMPDEST PUSH9 0x2B5E3AF16B1880000 DUP4 LT ISZERO PUSH2 0x1062 JUMPI PUSH2 0x3E8 PUSH1 0x4 SLOAD LT DUP1 ISZERO PUSH2 0x1006 JUMPI POP PUSH1 0x2 SLOAD PUSH2 0x1003 SWAP1 PUSH1 0x9 PUSH2 0x1911 JUMP JUMPDEST DUP2 GT JUMPDEST ISZERO PUSH2 0x105D JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH2 0xF8D SWAP2 CALLER SWAP2 ADDRESS SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x19AC JUMP JUMPDEST PUSH2 0x1124 JUMP JUMPDEST PUSH1 0x5D DUP5 GT PUSH2 0x1078 JUMPI PUSH1 0x2 SLOAD PUSH2 0x1003 SWAP1 PUSH1 0xB PUSH2 0x1911 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1086 SWAP1 PUSH1 0xB PUSH2 0x1911 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x1124 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x23B872DD SWAP2 PUSH2 0x10DF SWAP2 CALLER SWAP2 ADDRESS SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x19AC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x10FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1122 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST POP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1171 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1195 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST PUSH2 0x119F SWAP2 SWAP1 PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x11A9 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST DUP5 PUSH2 0x11B5 DUP6 PUSH1 0x19 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x11BF SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST GT ISZERO PUSH2 0x1225 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616E6B726F6C6C20746F6F206C6F7720666F722074686973206265742C2050 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x1B19585CD9481B1BDDD95C8818995D PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x52F JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 SWAP1 SSTORE DUP4 SLOAD DUP4 MSTORE PUSH1 0x6 DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP8 SWAP1 SSTORE DUP4 SLOAD DUP4 MSTORE PUSH1 0xA DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE SWAP3 SLOAD DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP8 SWAP1 MSTORE DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0xEA3A2986B784B5FF3AF1DE7908EB0898970DEC44692BEC64512B80606842EAF6 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG2 PUSH1 0x4 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x12B8 DUP4 PUSH2 0x1A30 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP DUP3 PUSH1 0xD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12CF SWAP2 SWAP1 PUSH2 0x1A4B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x10 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12E8 SWAP2 SWAP1 PUSH2 0x1A4B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xD8C PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH2 0x1440 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x1375 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920565246436F6F7264696E61746F722063616E2066756C66696C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x52F JUMP JUMPDEST PUSH2 0x137F DUP3 DUP3 PUSH2 0x15B7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xE SLOAD PUSH1 0x3 PUSH1 0xD SLOAD PUSH1 0x5 PUSH2 0x139A SWAP2 SWAP1 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x13A4 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1410 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST PUSH2 0x141A SWAP2 SWAP1 PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x1424 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH2 0x142F DUP5 PUSH1 0x62 PUSH2 0x1911 JUMP JUMPDEST PUSH2 0x1439 SWAP2 SWAP1 PUSH2 0x1911 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4000AEA0 PUSH32 0x0 DUP5 DUP7 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14B0 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14DD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A63 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1520 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD DUP1 DUP5 ADD DUP9 SWAP1 MSTORE DUP1 DUP4 ADD DUP6 SWAP1 MSTORE ADDRESS PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE DUP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP7 DUP5 MSTORE SWAP3 SWAP1 SWAP2 MSTORE PUSH2 0x157A SWAP1 PUSH1 0x1 PUSH2 0x1A4B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE DUP1 MLOAD DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD DUP1 DUP3 SUB DUP4 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0xD8C JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x3 SLOAD LT PUSH2 0x15C6 JUMPI POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x3 SLOAD LT PUSH2 0x160E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x4D7573742068617665206E65772062657473 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x52F JUMP JUMPDEST PUSH1 0xC DUP2 SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x1632 PUSH1 0x64 DUP3 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 SLOAD DUP2 MSTORE PUSH1 0xA DUP3 MSTORE DUP3 DUP2 KECCAK256 SLOAD PUSH1 0x7 DUP4 MSTORE DUP4 DUP3 KECCAK256 SLOAD PUSH1 0x6 SWAP1 SWAP4 MSTORE SWAP3 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP2 PUSH2 0x1680 PUSH1 0x64 DUP7 PUSH2 0x1A93 JUMP JUMPDEST LT ISZERO PUSH2 0x172B JUMPI PUSH2 0x1690 DUP2 DUP4 PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x12 SLOAD SWAP2 SLOAD DUP2 MSTORE DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1701 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1725 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST POP PUSH2 0x17B9 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x177E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17A2 SWAP2 SWAP1 PUSH2 0x198A JUMP JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 SSTORE JUMPDEST DUP1 PUSH1 0xD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x17CB SWAP2 SWAP1 PUSH2 0x1973 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH32 0x24B1C86427A74774A014F51A56EA4641E764A82AEF418326ECF9E634B78F074B DUP4 PUSH2 0x1807 PUSH1 0x64 DUP9 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD SWAP6 DUP7 MSTORE SWAP1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x1853 DUP4 PUSH2 0x1A30 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x188F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B0 DUP4 PUSH2 0x1878 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1439 DUP3 PUSH2 0x1878 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x192B JUMPI PUSH2 0x192B PUSH2 0x18FB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1955 JUMPI PUSH2 0x1955 PUSH2 0x1930 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x196C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1985 JUMPI PUSH2 0x1985 PUSH2 0x18FB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x199C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19F6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x19DA JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1A08 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1439 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x19D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1A44 JUMPI PUSH2 0x1A44 PUSH2 0x18FB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1A5E JUMPI PUSH2 0x1A5E PUSH2 0x18FB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1A8A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x19D0 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1AA2 JUMPI PUSH2 0x1AA2 PUSH2 0x1930 JUMP JUMPDEST POP MOD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 0xA9 0xEE 0xFC CALLCODE 0x28 MUL CALLDATASIZE CALLVALUE 0xD2 0xB6 0xD7 0xB8 INVALID 0xFC SWAP15 PC 0xF7 MOD PUSH20 0xC29A801A1ED07C9A834699BD64736F6C63430008 SIGNEXTEND STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x166"
    },
    "12": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6E68FC0A"
    },
    "25": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "GT",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD1"
    },
    "29": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAFCF89AA"
    },
    "36": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "GT",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8A"
    },
    "40": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD63BC599"
    },
    "47": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "GT",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x64"
    },
    "51": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD63BC599"
    },
    "58": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "59": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x42E"
    },
    "62": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "63": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xE2F1CCA8"
    },
    "69": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "70": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x464"
    },
    "73": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "74": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "75": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xEDCBBEF8"
    },
    "80": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "81": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x491"
    },
    "84": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "85": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "86": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF03D6672"
    },
    "91": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "92": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4BE"
    },
    "95": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "96": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "98": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "REVERT",
      "path": "0"
    },
    "100": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "101": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "102": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAFCF89AA"
    },
    "107": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "108": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3A9"
    },
    "111": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "113": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xCC7A262E"
    },
    "118": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "119": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3C9"
    },
    "122": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "123": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "124": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD1730F1F"
    },
    "129": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "130": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x401"
    },
    "133": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "134": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "136": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "137": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "REVERT",
      "path": "0"
    },
    "138": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "139": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "140": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6E68FC0A"
    },
    "145": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "146": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2DA"
    },
    "149": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "150": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "151": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "156": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "157": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FA"
    },
    "160": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "161": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "162": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x71CA337D"
    },
    "167": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "168": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x330"
    },
    "171": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "172": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "173": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x851C1933"
    },
    "178": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "179": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x346"
    },
    "182": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "183": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "184": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x94985DDD"
    },
    "189": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "190": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x35C"
    },
    "193": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "194": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "195": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x984D63CF"
    },
    "200": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "201": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x37C"
    },
    "204": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "205": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "207": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "208": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "REVERT",
      "path": "0"
    },
    "209": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "210": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "211": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x42619F66"
    },
    "216": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "GT",
      "path": "0"
    },
    "217": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "220": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "221": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "222": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x42619F66"
    },
    "227": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "228": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x215"
    },
    "231": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "232": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "233": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x4EA97C07"
    },
    "238": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "239": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x22B"
    },
    "242": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "243": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "244": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x530D3BC8"
    },
    "249": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "250": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24B"
    },
    "253": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "254": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "255": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x5B692EBA"
    },
    "260": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "261": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x278"
    },
    "264": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "265": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "266": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x5D57AB28"
    },
    "271": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "272": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x28D"
    },
    "275": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "276": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "277": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6864AF0C"
    },
    "282": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "283": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BA"
    },
    "286": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "287": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "289": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "290": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "REVERT",
      "path": "0"
    },
    "291": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "292": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "293": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD82675E"
    },
    "298": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "299": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B"
    },
    "302": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "303": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "304": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x16462AD3"
    },
    "309": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "310": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x194"
    },
    "313": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "314": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "315": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x18160DDD"
    },
    "320": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "321": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AA"
    },
    "324": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "325": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "326": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2E1A7D4D"
    },
    "331": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "332": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C0"
    },
    "335": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "336": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "337": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2EE40908"
    },
    "342": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "343": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E2"
    },
    "346": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "347": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "348": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3A64CFD5"
    },
    "353": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "EQ",
      "path": "0"
    },
    "354": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F5"
    },
    "357": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "358": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "359": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "361": {
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "DUP1",
      "path": "0"
    },
    "362": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1104,
        8598
      ],
      "op": "REVERT",
      "path": "0"
    },
    "363": {
      "offset": [
        1240,
        1266
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "364": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "365": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "DUP1",
      "path": "0"
    },
    "366": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "367": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x177"
    },
    "370": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "371": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "373": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "DUP1",
      "path": "0"
    },
    "374": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "REVERT",
      "path": "0"
    },
    "375": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "376": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "POP",
      "path": "0"
    },
    "377": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "380": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "382": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "383": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "DUP2",
      "path": "0"
    },
    "384": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "JUMP",
      "path": "0"
    },
    "385": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "386": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "388": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "389": {
      "op": "SWAP1"
    },
    "390": {
      "op": "DUP2"
    },
    "391": {
      "op": "MSTORE"
    },
    "392": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "394": {
      "op": "ADD"
    },
    "395": {
      "offset": [
        1240,
        1266
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "396": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "398": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "399": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "DUP1",
      "path": "0"
    },
    "400": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "401": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "SUB",
      "path": "0"
    },
    "402": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "403": {
      "fn": null,
      "offset": [
        1240,
        1266
      ],
      "op": "RETURN",
      "path": "0"
    },
    "404": {
      "offset": [
        1210,
        1234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "405": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "406": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "407": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "408": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A0"
    },
    "411": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "412": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "414": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "415": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "REVERT",
      "path": "0"
    },
    "416": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "417": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "POP",
      "path": "0"
    },
    "418": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "421": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "423": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "424": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "425": {
      "fn": null,
      "offset": [
        1210,
        1234
      ],
      "op": "JUMP",
      "path": "0"
    },
    "426": {
      "offset": [
        1692,
        1722
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "427": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "428": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "DUP1",
      "path": "0"
    },
    "429": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "430": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B6"
    },
    "433": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "434": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "436": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "DUP1",
      "path": "0"
    },
    "437": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "REVERT",
      "path": "0"
    },
    "438": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "439": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "POP",
      "path": "0"
    },
    "440": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "443": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE"
    },
    "445": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "446": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "DUP2",
      "path": "0"
    },
    "447": {
      "fn": null,
      "offset": [
        1692,
        1722
      ],
      "op": "JUMP",
      "path": "0"
    },
    "448": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "449": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "450": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "DUP1",
      "path": "0"
    },
    "451": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "452": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CC"
    },
    "455": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "456": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "458": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "DUP1",
      "path": "0"
    },
    "459": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "REVERT",
      "path": "0"
    },
    "460": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "461": {
      "op": "POP"
    },
    "462": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E0"
    },
    "465": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1DB"
    },
    "468": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "469": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "471": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "474": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMP",
      "path": "0"
    },
    "475": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "476": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D4"
    },
    "479": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMP",
      "path": "0"
    },
    "480": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "481": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "STOP",
      "path": "0"
    },
    "482": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "483": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E0"
    },
    "486": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F0"
    },
    "489": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "490": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "492": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1894"
    },
    "495": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        5914,
        6520
      ],
      "op": "JUMP",
      "path": "0"
    },
    "496": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "497": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x78A"
    },
    "500": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        5914,
        6520
      ],
      "op": "JUMP",
      "path": "0"
    },
    "501": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "502": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "503": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "DUP1",
      "path": "0"
    },
    "504": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "505": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x201"
    },
    "508": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "509": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "511": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "DUP1",
      "path": "0"
    },
    "512": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "REVERT",
      "path": "0"
    },
    "513": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "514": {
      "op": "POP"
    },
    "515": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "518": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x210"
    },
    "521": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "522": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "524": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "527": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "i",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMP",
      "path": "0"
    },
    "528": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "529": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA48"
    },
    "532": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "i",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMP",
      "path": "0"
    },
    "533": {
      "offset": [
        1626,
        1653
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "534": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "535": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "536": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "537": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x221"
    },
    "540": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "541": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "543": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "544": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "REVERT",
      "path": "0"
    },
    "545": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "546": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "POP",
      "path": "0"
    },
    "547": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "550": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xC"
    },
    "552": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "553": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "DUP2",
      "path": "0"
    },
    "554": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        1626,
        1653
      ],
      "op": "JUMP",
      "path": "0"
    },
    "555": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "556": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "557": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "DUP1",
      "path": "0"
    },
    "558": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "559": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x237"
    },
    "562": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "563": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "565": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "DUP1",
      "path": "0"
    },
    "566": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "REVERT",
      "path": "0"
    },
    "567": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "568": {
      "op": "POP"
    },
    "569": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E0"
    },
    "572": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x246"
    },
    "575": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "576": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "578": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "581": {
      "fn": "ForgeGuess.perfectWithdraw",
      "jump": "i",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMP",
      "path": "0"
    },
    "582": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "583": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAEF"
    },
    "586": {
      "fn": "ForgeGuess.perfectWithdraw",
      "jump": "i",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMP",
      "path": "0"
    },
    "587": {
      "offset": [
        1292,
        1337
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "588": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "589": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "DUP1",
      "path": "0"
    },
    "590": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "591": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x257"
    },
    "594": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "595": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "597": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "DUP1",
      "path": "0"
    },
    "598": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "REVERT",
      "path": "0"
    },
    "599": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "600": {
      "op": "POP"
    },
    "601": {
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "604": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x266"
    },
    "607": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "608": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "610": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "613": {
      "fn": "ForgeGuess.perfectWithdraw",
      "jump": "i",
      "offset": [
        1292,
        1337
      ],
      "op": "JUMP",
      "path": "0"
    },
    "614": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "615": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "617": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "619": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "620": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "622": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "623": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "DUP2",
      "path": "0"
    },
    "624": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "625": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "627": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "628": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "629": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "630": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "DUP2",
      "path": "0"
    },
    "631": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        1292,
        1337
      ],
      "op": "JUMP",
      "path": "0"
    },
    "632": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "633": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "634": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "DUP1",
      "path": "0"
    },
    "635": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "636": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x284"
    },
    "639": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "640": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "642": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "DUP1",
      "path": "0"
    },
    "643": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "REVERT",
      "path": "0"
    },
    "644": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "645": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "POP",
      "path": "0"
    },
    "646": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "649": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB77"
    },
    "652": {
      "fn": "ForgeGuess.getBlank",
      "jump": "i",
      "offset": [
        4790,
        4960
      ],
      "op": "JUMP",
      "path": "0"
    },
    "653": {
      "offset": [
        1577,
        1620
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "654": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "655": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "DUP1",
      "path": "0"
    },
    "656": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "657": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x299"
    },
    "660": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "661": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "663": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "DUP1",
      "path": "0"
    },
    "664": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "REVERT",
      "path": "0"
    },
    "665": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "666": {
      "op": "POP"
    },
    "667": {
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "670": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A8"
    },
    "673": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "674": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "676": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "679": {
      "fn": "ForgeGuess.getBlank",
      "jump": "i",
      "offset": [
        1577,
        1620
      ],
      "op": "JUMP",
      "path": "0"
    },
    "680": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "681": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xB"
    },
    "683": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "685": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "686": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "688": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "689": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "DUP2",
      "path": "0"
    },
    "690": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "691": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "693": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "694": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "695": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "696": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "DUP2",
      "path": "0"
    },
    "697": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        1577,
        1620
      ],
      "op": "JUMP",
      "path": "0"
    },
    "698": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "699": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "700": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "DUP1",
      "path": "0"
    },
    "701": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "702": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2C6"
    },
    "705": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "706": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "708": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "DUP1",
      "path": "0"
    },
    "709": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "REVERT",
      "path": "0"
    },
    "710": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "711": {
      "op": "POP"
    },
    "712": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "715": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2D5"
    },
    "718": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "719": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "721": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18BE"
    },
    "724": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMP",
      "path": "0"
    },
    "725": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "726": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC22"
    },
    "729": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMP",
      "path": "0"
    },
    "730": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "731": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "732": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "DUP1",
      "path": "0"
    },
    "733": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "734": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E6"
    },
    "737": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "738": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "740": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "DUP1",
      "path": "0"
    },
    "741": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "REVERT",
      "path": "0"
    },
    "742": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "743": {
      "op": "POP"
    },
    "744": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "747": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F5"
    },
    "750": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "751": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "753": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18BE"
    },
    "756": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3218,
        4542
      ],
      "op": "JUMP",
      "path": "0"
    },
    "757": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "758": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD94"
    },
    "761": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3218,
        4542
      ],
      "op": "JUMP",
      "path": "0"
    },
    "762": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "763": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "764": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "DUP1",
      "path": "0"
    },
    "765": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "766": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x306"
    },
    "769": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "770": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "772": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "DUP1",
      "path": "0"
    },
    "773": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "REVERT",
      "path": "0"
    },
    "774": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "775": {
      "op": "POP"
    },
    "776": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "779": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x315"
    },
    "782": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "783": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "785": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18E0"
    },
    "788": {
      "fn": "ForgeGuess.balanceOf",
      "jump": "i",
      "offset": [
        2284,
        2392
      ],
      "op": "JUMP",
      "path": "0"
    },
    "789": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "790": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "792": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "794": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "796": {
      "op": "SHL"
    },
    "797": {
      "op": "SUB"
    },
    "798": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "AND",
      "path": "0",
      "statement": 0
    },
    "799": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2341,
        2348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "801": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "802": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "DUP2",
      "path": "0"
    },
    "803": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "804": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2376
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x11"
    },
    "806": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "808": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "809": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "811": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "812": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "813": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "814": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2367,
        2385
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "815": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        2284,
        2392
      ],
      "op": "JUMP",
      "path": "0"
    },
    "816": {
      "offset": [
        1728,
        1748
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "817": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "818": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "DUP1",
      "path": "0"
    },
    "819": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "820": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x33C"
    },
    "823": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "824": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "826": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "DUP1",
      "path": "0"
    },
    "827": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "REVERT",
      "path": "0"
    },
    "828": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "829": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "POP",
      "path": "0"
    },
    "830": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "833": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF"
    },
    "835": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "836": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "DUP2",
      "path": "0"
    },
    "837": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1728,
        1748
      ],
      "op": "JUMP",
      "path": "0"
    },
    "838": {
      "offset": [
        1754,
        1780
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "839": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "840": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "DUP1",
      "path": "0"
    },
    "841": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "842": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x352"
    },
    "845": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "846": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "848": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "DUP1",
      "path": "0"
    },
    "849": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "REVERT",
      "path": "0"
    },
    "850": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "851": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "POP",
      "path": "0"
    },
    "852": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "855": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x10"
    },
    "857": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "858": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "DUP2",
      "path": "0"
    },
    "859": {
      "fn": "ForgeGuess.balanceOf",
      "offset": [
        1754,
        1780
      ],
      "op": "JUMP",
      "path": "0"
    },
    "860": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "861": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "862": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "863": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "864": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x368"
    },
    "867": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "868": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "870": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "871": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "REVERT",
      "path": "1"
    },
    "872": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "873": {
      "op": "POP"
    },
    "874": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1E0"
    },
    "877": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x377"
    },
    "880": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "881": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "883": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x18BE"
    },
    "886": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "jump": "i",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMP",
      "path": "1"
    },
    "887": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "888": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12FD"
    },
    "891": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "jump": "i",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMP",
      "path": "1"
    },
    "892": {
      "offset": [
        1390,
        1432
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "893": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "894": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "DUP1",
      "path": "0"
    },
    "895": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "896": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x388"
    },
    "899": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "900": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "902": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "DUP1",
      "path": "0"
    },
    "903": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "REVERT",
      "path": "0"
    },
    "904": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "905": {
      "op": "POP"
    },
    "906": {
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "909": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x397"
    },
    "912": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "913": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "915": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "918": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "jump": "i",
      "offset": [
        1390,
        1432
      ],
      "op": "JUMP",
      "path": "0"
    },
    "919": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "920": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "922": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "924": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "925": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "927": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "928": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "DUP2",
      "path": "0"
    },
    "929": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "930": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "932": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "933": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "934": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "935": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "DUP2",
      "path": "0"
    },
    "936": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        1390,
        1432
      ],
      "op": "JUMP",
      "path": "0"
    },
    "937": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "938": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "939": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "DUP1",
      "path": "0"
    },
    "940": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "941": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B5"
    },
    "944": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "945": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "947": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "DUP1",
      "path": "0"
    },
    "948": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "REVERT",
      "path": "0"
    },
    "949": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "950": {
      "op": "POP"
    },
    "951": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "954": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3C4"
    },
    "957": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "958": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "960": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "963": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMP",
      "path": "0"
    },
    "964": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "965": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1383"
    },
    "968": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMP",
      "path": "0"
    },
    "969": {
      "offset": [
        1837,
        1915
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "970": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "971": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "DUP1",
      "path": "0"
    },
    "972": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "973": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3D5"
    },
    "976": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "977": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "979": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "DUP1",
      "path": "0"
    },
    "980": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "REVERT",
      "path": "0"
    },
    "981": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "982": {
      "op": "POP"
    },
    "983": {
      "offset": [
        1837,
        1915
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "985": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "986": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E9"
    },
    "989": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "990": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "992": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "994": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "996": {
      "op": "SHL"
    },
    "997": {
      "op": "SUB"
    },
    "998": {
      "offset": [
        1837,
        1915
      ],
      "op": "AND",
      "path": "0"
    },
    "999": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1000": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1001": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1002": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1004": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1837,
        1915
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1005": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1007": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1009": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1011": {
      "op": "SHL"
    },
    "1012": {
      "op": "SUB"
    },
    "1013": {
      "op": "SWAP1"
    },
    "1014": {
      "op": "SWAP2"
    },
    "1015": {
      "op": "AND"
    },
    "1016": {
      "op": "DUP2"
    },
    "1017": {
      "op": "MSTORE"
    },
    "1018": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1020": {
      "op": "ADD"
    },
    "1021": {
      "offset": [
        1837,
        1915
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B"
    },
    "1024": {
      "op": "JUMP"
    },
    "1025": {
      "offset": [
        1438,
        1478
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1026": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1027": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1028": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1029": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x40D"
    },
    "1032": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1033": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1035": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1036": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1037": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1038": {
      "op": "POP"
    },
    "1039": {
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "1042": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41C"
    },
    "1045": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1046": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1048": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "1051": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        1438,
        1478
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1052": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1053": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x8"
    },
    "1055": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1057": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1058": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1060": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1061": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1062": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1063": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1065": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1066": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1067": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1068": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1069": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1438,
        1478
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1070": {
      "offset": [
        1531,
        1571
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1071": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1072": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1073": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1074": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x43A"
    },
    "1077": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1078": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1080": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1081": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1082": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1083": {
      "op": "POP"
    },
    "1084": {
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E9"
    },
    "1087": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x449"
    },
    "1090": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1091": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1093": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "1096": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        1531,
        1571
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1097": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1098": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "1100": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1102": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1103": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1105": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1106": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1107": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1108": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1110": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1111": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1112": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1113": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1117": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1119": {
      "op": "SHL"
    },
    "1120": {
      "op": "SUB"
    },
    "1121": {
      "offset": [
        1531,
        1571
      ],
      "op": "AND",
      "path": "0"
    },
    "1122": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1123": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1531,
        1571
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1124": {
      "offset": [
        1484,
        1525
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1125": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1126": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1127": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1128": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x470"
    },
    "1131": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1132": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1134": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1135": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1136": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1137": {
      "op": "POP"
    },
    "1138": {
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "1141": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x47F"
    },
    "1144": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1145": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1147": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "1150": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        1484,
        1525
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1151": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1152": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x9"
    },
    "1154": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1156": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1157": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1159": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1160": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1161": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1162": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1164": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1165": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1166": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1167": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1168": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1484,
        1525
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1169": {
      "offset": [
        1343,
        1384
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1170": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1171": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1172": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1173": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x49D"
    },
    "1176": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1177": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1179": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1180": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1181": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1182": {
      "op": "POP"
    },
    "1183": {
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "1186": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4AC"
    },
    "1189": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1190": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1192": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185F"
    },
    "1195": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        1343,
        1384
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1196": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1197": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "1199": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1201": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1202": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1204": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1205": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1206": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1207": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1209": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1210": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1211": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1212": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1213": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1343,
        1384
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1214": {
      "offset": [
        1659,
        1686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1215": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1216": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1217": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1218": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4CA"
    },
    "1221": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1222": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1224": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1225": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1226": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1227": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "POP",
      "path": "0"
    },
    "1228": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x181"
    },
    "1231": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xD"
    },
    "1233": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1234": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1235": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        1659,
        1686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1236": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1237": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8091,
        8101
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 1
    },
    "1238": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1240": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1241": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1242": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1243": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8090
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x11"
    },
    "1245": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1247": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1248": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1250": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1251": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1252": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8081,
        8102
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1253": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8071,
        8102
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1254": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8071,
        8102
      ],
      "op": "GT",
      "path": "0"
    },
    "1255": {
      "branch": 56,
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8071,
        8102
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1256": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x538"
    },
    "1259": {
      "branch": 56,
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1260": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1262": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1263": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1269": {
      "op": "SHL"
    },
    "1270": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1271": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1272": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1274": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1276": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1277": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "ADD",
      "path": "0"
    },
    "1278": {
      "op": "MSTORE"
    },
    "1279": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "1281": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1283": {
      "op": "DUP3"
    },
    "1284": {
      "op": "ADD"
    },
    "1285": {
      "op": "MSTORE"
    },
    "1286": {
      "op": "PUSH32",
      "value": "0x77697468647261773A2062616C616E6365206973206C6F776572000000000000"
    },
    "1319": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1321": {
      "op": "DUP3"
    },
    "1322": {
      "op": "ADD"
    },
    "1323": {
      "op": "MSTORE"
    },
    "1324": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1326": {
      "op": "ADD"
    },
    "1327": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1328": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1330": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1331": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1332": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1333": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "SUB",
      "path": "0"
    },
    "1334": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1335": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "1336": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8063,
        8133
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1337": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8156,
        8167
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "1339": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8156,
        8167
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1340": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8265,
        8276
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE"
    },
    "1342": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8265,
        8276
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1343": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8252
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xD"
    },
    "1345": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8252
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1346": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1348": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1350": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1352": {
      "op": "SHL"
    },
    "1353": {
      "op": "SUB"
    },
    "1354": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8156,
        8167
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1355": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8156,
        8167
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1356": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8156,
        8167
      ],
      "op": "AND",
      "path": "0"
    },
    "1357": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8156,
        8167
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1358": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8144,
        8153
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1360": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8144,
        8153
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1361": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8265,
        8276
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1362": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8259,
        8260
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1364": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8259,
        8260
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1365": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8256
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x55F"
    },
    "1368": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8256
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1369": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8255,
        8256
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "1371": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8256
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "1374": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8242,
        8256
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1375": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8256
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1376": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8260
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x569"
    },
    "1379": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8260
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1380": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8260
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1381": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8260
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "1384": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8242,
        8260
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1385": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8242,
        8260
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1386": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8213
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "1388": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8213
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1389": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1391": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1392": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1397": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1399": {
      "op": "SHL"
    },
    "1400": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1401": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1402": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8232,
        8236
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "1403": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1405": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1406": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "ADD",
      "path": "0"
    },
    "1407": {
      "op": "MSTORE"
    },
    "1408": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1412": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1414": {
      "op": "SHL"
    },
    "1415": {
      "op": "SUB"
    },
    "1416": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8213
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1417": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8213
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1418": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8213
      ],
      "op": "AND",
      "path": "0"
    },
    "1419": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8213
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1420": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8223
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "1425": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8223
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1426": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1428": {
      "op": "ADD"
    },
    "1429": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1431": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1433": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1434": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1435": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1436": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "SUB",
      "path": "0"
    },
    "1437": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1438": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1439": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "GAS",
      "path": "0"
    },
    "1440": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "1441": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1442": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1443": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1444": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B1"
    },
    "1447": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1448": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1449": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1451": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1452": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "1453": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1454": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1456": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1457": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1458": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "POP",
      "path": "0"
    },
    "1459": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "POP",
      "path": "0"
    },
    "1460": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "POP",
      "path": "0"
    },
    "1461": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "POP",
      "path": "0"
    },
    "1462": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1464": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1465": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1466": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1468": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "NOT",
      "path": "0"
    },
    "1469": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1471": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1472": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "ADD",
      "path": "0"
    },
    "1473": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "AND",
      "path": "0"
    },
    "1474": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1475": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "ADD",
      "path": "0"
    },
    "1476": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1477": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1479": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1480": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "POP",
      "path": "0"
    },
    "1481": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1482": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "ADD",
      "path": "0"
    },
    "1483": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1484": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D5"
    },
    "1487": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1488": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1489": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "1492": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8202,
        8238
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1493": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8238
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1494": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8261
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5DF"
    },
    "1497": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8261
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1498": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8261
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1499": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8261
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1973"
    },
    "1502": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8202,
        8261
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1503": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8202,
        8261
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1504": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8201,
        8276
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E9"
    },
    "1507": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8201,
        8276
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1508": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8201,
        8276
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1509": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8201,
        8276
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "1512": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8201,
        8276
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1513": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8201,
        8276
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1514": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8191,
        8277
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5F3"
    },
    "1517": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8191,
        8277
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1518": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8191,
        8197
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1519": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8191,
        8277
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "1522": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8191,
        8277
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1523": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8191,
        8277
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1524": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8307
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x12"
    },
    "1526": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8307
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1527": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8177,
        8277
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1528": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8177,
        8277
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1529": {
      "op": "POP"
    },
    "1530": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1532": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1534": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1536": {
      "op": "SHL"
    },
    "1537": {
      "op": "SUB"
    },
    "1538": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8307
      ],
      "op": "AND",
      "path": "0"
    },
    "1539": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8316
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA9059CBB"
    },
    "1544": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8325,
        8329
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "1545": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8333,
        8341
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x613"
    },
    "1548": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8339,
        8341
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x32"
    },
    "1550": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8177,
        8277
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1551": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8333,
        8341
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "1554": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8333,
        8341
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1555": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8333,
        8341
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1556": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1558": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1561": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1563": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1565": {
      "op": "SHL"
    },
    "1566": {
      "op": "SUB"
    },
    "1567": {
      "op": "NOT"
    },
    "1568": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "1570": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1571": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1572": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "SHL",
      "path": "0"
    },
    "1573": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "AND",
      "path": "0"
    },
    "1574": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1575": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1576": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1578": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1580": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1582": {
      "op": "SHL"
    },
    "1583": {
      "op": "SUB"
    },
    "1584": {
      "op": "SWAP1"
    },
    "1585": {
      "op": "SWAP3"
    },
    "1586": {
      "op": "AND"
    },
    "1587": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1589": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1590": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "ADD",
      "path": "0"
    },
    "1591": {
      "op": "MSTORE"
    },
    "1592": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1594": {
      "op": "DUP3"
    },
    "1595": {
      "op": "ADD"
    },
    "1596": {
      "op": "MSTORE"
    },
    "1597": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1599": {
      "op": "ADD"
    },
    "1600": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1602": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1604": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1605": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1606": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1607": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "SUB",
      "path": "0"
    },
    "1608": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1609": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1611": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1612": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "GAS",
      "path": "0"
    },
    "1613": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "CALL",
      "path": "0"
    },
    "1614": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1615": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1616": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1617": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x65E"
    },
    "1620": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1621": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1622": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1624": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1625": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "1626": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1627": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1629": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1630": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1631": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "POP",
      "path": "0"
    },
    "1632": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "POP",
      "path": "0"
    },
    "1633": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "POP",
      "path": "0"
    },
    "1634": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "POP",
      "path": "0"
    },
    "1635": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1637": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1638": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1639": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1641": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "NOT",
      "path": "0"
    },
    "1642": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1644": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1645": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "ADD",
      "path": "0"
    },
    "1646": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "AND",
      "path": "0"
    },
    "1647": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1648": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "ADD",
      "path": "0"
    },
    "1649": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1650": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1652": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1653": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "POP",
      "path": "0"
    },
    "1654": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1655": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "ADD",
      "path": "0"
    },
    "1656": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1657": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x682"
    },
    "1660": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1661": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1662": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "1665": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8296,
        8343
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1666": {
      "branch": 57,
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8296,
        8343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1667": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8288,
        8344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x68B"
    },
    "1670": {
      "branch": 57,
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8288,
        8344
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1671": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8288,
        8344
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1673": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8288,
        8344
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1674": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8288,
        8344
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1675": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8288,
        8344
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1676": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8373
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x12"
    },
    "1678": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8373
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1679": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1681": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1683": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1685": {
      "op": "SHL"
    },
    "1686": {
      "op": "SUB"
    },
    "1687": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8373
      ],
      "op": "AND",
      "path": "0"
    },
    "1688": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8382
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA9059CBB"
    },
    "1693": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8383,
        8393
      ],
      "op": "CALLER",
      "path": "0"
    },
    "1694": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8406,
        8408
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x32"
    },
    "1696": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8403
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6AA"
    },
    "1699": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8398
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1700": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8401,
        8403
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x31"
    },
    "1702": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8403
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "1705": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8395,
        8403
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1706": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8403
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1707": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8408
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6B4"
    },
    "1710": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8408
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1711": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8408
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1712": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8408
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "1715": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8395,
        8408
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1716": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8395,
        8408
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1717": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1719": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1720": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1722": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1724": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1726": {
      "op": "SHL"
    },
    "1727": {
      "op": "SUB"
    },
    "1728": {
      "op": "NOT"
    },
    "1729": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "1731": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1732": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1733": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "SHL",
      "path": "0"
    },
    "1734": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "AND",
      "path": "0"
    },
    "1735": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1736": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1739": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1741": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1743": {
      "op": "SHL"
    },
    "1744": {
      "op": "SUB"
    },
    "1745": {
      "op": "SWAP1"
    },
    "1746": {
      "op": "SWAP3"
    },
    "1747": {
      "op": "AND"
    },
    "1748": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1750": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1751": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "ADD",
      "path": "0"
    },
    "1752": {
      "op": "MSTORE"
    },
    "1753": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1755": {
      "op": "DUP3"
    },
    "1756": {
      "op": "ADD"
    },
    "1757": {
      "op": "MSTORE"
    },
    "1758": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1760": {
      "op": "ADD"
    },
    "1761": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1763": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1765": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1766": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1767": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1768": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "SUB",
      "path": "0"
    },
    "1769": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1770": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1772": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1773": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "GAS",
      "path": "0"
    },
    "1774": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "CALL",
      "path": "0"
    },
    "1775": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1776": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1777": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1778": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6FF"
    },
    "1781": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1782": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1783": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1785": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1786": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "1787": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1788": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1790": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1791": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1792": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "POP",
      "path": "0"
    },
    "1793": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "POP",
      "path": "0"
    },
    "1794": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "POP",
      "path": "0"
    },
    "1795": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "POP",
      "path": "0"
    },
    "1796": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1798": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1799": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "1800": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1802": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "NOT",
      "path": "0"
    },
    "1803": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1805": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1806": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "ADD",
      "path": "0"
    },
    "1807": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "AND",
      "path": "0"
    },
    "1808": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1809": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "ADD",
      "path": "0"
    },
    "1810": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1811": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1813": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1814": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "POP",
      "path": "0"
    },
    "1815": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1816": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "ADD",
      "path": "0"
    },
    "1817": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1818": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x723"
    },
    "1821": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1822": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1823": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "1826": {
      "fn": "ForgeGuess.withdraw",
      "jump": "i",
      "offset": [
        8362,
        8409
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1827": {
      "branch": 58,
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8362,
        8409
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1828": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8354,
        8410
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x72C"
    },
    "1831": {
      "branch": 58,
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8354,
        8410
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1832": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8354,
        8410
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1834": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8354,
        8410
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1835": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8354,
        8410
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1836": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8354,
        8410
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1837": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8454,
        8464
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 4
    },
    "1838": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1840": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1841": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1842": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1843": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x11"
    },
    "1845": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1847": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1848": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1850": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1851": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1852": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1853": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8465
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1854": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8475
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1855": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8475
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1856": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8475
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1857": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8475
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1858": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8475
      ],
      "op": "SUB",
      "path": "0"
    },
    "1859": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8475
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1860": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8444,
        8475
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1861": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8503,
        8514
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0xE"
    },
    "1863": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8503,
        8514
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1864": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8503,
        8514
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1865": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8503,
        8523
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1866": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8503,
        8523
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1867": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8503,
        8523
      ],
      "op": "SUB",
      "path": "0"
    },
    "1868": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8489,
        8523
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1869": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8489,
        8523
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1870": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "MLOAD",
      "path": "0",
      "statement": 6
    },
    "1871": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5"
    },
    "1904": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1905": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77D"
    },
    "1908": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1909": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8469,
        8475
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1910": {
      "op": "DUP2"
    },
    "1911": {
      "op": "MSTORE"
    },
    "1912": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1914": {
      "op": "ADD"
    },
    "1915": {
      "op": "SWAP1"
    },
    "1916": {
      "op": "JUMP"
    },
    "1917": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1918": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1920": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1921": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1922": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1923": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "SUB",
      "path": "0"
    },
    "1924": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1925": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8560,
        8589
      ],
      "op": "LOG2",
      "path": "0"
    },
    "1926": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8053,
        8596
      ],
      "op": "POP",
      "path": "0"
    },
    "1927": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8053,
        8596
      ],
      "op": "POP",
      "path": "0"
    },
    "1928": {
      "fn": "ForgeGuess.withdraw",
      "offset": [
        8004,
        8596
      ],
      "op": "POP",
      "path": "0"
    },
    "1929": {
      "fn": "ForgeGuess.withdraw",
      "jump": "o",
      "offset": [
        8004,
        8596
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1930": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        5914,
        6520
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1931": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6010,
        6021
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "1933": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6010,
        6021
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1934": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1936": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1938": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1940": {
      "op": "SHL"
    },
    "1941": {
      "op": "SUB"
    },
    "1942": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6010,
        6021
      ],
      "op": "AND",
      "path": "0"
    },
    "1943": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6039,
        6048
      ],
      "op": "CALLVALUE",
      "path": "0",
      "statement": 7
    },
    "1944": {
      "branch": 59,
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6039,
        6053
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1945": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D3"
    },
    "1948": {
      "branch": 59,
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1949": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1951": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1952": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1956": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1958": {
      "op": "SHL"
    },
    "1959": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1960": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1961": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1963": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1965": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1966": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "ADD",
      "path": "0"
    },
    "1967": {
      "op": "MSTORE"
    },
    "1968": {
      "op": "PUSH1",
      "value": "0xC"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1972": {
      "op": "DUP3"
    },
    "1973": {
      "op": "ADD"
    },
    "1974": {
      "op": "MSTORE"
    },
    "1975": {
      "op": "PUSH12",
      "value": "0xDCDEDC5AF4CAE4DE40CAE8D"
    },
    "1988": {
      "op": "PUSH1",
      "value": "0xA3"
    },
    "1990": {
      "op": "SHL"
    },
    "1991": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1993": {
      "op": "DUP3"
    },
    "1994": {
      "op": "ADD"
    },
    "1995": {
      "op": "MSTORE"
    },
    "1996": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1998": {
      "op": "ADD"
    },
    "1999": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "2002": {
      "op": "JUMP"
    },
    "2003": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6031,
        6070
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2004": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6097,
        6098
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 8,
      "value": "0x0"
    },
    "2006": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6088,
        6094
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2007": {
      "branch": 60,
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6088,
        6098
      ],
      "op": "GT",
      "path": "0"
    },
    "2008": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x814"
    },
    "2011": {
      "branch": 60,
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2012": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2014": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2015": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2019": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2021": {
      "op": "SHL"
    },
    "2022": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2023": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2024": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2026": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2028": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2029": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "ADD",
      "path": "0"
    },
    "2030": {
      "op": "MSTORE"
    },
    "2031": {
      "op": "PUSH1",
      "value": "0xE"
    },
    "2033": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2035": {
      "op": "DUP3"
    },
    "2036": {
      "op": "ADD"
    },
    "2037": {
      "op": "MSTORE"
    },
    "2038": {
      "op": "PUSH14",
      "value": "0x43616E6E6F74207374616B65203"
    },
    "2053": {
      "op": "PUSH1",
      "value": "0x94"
    },
    "2055": {
      "op": "SHL"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2058": {
      "op": "DUP3"
    },
    "2059": {
      "op": "ADD"
    },
    "2060": {
      "op": "MSTORE"
    },
    "2061": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2063": {
      "op": "ADD"
    },
    "2064": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "2067": {
      "op": "JUMP"
    },
    "2068": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6080,
        6117
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2069": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6237,
        6247
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 9,
      "value": "0xD"
    },
    "2071": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6237,
        6247
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2072": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6209
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "2074": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6209
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2075": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2077": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2078": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2083": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2085": {
      "op": "SHL"
    },
    "2086": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2087": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2088": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6228,
        6232
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "2089": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2091": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2092": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "ADD",
      "path": "0"
    },
    "2093": {
      "op": "MSTORE"
    },
    "2094": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2096": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2098": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2100": {
      "op": "SHL"
    },
    "2101": {
      "op": "SUB"
    },
    "2102": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6209
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2103": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6209
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2104": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6209
      ],
      "op": "AND",
      "path": "0"
    },
    "2105": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6209
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2106": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6219
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "2111": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6219
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2112": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2114": {
      "op": "ADD"
    },
    "2115": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2117": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2119": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2120": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2121": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2122": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "SUB",
      "path": "0"
    },
    "2123": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2124": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2125": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "GAS",
      "path": "0"
    },
    "2126": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "2127": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2128": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2129": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2130": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x85F"
    },
    "2133": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2134": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2135": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2137": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2138": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "2139": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2140": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2142": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2143": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2144": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "POP",
      "path": "0"
    },
    "2145": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "POP",
      "path": "0"
    },
    "2146": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "POP",
      "path": "0"
    },
    "2147": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "POP",
      "path": "0"
    },
    "2148": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2150": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2151": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2152": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2154": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "NOT",
      "path": "0"
    },
    "2155": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2157": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2158": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "ADD",
      "path": "0"
    },
    "2159": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "AND",
      "path": "0"
    },
    "2160": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2161": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "ADD",
      "path": "0"
    },
    "2162": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2163": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2165": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2166": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "POP",
      "path": "0"
    },
    "2167": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2168": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "ADD",
      "path": "0"
    },
    "2169": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2170": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x883"
    },
    "2173": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2174": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2175": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "2178": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        6198,
        6234
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2179": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2180": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6198,
        6247
      ],
      "op": "SUB",
      "path": "0"
    },
    "2181": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6183,
        6194
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE"
    },
    "2183": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6183,
        6194
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2184": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6180
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2185": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6194
      ],
      "op": "MUL",
      "path": "0"
    },
    "2186": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2187": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x896"
    },
    "2190": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2191": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x896"
    },
    "2194": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1930"
    },
    "2197": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        6174,
        6248
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2198": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2199": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2201": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2203": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2205": {
      "op": "SHL"
    },
    "2206": {
      "op": "SUB"
    },
    "2207": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2208": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2209": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "AND",
      "path": "0"
    },
    "2210": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2212": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2213": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2214": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2215": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6161
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x11"
    },
    "2217": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2219": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2220": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2222": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2223": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2224": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2225": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6170
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2226": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2227": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2228": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "2229": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2230": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2231": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6174,
        6248
      ],
      "op": "DIV",
      "path": "0"
    },
    "2232": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2233": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2234": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "ADD",
      "path": "0"
    },
    "2235": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2236": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2237": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6152,
        6248
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2238": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6340,
        6350
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 10,
      "value": "0xD"
    },
    "2240": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6340,
        6350
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2241": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6312
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "2243": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6312
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2244": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2245": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2246": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2251": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2253": {
      "op": "SHL"
    },
    "2254": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2255": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2256": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6331,
        6335
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "2257": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2259": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2260": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "ADD",
      "path": "0"
    },
    "2261": {
      "op": "MSTORE"
    },
    "2262": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6340,
        6350
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2263": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6340,
        6350
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2264": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6312
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2265": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6312
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2266": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6312
      ],
      "op": "AND",
      "path": "0"
    },
    "2267": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6312
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2268": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6322
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "2273": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6322
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2274": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2276": {
      "op": "ADD"
    },
    "2277": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2279": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2281": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2282": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2283": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2284": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "SUB",
      "path": "0"
    },
    "2285": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2286": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2287": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "GAS",
      "path": "0"
    },
    "2288": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "2289": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2290": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2291": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2292": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x901"
    },
    "2295": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2296": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2297": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2299": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2300": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "2301": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2302": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2304": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2305": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2306": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "POP",
      "path": "0"
    },
    "2307": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "POP",
      "path": "0"
    },
    "2308": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "POP",
      "path": "0"
    },
    "2309": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "POP",
      "path": "0"
    },
    "2310": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2312": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2313": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2314": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2316": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "NOT",
      "path": "0"
    },
    "2317": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2319": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2320": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "ADD",
      "path": "0"
    },
    "2321": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "AND",
      "path": "0"
    },
    "2322": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2323": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "ADD",
      "path": "0"
    },
    "2324": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2325": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2327": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2328": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "POP",
      "path": "0"
    },
    "2329": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2330": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "ADD",
      "path": "0"
    },
    "2331": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2332": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x925"
    },
    "2335": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2336": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2337": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "2340": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        6301,
        6337
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2341": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6337
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2342": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6301,
        6350
      ],
      "op": "SUB",
      "path": "0"
    },
    "2343": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6286,
        6297
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE"
    },
    "2345": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6286,
        6297
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2346": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6283
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2347": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6297
      ],
      "op": "MUL",
      "path": "0"
    },
    "2348": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2349": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x938"
    },
    "2352": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2353": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x938"
    },
    "2356": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1930"
    },
    "2359": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        6277,
        6351
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2360": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2361": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6273
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE"
    },
    "2363": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6351
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2364": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6351
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2365": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2366": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2367": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2368": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6277,
        6351
      ],
      "op": "DIV",
      "path": "0"
    },
    "2369": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6351
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2370": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6351
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2371": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6351
      ],
      "op": "ADD",
      "path": "0"
    },
    "2372": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6351
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2373": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6262,
        6351
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2374": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 11,
      "value": "0x40"
    },
    "2376": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2377": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2382": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2384": {
      "op": "SHL"
    },
    "2385": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2386": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2391": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2393": {
      "op": "SHL"
    },
    "2394": {
      "op": "SUB"
    },
    "2395": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6403
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2396": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6403
      ],
      "op": "AND",
      "path": "0"
    },
    "2397": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6403
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2398": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6403
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "2403": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6403
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2404": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x975"
    },
    "2407": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2408": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6404,
        6414
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2409": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6404,
        6414
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2410": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6424,
        6428
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "2411": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6424,
        6428
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2412": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6431,
        6437
      ],
      "op": "DUP8",
      "path": "0"
    },
    "2413": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6431,
        6437
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2414": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2416": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "ADD",
      "path": "0"
    },
    "2417": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19AC"
    },
    "2420": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        6388,
        6438
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2421": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2422": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2424": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2426": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2427": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2428": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2429": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "SUB",
      "path": "0"
    },
    "2430": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2431": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2433": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP8",
      "path": "0"
    },
    "2434": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "GAS",
      "path": "0"
    },
    "2435": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "CALL",
      "path": "0"
    },
    "2436": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2437": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2438": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2439": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x994"
    },
    "2442": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2443": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2444": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2446": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2447": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "2448": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2449": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2451": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2452": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2453": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "POP",
      "path": "0"
    },
    "2454": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "POP",
      "path": "0"
    },
    "2455": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "POP",
      "path": "0"
    },
    "2456": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "POP",
      "path": "0"
    },
    "2457": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2459": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2460": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2461": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2463": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "NOT",
      "path": "0"
    },
    "2464": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2466": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2467": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "ADD",
      "path": "0"
    },
    "2468": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "AND",
      "path": "0"
    },
    "2469": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2470": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "ADD",
      "path": "0"
    },
    "2471": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2472": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2474": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2475": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "POP",
      "path": "0"
    },
    "2476": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2477": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "ADD",
      "path": "0"
    },
    "2478": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2479": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9B8"
    },
    "2482": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2483": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2484": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "2487": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        6388,
        6438
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2488": {
      "branch": 61,
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6388,
        6438
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2489": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2491": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2492": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2493": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2495": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "ADD",
      "path": "0"
    },
    "2496": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2498": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2499": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2500": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1C"
    },
    "2502": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2503": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2504": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2506": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "ADD",
      "path": "0"
    },
    "2507": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x7374616B656420746F6B656E207472616E73666572206661696C656400000000"
    },
    "2540": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2541": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2542": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6440,
        6461
      ],
      "op": "POP",
      "path": "0"
    },
    "2543": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2544": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA0C"
    },
    "2547": {
      "branch": 61,
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2548": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2550": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2551": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2555": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2557": {
      "op": "SHL"
    },
    "2558": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2559": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2560": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2562": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "ADD",
      "path": "0"
    },
    "2563": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "2566": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2567": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2568": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A1D"
    },
    "2571": {
      "fn": "ForgeGuess.stakeFor",
      "jump": "i",
      "offset": [
        6380,
        6462
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2572": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2573": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6380,
        6462
      ],
      "op": "POP",
      "path": "0"
    },
    "2574": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6497,
        6504
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 12
    },
    "2575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2579": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2581": {
      "op": "SHL"
    },
    "2582": {
      "op": "SUB"
    },
    "2583": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6490,
        6513
      ],
      "op": "AND",
      "path": "0"
    },
    "2584": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6490,
        6513
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D"
    },
    "2617": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6506,
        6512
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2618": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6490,
        6513
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2620": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6490,
        6513
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2621": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6490,
        6513
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77D"
    },
    "2624": {
      "fn": "ForgeGuess.stakeFor",
      "offset": [
        6490,
        6513
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2625": {
      "op": "DUP2"
    },
    "2626": {
      "op": "MSTORE"
    },
    "2627": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2629": {
      "op": "ADD"
    },
    "2630": {
      "op": "SWAP1"
    },
    "2631": {
      "op": "JUMP"
    },
    "2632": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2633": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4711,
        4721
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 13,
      "value": "0xD"
    },
    "2635": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4711,
        4721
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2636": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4683
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "2638": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4683
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2639": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2641": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2642": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2649": {
      "op": "SHL"
    },
    "2650": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2651": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2652": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4702,
        4706
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "2653": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2655": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2656": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "ADD",
      "path": "0"
    },
    "2657": {
      "op": "MSTORE"
    },
    "2658": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4644,
        4651
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2660": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4644,
        4651
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2661": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4739,
        4741
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x19"
    },
    "2663": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4739,
        4741
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2664": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4731,
        4736
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2665": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4731,
        4736
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2666": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4725,
        4727
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x14"
    },
    "2668": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4725,
        4727
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2669": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4711,
        4721
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2670": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2672": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2674": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2676": {
      "op": "SHL"
    },
    "2677": {
      "op": "SUB"
    },
    "2678": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4683
      ],
      "op": "AND",
      "path": "0"
    },
    "2679": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4683
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2680": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4693
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "2685": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4693
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2686": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2688": {
      "op": "ADD"
    },
    "2689": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2691": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2693": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2694": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2695": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2696": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "SUB",
      "path": "0"
    },
    "2697": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2698": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2699": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "GAS",
      "path": "0"
    },
    "2700": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "2701": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2702": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2703": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2704": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA9D"
    },
    "2707": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2708": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2709": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2711": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2712": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "2713": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2714": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2716": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2717": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2718": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "POP",
      "path": "0"
    },
    "2719": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "POP",
      "path": "0"
    },
    "2720": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "POP",
      "path": "0"
    },
    "2721": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "POP",
      "path": "0"
    },
    "2722": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2724": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2725": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2726": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2728": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "NOT",
      "path": "0"
    },
    "2729": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2731": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2732": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "ADD",
      "path": "0"
    },
    "2733": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "AND",
      "path": "0"
    },
    "2734": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2735": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "ADD",
      "path": "0"
    },
    "2736": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2737": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2739": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2740": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "POP",
      "path": "0"
    },
    "2741": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2742": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "ADD",
      "path": "0"
    },
    "2743": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2744": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAC1"
    },
    "2747": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2748": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2749": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "2752": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "i",
      "offset": [
        4672,
        4708
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2753": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4708
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2754": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4721
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xACB"
    },
    "2757": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4721
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2758": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4721
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2759": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4721
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1973"
    },
    "2762": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "i",
      "offset": [
        4672,
        4721
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2763": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4672,
        4721
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2764": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4671,
        4727
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAD5"
    },
    "2767": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4671,
        4727
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2768": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4671,
        4727
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2769": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4671,
        4727
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "2772": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "i",
      "offset": [
        4671,
        4727
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2773": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4671,
        4727
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2774": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4736
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xADF"
    },
    "2777": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4736
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2778": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4736
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2779": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4736
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "2782": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "i",
      "offset": [
        4670,
        4736
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2783": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4736
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2784": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4741
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAE9"
    },
    "2787": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4741
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2788": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4741
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2789": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4741
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "2792": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "i",
      "offset": [
        4670,
        4741
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2793": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4670,
        4741
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2794": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4663,
        4741
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2795": {
      "fn": "ForgeGuess.MaxINForGuess",
      "offset": [
        4585,
        4749
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2796": {
      "op": "POP"
    },
    "2797": {
      "op": "POP"
    },
    "2798": {
      "fn": "ForgeGuess.MaxINForGuess",
      "jump": "o",
      "offset": [
        4585,
        4749
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2799": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2800": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7839,
        7844
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2801": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7831,
        7836
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2803": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7831,
        7836
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2804": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7828
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2806": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7828
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2807": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7836
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB00"
    },
    "2810": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7836
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2811": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7836
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2812": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7836
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1973"
    },
    "2815": {
      "fn": "ForgeGuess.perfectWithdraw",
      "jump": "i",
      "offset": [
        7821,
        7836
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2816": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7836
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2817": {
      "branch": 62,
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7821,
        7844
      ],
      "op": "LT",
      "path": "0"
    },
    "2818": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7818,
        7914
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2819": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7818,
        7914
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB74"
    },
    "2822": {
      "branch": 62,
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7818,
        7914
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2823": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7880
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 14,
      "value": "0x12"
    },
    "2825": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7880
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2826": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2828": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2829": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2834": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2836": {
      "op": "SHL"
    },
    "2837": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2838": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2839": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7891,
        7901
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2840": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2842": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2843": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "ADD",
      "path": "0"
    },
    "2844": {
      "op": "MSTORE"
    },
    "2845": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7860,
        7903
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB74"
    },
    "2848": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7860,
        7903
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2849": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2851": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2853": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2855": {
      "op": "SHL"
    },
    "2856": {
      "op": "SUB"
    },
    "2857": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7880
      ],
      "op": "AND",
      "path": "0"
    },
    "2858": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7880
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2859": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7890
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "2864": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7890
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2865": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2867": {
      "op": "ADD"
    },
    "2868": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2870": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2872": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2873": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2874": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2875": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "SUB",
      "path": "0"
    },
    "2876": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2877": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2878": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "GAS",
      "path": "0"
    },
    "2879": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "2880": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2881": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2882": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2883": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB50"
    },
    "2886": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2887": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2888": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2890": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2891": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "2892": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2893": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2895": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2896": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2897": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "POP",
      "path": "0"
    },
    "2898": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "POP",
      "path": "0"
    },
    "2899": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "POP",
      "path": "0"
    },
    "2900": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "POP",
      "path": "0"
    },
    "2901": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2903": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2904": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "2905": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2907": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "NOT",
      "path": "0"
    },
    "2908": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2910": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2911": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "ADD",
      "path": "0"
    },
    "2912": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "AND",
      "path": "0"
    },
    "2913": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2914": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "ADD",
      "path": "0"
    },
    "2915": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2916": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2918": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2919": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "POP",
      "path": "0"
    },
    "2920": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2921": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "ADD",
      "path": "0"
    },
    "2922": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2923": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1DB"
    },
    "2926": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2927": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2928": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7869,
        7902
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "2931": {
      "fn": "ForgeGuess.perfectWithdraw",
      "jump": "i",
      "offset": [
        7869,
        7902
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2932": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7860,
        7903
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2933": {
      "fn": "ForgeGuess.perfectWithdraw",
      "offset": [
        7762,
        7920
      ],
      "op": "POP",
      "path": "0"
    },
    "2934": {
      "fn": "ForgeGuess.perfectWithdraw",
      "jump": "o",
      "offset": [
        7762,
        7920
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2935": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2936": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4900,
        4903
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 15,
      "value": "0x2"
    },
    "2938": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4900,
        4903
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2939": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2941": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2942": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2947": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2949": {
      "op": "SHL"
    },
    "2950": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2951": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2952": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4826,
        4843
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2954": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4826,
        4843
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2955": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2957": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2959": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2961": {
      "op": "SHL"
    },
    "2962": {
      "op": "SUB"
    },
    "2963": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4859
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "2996": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4872
      ],
      "op": "AND",
      "path": "0"
    },
    "2997": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4872
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2998": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4872
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "3003": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4872
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3004": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBCB"
    },
    "3007": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3008": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4873,
        4883
      ],
      "op": "CALLER",
      "path": "0"
    },
    "3009": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4873,
        4883
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3010": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4893,
        4897
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "3011": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4893,
        4897
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3012": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3014": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "ADD",
      "path": "0"
    },
    "3015": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19AC"
    },
    "3018": {
      "fn": "ForgeGuess.getBlank",
      "jump": "i",
      "offset": [
        4855,
        4904
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3019": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3020": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3022": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3024": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3025": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3026": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3027": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "SUB",
      "path": "0"
    },
    "3028": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3029": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3031": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3032": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "GAS",
      "path": "0"
    },
    "3033": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "CALL",
      "path": "0"
    },
    "3034": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3035": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3036": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3037": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBEA"
    },
    "3040": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3041": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3042": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3044": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3045": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "3046": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3047": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3049": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "REVERT",
      "path": "0"
    },
    "3050": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3051": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "POP",
      "path": "0"
    },
    "3052": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "POP",
      "path": "0"
    },
    "3053": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "POP",
      "path": "0"
    },
    "3054": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "POP",
      "path": "0"
    },
    "3055": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3057": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3058": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3059": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3061": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "NOT",
      "path": "0"
    },
    "3062": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3064": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3065": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "ADD",
      "path": "0"
    },
    "3066": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "AND",
      "path": "0"
    },
    "3067": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3068": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "ADD",
      "path": "0"
    },
    "3069": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3070": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3072": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3073": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "POP",
      "path": "0"
    },
    "3074": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3075": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "ADD",
      "path": "0"
    },
    "3076": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3077": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC0E"
    },
    "3080": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3081": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3082": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "3085": {
      "fn": "ForgeGuess.getBlank",
      "jump": "i",
      "offset": [
        4855,
        4904
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3086": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3087": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4855,
        4904
      ],
      "op": "POP",
      "path": "0"
    },
    "3088": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4922,
        4953
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 16,
      "value": "0xC1D"
    },
    "3091": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4940,
        4947
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3093": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4940,
        4947
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3094": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4949,
        4952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3096": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4949,
        4952
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3097": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4922,
        4939
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1440"
    },
    "3100": {
      "fn": "ForgeGuess.getBlank",
      "jump": "i",
      "offset": [
        4922,
        4953
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3101": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4922,
        4953
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3102": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4915,
        4953
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3103": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4915,
        4953
      ],
      "op": "POP",
      "path": "0"
    },
    "3104": {
      "fn": "ForgeGuess.getBlank",
      "offset": [
        4790,
        4960
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3105": {
      "fn": "ForgeGuess.getBlank",
      "jump": "o",
      "offset": [
        4790,
        4960
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3106": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3107": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6726,
        6736
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xD"
    },
    "3109": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6726,
        6736
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3110": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6698
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "3112": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6698
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3113": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3115": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3116": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "3121": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3123": {
      "op": "SHL"
    },
    "3124": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3125": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3126": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6717,
        6721
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "3127": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3129": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3130": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "ADD",
      "path": "0"
    },
    "3131": {
      "op": "MSTORE"
    },
    "3132": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6651,
        6658
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3134": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6651,
        6658
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3135": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6651,
        6658
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3136": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6651,
        6658
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3137": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6740,
        6749
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3138": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6740,
        6749
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3139": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3141": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3143": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3145": {
      "op": "SHL"
    },
    "3146": {
      "op": "SUB"
    },
    "3147": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6698
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3148": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6698
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3149": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6698
      ],
      "op": "AND",
      "path": "0"
    },
    "3150": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6698
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3151": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6708
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "3156": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6708
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3157": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3159": {
      "op": "ADD"
    },
    "3160": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3162": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3164": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3165": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3166": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3167": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "SUB",
      "path": "0"
    },
    "3168": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3169": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3170": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "GAS",
      "path": "0"
    },
    "3171": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "3172": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3173": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3174": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3175": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC74"
    },
    "3178": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3179": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3180": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3182": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3183": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "3184": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3185": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3187": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "REVERT",
      "path": "0"
    },
    "3188": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3189": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "POP",
      "path": "0"
    },
    "3190": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "POP",
      "path": "0"
    },
    "3191": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "POP",
      "path": "0"
    },
    "3192": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "POP",
      "path": "0"
    },
    "3193": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3195": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3196": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3197": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3199": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "NOT",
      "path": "0"
    },
    "3200": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3202": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3203": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "ADD",
      "path": "0"
    },
    "3204": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "AND",
      "path": "0"
    },
    "3205": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3206": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "ADD",
      "path": "0"
    },
    "3207": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3208": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3210": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3211": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "POP",
      "path": "0"
    },
    "3212": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3213": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "ADD",
      "path": "0"
    },
    "3214": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3215": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC98"
    },
    "3218": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3219": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3220": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "3223": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6687,
        6723
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3224": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6723
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3225": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6736
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCA2"
    },
    "3228": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6736
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3229": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6736
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3230": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6736
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1973"
    },
    "3233": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6687,
        6736
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3234": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6687,
        6736
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3235": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6686,
        6749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCAC"
    },
    "3238": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6686,
        6749
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3239": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6686,
        6749
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3240": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6686,
        6749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "3243": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6686,
        6749
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3244": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6686,
        6749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3245": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6669,
        6749
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3246": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6669,
        6749
      ],
      "op": "POP",
      "path": "0"
    },
    "3247": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6759,
        6776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3249": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6806,
        6808
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x14"
    },
    "3251": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6797,
        6803
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3252": {
      "branch": 63,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6797,
        6808
      ],
      "op": "LT",
      "path": "0"
    },
    "3253": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6794,
        7415
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3254": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6794,
        7415
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCE1"
    },
    "3257": {
      "branch": 63,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6794,
        7415
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3258": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6861,
        6871
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 17,
      "value": "0xCC4"
    },
    "3261": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6861,
        6865
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3262": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6868,
        6871
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "3264": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6861,
        6871
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3267": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6861,
        6871
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3268": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6861,
        6871
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3269": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6837,
        6858
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCD0"
    },
    "3272": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6849,
        6858
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3273": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6837,
        6845
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2454"
    },
    "3276": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6837,
        6858
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3279": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6837,
        6858
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3280": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6837,
        6858
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3281": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6836,
        6872
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCDA"
    },
    "3284": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6836,
        6872
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3285": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6836,
        6872
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3286": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6836,
        6872
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "3289": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6836,
        6872
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3290": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6836,
        6872
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3291": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6824,
        6872
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3292": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6824,
        6872
      ],
      "op": "POP",
      "path": "0"
    },
    "3293": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6794,
        7415
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD8C"
    },
    "3296": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6794,
        7415
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3297": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6794,
        7415
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3298": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6904,
        6906
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x32"
    },
    "3300": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6895,
        6901
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3301": {
      "branch": 64,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6895,
        6906
      ],
      "op": "LT",
      "path": "0"
    },
    "3302": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6892,
        7415
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3303": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6892,
        7415
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD01"
    },
    "3306": {
      "branch": 64,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6892,
        7415
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3307": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6958,
        6966
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 18,
      "value": "0xCF5"
    },
    "3310": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6958,
        6962
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3311": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6963,
        6966
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "3313": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6958,
        6966
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3316": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6958,
        6966
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3317": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6958,
        6966
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3318": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6935,
        6955
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCD0"
    },
    "3321": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6946,
        6955
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3322": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6935,
        6943
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x251C"
    },
    "3325": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6935,
        6955
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3328": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        6935,
        6955
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3329": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6892,
        7415
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3330": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7000,
        7003
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "3332": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6991,
        6997
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3333": {
      "branch": 65,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6991,
        7003
      ],
      "op": "LT",
      "path": "0"
    },
    "3334": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6988,
        7415
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3335": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6988,
        7415
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD21"
    },
    "3338": {
      "branch": 65,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6988,
        7415
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3339": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7055,
        7065
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 19,
      "value": "0xD15"
    },
    "3342": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7055,
        7059
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3343": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7062,
        7065
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "3345": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7055,
        7065
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3348": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7055,
        7065
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3349": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7055,
        7065
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3350": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7032,
        7052
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCD0"
    },
    "3353": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7043,
        7052
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3354": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7032,
        7040
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2648"
    },
    "3357": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7032,
        7052
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3360": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7032,
        7052
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3361": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6988,
        7415
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3362": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7115,
        7118
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x96"
    },
    "3364": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7106,
        7112
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3365": {
      "branch": 66,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7106,
        7118
      ],
      "op": "LT",
      "path": "0"
    },
    "3366": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7103,
        7415
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3367": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7103,
        7415
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD43"
    },
    "3370": {
      "branch": 66,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7103,
        7415
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3371": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7171,
        7182
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 20,
      "value": "0xD36"
    },
    "3374": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7171,
        7175
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3375": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7178,
        7182
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E8"
    },
    "3378": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7171,
        7182
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3381": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7171,
        7182
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3382": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7171,
        7182
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3383": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7147,
        7168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCD0"
    },
    "3386": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7159,
        7168
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3387": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7147,
        7156
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x180C4"
    },
    "3391": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7147,
        7168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3394": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7147,
        7168
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3395": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7103,
        7415
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3396": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7232,
        7235
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12C"
    },
    "3399": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7223,
        7229
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3400": {
      "branch": 67,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7223,
        7235
      ],
      "op": "LT",
      "path": "0"
    },
    "3401": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7220,
        7415
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3402": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7220,
        7415
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD66"
    },
    "3405": {
      "branch": 67,
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7220,
        7415
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3406": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7288,
        7299
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 21,
      "value": "0xD59"
    },
    "3409": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7288,
        7292
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3410": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7295,
        7299
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E8"
    },
    "3413": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7288,
        7299
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3416": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7288,
        7299
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3417": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7288,
        7299
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3418": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7264,
        7285
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCD0"
    },
    "3421": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7276,
        7285
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3422": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7264,
        7273
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x182B8"
    },
    "3426": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7264,
        7285
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3429": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7264,
        7285
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3430": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7220,
        7415
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3431": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7371,
        7382
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 22,
      "value": "0xD72"
    },
    "3434": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7371,
        7375
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3435": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7378,
        7382
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E8"
    },
    "3438": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7371,
        7382
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3441": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7371,
        7382
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3442": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7371,
        7382
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3443": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7347,
        7368
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD7F"
    },
    "3446": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7359,
        7368
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3447": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7347,
        7356
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x184AC"
    },
    "3451": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7347,
        7368
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "3454": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7347,
        7368
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3455": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7347,
        7368
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3456": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7346,
        7383
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD89"
    },
    "3459": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7346,
        7383
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3460": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7346,
        7383
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3461": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7346,
        7383
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "3464": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "i",
      "offset": [
        7346,
        7383
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3465": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7346,
        7383
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3466": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7334,
        7383
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3467": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7334,
        7383
      ],
      "op": "POP",
      "path": "0"
    },
    "3468": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7220,
        7415
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3469": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        7435,
        7444
      ],
      "op": "SWAP5",
      "path": "0",
      "statement": 23
    },
    "3470": {
      "fn": "ForgeGuess.estOUTPUT",
      "offset": [
        6578,
        7453
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3471": {
      "op": "POP"
    },
    "3472": {
      "op": "POP"
    },
    "3473": {
      "op": "POP"
    },
    "3474": {
      "op": "POP"
    },
    "3475": {
      "fn": "ForgeGuess.estOUTPUT",
      "jump": "o",
      "offset": [
        6578,
        7453
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3476": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3218,
        4542
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3477": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3287,
        3304
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3479": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3330,
        3332
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 24,
      "value": "0x62"
    },
    "3481": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3324,
        3329
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3482": {
      "branch": 68,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3324,
        3332
      ],
      "op": "LT",
      "path": "0"
    },
    "3483": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDE6"
    },
    "3486": {
      "branch": 68,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3487": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3489": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3490": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3494": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3496": {
      "op": "SHL"
    },
    "3497": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3498": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3499": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3501": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3503": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3504": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "ADD",
      "path": "0"
    },
    "3505": {
      "op": "MSTORE"
    },
    "3506": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "3508": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3510": {
      "op": "DUP3"
    },
    "3511": {
      "op": "ADD"
    },
    "3512": {
      "op": "MSTORE"
    },
    "3513": {
      "op": "PUSH32",
      "value": "0x4D757374206775657373206C6F776572207468616E2039380000000000000000"
    },
    "3546": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3548": {
      "op": "DUP3"
    },
    "3549": {
      "op": "ADD"
    },
    "3550": {
      "op": "MSTORE"
    },
    "3551": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3553": {
      "op": "ADD"
    },
    "3554": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "3557": {
      "op": "JUMP"
    },
    "3558": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3316,
        3361
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3559": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3390
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 25,
      "value": "0x12"
    },
    "3561": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3390
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3562": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3564": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3565": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "3570": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3572": {
      "op": "SHL"
    },
    "3573": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3574": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3579": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3581": {
      "op": "SHL"
    },
    "3582": {
      "op": "SUB"
    },
    "3583": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3390
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3584": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3390
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3585": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3390
      ],
      "op": "AND",
      "path": "0"
    },
    "3586": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3390
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3587": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3403
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "3592": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3403
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3593": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE1A"
    },
    "3596": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3597": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3404,
        3414
      ],
      "op": "CALLER",
      "path": "0"
    },
    "3598": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3404,
        3414
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3599": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3424,
        3428
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "3600": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3424,
        3428
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3601": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3431,
        3434
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3602": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3431,
        3434
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3603": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3605": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "ADD",
      "path": "0"
    },
    "3606": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19AC"
    },
    "3609": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3379,
        3435
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3610": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3611": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3613": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3615": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3616": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3617": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3618": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "SUB",
      "path": "0"
    },
    "3619": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3620": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3622": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3623": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "GAS",
      "path": "0"
    },
    "3624": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "CALL",
      "path": "0"
    },
    "3625": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3626": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3627": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3628": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE39"
    },
    "3631": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3632": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3633": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3635": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3636": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "3637": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3638": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3640": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "REVERT",
      "path": "0"
    },
    "3641": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3642": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "POP",
      "path": "0"
    },
    "3643": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "POP",
      "path": "0"
    },
    "3644": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "POP",
      "path": "0"
    },
    "3645": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "POP",
      "path": "0"
    },
    "3646": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3648": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3649": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3650": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3652": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "NOT",
      "path": "0"
    },
    "3653": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3655": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3656": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "ADD",
      "path": "0"
    },
    "3657": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "AND",
      "path": "0"
    },
    "3658": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3659": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "ADD",
      "path": "0"
    },
    "3660": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3661": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3663": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3664": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "POP",
      "path": "0"
    },
    "3665": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3666": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "ADD",
      "path": "0"
    },
    "3667": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3668": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE5D"
    },
    "3671": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3672": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3673": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "3676": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3379,
        3435
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3677": {
      "branch": 69,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3379,
        3435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3678": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE9E"
    },
    "3681": {
      "branch": 69,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3682": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3684": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3685": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3689": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3691": {
      "op": "SHL"
    },
    "3692": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3693": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3694": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3696": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3698": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3699": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "ADD",
      "path": "0"
    },
    "3700": {
      "op": "MSTORE"
    },
    "3701": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "3703": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3705": {
      "op": "DUP3"
    },
    "3706": {
      "op": "ADD"
    },
    "3707": {
      "op": "MSTORE"
    },
    "3708": {
      "op": "PUSH18",
      "value": "0x5472616E73666572206D75737420776F726B"
    },
    "3727": {
      "op": "PUSH1",
      "value": "0x70"
    },
    "3729": {
      "op": "SHL"
    },
    "3730": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3732": {
      "op": "DUP3"
    },
    "3733": {
      "op": "ADD"
    },
    "3734": {
      "op": "MSTORE"
    },
    "3735": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3737": {
      "op": "ADD"
    },
    "3738": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "3741": {
      "op": "JUMP"
    },
    "3742": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3371,
        3458
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3743": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3745": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3746": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "3751": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3753": {
      "op": "SHL"
    },
    "3754": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3755": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3756": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3506,
        3510
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "3757": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3759": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3760": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "ADD",
      "path": "0"
    },
    "3761": {
      "op": "MSTORE"
    },
    "3762": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3468,
        3480
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3764": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3468,
        3480
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3765": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3487
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "3798": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3800": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3802": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3804": {
      "op": "SHL"
    },
    "3805": {
      "op": "SUB"
    },
    "3806": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3497
      ],
      "op": "AND",
      "path": "0"
    },
    "3807": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3808": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3497
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "3813": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3814": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3816": {
      "op": "ADD"
    },
    "3817": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3819": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3821": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3822": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3823": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3824": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "SUB",
      "path": "0"
    },
    "3825": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3826": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3827": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "GAS",
      "path": "0"
    },
    "3828": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "3829": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3830": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3831": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3832": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF05"
    },
    "3835": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3836": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3837": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3839": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3840": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "3841": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3842": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3844": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "REVERT",
      "path": "0"
    },
    "3845": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3846": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "POP",
      "path": "0"
    },
    "3847": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "POP",
      "path": "0"
    },
    "3848": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "POP",
      "path": "0"
    },
    "3849": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "POP",
      "path": "0"
    },
    "3850": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3852": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3853": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "3854": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3856": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "NOT",
      "path": "0"
    },
    "3857": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3859": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3860": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "ADD",
      "path": "0"
    },
    "3861": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "AND",
      "path": "0"
    },
    "3862": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3863": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "ADD",
      "path": "0"
    },
    "3864": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3865": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3867": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3868": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "POP",
      "path": "0"
    },
    "3869": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3870": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "ADD",
      "path": "0"
    },
    "3871": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3872": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF29"
    },
    "3875": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3876": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3877": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "3880": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3483,
        3512
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3881": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3483,
        3512
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3882": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3468,
        3512
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3883": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3468,
        3512
      ],
      "op": "POP",
      "path": "0"
    },
    "3884": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3531,
        3543
      ],
      "op": "PUSH8",
      "path": "0",
      "value": "0xDE0B6B3A7640000"
    },
    "3893": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3525,
        3528
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3894": {
      "branch": 70,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3525,
        3543
      ],
      "op": "LT",
      "path": "0"
    },
    "3895": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3522,
        4080
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3896": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3522,
        4080
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFD6"
    },
    "3899": {
      "branch": 70,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3522,
        4080
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3900": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3603,
        3606
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 26,
      "value": "0x2"
    },
    "3902": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3603,
        3606
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3903": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3905": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3906": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "3911": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3913": {
      "op": "SHL"
    },
    "3914": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3915": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3916": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3918": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3920": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3922": {
      "op": "SHL"
    },
    "3923": {
      "op": "SUB"
    },
    "3924": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3562
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "3957": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3575
      ],
      "op": "AND",
      "path": "0"
    },
    "3958": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3575
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3959": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3575
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "3964": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3575
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3965": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF8D"
    },
    "3968": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3969": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3576,
        3586
      ],
      "op": "CALLER",
      "path": "0"
    },
    "3970": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3576,
        3586
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3971": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3596,
        3600
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "3972": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3596,
        3600
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3973": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3603,
        3606
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3974": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3976": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "ADD",
      "path": "0"
    },
    "3977": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19AC"
    },
    "3980": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3981": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3982": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3984": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3986": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3987": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3988": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3989": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "SUB",
      "path": "0"
    },
    "3990": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3991": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3993": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3994": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "GAS",
      "path": "0"
    },
    "3995": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "CALL",
      "path": "0"
    },
    "3996": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3997": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3998": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3999": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFAC"
    },
    "4002": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4003": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4004": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4006": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4007": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "4008": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4009": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4011": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "REVERT",
      "path": "0"
    },
    "4012": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4013": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "POP",
      "path": "0"
    },
    "4014": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "POP",
      "path": "0"
    },
    "4015": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "POP",
      "path": "0"
    },
    "4016": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "POP",
      "path": "0"
    },
    "4017": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4019": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4020": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4021": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4023": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "NOT",
      "path": "0"
    },
    "4024": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4026": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4027": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "ADD",
      "path": "0"
    },
    "4028": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "AND",
      "path": "0"
    },
    "4029": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4030": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "ADD",
      "path": "0"
    },
    "4031": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4032": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4034": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4035": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "POP",
      "path": "0"
    },
    "4036": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4037": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "ADD",
      "path": "0"
    },
    "4038": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4039": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFD0"
    },
    "4042": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4043": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4044": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "4047": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4048": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4049": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3558,
        3607
      ],
      "op": "POP",
      "path": "0"
    },
    "4050": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3522,
        4080
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1124"
    },
    "4053": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3522,
        4080
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4054": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3522,
        4080
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4055": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3632,
        3645
      ],
      "op": "PUSH9",
      "path": "0",
      "value": "0x2B5E3AF16B1880000"
    },
    "4065": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3626,
        3629
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4066": {
      "branch": 71,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3626,
        3645
      ],
      "op": "LT",
      "path": "0"
    },
    "4067": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3623,
        4080
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4068": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3623,
        4080
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1062"
    },
    "4071": {
      "branch": 71,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3623,
        4080
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4072": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3674,
        3678
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E8"
    },
    "4075": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3671
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4077": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3671
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4078": {
      "branch": 72,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3678
      ],
      "op": "LT",
      "path": "0"
    },
    "4079": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3696
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4080": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3696
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4081": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3696
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1006"
    },
    "4084": {
      "branch": 72,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3696
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4085": {
      "op": "POP"
    },
    "4086": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3689,
        3692
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4088": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3689,
        3692
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4089": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3689,
        3696
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1003"
    },
    "4092": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3689,
        3696
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4093": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3695,
        3696
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x9"
    },
    "4095": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3689,
        3696
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "4098": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3689,
        3696
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4099": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3689,
        3696
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4100": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3682,
        3686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4101": {
      "branch": 73,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3682,
        3696
      ],
      "op": "GT",
      "path": "0"
    },
    "4102": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3664,
        3696
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4103": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3661,
        3780
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4104": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3661,
        3780
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x105D"
    },
    "4107": {
      "branch": 73,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3661,
        3780
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4108": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3761,
        3764
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 27,
      "value": "0x2"
    },
    "4110": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3761,
        3764
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4111": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4113": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4114": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "4119": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4121": {
      "op": "SHL"
    },
    "4122": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4123": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4124": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4126": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4128": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4130": {
      "op": "SHL"
    },
    "4131": {
      "op": "SUB"
    },
    "4132": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3720
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "4165": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3733
      ],
      "op": "AND",
      "path": "0"
    },
    "4166": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3733
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4167": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3733
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "4172": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3733
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4173": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF8D"
    },
    "4176": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4177": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3734,
        3744
      ],
      "op": "CALLER",
      "path": "0"
    },
    "4178": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3734,
        3744
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4179": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3754,
        3758
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "4180": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3754,
        3758
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4181": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3761,
        3764
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4182": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4184": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "ADD",
      "path": "0"
    },
    "4185": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3716,
        3765
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19AC"
    },
    "4188": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3716,
        3765
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4189": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3661,
        3780
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4190": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3623,
        4080
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1124"
    },
    "4193": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3623,
        4080
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4194": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3623,
        4080
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4195": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3807,
        3809
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5D"
    },
    "4197": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3798,
        3803
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4198": {
      "branch": 74,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3798,
        3809
      ],
      "op": "GT",
      "path": "0"
    },
    "4199": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3795,
        4080
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1078"
    },
    "4202": {
      "branch": 74,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3795,
        4080
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4203": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3843,
        3846
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4205": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3843,
        3846
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4206": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3843,
        3849
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1003"
    },
    "4209": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3843,
        3849
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4210": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3847,
        3849
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xB"
    },
    "4212": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3843,
        3849
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "4215": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3843,
        3849
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4216": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3795,
        4080
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4217": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3980,
        3983
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4219": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3980,
        3983
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4220": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3980,
        3986
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1086"
    },
    "4223": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3980,
        3986
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4224": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3984,
        3986
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xB"
    },
    "4226": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3980,
        3986
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "4229": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        3980,
        3986
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4230": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3980,
        3986
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4231": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3973,
        3977
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4232": {
      "branch": 75,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3973,
        3986
      ],
      "op": "GT",
      "path": "0"
    },
    "4233": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3970,
        4070
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4234": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3970,
        4070
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1124"
    },
    "4237": {
      "branch": 75,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3970,
        4070
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4238": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4051,
        4054
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 28,
      "value": "0x2"
    },
    "4240": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4051,
        4054
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4241": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4243": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4244": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "4249": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4251": {
      "op": "SHL"
    },
    "4252": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4253": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4254": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4256": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4258": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4260": {
      "op": "SHL"
    },
    "4261": {
      "op": "SUB"
    },
    "4262": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4010
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "4295": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4023
      ],
      "op": "AND",
      "path": "0"
    },
    "4296": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4023
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4297": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4023
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "4302": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4023
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4303": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10DF"
    },
    "4306": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4307": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4024,
        4034
      ],
      "op": "CALLER",
      "path": "0"
    },
    "4308": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4024,
        4034
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4309": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4044,
        4048
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "4310": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4044,
        4048
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4311": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4051,
        4054
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4312": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4314": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "ADD",
      "path": "0"
    },
    "4315": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19AC"
    },
    "4318": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4006,
        4055
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4319": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4320": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4322": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4324": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4325": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4326": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4327": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "SUB",
      "path": "0"
    },
    "4328": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4329": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4331": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP8",
      "path": "0"
    },
    "4332": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "GAS",
      "path": "0"
    },
    "4333": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "CALL",
      "path": "0"
    },
    "4334": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4335": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4336": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4337": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10FE"
    },
    "4340": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4341": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4342": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4344": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4345": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "4346": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4347": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4349": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "REVERT",
      "path": "0"
    },
    "4350": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4351": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "POP",
      "path": "0"
    },
    "4352": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "POP",
      "path": "0"
    },
    "4353": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "POP",
      "path": "0"
    },
    "4354": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "POP",
      "path": "0"
    },
    "4355": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4357": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4358": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4359": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4361": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "NOT",
      "path": "0"
    },
    "4362": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4364": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4365": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "ADD",
      "path": "0"
    },
    "4366": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "AND",
      "path": "0"
    },
    "4367": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4368": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "ADD",
      "path": "0"
    },
    "4369": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4370": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4372": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4373": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "POP",
      "path": "0"
    },
    "4374": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4375": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "ADD",
      "path": "0"
    },
    "4376": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4377": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1122"
    },
    "4380": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4381": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4382": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "4385": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4006,
        4055
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4386": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4387": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4006,
        4055
      ],
      "op": "POP",
      "path": "0"
    },
    "4388": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        3970,
        4070
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4389": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4153,
        4163
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 29,
      "value": "0xD"
    },
    "4391": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4153,
        4163
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4392": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4125
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "4394": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4125
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4395": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4397": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4398": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "4403": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4405": {
      "op": "SHL"
    },
    "4406": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4407": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4408": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4144,
        4148
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "4409": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4411": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4412": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "ADD",
      "path": "0"
    },
    "4413": {
      "op": "MSTORE"
    },
    "4414": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4167,
        4169
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x14"
    },
    "4416": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4167,
        4169
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4417": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4153,
        4163
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4422": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4424": {
      "op": "SHL"
    },
    "4425": {
      "op": "SUB"
    },
    "4426": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4125
      ],
      "op": "AND",
      "path": "0"
    },
    "4427": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4125
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4428": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4135
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "4433": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4135
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4434": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4436": {
      "op": "ADD"
    },
    "4437": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4439": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4441": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4442": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4443": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4444": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "SUB",
      "path": "0"
    },
    "4445": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4446": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP7",
      "path": "0"
    },
    "4447": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "GAS",
      "path": "0"
    },
    "4448": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "4449": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4450": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4451": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4452": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1171"
    },
    "4455": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4456": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4457": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4459": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4460": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "4461": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4462": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4464": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "REVERT",
      "path": "0"
    },
    "4465": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4466": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "POP",
      "path": "0"
    },
    "4467": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "POP",
      "path": "0"
    },
    "4468": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "POP",
      "path": "0"
    },
    "4469": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "POP",
      "path": "0"
    },
    "4470": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4472": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4473": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4474": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4476": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "NOT",
      "path": "0"
    },
    "4477": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4479": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4480": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "ADD",
      "path": "0"
    },
    "4481": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "AND",
      "path": "0"
    },
    "4482": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4483": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "ADD",
      "path": "0"
    },
    "4484": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4485": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4487": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4488": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "POP",
      "path": "0"
    },
    "4489": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4490": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "ADD",
      "path": "0"
    },
    "4491": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4492": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1195"
    },
    "4495": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4496": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4497": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "4500": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4114,
        4150
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4501": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4150
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4502": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x119F"
    },
    "4505": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4163
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4506": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4163
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4507": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4163
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1973"
    },
    "4510": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4114,
        4163
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4511": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4114,
        4163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4512": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4113,
        4169
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11A9"
    },
    "4515": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4113,
        4169
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4516": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4113,
        4169
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4517": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4113,
        4169
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "4520": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4113,
        4169
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4521": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4113,
        4169
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4522": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4104,
        4109
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4523": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4103
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11B5"
    },
    "4526": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4100
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4527": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4101,
        4103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x19"
    },
    "4529": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4103
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "4532": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4097,
        4103
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4533": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4103
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4534": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4109
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11BF"
    },
    "4537": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4109
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4538": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4109
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4539": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4109
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "4542": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4097,
        4109
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4543": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4109
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4544": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4169
      ],
      "op": "GT",
      "path": "0"
    },
    "4545": {
      "branch": 76,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4097,
        4169
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4546": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1225"
    },
    "4549": {
      "branch": 76,
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4550": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4552": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4553": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4557": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4559": {
      "op": "SHL"
    },
    "4560": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4561": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4562": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4564": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4566": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4567": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "ADD",
      "path": "0"
    },
    "4568": {
      "op": "MSTORE"
    },
    "4569": {
      "op": "PUSH1",
      "value": "0x2F"
    },
    "4571": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4573": {
      "op": "DUP3"
    },
    "4574": {
      "op": "ADD"
    },
    "4575": {
      "op": "MSTORE"
    },
    "4576": {
      "op": "PUSH32",
      "value": "0x42616E6B726F6C6C20746F6F206C6F7720666F722074686973206265742C2050"
    },
    "4609": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4611": {
      "op": "DUP3"
    },
    "4612": {
      "op": "ADD"
    },
    "4613": {
      "op": "MSTORE"
    },
    "4614": {
      "op": "PUSH15",
      "value": "0x1B19585CD9481B1BDDD95C8818995D"
    },
    "4630": {
      "op": "PUSH1",
      "value": "0x8A"
    },
    "4632": {
      "op": "SHL"
    },
    "4633": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4635": {
      "op": "DUP3"
    },
    "4636": {
      "op": "ADD"
    },
    "4637": {
      "op": "MSTORE"
    },
    "4638": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4640": {
      "op": "ADD"
    },
    "4641": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "4644": {
      "op": "JUMP"
    },
    "4645": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4089,
        4222
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4646": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4275,
        4282
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 30,
      "value": "0x4"
    },
    "4648": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4275,
        4282
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4649": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4275,
        4282
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4650": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4652": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4653": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4654": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4655": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4274
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "4657": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4659": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4660": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4661": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4662": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4664": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4665": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4666": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4283
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4667": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4291
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4668": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4291
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4669": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4267,
        4291
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4670": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4308,
        4315
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 31
    },
    "4671": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4308,
        4315
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4672": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4316
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4673": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4316
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4674": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4307
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "4676": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4316
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4677": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4316
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4678": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4316
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4679": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4316
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4680": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4316
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4681": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4322
      ],
      "op": "DUP8",
      "path": "0"
    },
    "4682": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4322
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4683": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4301,
        4322
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4684": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4338,
        4345
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 32
    },
    "4685": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4338,
        4345
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4686": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4687": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4688": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "4690": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4691": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4692": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4693": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4694": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4695": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4346
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4696": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4697": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4698": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4349,
        4359
      ],
      "op": "CALLER",
      "path": "0"
    },
    "4699": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4701": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4703": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4705": {
      "op": "SHL"
    },
    "4706": {
      "op": "SUB"
    },
    "4707": {
      "op": "NOT"
    },
    "4708": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4709": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4710": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "AND",
      "path": "0"
    },
    "4711": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4712": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "OR",
      "path": "0"
    },
    "4713": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4714": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4715": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4332,
        4359
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4716": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4408,
        4415
      ],
      "op": "SWAP3",
      "path": "0",
      "statement": 33
    },
    "4717": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4408,
        4415
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4718": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4719": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4720": {
      "op": "DUP9"
    },
    "4721": {
      "op": "DUP2"
    },
    "4722": {
      "op": "MSTORE"
    },
    "4723": {
      "op": "SWAP2"
    },
    "4724": {
      "op": "DUP3"
    },
    "4725": {
      "op": "ADD"
    },
    "4726": {
      "op": "DUP8"
    },
    "4727": {
      "op": "SWAP1"
    },
    "4728": {
      "op": "MSTORE"
    },
    "4729": {
      "op": "DUP2"
    },
    "4730": {
      "op": "DUP4"
    },
    "4731": {
      "op": "ADD"
    },
    "4732": {
      "op": "MSTORE"
    },
    "4733": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4734": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4735": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xEA3A2986B784B5FF3AF1DE7908EB0898970DEC44692BEC64512B80606842EAF6"
    },
    "4768": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4769": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4770": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4771": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "SUB",
      "path": "0"
    },
    "4772": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4774": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "ADD",
      "path": "0"
    },
    "4775": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4776": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4374,
        4416
      ],
      "op": "LOG2",
      "path": "0"
    },
    "4777": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4433
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 34,
      "value": "0x4"
    },
    "4779": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4780": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4781": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4782": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4433
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4784": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12B8"
    },
    "4787": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4788": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A30"
    },
    "4791": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4426,
        4435
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4792": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4793": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4794": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4795": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "POP",
      "path": "0"
    },
    "4796": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4797": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4426,
        4435
      ],
      "op": "POP",
      "path": "0"
    },
    "4798": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4460,
        4463
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 35
    },
    "4799": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4455
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xD"
    },
    "4801": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4455
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4803": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4804": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4805": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4806": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12CF"
    },
    "4809": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4810": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4811": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A4B"
    },
    "4814": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4445,
        4463
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4815": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4816": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4817": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "POP",
      "path": "0"
    },
    "4818": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "POP",
      "path": "0"
    },
    "4819": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4820": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4821": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4822": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4445,
        4463
      ],
      "op": "POP",
      "path": "0"
    },
    "4823": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4484,
        4487
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 36
    },
    "4824": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4480
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x10"
    },
    "4826": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4480
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4828": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4829": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4830": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4831": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12E8"
    },
    "4834": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4835": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4836": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A4B"
    },
    "4839": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4473,
        4487
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4840": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4841": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4842": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "POP",
      "path": "0"
    },
    "4843": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "POP",
      "path": "0"
    },
    "4844": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4845": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4846": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4847": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4473,
        4487
      ],
      "op": "POP",
      "path": "0"
    },
    "4848": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4504,
        4535
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 37,
      "value": "0xD8C"
    },
    "4851": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4522,
        4529
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4853": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4522,
        4529
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4854": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4531,
        4534
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4856": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4531,
        4534
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4857": {
      "fn": "ForgeGuess.getRandomNumber",
      "offset": [
        4504,
        4521
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1440"
    },
    "4860": {
      "fn": "ForgeGuess.getRandomNumber",
      "jump": "i",
      "offset": [
        4504,
        4535
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4861": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4862": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9859,
        9869
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 38
    },
    "4863": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4865": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4867": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4869": {
      "op": "SHL"
    },
    "4870": {
      "op": "SUB"
    },
    "4871": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9873,
        9887
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "4904": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9859,
        9887
      ],
      "op": "AND",
      "path": "1"
    },
    "4905": {
      "branch": 80,
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9859,
        9887
      ],
      "op": "EQ",
      "path": "1"
    },
    "4906": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1375"
    },
    "4909": {
      "branch": 80,
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4910": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4912": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4913": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4917": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4919": {
      "op": "SHL"
    },
    "4920": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4921": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4922": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4924": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4926": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4927": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "ADD",
      "path": "1"
    },
    "4928": {
      "op": "MSTORE"
    },
    "4929": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4931": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4933": {
      "op": "DUP3"
    },
    "4934": {
      "op": "ADD"
    },
    "4935": {
      "op": "MSTORE"
    },
    "4936": {
      "op": "PUSH32",
      "value": "0x4F6E6C7920565246436F6F7264696E61746F722063616E2066756C66696C6C00"
    },
    "4969": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4971": {
      "op": "DUP3"
    },
    "4972": {
      "op": "ADD"
    },
    "4973": {
      "op": "MSTORE"
    },
    "4974": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4976": {
      "op": "ADD"
    },
    "4977": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x52F"
    },
    "4980": {
      "op": "JUMP"
    },
    "4981": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9851,
        9923
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4982": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9930,
        9970
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 39,
      "value": "0x137F"
    },
    "4985": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9948,
        9957
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4986": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9959,
        9969
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4987": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9930,
        9947
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x15B7"
    },
    "4990": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "jump": "i",
      "offset": [
        9930,
        9970
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4991": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9930,
        9970
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4992": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "POP",
      "path": "1"
    },
    "4993": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "offset": [
        9766,
        9976
      ],
      "op": "POP",
      "path": "1"
    },
    "4994": {
      "fn": "VRFConsumerBase.rawFulfillRandomness",
      "jump": "o",
      "offset": [
        9766,
        9976
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4995": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4996": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7548,
        7555
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4998": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7567,
        7576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4999": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7661,
        7672
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE"
    },
    "5001": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7661,
        7672
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5002": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7655,
        7656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "5004": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7648
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xD"
    },
    "5006": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7648
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5007": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7651,
        7652
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "5009": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7652
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x139A"
    },
    "5012": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7652
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5013": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7652
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5014": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7652
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "5017": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7638,
        7652
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5018": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7652
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5019": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13A4"
    },
    "5022": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5023": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5024": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "5027": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7638,
        7656
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5028": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7638,
        7656
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5029": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7609
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x12"
    },
    "5031": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7609
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5032": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5034": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5035": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "5040": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5042": {
      "op": "SHL"
    },
    "5043": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5044": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5045": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7628,
        7632
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "5046": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5048": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5049": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "ADD",
      "path": "0"
    },
    "5050": {
      "op": "MSTORE"
    },
    "5051": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5053": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5055": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5057": {
      "op": "SHL"
    },
    "5058": {
      "op": "SUB"
    },
    "5059": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7609
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5060": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7609
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5061": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7609
      ],
      "op": "AND",
      "path": "0"
    },
    "5062": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7609
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5063": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7619
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "5068": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5069": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5071": {
      "op": "ADD"
    },
    "5072": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5074": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5076": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5077": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5078": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5079": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "SUB",
      "path": "0"
    },
    "5080": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5081": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5082": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "GAS",
      "path": "0"
    },
    "5083": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "5084": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5085": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5086": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5087": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13EC"
    },
    "5090": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5091": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5092": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5094": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5095": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "5096": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5097": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5099": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "REVERT",
      "path": "0"
    },
    "5100": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5101": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "POP",
      "path": "0"
    },
    "5102": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "POP",
      "path": "0"
    },
    "5103": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "POP",
      "path": "0"
    },
    "5104": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "POP",
      "path": "0"
    },
    "5105": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5107": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5108": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5109": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "5111": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "NOT",
      "path": "0"
    },
    "5112": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "5114": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5115": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "ADD",
      "path": "0"
    },
    "5116": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "AND",
      "path": "0"
    },
    "5117": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5118": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "ADD",
      "path": "0"
    },
    "5119": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5120": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5122": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5123": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "POP",
      "path": "0"
    },
    "5124": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5125": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "ADD",
      "path": "0"
    },
    "5126": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5127": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1410"
    },
    "5130": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5131": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5132": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195A"
    },
    "5135": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7598,
        7634
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5136": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7634
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5137": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x141A"
    },
    "5140": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7657
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5141": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5142": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1973"
    },
    "5145": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7598,
        7657
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5146": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7598,
        7657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5147": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7597,
        7672
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1424"
    },
    "5150": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7597,
        7672
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5151": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7597,
        7672
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5152": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7597,
        7672
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1946"
    },
    "5155": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7597,
        7672
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5156": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7597,
        7672
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5157": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7593
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x142F"
    },
    "5160": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7584,
        7593
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5161": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7581
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x62"
    },
    "5163": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7593
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "5166": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7579,
        7593
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5167": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7593
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5168": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7673
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1439"
    },
    "5171": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7673
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5172": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7673
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5173": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7673
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1911"
    },
    "5176": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "i",
      "offset": [
        7579,
        7673
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5177": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7579,
        7673
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5178": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7567,
        7673
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5179": {
      "fn": "ForgeGuess.withEstimator",
      "offset": [
        7485,
        7698
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5180": {
      "op": "POP"
    },
    "5181": {
      "op": "POP"
    },
    "5182": {
      "op": "POP"
    },
    "5183": {
      "fn": "ForgeGuess.withEstimator",
      "jump": "o",
      "offset": [
        7485,
        7698
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5184": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7883,
        8917
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5185": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7960,
        7977
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5187": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        7990
      ],
      "op": "PUSH32",
      "path": "1",
      "statement": 40,
      "value": "0x0"
    },
    "5220": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5222": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5224": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5226": {
      "op": "SHL"
    },
    "5227": {
      "op": "SUB"
    },
    "5228": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8006
      ],
      "op": "AND",
      "path": "1"
    },
    "5229": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8006
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x4000AEA0"
    },
    "5234": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8007,
        8021
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x0"
    },
    "5267": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8023,
        8027
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5268": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8040,
        8048
      ],
      "op": "DUP7",
      "path": "1"
    },
    "5269": {
      "offset": [
        6713,
        6714
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5271": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5273": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5274": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5276": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "ADD",
      "path": "1"
    },
    "5277": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14B0"
    },
    "5280": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5281": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "5282": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5283": {
      "op": "SWAP2"
    },
    "5284": {
      "op": "DUP3"
    },
    "5285": {
      "op": "MSTORE"
    },
    "5286": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5288": {
      "op": "DUP3"
    },
    "5289": {
      "op": "ADD"
    },
    "5290": {
      "op": "MSTORE"
    },
    "5291": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5293": {
      "op": "ADD"
    },
    "5294": {
      "op": "SWAP1"
    },
    "5295": {
      "op": "JUMP"
    },
    "5296": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5297": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5299": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5300": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5302": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5303": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "DUP4",
      "path": "1"
    },
    "5304": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "SUB",
      "path": "1"
    },
    "5305": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "SUB",
      "path": "1"
    },
    "5306": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5307": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5308": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5309": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5311": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8029,
        8072
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5312": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5314": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5315": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5316": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xFFFFFFFF"
    },
    "5321": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "AND",
      "path": "1"
    },
    "5322": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "5324": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SHL",
      "path": "1"
    },
    "5325": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5326": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5327": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5329": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "ADD",
      "path": "1"
    },
    "5330": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14DD"
    },
    "5333": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "5334": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5335": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "5336": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5337": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A63"
    },
    "5340": {
      "fn": "VRFConsumerBase.requestRandomness",
      "jump": "i",
      "offset": [
        7986,
        8073
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5341": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5342": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5344": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5346": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5347": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5348": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP4",
      "path": "1"
    },
    "5349": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SUB",
      "path": "1"
    },
    "5350": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5351": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5353": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP8",
      "path": "1"
    },
    "5354": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "GAS",
      "path": "1"
    },
    "5355": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "CALL",
      "path": "1"
    },
    "5356": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5357": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5358": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5359": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14FC"
    },
    "5362": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5363": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "5364": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5366": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5367": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "5368": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "5369": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5371": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "REVERT",
      "path": "1"
    },
    "5372": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5373": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "POP",
      "path": "1"
    },
    "5374": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "POP",
      "path": "1"
    },
    "5375": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "POP",
      "path": "1"
    },
    "5376": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "POP",
      "path": "1"
    },
    "5377": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5379": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5380": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "5381": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "5383": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "NOT",
      "path": "1"
    },
    "5384": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "5386": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5387": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "ADD",
      "path": "1"
    },
    "5388": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "AND",
      "path": "1"
    },
    "5389": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5390": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "ADD",
      "path": "1"
    },
    "5391": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5392": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5394": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5395": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "POP",
      "path": "1"
    },
    "5396": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5397": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "ADD",
      "path": "1"
    },
    "5398": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5399": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1520"
    },
    "5402": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "5403": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5404": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x198A"
    },
    "5407": {
      "fn": "VRFConsumerBase.requestRandomness",
      "jump": "i",
      "offset": [
        7986,
        8073
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5408": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        7986,
        8073
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5409": {
      "op": "POP"
    },
    "5410": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8308,
        8323
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5412": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "DUP4",
      "path": "1"
    },
    "5413": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5414": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5415": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5417": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5418": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5419": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5420": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5422": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5423": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "DUP4",
      "path": "1"
    },
    "5424": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "5425": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8391,
        8407
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "5426": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 41
    },
    "5427": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5428": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "DUP1",
      "path": "2"
    },
    "5429": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "DUP5",
      "path": "2"
    },
    "5430": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "ADD",
      "path": "2"
    },
    "5431": {
      "op": "DUP9"
    },
    "5432": {
      "op": "SWAP1"
    },
    "5433": {
      "op": "MSTORE"
    },
    "5434": {
      "op": "DUP1"
    },
    "5435": {
      "op": "DUP4"
    },
    "5436": {
      "op": "ADD"
    },
    "5437": {
      "op": "DUP6"
    },
    "5438": {
      "op": "SWAP1"
    },
    "5439": {
      "op": "MSTORE"
    },
    "5440": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8384,
        8388
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "5441": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5443": {
      "op": "DUP3"
    },
    "5444": {
      "op": "ADD"
    },
    "5445": {
      "op": "MSTORE"
    },
    "5446": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5448": {
      "op": "DUP1"
    },
    "5449": {
      "op": "DUP3"
    },
    "5450": {
      "op": "ADD"
    },
    "5451": {
      "op": "DUP4"
    },
    "5452": {
      "op": "SWAP1"
    },
    "5453": {
      "op": "MSTORE"
    },
    "5454": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5455": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5456": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "DUP1",
      "path": "2"
    },
    "5457": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5458": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "SUB",
      "path": "2"
    },
    "5459": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5460": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5461": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "ADD",
      "path": "2"
    },
    "5462": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5463": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5464": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5466": {
      "op": "SWAP1"
    },
    "5467": {
      "op": "SWAP2"
    },
    "5468": {
      "op": "ADD"
    },
    "5469": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5470": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "5471": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        1002,
        1053
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5472": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5473": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5474": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5475": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5476": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "ADD",
      "path": "2"
    },
    "5477": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5478": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5479": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5480": {
      "fn": "VRFRequestIDBase.makeVRFInputSeed",
      "offset": [
        992,
        1054
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "5481": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8861
      ],
      "op": "DUP7",
      "path": "1",
      "statement": 42
    },
    "5482": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8861
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5483": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8861
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5484": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8861
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5485": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8861
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5486": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8861
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "5487": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8861
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5488": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8865
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x157A"
    },
    "5491": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8865
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5492": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8864,
        8865
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "5494": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8865
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A4B"
    },
    "5497": {
      "fn": "VRFConsumerBase.requestRandomness",
      "jump": "i",
      "offset": [
        8845,
        8865
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5498": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8845,
        8865
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5499": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8832
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5501": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "DUP6",
      "path": "1"
    },
    "5502": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5503": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5504": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5506": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5507": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5508": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5509": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5511": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "5512": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5513": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5514": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8842
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "5515": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8865
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5516": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8865
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5517": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8865
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5518": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8826,
        8865
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "5519": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 43
    },
    "5520": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5521": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP1",
      "path": "2"
    },
    "5522": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5523": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "ADD",
      "path": "2"
    },
    "5524": {
      "op": "DUP8"
    },
    "5525": {
      "op": "SWAP1"
    },
    "5526": {
      "op": "MSTORE"
    },
    "5527": {
      "op": "DUP1"
    },
    "5528": {
      "op": "DUP3"
    },
    "5529": {
      "op": "ADD"
    },
    "5530": {
      "op": "DUP5"
    },
    "5531": {
      "op": "SWAP1"
    },
    "5532": {
      "op": "MSTORE"
    },
    "5533": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5534": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5535": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP1",
      "path": "2"
    },
    "5536": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP3",
      "path": "2"
    },
    "5537": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "SUB",
      "path": "2"
    },
    "5538": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5539": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "ADD",
      "path": "2"
    },
    "5540": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5541": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5542": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5544": {
      "op": "SWAP1"
    },
    "5545": {
      "op": "SWAP2"
    },
    "5546": {
      "op": "ADD"
    },
    "5547": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5548": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5549": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1572,
        1613
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5550": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1562,
        1614
      ],
      "op": "DUP1",
      "path": "2"
    },
    "5551": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1562,
        1614
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5552": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1562,
        1614
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5553": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1562,
        1614
      ],
      "op": "ADD",
      "path": "2"
    },
    "5554": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1562,
        1614
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "5555": {
      "fn": "VRFConsumerBase.requestRandomness",
      "offset": [
        8879,
        8911
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 44,
      "value": "0xD8C"
    },
    "5558": {
      "fn": "VRFRequestIDBase.makeRequestId",
      "offset": [
        1452,
        1620
      ],
      "op": "JUMP",
      "path": "2"
    },
    "5559": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5032,
        5874
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5560": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5138,
        5145
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5562": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5138,
        5145
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5563": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5129,
        5134
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "5565": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5129,
        5134
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5566": {
      "branch": 77,
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5129,
        5145
      ],
      "op": "LT",
      "path": "0"
    },
    "5567": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5126,
        5177
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15C6"
    },
    "5570": {
      "branch": 77,
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5126,
        5177
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5571": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5032,
        5874
      ],
      "op": "POP",
      "path": "0"
    },
    "5572": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5032,
        5874
      ],
      "op": "POP",
      "path": "0"
    },
    "5573": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "o",
      "offset": [
        5032,
        5874
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5574": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5126,
        5177
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5575": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5202,
        5209
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 45,
      "value": "0x4"
    },
    "5577": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5202,
        5209
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5578": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5194,
        5199
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "5580": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5194,
        5199
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5581": {
      "branch": 78,
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5194,
        5209
      ],
      "op": "LT",
      "path": "0"
    },
    "5582": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x160E"
    },
    "5585": {
      "branch": 78,
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5586": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5588": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5589": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5593": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5595": {
      "op": "SHL"
    },
    "5596": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5597": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5598": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5600": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5602": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5603": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "ADD",
      "path": "0"
    },
    "5604": {
      "op": "MSTORE"
    },
    "5605": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "5607": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5609": {
      "op": "DUP3"
    },
    "5610": {
      "op": "ADD"
    },
    "5611": {
      "op": "MSTORE"
    },
    "5612": {
      "op": "PUSH18",
      "value": "0x4D7573742068617665206E65772062657473"
    },
    "5631": {
      "op": "PUSH1",
      "value": "0x70"
    },
    "5633": {
      "op": "SHL"
    },
    "5634": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5636": {
      "op": "DUP3"
    },
    "5637": {
      "op": "ADD"
    },
    "5638": {
      "op": "MSTORE"
    },
    "5639": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5641": {
      "op": "ADD"
    },
    "5642": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "5645": {
      "op": "JUMP"
    },
    "5646": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5186,
        5232
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5647": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5242,
        5254
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 46,
      "value": "0xC"
    },
    "5649": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5242,
        5267
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5650": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5242,
        5267
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5651": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5242,
        5267
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5652": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5283,
        5288
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 47,
      "value": "0x3"
    },
    "5654": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5283,
        5288
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5655": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5657": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5658": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5659": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5660": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5282
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x8"
    },
    "5662": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5664": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5665": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5667": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5668": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5289
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5669": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5302
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5670": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5302
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5671": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5277,
        5302
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5672": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5332,
        5348
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 48,
      "value": "0x1632"
    },
    "5675": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5345,
        5348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "5677": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5257,
        5267
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5678": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5332,
        5348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A93"
    },
    "5681": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5332,
        5348
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5682": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5332,
        5348
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5683": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5323,
        5328
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "5685": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5323,
        5328
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5686": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5323,
        5328
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5687": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5689": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5690": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5691": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5692": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5322
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "5694": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5696": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5697": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5698": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5699": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5701": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5702": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5703": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5329
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5704": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5348
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "5705": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5348
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5706": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5348
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "5707": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5312,
        5348
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5708": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5382,
        5387
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5709": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5382,
        5387
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5710": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5711": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5712": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5381
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "5714": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5715": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5716": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5717": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5718": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5719": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5720": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5420
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "5722": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5427
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5723": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5427
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5724": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5427
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5725": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5427
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5726": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5427
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5727": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5427
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5728": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5463
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "5730": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5470
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5731": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5470
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5732": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5470
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5733": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5470
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5734": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5470
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5735": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5470
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5736": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5457,
        5470
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5739": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5741": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5743": {
      "op": "SHL"
    },
    "5744": {
      "op": "SUB"
    },
    "5745": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5746": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5747": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "AND",
      "path": "0"
    },
    "5748": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5376,
        5388
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5749": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5413,
        5427
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5750": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5483,
        5497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1680"
    },
    "5753": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5494,
        5497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "5755": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5483,
        5493
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5756": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5483,
        5497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A93"
    },
    "5759": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5483,
        5497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5760": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5483,
        5497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5761": {
      "branch": 79,
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5483,
        5504
      ],
      "op": "LT",
      "path": "0"
    },
    "5762": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5480,
        5726
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5763": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5480,
        5726
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x172B"
    },
    "5766": {
      "branch": 79,
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5480,
        5726
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5767": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5535,
        5561
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 49,
      "value": "0x1690"
    },
    "5770": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5545,
        5554
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5771": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5556,
        5560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5772": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5535,
        5544
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC22"
    },
    "5775": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5535,
        5561
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5776": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5535,
        5561
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5777": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5528,
        5533
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "5779": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5528,
        5533
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5780": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5528,
        5533
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5781": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5783": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5784": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5785": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5786": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xB"
    },
    "5788": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5790": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5791": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5793": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5794": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5795": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5534
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5796": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5561
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5797": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5561
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5798": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5561
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5799": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5519,
        5561
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5800": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5586
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 50,
      "value": "0x12"
    },
    "5802": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5586
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5803": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5614,
        5619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5804": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5614,
        5619
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5805": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5605,
        5620
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5806": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5605,
        5620
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5807": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5605,
        5620
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5808": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5605,
        5620
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5809": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5605,
        5620
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5810": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5605,
        5620
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5811": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5812": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5813": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "5818": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5820": {
      "op": "SHL"
    },
    "5821": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5822": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5825": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5827": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5829": {
      "op": "SHL"
    },
    "5830": {
      "op": "SUB"
    },
    "5831": {
      "op": "DUP7"
    },
    "5832": {
      "op": "DUP2"
    },
    "5833": {
      "op": "AND"
    },
    "5834": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5836": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5837": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "ADD",
      "path": "0"
    },
    "5838": {
      "op": "MSTORE"
    },
    "5839": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5841": {
      "op": "DUP3"
    },
    "5842": {
      "op": "ADD"
    },
    "5843": {
      "op": "SWAP4"
    },
    "5844": {
      "op": "SWAP1"
    },
    "5845": {
      "op": "SWAP4"
    },
    "5846": {
      "op": "MSTORE"
    },
    "5847": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5586
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5848": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5586
      ],
      "op": "AND",
      "path": "0"
    },
    "5849": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5586
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5850": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5595
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA9059CBB"
    },
    "5855": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5595
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5856": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5858": {
      "op": "ADD"
    },
    "5859": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5861": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5863": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5864": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5865": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5866": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "SUB",
      "path": "0"
    },
    "5867": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5868": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5870": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5871": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "GAS",
      "path": "0"
    },
    "5872": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "CALL",
      "path": "0"
    },
    "5873": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5874": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5875": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5876": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1701"
    },
    "5879": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5880": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5881": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5883": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5884": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "5885": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5886": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5888": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "REVERT",
      "path": "0"
    },
    "5889": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5890": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "POP",
      "path": "0"
    },
    "5891": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "POP",
      "path": "0"
    },
    "5892": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "POP",
      "path": "0"
    },
    "5893": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "POP",
      "path": "0"
    },
    "5894": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5896": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5897": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5898": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "5900": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "NOT",
      "path": "0"
    },
    "5901": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "5903": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5904": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "ADD",
      "path": "0"
    },
    "5905": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "AND",
      "path": "0"
    },
    "5906": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5907": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "ADD",
      "path": "0"
    },
    "5908": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5909": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5911": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5912": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "POP",
      "path": "0"
    },
    "5913": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5914": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "ADD",
      "path": "0"
    },
    "5915": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5916": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1725"
    },
    "5919": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5920": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5921": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "5924": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5575,
        5621
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5925": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5926": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5575,
        5621
      ],
      "op": "POP",
      "path": "0"
    },
    "5927": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5480,
        5726
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17B9"
    },
    "5930": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5480,
        5726
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5931": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5480,
        5726
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5932": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5661
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 51,
      "value": "0x12"
    },
    "5934": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5661
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5935": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5937": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5938": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "5943": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5945": {
      "op": "SHL"
    },
    "5946": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5947": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5948": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5950": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5952": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5954": {
      "op": "SHL"
    },
    "5955": {
      "op": "SUB"
    },
    "5956": {
      "op": "DUP6"
    },
    "5957": {
      "op": "DUP2"
    },
    "5958": {
      "op": "AND"
    },
    "5959": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5961": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5962": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "ADD",
      "path": "0"
    },
    "5963": {
      "op": "MSTORE"
    },
    "5964": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5661
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5966": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5968": {
      "op": "DUP4"
    },
    "5969": {
      "op": "ADD"
    },
    "5970": {
      "op": "MSTORE"
    },
    "5971": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5661
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5972": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5661
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5973": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5661
      ],
      "op": "AND",
      "path": "0"
    },
    "5974": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5661
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5975": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5670
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA9059CBB"
    },
    "5980": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5670
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5981": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5983": {
      "op": "ADD"
    },
    "5984": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5986": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5988": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5989": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5990": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5991": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "SUB",
      "path": "0"
    },
    "5992": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5993": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5995": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5996": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "GAS",
      "path": "0"
    },
    "5997": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "CALL",
      "path": "0"
    },
    "5998": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5999": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP1",
      "path": "0"
    },
    "6000": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "6001": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x177E"
    },
    "6004": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "6005": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "6006": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6008": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP1",
      "path": "0"
    },
    "6009": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "6010": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "6011": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6013": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "REVERT",
      "path": "0"
    },
    "6014": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6015": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "POP",
      "path": "0"
    },
    "6016": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "POP",
      "path": "0"
    },
    "6017": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "POP",
      "path": "0"
    },
    "6018": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "POP",
      "path": "0"
    },
    "6019": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6021": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "6022": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "6023": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "6025": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "NOT",
      "path": "0"
    },
    "6026": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "6028": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6029": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "ADD",
      "path": "0"
    },
    "6030": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "AND",
      "path": "0"
    },
    "6031": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6032": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "ADD",
      "path": "0"
    },
    "6033": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP1",
      "path": "0"
    },
    "6034": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6036": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6037": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "POP",
      "path": "0"
    },
    "6038": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6039": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "ADD",
      "path": "0"
    },
    "6040": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6041": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17A2"
    },
    "6044": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "6045": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6046": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198A"
    },
    "6049": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5650,
        5682
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6050": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5650,
        5682
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6051": {
      "op": "POP"
    },
    "6052": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5705,
        5710
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 52,
      "value": "0x3"
    },
    "6054": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5705,
        5710
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "6055": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6057": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6058": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6059": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6060": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5704
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xB"
    },
    "6062": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "6064": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6065": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6067": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6068": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5711
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "6069": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5714,
        5715
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "6071": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5715
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6072": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5696,
        5715
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "6073": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5480,
        5726
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6074": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5749,
        5758
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 53
    },
    "6075": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xD"
    },
    "6077": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6079": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6080": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6081": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "6082": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17CB"
    },
    "6085": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "6086": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6087": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1973"
    },
    "6090": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5735,
        5758
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6091": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6092": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6093": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "6094": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5735,
        5758
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "6095": {
      "op": "POP"
    },
    "6096": {
      "op": "POP"
    },
    "6097": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6099": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6101": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6103": {
      "op": "SHL"
    },
    "6104": {
      "op": "SUB"
    },
    "6105": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 54
    },
    "6106": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "AND",
      "path": "0"
    },
    "6107": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x24B1C86427A74774A014F51A56EA4641E764A82AEF418326ECF9E634B78F074B"
    },
    "6140": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5784,
        5788
      ],
      "op": "DUP4",
      "path": "0"
    },
    "6141": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5790,
        5804
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1807"
    },
    "6144": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5801,
        5804
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "6146": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5790,
        5800
      ],
      "op": "DUP9",
      "path": "0"
    },
    "6147": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5790,
        5804
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A93"
    },
    "6150": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5790,
        5804
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6151": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5790,
        5804
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6152": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5818,
        5823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "6154": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5818,
        5823
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "6155": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6157": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6158": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6159": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6160": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xB"
    },
    "6162": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "6164": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6165": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6166": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6167": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6169": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "6170": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6171": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6172": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "6173": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5834,
        5849
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "6174": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6175": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "6176": {
      "op": "SWAP6"
    },
    "6177": {
      "op": "DUP7"
    },
    "6178": {
      "op": "MSTORE"
    },
    "6179": {
      "op": "SWAP1"
    },
    "6180": {
      "op": "DUP6"
    },
    "6181": {
      "op": "ADD"
    },
    "6182": {
      "op": "SWAP4"
    },
    "6183": {
      "op": "SWAP1"
    },
    "6184": {
      "op": "SWAP4"
    },
    "6185": {
      "op": "MSTORE"
    },
    "6186": {
      "op": "DUP4"
    },
    "6187": {
      "op": "ADD"
    },
    "6188": {
      "op": "DUP7"
    },
    "6189": {
      "op": "SWAP1"
    },
    "6190": {
      "op": "MSTORE"
    },
    "6191": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6193": {
      "op": "DUP4"
    },
    "6194": {
      "op": "ADD"
    },
    "6195": {
      "op": "MSTORE"
    },
    "6196": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6198": {
      "op": "DUP3"
    },
    "6199": {
      "op": "ADD"
    },
    "6200": {
      "op": "MSTORE"
    },
    "6201": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6203": {
      "op": "ADD"
    },
    "6204": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6206": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "6207": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "DUP1",
      "path": "0"
    },
    "6208": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "6209": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "SUB",
      "path": "0"
    },
    "6210": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6211": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5773,
        5850
      ],
      "op": "LOG2",
      "path": "0"
    },
    "6212": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5865
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 55,
      "value": "0x3"
    },
    "6214": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "DUP1",
      "path": "0"
    },
    "6215": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "6216": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6217": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "6219": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1853"
    },
    "6222": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "DUP4",
      "path": "0"
    },
    "6223": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A30"
    },
    "6226": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "i",
      "offset": [
        5860,
        5867
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6227": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6228": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "6229": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6230": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "POP",
      "path": "0"
    },
    "6231": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "6232": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5860,
        5867
      ],
      "op": "POP",
      "path": "0"
    },
    "6233": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5116,
        5874
      ],
      "op": "POP",
      "path": "0"
    },
    "6234": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5116,
        5874
      ],
      "op": "POP",
      "path": "0"
    },
    "6235": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5116,
        5874
      ],
      "op": "POP",
      "path": "0"
    },
    "6236": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5032,
        5874
      ],
      "op": "POP",
      "path": "0"
    },
    "6237": {
      "fn": "ForgeGuess.fulfillRandomness",
      "offset": [
        5032,
        5874
      ],
      "op": "POP",
      "path": "0"
    },
    "6238": {
      "fn": "ForgeGuess.fulfillRandomness",
      "jump": "o",
      "offset": [
        5032,
        5874
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6239": {
      "op": "JUMPDEST"
    },
    "6240": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6242": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6244": {
      "op": "DUP3"
    },
    "6245": {
      "op": "DUP5"
    },
    "6246": {
      "op": "SUB"
    },
    "6247": {
      "op": "SLT"
    },
    "6248": {
      "op": "ISZERO"
    },
    "6249": {
      "op": "PUSH2",
      "value": "0x1871"
    },
    "6252": {
      "op": "JUMPI"
    },
    "6253": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6255": {
      "op": "DUP1"
    },
    "6256": {
      "op": "REVERT"
    },
    "6257": {
      "op": "JUMPDEST"
    },
    "6258": {
      "op": "POP"
    },
    "6259": {
      "op": "CALLDATALOAD"
    },
    "6260": {
      "op": "SWAP2"
    },
    "6261": {
      "op": "SWAP1"
    },
    "6262": {
      "op": "POP"
    },
    "6263": {
      "jump": "o",
      "op": "JUMP"
    },
    "6264": {
      "op": "JUMPDEST"
    },
    "6265": {
      "op": "DUP1"
    },
    "6266": {
      "op": "CALLDATALOAD"
    },
    "6267": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6269": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6271": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6273": {
      "op": "SHL"
    },
    "6274": {
      "op": "SUB"
    },
    "6275": {
      "op": "DUP2"
    },
    "6276": {
      "op": "AND"
    },
    "6277": {
      "op": "DUP2"
    },
    "6278": {
      "op": "EQ"
    },
    "6279": {
      "op": "PUSH2",
      "value": "0x188F"
    },
    "6282": {
      "op": "JUMPI"
    },
    "6283": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6285": {
      "op": "DUP1"
    },
    "6286": {
      "op": "REVERT"
    },
    "6287": {
      "op": "JUMPDEST"
    },
    "6288": {
      "op": "SWAP2"
    },
    "6289": {
      "op": "SWAP1"
    },
    "6290": {
      "op": "POP"
    },
    "6291": {
      "jump": "o",
      "op": "JUMP"
    },
    "6292": {
      "op": "JUMPDEST"
    },
    "6293": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6295": {
      "op": "DUP1"
    },
    "6296": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6298": {
      "op": "DUP4"
    },
    "6299": {
      "op": "DUP6"
    },
    "6300": {
      "op": "SUB"
    },
    "6301": {
      "op": "SLT"
    },
    "6302": {
      "op": "ISZERO"
    },
    "6303": {
      "op": "PUSH2",
      "value": "0x18A7"
    },
    "6306": {
      "op": "JUMPI"
    },
    "6307": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6309": {
      "op": "DUP1"
    },
    "6310": {
      "op": "REVERT"
    },
    "6311": {
      "op": "JUMPDEST"
    },
    "6312": {
      "op": "PUSH2",
      "value": "0x18B0"
    },
    "6315": {
      "op": "DUP4"
    },
    "6316": {
      "op": "PUSH2",
      "value": "0x1878"
    },
    "6319": {
      "jump": "i",
      "op": "JUMP"
    },
    "6320": {
      "op": "JUMPDEST"
    },
    "6321": {
      "op": "SWAP5"
    },
    "6322": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6324": {
      "op": "SWAP4"
    },
    "6325": {
      "op": "SWAP1"
    },
    "6326": {
      "op": "SWAP4"
    },
    "6327": {
      "op": "ADD"
    },
    "6328": {
      "op": "CALLDATALOAD"
    },
    "6329": {
      "op": "SWAP4"
    },
    "6330": {
      "op": "POP"
    },
    "6331": {
      "op": "POP"
    },
    "6332": {
      "op": "POP"
    },
    "6333": {
      "jump": "o",
      "op": "JUMP"
    },
    "6334": {
      "op": "JUMPDEST"
    },
    "6335": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6337": {
      "op": "DUP1"
    },
    "6338": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6340": {
      "op": "DUP4"
    },
    "6341": {
      "op": "DUP6"
    },
    "6342": {
      "op": "SUB"
    },
    "6343": {
      "op": "SLT"
    },
    "6344": {
      "op": "ISZERO"
    },
    "6345": {
      "op": "PUSH2",
      "value": "0x18D1"
    },
    "6348": {
      "op": "JUMPI"
    },
    "6349": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6351": {
      "op": "DUP1"
    },
    "6352": {
      "op": "REVERT"
    },
    "6353": {
      "op": "JUMPDEST"
    },
    "6354": {
      "op": "POP"
    },
    "6355": {
      "op": "POP"
    },
    "6356": {
      "op": "DUP1"
    },
    "6357": {
      "op": "CALLDATALOAD"
    },
    "6358": {
      "op": "SWAP3"
    },
    "6359": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6361": {
      "op": "SWAP1"
    },
    "6362": {
      "op": "SWAP2"
    },
    "6363": {
      "op": "ADD"
    },
    "6364": {
      "op": "CALLDATALOAD"
    },
    "6365": {
      "op": "SWAP2"
    },
    "6366": {
      "op": "POP"
    },
    "6367": {
      "jump": "o",
      "op": "JUMP"
    },
    "6368": {
      "op": "JUMPDEST"
    },
    "6369": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6371": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6373": {
      "op": "DUP3"
    },
    "6374": {
      "op": "DUP5"
    },
    "6375": {
      "op": "SUB"
    },
    "6376": {
      "op": "SLT"
    },
    "6377": {
      "op": "ISZERO"
    },
    "6378": {
      "op": "PUSH2",
      "value": "0x18F2"
    },
    "6381": {
      "op": "JUMPI"
    },
    "6382": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6384": {
      "op": "DUP1"
    },
    "6385": {
      "op": "REVERT"
    },
    "6386": {
      "op": "JUMPDEST"
    },
    "6387": {
      "op": "PUSH2",
      "value": "0x1439"
    },
    "6390": {
      "op": "DUP3"
    },
    "6391": {
      "op": "PUSH2",
      "value": "0x1878"
    },
    "6394": {
      "jump": "i",
      "op": "JUMP"
    },
    "6395": {
      "op": "JUMPDEST"
    },
    "6396": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6401": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6403": {
      "op": "SHL"
    },
    "6404": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6406": {
      "op": "MSTORE"
    },
    "6407": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "6409": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6411": {
      "op": "MSTORE"
    },
    "6412": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6414": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6416": {
      "op": "REVERT"
    },
    "6417": {
      "op": "JUMPDEST"
    },
    "6418": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6420": {
      "op": "DUP2"
    },
    "6421": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6423": {
      "op": "NOT"
    },
    "6424": {
      "op": "DIV"
    },
    "6425": {
      "op": "DUP4"
    },
    "6426": {
      "op": "GT"
    },
    "6427": {
      "op": "DUP3"
    },
    "6428": {
      "op": "ISZERO"
    },
    "6429": {
      "op": "ISZERO"
    },
    "6430": {
      "op": "AND"
    },
    "6431": {
      "op": "ISZERO"
    },
    "6432": {
      "op": "PUSH2",
      "value": "0x192B"
    },
    "6435": {
      "op": "JUMPI"
    },
    "6436": {
      "op": "PUSH2",
      "value": "0x192B"
    },
    "6439": {
      "op": "PUSH2",
      "value": "0x18FB"
    },
    "6442": {
      "jump": "i",
      "op": "JUMP"
    },
    "6443": {
      "op": "JUMPDEST"
    },
    "6444": {
      "op": "POP"
    },
    "6445": {
      "op": "MUL"
    },
    "6446": {
      "op": "SWAP1"
    },
    "6447": {
      "jump": "o",
      "op": "JUMP"
    },
    "6448": {
      "op": "JUMPDEST"
    },
    "6449": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6454": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6456": {
      "op": "SHL"
    },
    "6457": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6459": {
      "op": "MSTORE"
    },
    "6460": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "6462": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6464": {
      "op": "MSTORE"
    },
    "6465": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6467": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6469": {
      "op": "REVERT"
    },
    "6470": {
      "op": "JUMPDEST"
    },
    "6471": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6473": {
      "op": "DUP3"
    },
    "6474": {
      "op": "PUSH2",
      "value": "0x1955"
    },
    "6477": {
      "op": "JUMPI"
    },
    "6478": {
      "op": "PUSH2",
      "value": "0x1955"
    },
    "6481": {
      "op": "PUSH2",
      "value": "0x1930"
    },
    "6484": {
      "jump": "i",
      "op": "JUMP"
    },
    "6485": {
      "op": "JUMPDEST"
    },
    "6486": {
      "op": "POP"
    },
    "6487": {
      "op": "DIV"
    },
    "6488": {
      "op": "SWAP1"
    },
    "6489": {
      "jump": "o",
      "op": "JUMP"
    },
    "6490": {
      "op": "JUMPDEST"
    },
    "6491": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6493": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6495": {
      "op": "DUP3"
    },
    "6496": {
      "op": "DUP5"
    },
    "6497": {
      "op": "SUB"
    },
    "6498": {
      "op": "SLT"
    },
    "6499": {
      "op": "ISZERO"
    },
    "6500": {
      "op": "PUSH2",
      "value": "0x196C"
    },
    "6503": {
      "op": "JUMPI"
    },
    "6504": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6506": {
      "op": "DUP1"
    },
    "6507": {
      "op": "REVERT"
    },
    "6508": {
      "op": "JUMPDEST"
    },
    "6509": {
      "op": "POP"
    },
    "6510": {
      "op": "MLOAD"
    },
    "6511": {
      "op": "SWAP2"
    },
    "6512": {
      "op": "SWAP1"
    },
    "6513": {
      "op": "POP"
    },
    "6514": {
      "jump": "o",
      "op": "JUMP"
    },
    "6515": {
      "op": "JUMPDEST"
    },
    "6516": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6518": {
      "op": "DUP3"
    },
    "6519": {
      "op": "DUP3"
    },
    "6520": {
      "op": "LT"
    },
    "6521": {
      "op": "ISZERO"
    },
    "6522": {
      "op": "PUSH2",
      "value": "0x1985"
    },
    "6525": {
      "op": "JUMPI"
    },
    "6526": {
      "op": "PUSH2",
      "value": "0x1985"
    },
    "6529": {
      "op": "PUSH2",
      "value": "0x18FB"
    },
    "6532": {
      "jump": "i",
      "op": "JUMP"
    },
    "6533": {
      "op": "JUMPDEST"
    },
    "6534": {
      "op": "POP"
    },
    "6535": {
      "op": "SUB"
    },
    "6536": {
      "op": "SWAP1"
    },
    "6537": {
      "jump": "o",
      "op": "JUMP"
    },
    "6538": {
      "op": "JUMPDEST"
    },
    "6539": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6541": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6543": {
      "op": "DUP3"
    },
    "6544": {
      "op": "DUP5"
    },
    "6545": {
      "op": "SUB"
    },
    "6546": {
      "op": "SLT"
    },
    "6547": {
      "op": "ISZERO"
    },
    "6548": {
      "op": "PUSH2",
      "value": "0x199C"
    },
    "6551": {
      "op": "JUMPI"
    },
    "6552": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6554": {
      "op": "DUP1"
    },
    "6555": {
      "op": "REVERT"
    },
    "6556": {
      "op": "JUMPDEST"
    },
    "6557": {
      "op": "DUP2"
    },
    "6558": {
      "op": "MLOAD"
    },
    "6559": {
      "op": "DUP1"
    },
    "6560": {
      "op": "ISZERO"
    },
    "6561": {
      "op": "ISZERO"
    },
    "6562": {
      "op": "DUP2"
    },
    "6563": {
      "op": "EQ"
    },
    "6564": {
      "op": "PUSH2",
      "value": "0x1439"
    },
    "6567": {
      "op": "JUMPI"
    },
    "6568": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6570": {
      "op": "DUP1"
    },
    "6571": {
      "op": "REVERT"
    },
    "6572": {
      "op": "JUMPDEST"
    },
    "6573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6577": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6579": {
      "op": "SHL"
    },
    "6580": {
      "op": "SUB"
    },
    "6581": {
      "op": "SWAP4"
    },
    "6582": {
      "op": "DUP5"
    },
    "6583": {
      "op": "AND"
    },
    "6584": {
      "op": "DUP2"
    },
    "6585": {
      "op": "MSTORE"
    },
    "6586": {
      "op": "SWAP2"
    },
    "6587": {
      "op": "SWAP1"
    },
    "6588": {
      "op": "SWAP3"
    },
    "6589": {
      "op": "AND"
    },
    "6590": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6592": {
      "op": "DUP3"
    },
    "6593": {
      "op": "ADD"
    },
    "6594": {
      "op": "MSTORE"
    },
    "6595": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6597": {
      "op": "DUP2"
    },
    "6598": {
      "op": "ADD"
    },
    "6599": {
      "op": "SWAP2"
    },
    "6600": {
      "op": "SWAP1"
    },
    "6601": {
      "op": "SWAP2"
    },
    "6602": {
      "op": "MSTORE"
    },
    "6603": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6605": {
      "op": "ADD"
    },
    "6606": {
      "op": "SWAP1"
    },
    "6607": {
      "jump": "o",
      "op": "JUMP"
    },
    "6608": {
      "op": "JUMPDEST"
    },
    "6609": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6611": {
      "op": "DUP2"
    },
    "6612": {
      "op": "MLOAD"
    },
    "6613": {
      "op": "DUP1"
    },
    "6614": {
      "op": "DUP5"
    },
    "6615": {
      "op": "MSTORE"
    },
    "6616": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6618": {
      "op": "JUMPDEST"
    },
    "6619": {
      "op": "DUP2"
    },
    "6620": {
      "op": "DUP2"
    },
    "6621": {
      "op": "LT"
    },
    "6622": {
      "op": "ISZERO"
    },
    "6623": {
      "op": "PUSH2",
      "value": "0x19F6"
    },
    "6626": {
      "op": "JUMPI"
    },
    "6627": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6629": {
      "op": "DUP2"
    },
    "6630": {
      "op": "DUP6"
    },
    "6631": {
      "op": "ADD"
    },
    "6632": {
      "op": "DUP2"
    },
    "6633": {
      "op": "ADD"
    },
    "6634": {
      "op": "MLOAD"
    },
    "6635": {
      "op": "DUP7"
    },
    "6636": {
      "op": "DUP4"
    },
    "6637": {
      "op": "ADD"
    },
    "6638": {
      "op": "DUP3"
    },
    "6639": {
      "op": "ADD"
    },
    "6640": {
      "op": "MSTORE"
    },
    "6641": {
      "op": "ADD"
    },
    "6642": {
      "op": "PUSH2",
      "value": "0x19DA"
    },
    "6645": {
      "op": "JUMP"
    },
    "6646": {
      "op": "JUMPDEST"
    },
    "6647": {
      "op": "DUP2"
    },
    "6648": {
      "op": "DUP2"
    },
    "6649": {
      "op": "GT"
    },
    "6650": {
      "op": "ISZERO"
    },
    "6651": {
      "op": "PUSH2",
      "value": "0x1A08"
    },
    "6654": {
      "op": "JUMPI"
    },
    "6655": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6657": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6659": {
      "op": "DUP4"
    },
    "6660": {
      "op": "DUP8"
    },
    "6661": {
      "op": "ADD"
    },
    "6662": {
      "op": "ADD"
    },
    "6663": {
      "op": "MSTORE"
    },
    "6664": {
      "op": "JUMPDEST"
    },
    "6665": {
      "op": "POP"
    },
    "6666": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6668": {
      "op": "ADD"
    },
    "6669": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6671": {
      "op": "NOT"
    },
    "6672": {
      "op": "AND"
    },
    "6673": {
      "op": "SWAP3"
    },
    "6674": {
      "op": "SWAP1"
    },
    "6675": {
      "op": "SWAP3"
    },
    "6676": {
      "op": "ADD"
    },
    "6677": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6679": {
      "op": "ADD"
    },
    "6680": {
      "op": "SWAP3"
    },
    "6681": {
      "op": "SWAP2"
    },
    "6682": {
      "op": "POP"
    },
    "6683": {
      "op": "POP"
    },
    "6684": {
      "jump": "o",
      "op": "JUMP"
    },
    "6685": {
      "op": "JUMPDEST"
    },
    "6686": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6688": {
      "op": "DUP2"
    },
    "6689": {
      "op": "MSTORE"
    },
    "6690": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6692": {
      "op": "PUSH2",
      "value": "0x1439"
    },
    "6695": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6697": {
      "op": "DUP4"
    },
    "6698": {
      "op": "ADD"
    },
    "6699": {
      "op": "DUP5"
    },
    "6700": {
      "op": "PUSH2",
      "value": "0x19D0"
    },
    "6703": {
      "jump": "i",
      "op": "JUMP"
    },
    "6704": {
      "op": "JUMPDEST"
    },
    "6705": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6707": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6709": {
      "op": "NOT"
    },
    "6710": {
      "op": "DUP3"
    },
    "6711": {
      "op": "EQ"
    },
    "6712": {
      "op": "ISZERO"
    },
    "6713": {
      "op": "PUSH2",
      "value": "0x1A44"
    },
    "6716": {
      "op": "JUMPI"
    },
    "6717": {
      "op": "PUSH2",
      "value": "0x1A44"
    },
    "6720": {
      "op": "PUSH2",
      "value": "0x18FB"
    },
    "6723": {
      "jump": "i",
      "op": "JUMP"
    },
    "6724": {
      "op": "JUMPDEST"
    },
    "6725": {
      "op": "POP"
    },
    "6726": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6728": {
      "op": "ADD"
    },
    "6729": {
      "op": "SWAP1"
    },
    "6730": {
      "jump": "o",
      "op": "JUMP"
    },
    "6731": {
      "op": "JUMPDEST"
    },
    "6732": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6734": {
      "op": "DUP3"
    },
    "6735": {
      "op": "NOT"
    },
    "6736": {
      "op": "DUP3"
    },
    "6737": {
      "op": "GT"
    },
    "6738": {
      "op": "ISZERO"
    },
    "6739": {
      "op": "PUSH2",
      "value": "0x1A5E"
    },
    "6742": {
      "op": "JUMPI"
    },
    "6743": {
      "op": "PUSH2",
      "value": "0x1A5E"
    },
    "6746": {
      "op": "PUSH2",
      "value": "0x18FB"
    },
    "6749": {
      "jump": "i",
      "op": "JUMP"
    },
    "6750": {
      "op": "JUMPDEST"
    },
    "6751": {
      "op": "POP"
    },
    "6752": {
      "op": "ADD"
    },
    "6753": {
      "op": "SWAP1"
    },
    "6754": {
      "jump": "o",
      "op": "JUMP"
    },
    "6755": {
      "op": "JUMPDEST"
    },
    "6756": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6758": {
      "op": "DUP1"
    },
    "6759": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6761": {
      "op": "SHL"
    },
    "6762": {
      "op": "SUB"
    },
    "6763": {
      "op": "DUP5"
    },
    "6764": {
      "op": "AND"
    },
    "6765": {
      "op": "DUP2"
    },
    "6766": {
      "op": "MSTORE"
    },
    "6767": {
      "op": "DUP3"
    },
    "6768": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6770": {
      "op": "DUP3"
    },
    "6771": {
      "op": "ADD"
    },
    "6772": {
      "op": "MSTORE"
    },
    "6773": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6775": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6777": {
      "op": "DUP3"
    },
    "6778": {
      "op": "ADD"
    },
    "6779": {
      "op": "MSTORE"
    },
    "6780": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6782": {
      "op": "PUSH2",
      "value": "0x1A8A"
    },
    "6785": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6787": {
      "op": "DUP4"
    },
    "6788": {
      "op": "ADD"
    },
    "6789": {
      "op": "DUP5"
    },
    "6790": {
      "op": "PUSH2",
      "value": "0x19D0"
    },
    "6793": {
      "jump": "i",
      "op": "JUMP"
    },
    "6794": {
      "op": "JUMPDEST"
    },
    "6795": {
      "op": "SWAP6"
    },
    "6796": {
      "op": "SWAP5"
    },
    "6797": {
      "op": "POP"
    },
    "6798": {
      "op": "POP"
    },
    "6799": {
      "op": "POP"
    },
    "6800": {
      "op": "POP"
    },
    "6801": {
      "op": "POP"
    },
    "6802": {
      "jump": "o",
      "op": "JUMP"
    },
    "6803": {
      "op": "JUMPDEST"
    },
    "6804": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6806": {
      "op": "DUP3"
    },
    "6807": {
      "op": "PUSH2",
      "value": "0x1AA2"
    },
    "6810": {
      "op": "JUMPI"
    },
    "6811": {
      "op": "PUSH2",
      "value": "0x1AA2"
    },
    "6814": {
      "op": "PUSH2",
      "value": "0x1930"
    },
    "6817": {
      "jump": "i",
      "op": "JUMP"
    },
    "6818": {
      "op": "JUMPDEST"
    },
    "6819": {
      "op": "POP"
    },
    "6820": {
      "op": "MOD"
    },
    "6821": {
      "op": "SWAP1"
    },
    "6822": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "aaf61a2a7cde84db1024fe5aa10d2867369caa46",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./VRFConsumerBase.sol\";\n\n/**\n * THIS IS AN EXAMPLE CONTRACT WHICH USES HARDCODED VALUES FOR CLARITY.\n * PLEASE DO NOT USE THIS CODE IN PRODUCTION.\n */\n\n/**\n * Request testnet LINK and ETH here: https://faucets.chain.link/\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\n */\n interface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ForgeGuess is VRFConsumerBase {\n    \n    bytes32 internal keyHash;\n    uint256 internal fee;\n    uint256 public betid = 0;\n    uint256 public betidIN = 0;\n    //Guess Storage\n    mapping(uint256 => uint256) public betResults;\n    mapping(uint256 => uint256) public betAmt;\n    mapping(uint256 => uint256) public betOdds;\n    mapping(uint256 => uint256) public score;\n    mapping(uint256 => uint256) public score2;\n    mapping(uint256 => address) public betee;\n    mapping(uint256 => uint256) public winnings;\n    uint256 public randomResult;\n    uint256 public unreleased=0;\n    uint256 public totalSupply = 1;\n    uint256 public ratio;\n    uint256 public wagered = 0;\n    mapping(address => uint256) private _balances;\n    IERC20 public stakedToken = IERC20(0x0B72b2Ff0e87ff84EFf98451163B78408486Ee5c);\n    \n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event GuessNote(uint256 UsersGuess, uint256 amount, address indexed user, uint256 betID);\n    event ShowAnswer(uint256 UsersGuess, uint256 Result, uint256 amountWagered, uint256 betID, address indexed AddressOfGuesser, uint256 AmountWon);\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    string constant _transferErrorMessage = \"staked token transfer failed\";\n    \n    /**\n     * Constructor inherits VRFConsumerBase\n     * \n     * Network: Kovan\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\n     */\n    constructor() \n        VRFConsumerBase(\n            0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, // VRF Coordinator\n            0x326C977E6efc84E512bB9C30f76E30c160eD06FB  // LINK Token\n        )\n    {\n        keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;\n        fee = 0.0001 * 10 ** 18; // 0.0001 LINK\n    }\n    \n    /** \n     * Requests randomness \n     */\n    function getRandomNumber(uint256 guess, uint256 amt) public returns (bytes32 requestId) {\n        require(guess<98, \"Must guess lower than 98\");\n        require(stakedToken.transferFrom(msg.sender, address(this), amt), \"Transfer must work\");\n        uint256 lBal = LINK.balanceOf(address(this));\n        if(amt < 1 * 10 ** 18){\n            LINK.transferFrom(msg.sender, address(this), fee);\n        }else if(amt < 50 * 10 ** 18 ){\n            if(betidIN < 1000 && lBal > fee * 9){ \n                LINK.transferFrom(msg.sender, address(this), fee);\n            }\n        }else if(guess <= 93)\n        {\n            if(lBal > fee*11 ){\n                LINK.transferFrom(msg.sender, address(this), fee);\n            }\n        }else\n        {\n            if(lBal > fee*11 ){\n                LINK.transferFrom(msg.sender, address(this), fee);\n            }\n        }\n        require(amt*25/guess <= (stakedToken.balanceOf(address(this)) - unreleased) / 20 , \"Bankroll too low for this bet, Please lower bet\"); //Plays off 1/11th of the bankroll\n        betOdds[betidIN] = guess;\n        betAmt[betidIN] = amt;\n        betee[betidIN] = msg.sender;\n        emit GuessNote(guess, amt, msg.sender, betidIN);\n        betidIN++;\n        unreleased +=  amt;\n        wagered += amt;\n        return requestRandomness(keyHash, fee);\n    }\n\n\n    // Max AMT for a certien guess\n     function MaxINForGuess(uint256 guess) public view returns (uint256){\n         return ((stakedToken.balanceOf(address(this)) - unreleased) / 20) * guess / 25;\n     }\n\n\n    //Incase of Chainlink failure\n    function getBlank() public returns (bytes32 requestId) {\n        LINK.transferFrom(msg.sender, address(this), fee);\n\n        return requestRandomness(keyHash, fee);\n    }\n\n\n    /**\n     * Callback function used by VRF Coordinator\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n        if(betid >= betidIN){\n            return;\n        }\n        require(betid < betidIN, \"Must have new bets\");\n        randomResult = randomness;\n        score[betid] = randomness;\n        betResults[betid] = randomness % 100;\n        address Guesser = betee[betid];\n        uint256 odds = betOdds[betid];\n        uint256 betAmount = betAmt[betid];\n        if(randomness%100 < odds){\n            winnings[betid]=estOUTPUT(betAmount, odds);\n            stakedToken.transfer(Guesser, winnings[betid]);\n        }else{\n            stakedToken.transfer(Guesser, 1);\n            winnings[betid] = 1;\n        }\n        unreleased -= betAmount;\n        emit ShowAnswer(odds, randomness%100, betAmount,  betid, Guesser, winnings[betid]);\n        betid++;\n    }\n\n\n    //Stake and become the house\n    function stakeFor(address forWhom, uint256 amount) public payable virtual {\n        IERC20 st = stakedToken;\n        require(msg.value == 0, \"non-zero eth\");\n        require(amount > 0, \"Cannot stake 0\");\n        unchecked { \n            _balances[forWhom] += amount * totalSupply / (stakedToken.balanceOf(address(this)) - unreleased);\n            totalSupply += amount * totalSupply / (stakedToken.balanceOf(address(this)) - unreleased);\n        }\n        \n        require(st.transferFrom(msg.sender, address(this), amount), _transferErrorMessage);\n            \n        emit Staked(forWhom, amount);\n    }\n\n    //Output Amount of payout based on odds and bet\n    function estOUTPUT(uint256 betAmount, uint256 odds) public view returns (uint256){\n        uint256 ratioz = (stakedToken.balanceOf(address(this)) - unreleased) / betAmount;\n        uint256 estOutput = 0;\n            if(ratioz < 20){\n\n            estOutput = (100 * 93 *  betAmount)/(odds * 100);\n            }else if(ratioz < 50){\n\n            estOutput = (100 * 95 * betAmount)/(odds*100);\n\n            }else if(ratioz < 100){\n\n            estOutput = (100 * 98 * betAmount)/(odds * 100);\n                \n            }else if(ratioz < 150){\n\n            estOutput = (100 * 985 * betAmount)/(odds * 1000);\n                \n            }else if(ratioz < 300){\n\n            estOutput = (100 * 990 * betAmount)/(odds * 1000);\n            }else{\n\n            estOutput = (100 * 995 * betAmount)/(odds * 1000);\n                \n            }\n            return estOutput;\n\n     }\n\n    //Withdrawl Estimator\n    function withEstimator(uint256 amountOut) public view returns (uint256) {\n        uint256 v = 98 * amountOut * ((stakedToken.balanceOf(address(this)) - (unreleased * 5 / 3)) / totalSupply);\n        return v;\n    }\n\n    //Prevents you from withdrawing if large bets in play\n    function perfectWithdraw(uint256 thres)public {\n        if(betidIN - betid < thres ){\n            withdraw(stakedToken.balanceOf(msg.sender));\n        }\n    }\n\n    //2% fee on withdrawls back to holders\n    //Withdrawl function for house\n    function withdraw(uint256 amount) public virtual {\n        require(amount <= _balances[msg.sender], \"withdraw: balance is lower\");\n\n        IERC20 st = stakedToken;\n        uint256 amt = amount * ((stakedToken.balanceOf(address(this)) - (unreleased * 5 / 3)) / totalSupply) ;\n        require(stakedToken.transfer(address(this), (amt / 50)));\n        require(stakedToken.transfer(msg.sender, amt * 49 / 50));\n        unchecked {\n            _balances[msg.sender] -= amount;\n            totalSupply = totalSupply - amount;\n        }\n           \n        emit Withdrawn(msg.sender, amount);\n    }\n}\n",
  "sourceMap": "1104:7494:0:-:0;;;1233:1;1210:24;;;;1240:26;;;;1659:27;;;;1721:1;1692:30;;1754:26;;1837:78;;;-1:-1:-1;;;;;;1837:78:0;1872:42;1837:78;;;2823:340;;;;;;;;;-1:-1:-1;2875:42:0;9489:32:1;;2950:42:0;9528:32:1;;3042:66:0::1;3032:7;:76:::0;3124:17:::1;3118:3;:23:::0;1104:7494;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/Guess.sol",
  "type": "contract"
}