{"version":3,"sources":["features/Header.tsx","eth.png","pow2.png","components/SliderInput.tsx","components/BalanceMsg.tsx","components/ConnectionRequiredMsg.tsx","hooks/useStakeTokens.ts","hooks/AuctionStats.ts","hooks/AuctionStats2.ts","hooks/AuctionStats3.ts","hooks/AuctionStats7.ts","hooks/ApprovStats.ts","hooks/StakeOnly.ts","hooks/useStakingBalance.ts","hooks/try.ts","hooks/useStakingBalance2.ts","hooks/useStakingBalance3.ts","features/yourWallet/StakeForm.tsx","hooks/AuctionStats6.ts","hooks/ApprovStats2.ts","hooks/distAuction2.ts","hooks/useAuctions.ts","hooks/AdvanceAuctions.ts","hooks/try3.ts","hooks/try4.ts","hooks/try2.ts","hooks/AuctionNoApprove.ts","hooks/ApprovOnly2.ts","hooks/AuctionOnly.ts","hooks/distributeReward.ts","hooks/distAuction.ts","hooks/AuctionStats8.ts","hooks/AuctionStats4.ts","hooks/AuctionStats5.ts","features/yourWallet/WalletBalance.tsx","features/yourWallet/YourWallet.tsx","features/tokenFarmContract/Unstake.tsx","hooks/useStakingBalanceOTHER.ts","hooks/useStakingBalanceOTHER3.ts","hooks/useStakingBalanceOTHER4.ts","hooks/useStakingBalance5.ts","hooks/ProofOfWorkStats2.ts","hooks/useStakingBalance6Forged.ts","hooks/useStakingBalance6xBTC.ts","hooks/useStakingBalance4.ts","hooks/useStakingBalanceOTHER2.ts","hooks/useUnstakeTokens.ts","hooks/useUnstakeTokens2.ts","hooks/useUnstakeTokens22.ts","hooks/useUnstakeTokens22Other.ts","hooks/useUnstakeTokens22Otherf.ts","hooks/ApprovOnly.ts","features/tokenFarmContract/TokenFarmContract.tsx","features/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","display","justifyContent","gap","Header","classes","useEthers","account","activateBrowserWallet","deactivate","isConnected","undefined","test","className","Button","color","variant","href","rel","slice","onClick","size","inputsContainer","gridTemplateRows","gridTemplateColumns","slider","SliderInput","sliderMarks","label","id","maxValue","value","onChange","disabled","rest","sliderStep","inputStep","Typography","gutterBottom","Slider","step","event","newValue","max","marks","Input","margin","target","Number","onBlur","inputProps","min","type","alignItems","tokenImg","width","amount","fontWeight","BalanceMsg","tokenImgSrc","component","src","alt","justifyItems","ConnectionRequiredMsg","style","useStakeTokens","tokenAddress","chainId","networkName","helperConfig","LPRewardAddress","brownieConfig","constants","AddressZero","rewardABI","LPFarm","abi","LPFarmInterface","utils","Interface","LPRewardsContract","Contract","useContractFunction","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","Erc20","tokenContract","approveErc20Send","approveErc20State","useState","amountToStake","setAmountToStake","useEffect","status","setState","AuctionStats","address","AuctionAddress","Auctionz","AuctionInterface","useContractCall","method","args","AuctionStats2","Math","round","Date","now","AuctionStats3","test2","stakingBalance","nothing","toString","AuctionStats7","ff2f2","GetApprovalAmt","LPTokenAddresss","Mock","MockInterface","StakeThatCake","unstakeTokensState22v3","useStakingBalance","useUnstakeTokens4","testabi","LPFarmInterface2","mock","useStakingBalance2","useStakingBalance3","flexDirection","maxWidth","StakeForm","token","error","name","zeroxBTCAddress","auctionaddress","LP_token","proofOfWorkAddress","tokenBalance","useTokenBalance","xbtcbalance","notifications","useNotifications","auctionPot","approvalamt","auctionPotYOURS","AuctionStats6","tokenBalancez","aprovamt","approvalamt2","auction","xbtc","GetApprovalAmt2","aprovamt2","currentday","fday","tb","name2","setAmount","eraz","setAmountEra","fmtInputzz","erazz","testz","ex","parseFloat","cdaystring","parseInt","TotalOwedAll","x","startingauction","setAmountz","auctionnumber","setAmountzz","console","log","totalPot","urpercent","urpercentz","numberofAuctions","name23","setName2","name233","setName22","addy","auctionAddress","auc","DistributeAuction2","getAuctionTokens2","AuctionsABI","AuctionContract","stakeTokensState2","useAuctions1","stakeTokensSend2","Addy","era","TokenFarm","tests","fsdfdsfds","str","AdvAuctions","advAuction1","auctionState2","formattedTokenBalance","formatUnits","formattedTokenBalance2","check","useStakeTokens6","stakeTokensSend6","useStakeTokens7","unstakeTokensSend","unstakeTokensState","pow_token","zeroAbi","Zero","xpw","useUnstakeTokens5","b2","AuctionNoApprove","stakeOnlyzAuction","LPAdd","mockABI","Mock0xBTC","mockInterface","ApproveOnlyMax2","b22","unstakeTokensState223z","AuctionThatCake","auctionOnlyz","DistributeReward2","unstakeTokensSend22","DistributeAuction","xxx","xxxx","xxx2","toFixed","percentzz2","percentz","percentzz","coinz","showErc20ApprovalSuccess3","setShowErc20ApprovalSuccess3","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","filter","notification","length","fuck","tva","isMining","isMining2","isMining3","isMining4","isMining6","isMining7","isMining5","isMining51","fuck2","approvetomuch2","hasZeroBalance2","te","endt","cur","hasZeroAmountSelected","timeEnd","timeleft","auctionmsg","tokenBalancef","timelftmsg","sec","secPerDay2","secPerDay","AuctionStats8","hour","teeoff","amt","time","AuctionPlayerStats","teeoff2","AuctionPlayerStats2","totz2","noaucgrab","msgowed","msgowed2","TextField","helperText","placeholder","e","CircularProgress","amountAsWei","parseEther","div","fuck8","ffedf","fsdfosd","maxp","maxapproved","day","mx","decimalsLimit","decimalScale","onValueChange","Snackbar","open","autoHideDuration","onClose","Alert","severity","contentContainer","WalletBalance","image","LPTokenAddress","xbtcTokenAddress","balance22","formattedBalance2","balance223","formattedBalance22","balance3","msg","gezz","formattedBalance3","balance322","formattedBalance32","balance3223","formattedBalance322","image2","imagez","imagezz","tabContent","box","backgroundColor","borderRadius","header","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","Box","TabContext","TabList","map","index","Tab","TabPanel","slider2","Unstake","balance","balance2","stake","stake2","LPRewardAddressOLD","useStakingBalanceOTHER","stake4","useStakingBalanceOTHER3","stake5","useStakingBalanceOTHER4","urshareofpool","stakingBalance2","dead","useStakingBalance5","epoch","zeroAddress","ZeroInterface","ProofOfWorkStats2","oldLP","tokenBalanceOldLP","tokenBalanceStaking","LPTOKEN","stakingBalance3","unibal","urUNIBal","sushiABI","UniV2Pair","sushiInterface","ff2","ddddd","useStakingBalance6Forged","tokenBalanceStakingxBTC","stakingBalance6","ddddd2","useStakingBalance6xBTC","balStakingForge","balStakingxBTC","balOldLP","sharepool","circ","fug","rewardrate2","apyz","apyz22","useStakingBalance4","dayz","circfinal","balanceff","stakeOnlyz","formattedBalanceff","formattedBalanceffff","formattedBalanceffff5","formattedBalance","balance223zz","useStakingBalanceOTHER2","formattedBalance22zz","useUnstakeTokens","useUnstakeTokens2","unstakeTokensSend2","unstakeTokensState2","useUnstakeTokens22","useUnstakeTokens22Other","unstakeTokensSend220","useUnstakeTokens22Otherf","unstakeTokensSend220f","handleUnstakeSubmit22","showUnstakeSuccess","setShowUnstakeSuccess","handleCloseSnack2","showUnstakeSuccess2","setShowUnstakeSuccess2","handleCloseSnack3","b","potineth","mockLPContract","fff","ApproveOnlyMax","msgold","approvetomuch","hastoolittle","isMining8","showErc20ApprovalSuccess33","setShowErc20ApprovalSuccess33","msgbalz","msgBalz2","ps","fuck7","fuck9","ted","zeroBalz","textz","TokenFarmContract","title","palette","common","white","textAlign","Main","eth","pow","supportedTokens2","showNetworkError","setShowNetworkError","handleCloseNetworkError","reason","root","App","DAppProvider","config","supportedChains","ChainId","Polygon","expirationPeriod","checkInterval","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5123029d.chunk.js","sourcesContent":["import { Button, Link, makeStyles} from \"@material-ui/core\"\nimport { useEthers } from \"@usedapp/core\"\n\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4),\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    gap: theme.spacing(1)\n  },\n}))\n\nexport const Header = () => {\n  const classes = useStyles()\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n  var test =\"\"\n  if(isConnected){\n   test = \"https://polygonscan.com/token/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276?a=\"+account;\n}\n  return (\n    <div className={classes.container}>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org\" rel=\"noopener noreferrer\">Home</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://quickswap.exchange/#/swap?inputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978&outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\" rel=\"noopener noreferrer\">Buy Forge</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org/whitepaper.html\"rel=\"noopener noreferrer\">Info</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org/stats.html\" rel=\"noopener noreferrer\">Stats</a>\n      </Button>\n      \n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n          <a  className=\"buttonD\" href={test} rel=\"noopener noreferrer\">{`${account?.slice(0, 4)}...${account?.slice(-3)}`}</a>\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          className=\"buttonW\"\n          color=\"primary\"\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n    </div>\n  )\n}","export default __webpack_public_path__ + \"static/media/eth.6e1743e3.png\";","export default __webpack_public_path__ + \"static/media/pow2.56016ef0.png\";","import React from \"react\";\nimport { Slider, Input, Typography, makeStyles } from \"@material-ui/core\";\n\ninterface SliderInputProps {\n  label?: string;\n  id?: string;\n  maxValue: number;\n  size?: string;\n  value: number | string | (string | number)[];\n  onChange: (newValue: number | string | Array<number | string>) => void;\n  disabled?: boolean;\n  [x: string]: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  inputsContainer: {\n    display: \"grid\",\n    gap: theme.spacing(3),\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: \"1fr auto\",\n  },\n  slider: {},\n}));\n\nexport const SliderInput = ({\n  label = \"\",\n  id = \"input-slider\",\n  maxValue,\n  value,\n  size,\n  onChange,\n  disabled = false,\n  ...rest\n}: SliderInputProps) => {\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    onChange(newValue);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      onChange(0);\n    } else if (value > maxValue) {\n      onChange(maxValue);\n    }\n  };\n\n  const sliderStep = maxValue / 100;\n  const inputStep = maxValue / 50;\n  let sliderMarks\n  const classes = useStyles();\nif(maxValue > 0){\n\n\n  sliderMarks = [\n    {\n      value: 0,\n      label: \"0%\",\n    },   {\n      value: maxValue/4,\n      label: \"25%\",\n    },   {\n      value: maxValue/2,\n      label: \"50%\",\n    },   {\n      value: maxValue*3/4,\n      label: \"75%\",\n    },\n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n}else{\n\n  sliderMarks = [\n    {\n      value: 0,\n      label: \"0%\",\n    },\n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n}\n\n  // ... is a \"Spread\" operator\n  // standard javascript thing\n  // works on iterables\n  // expands a list\n  return (\n    <div {...rest}>\n      {label && (\n        <Typography id={id} gutterBottom>\n          {label}\n        </Typography>\n      )}\n      <div className={classes.inputsContainer}>\n        <div>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            step={sliderStep}\n            onChange={handleSliderChange}\n            aria-labelledby={id}\n            max={maxValue}\n            disabled={disabled}\n            marks={disabled ? [] : sliderMarks}\n          />\n        </div>\n        <div>\n          <Input\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            disabled={disabled}\n            inputProps={{\n              step: inputStep,\n              min: 0,\n              max: maxValue,\n              type: \"number\",\n              \"aria-labelledby\": id,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\"\nimport { Typography, makeStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\"\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    }\n}))\n\ninterface BalanceMsgProps {\n    label: string;\n    amount: number | string;\n    tokenImgSrc: string\n}\n\nexport const BalanceMsg = ({ label, amount, tokenImgSrc }: BalanceMsgProps) => {\n\n    const classes = useStyles()\n\n    return <div className={classes.container}>\n        <Typography component=\"span\">{label}:</Typography>\n        <Typography className={classes.amount} component=\"span\">{amount}</Typography>\n        <img className={classes.tokenImg} src={tokenImgSrc} alt=\"token logo\" />\n    </div>\n}","import React from \"react\";\nimport { Typography, makeStyles, Button } from \"@material-ui/core\";\n\nimport { useEthers } from \"@usedapp/core\"\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"grid\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    gridTemplateRows: \"150px\"\n  },\n}));\n\nexport const ConnectionRequiredMsg = () => {\n  const classes = useStyles();\n\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n  return (     \n      \n      \n      <div className={classes.container}>\n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n            {`${account?.slice(0, 4)}...${account?.slice(-3)}`}\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          className=\"buttonW\"\n          color=\"primary\"\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Typography variant=\"h6\" component=\"span\">Please connect your Metamask account.     <br></br> **Sometimes requires reload after login if not on chrome**\n      <br></br>You must be on POLYGON Network <a href=\"https://chainlist.org/\">Go here to add Polygon</a> \n      <br></br> Search for Polygon in <a href=\"https://chainlist.org/\">Chainlist</a> to add the network \n      </Typography>\n      \n      \n      \n      </div>\n      \n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contract\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(LPRewardsContract, \"stake\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(tokenAddress, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(LPRewardAddress, \"123000000000000000000\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n    var t = account\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"currentDay\",\n        args: [],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats2 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    \n  \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"nextDayTime\",\n        args: [],\n      }) ?? []\n  \n    return time\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats3 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\n    \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, test2 ],\n      }) ?? []\n      \n    return time\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats7 = (ff2f2: Number): number => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\nvar tttt = 0\n\n\nconst [time555] =\nuseContractCall({\n  abi: AuctionInterface,\n  address: AuctionAddress,\n  method: \"getEmissionShare\",\n  args: [1, ff2f2, account],\n}) ?? []\n\n\n  \n\n\n\n    return time555\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Mock from \"../chain-info/AMock.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const GetApprovalAmt = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTokenAddresss = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n\n  const rewardABI = Mock.abi\n  const MockInterface = new utils.Interface(rewardABI)\n    \n  /*\n    const [stakingBalance] =\n      useContractCall({\n        abi: sushiInterface,\n        address: sushi,\n        method: \"allowance\",\n        args: [account, LPRewardAddress],\n      }) ?? []\n      console.log(\"F U \", stakingBalance)\n\n      */\n    const [stakingBalance] =\n    useContractCall({\n      abi: MockInterface,\n      address: LPTokenAddresss,\n      method: \"allowance\",\n      args: [account, LPRewardAddress],\n    }) ?? []\n\t\n    return stakingBalance\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const StakeThatCake = (tokenAddress: string) => {\n  const { chainId} = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n  )  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"stake\", {\n  transactionName: \"Stake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(amount)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  //const { abi } = TokenFarm\n  //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  //const tokenFarmInterface = new utils.Interface(abi)\n\n  //MY STUFF\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n\n\n  \n\n  const [stakingBalance] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"earned\",\n      args: [account],\n    }) ?? []\n  return stakingBalance\n}\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Mock from \"../chain-info/AMock.json\"\n\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens4 = (tokenAddress: string) => {\n  \n  const testabi = Mock.abi\n  const LPFarmInterface2 = new utils.Interface(testabi)\n  const mock = new Contract(\n      tokenAddress, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(mock, \"withdrawToken\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(amount)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance2 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"earned2\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance3 = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n    return stakingBalance\n  }","import React, { useEffect, useState } from \"react\"\nimport { SliderInput } from \"../../components\"\nimport { useEthers, useTokenBalance, useNotifications, addressEqual } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\"\nimport CurrencyInput from 'react-currency-input-field';\nimport { Token } from \"../Main\"\nimport { useStakeTokens,AuctionStats8, ApproveOnlyMax2, DistributeAuction2, DistributeReward2, AuctionStats7, AuctionStats6, AdvAuctions, AuctionNoApprove, GetApprovalAmt2, AuctionThatCake, StakeThatCake,GetApprovalAmt,  DistributeAuction, AuctionPlayerStats2, GetLPStats, useStakeTokens6, useStakeTokens7, AuctionStats, AuctionStats2, useUnstakeTokens4, useUnstakeTokens5, useAuctions1, AuctionStats3, AuctionPlayerStats } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n\n  const { chainId, error } = useEthers()\n  const { address: tokenAddress, name } = token\n  \n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const zeroxBTCAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\nconst proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  const { account } = useEthers()\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n\n  const xbtctokenBalance = useTokenBalance(proofOfWorkAddress, account)\n  const xbtcbalance = useTokenBalance(zeroxBTCAddress, account)\n  const { notifications } = useNotifications()\n  const classes = useStyles()\n  const auctionPot = AuctionStats3(tokenAddress)\n  var approvalamt = GetApprovalAmt(tokenAddress)\n  const auctionPotYOURS = AuctionStats6(tokenAddress)\n  const tokenBalancez = useTokenBalance(LP_token, account);\n\n  let nothing\nvar aprovamt = \"0\"\n//LP Approval\n  if(approvalamt !== nothing)\n{\n    aprovamt = approvalamt.toString()\n}\nvar approvalamt2 = GetApprovalAmt2(tokenAddress)\n\n  //Auction Approval\nvar aprovamt2 = \"0\"\nif(approvalamt2 !== nothing)\n{\n  aprovamt2 = approvalamt2.toString()\n}\n\n  let arrayofdaysauction = []\n  var currentday = 0\n  \n  const fday = AuctionStats(tokenAddress)\n  var maxprevday = \"0\"\n  \n\n  var tb = \"0\"\n  if(tokenBalancez !== nothing)\n  {\n    tb = tokenBalancez.toString()\n  }\n\n  const [name2, setName] = useState(\"\");\n  var [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n    var [amountsdfsd, setAmountsdfsd] =\n      useState<number | string | Array<number | string>>(1)\n    const [amount2, setAmount2] =\n      useState<number | string | Array<number | string>>(0)\n\n  const [eraz, setAmountEra] =\n  useState<string | undefined | Array<number | string>>(\"1\")\n  \n  var [fmtInputzz, setInput] =\n  useState<string | undefined | Array<number | string>>(tb)\n  var fmtInputz = \"2\"\n  if(fmtInputzz !== nothing)\n  {\n    fmtInputz = fmtInputzz.toString();\n  }\n  var erazz = \"1\"\n  if(eraz !== nothing)\n{\n  erazz = eraz.toString()\n}\n  const [paddy, setAddress] =\n  useState<string | undefined | Array<number | string>>(\"0\")\n  //GETS CURRENT day 10 amt\n   var testz = amount.toString()\n   var ex = parseFloat(testz)\n   var ex1 = Math.round(ex)\n\n   //var testing = AuctionPlayerStats(tokenAddress, \"10\")\n   \nvar cdaystring = \"1\"\n\n   if(fday !== nothing )\n   {\n     currentday = parseInt(fday.toString())\n     var temp = currentday - 1 \n     maxprevday = temp.toString()\n      cdaystring = fday.toString()\n \n   }\n   var TotalOwedAll =0\n   var test\n   var adds\n   for(var x =1; x< 25; x++){\n\n    test =  AuctionStats7(x)\n    if(test !== nothing){\n    \n    TotalOwedAll = TotalOwedAll + parseInt(test.toString()) *4\n    }\n   }\n  \n \n\n   var [startingauction, setAmountz] =\n   useState<string | undefined | Array<number | string>>(cdaystring)\n   \n   var [auctionnumber, setAmountzz] =\n   useState<string | undefined | Array<number | string>>(\"1\")\n\n  var daysnow = cdaystring\n\n  console.log(\"startingauction\",startingauction)\n  if(startingauction !== nothing && startingauction < cdaystring)\n{\n  setAmountz(cdaystring)\n}\n  var numberofAuctions = 1\n  if(auctionnumber !== nothing)\n  {\n    numberofAuctions = parseFloat(auctionnumber.toString())\n  }\nif(startingauction !== nothing && numberofAuctions > (600- parseFloat(startingauction.toString()) -1)){\n  numberofAuctions = 600-parseFloat(startingauction.toString()) - 1\n}\n\n    var totalPot\n  var urpercent\n  var urpercentz\n  var [name23, setName2] = useState(account);\n  var [name233, setName22] = useState(account);\n  \n  const { send: getAuctionTokens2, state: unstakeTokensState2za } =\n  DistributeAuction2(name233)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const { send: stakeTokensSend2, state: stakeTokensState2 } =\n    useAuctions1(tokenAddress)\n\n    const { send: advAuction1, state: auctionState2 } =\n    AdvAuctions(tokenAddress, startingauction, numberofAuctions, name23, eraz  )\n\n  \n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n    const formattedTokenBalancezz: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 0))\n    : 0\n\t\n\n\n    var check2 = 0\n    if(formattedTokenBalance > 0)\n    {\n      check2 = formattedTokenBalance\n    }\n\n\n    const formattedTokenBalance2: number = xbtcbalance\n  ? parseFloat(formatUnits(xbtcbalance, 8))\n  : 0 \n  var check = 0\n  if(formattedTokenBalance2 > 0)\n  {\n    check = formattedTokenBalance2\n  }\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n  const handleStakeSubmitzz = () => {\n\n    var fuck7\n  if(typeof amount === 'number')\n  {\n    fuck7 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n  }\n  else{\n    fuck7 =  \"0\"\n  }\n    const amountAsWei = fuck7\n\t\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n\n\n  const handleStakeSubmit2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeTokensSend2(amountAsWei.toString())\n  }\n  //TESTING V\n\n  // advanced auction submit\n\n  const handleStakeSubmitAdvAuction = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return advAuction1(amountAsWei.toString())\n  }\n\n  //sets up LPRewards to run\n\n  const { send: stakeTokensSend6, state: stakeTokensState5 } =\n    useStakeTokens6(tokenAddress)\n\n  const rewardStart = () => {\n    return stakeTokensSend6()\n  }\n\n  const { send: stakeTokensSend7, state: stakeTokensState6 } =\n    useStakeTokens7(tokenAddress)\n\n  const rewardStart2 = () => {\n    return stakeTokensSend7()\n  }\n  //lp run done\n\n\n  //LP faucet\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n  useUnstakeTokens4(tokenAddress)\n\n  //0xBTC faucet\n    const { send: unstakeTokensSend2, state: unstakeTokensState22 } =\n    useUnstakeTokens5(tokenAddress)\n\n    const { send: unstakeTokensSend2z, state: unstakeTokensState221 } =\n    useUnstakeTokens4(zeroxBTCAddress)\n//stake only no approve\n    const { send: stakeOnlyz, state: unstakeTokensState22v3 } =\n    StakeThatCake(tokenAddress)\n\n\n    const { send: stakeOnlyzAuction, state: b2 } =\n    AuctionNoApprove(tokenAddress, startingauction, numberofAuctions, name23, eraz  )\n\n    const { send: maxApprove2, state: b22 } =\n    ApproveOnlyMax2(tokenAddress )\n\nvar account22 = \"0x\"\nuseEffect(() => {\n  // You may want to check that id is truthy first\n  if (account) {\n    setName22(account)\n    setName2(account)\n  }\n}, [account]);\n    const { send: auctionOnlyz, state: unstakeTokensState223z } =\n    AuctionThatCake(tokenAddress)\n//admin\n    const { send: unstakeTokensSend22, state: unstakeTokensState2 } =\n    DistributeReward2(tokenAddress)\n\n    const { send: getAuctionTokens, state: unstakeTokensState2z } =\n    DistributeAuction(tokenAddress)\n\n\n  const faucet = () => {\n  \n    if(amount > 1000){\n      amount = 1000\n    }\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return unstakeTokensSend(amountAsWei.toString())\n  }\n\n  const faucet22 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend22(amountAsWei.toString())\n  }\n\n  const faucet2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend2(amountAsWei.toString())\n  }\n  const faucet23 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend2z(amountAsWei.toString())\n  }\n  const stakeOnly = () => {\n    var fuck9\n    if(typeof amount === 'number')\n    {\n      fuck9 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n    }\n    else{\n      fuck9 =  \"0\"\n    }\n    const amountAsWei = fuck9\n    return stakeOnlyz(amountAsWei.toString())\n  }  \n\n  const auctionOnly2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeOnlyzAuction(amountAsWei.toString())\n  }  \n  const maxApprove = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return maxApprove2(amountAsWei.toString())\n  }  \n  \n  const auctionOnly = () => {\n    var fuck8\n\t\n    if(typeof amount === 'number')\n    {\n      fuck8 =   utils.parseEther(parseFloat(amount.toString()).toFixed(8)).div(1e10)\n    }\n    else{\n      fuck8 =  \"0\"\n    }\n    const amountAsWei = fuck8\n    return auctionOnlyz(amountAsWei.toString())\n  }\n\n\n  const auctiongrab = () => {\n    return getAuctionTokens(name2)\n  }\n  const auctiongrab2 = () => {\n    return getAuctionTokens2(name2)\n  }\n\nvar xxx = \"\"\nvar xxxx = 0\n    if(auctionPotYOURS !== nothing)\n    {\n        xxxx = parseFloat(auctionPotYOURS.toString())\n        xxxx = xxxx/100000000\n\n    }\n    if(auctionPot !== nothing)\n    {\n      totalPot =parseFloat(auctionPot.toString())\n\t  \n      var xxx2 = parseFloat((auctionPot).toString()).toFixed(3)\n      xxx = (parseFloat(xxx2) /  100000000).toString()\n\t  \n      urpercent = (((parseFloat(amount.toString()) + parseFloat(xxxx.toString())) * 100000000) / (totalPot + parseFloat(amount.toString()) *  100000000) * 100)\n    \n      if(xxxx !== 0){\n        urpercentz = ((parseFloat(xxxx.toString()) * 100000000) / (totalPot ) * 100)\n      }\n      else{\n        urpercentz=0\n      }\n\t  \n    }\n    var percentzz2 = 0\n    var percentz = \"0\"\n    if(urpercent !== nothing)\n    {\n    percentz = urpercent.toFixed(2).toString()\n\n    percentzz2 = urpercent\n    }\n    var percentzz = \"0\"\n    if(urpercentz !== nothing)\n    {\n    percentzz = urpercentz.toFixed(2).toString()\n\n    }\n    var coinz = (percentzz2/100 * 8192).toFixed(18)\n\n\n    const [showErc20ApprovalSuccess3, setShowErc20ApprovalSuccess3] =\n    useState(false)\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n\n    showErc20ApprovalSuccess3 && setShowErc20ApprovalSuccess3(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer2\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer23\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess3 && setShowErc20ApprovalSuccess3(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Auction tokens\"\n      ).length > 0\n    ) {\n      if(startingauction !== undefined && cdaystring > startingauction){\n      setAmountz(cdaystring)\n      }\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  const isMining = stakeTokensState.status === \"Mining\"\n  const isMining2 = stakeTokensState2.status === \"Mining\"  \n  const isMining3 = unstakeTokensState.status === \"Mining\"\n  const isMining4 = unstakeTokensState223z.status === \"Mining\"\n  const isMining6 = unstakeTokensState223z.status === \"Mining\"\n  const isMining7 = auctionState2.status === \"Mining\"\n  const isMining5 = b22.status === \"Mining\"\n  const isMining51 = b2.status === \"Mining\"\n  const hasZeroBalance = formattedTokenBalance === 0  \n  var fuck\n  if(typeof amount === 'string')\n  {\n    fuck =  parseFloat(amount).toFixed(8)\n\n  }\n  else{\n    fuck =  parseFloat(amount.toString())\n  }\n  var fuck2 = fuck.toString()\n  var tva \n  var approvetomuch2 = parseFloat(fuck.toString()) * 1e8 > parseFloat(aprovamt2.toString())\n\n  var approvetomuch = parseFloat(fuck2) * (1e18) > parseFloat(aprovamt.toString())\n  const hasZeroBalance2 = check === 0\n  var te = \"0\"\n  if(tokenBalance !== nothing)\n  {\n    te = tokenBalance.toString()\n  }\n  var xbtcte =\"0\"\n  if(formattedTokenBalance2 !== nothing)\n  {\n    xbtcte = formattedTokenBalance2.toString()\n  }\n  const hastoolittle =  parseFloat(te) < parseFloat(fuck2) / 1e18\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var dontshow = true\n\n\n  const timeEnd = AuctionStats2(tokenAddress)\n  var test\n  var endt\n  var cur\n  var timeleft = 0\n\n  var auctionmsg =\"\"\n\n  if(nothing !== timeEnd)\n  {\n    endt = parseInt(timeEnd.toString())\n    cur = Math.round(Date.now() / 1000)\n\n      if((endt - cur) > 0)\n    {\n      timeleft = endt-cur\n    }\n    else{\n      auctionmsg = \"Current Auction is over when one last bid is received. Next auction will then immediately begin\"\n    }\n  }\n  const tokenBalancef = useTokenBalance(LP_token, account);\n\n  const formattedTokenBalancef: number = tokenBalancef\n    ? parseFloat(formatUnits(tokenBalancef, 18))\n    : 0;\n  \nvar timelftmsg = \"0\" \nvar sec = 0\n  var min = 0\n  var secPerDay2 = 0\n\n  const secPerDay = AuctionStats8(LP_token)\n  if(secPerDay !== nothing){\n    secPerDay2=parseInt(secPerDay.toString())\n  }\nif(timeleft > 1)\n{\n \n  var hour = 0\n  if(timeleft > 60)\n  {\n  hour = timeleft / (60*60)\n  \n  min = timeleft / (60)  % 60  \n  sec = timeleft % (60)\n  }\n  //timelftmsg = \"Auction time remaining: \"+timeleft.toFixed(0)+ \" seconds or \"+min.toFixed(0)+\" minutes or \" +hour.toFixed(0)+\" hours\"\n  timelftmsg = \"Auction time remaining =   \"+parseInt(hour.toFixed(2)) + \" Hours: \"+min.toFixed(0)+\" Minutes : \" +sec.toFixed(0)+\" Seconds\"\n}else{\n  timelftmsg =\"Current Auction will end when one last bid is received\"\n}\nif(name2 !== nothing && name2 !==\"\")\n{\n } //auction addy\n\nvar teeoff = AuctionPlayerStats(tokenAddress, name2)\n\nvar teeoff2 = AuctionPlayerStats2(tokenAddress, name2)\nvar f = 0\nif(teeoff !== nothing)\n{\n  f = teeoff2/teeoff * 8192\n } //auction addy\n var totz = 0\n var totz2\n if(auctionnumber !== nothing)\n {\n   if(auctionnumber === \"0\")\n   {\n\n  totz = parseFloat(amount.toString()) /  2\n  totz2 = totz.toFixed(2);\n   }else{\n  totz = parseFloat(amount.toString()) /  parseFloat(auctionnumber.toString())\n  totz2 = totz.toFixed(2);\n   }\n }\n var distanceDays = 0\n if(startingauction !== nothing && auctionnumber !== nothing)\n{\n  distanceDays = parseFloat(startingauction.toString()) + parseFloat(auctionnumber.toString()) -1\n}\nvar noaucgrab = false;\nvar msgowed = TotalOwedAll/10**18\nif(msgowed-parseFloat(coinz)!== 8192 && msgowed-parseFloat(coinz) > 0){\n  var msgowed2 = \"YOU WILL RECEIVE \"+(msgowed-parseFloat(coinz)).toFixed(2)+ \" Forge when you redeem\";\n  noaucgrab = false;\n}else if(msgowed - parseFloat(coinz) > 0){\n  var msgowed2 = \"YOU WILL RECEIVE \"+(msgowed-parseFloat(coinz)).toFixed(2)+ \" Forge when you redeem\";\n  noaucgrab = false;\n}else{\n  var msgowed2 = \"Zero to Claim\";\n  noaucgrab = true;\n\n}\n\nvar saying = \"Grab your Forge Auction #\" +name2 +\" winnings\"\n\n  //REAL Uniswap LP Panel\n  if(token.address === \"0x0000000000000000000000000000000000000001\")\n  {\n    return(\n    <>\n\n    <div style={{display: 'flex', justifyContent: 'center'}}><h2> Auto redeemer for Auction Participants.</h2></div>\n    <h2> {msgowed2}</h2>\n    Input Address to redeem for(USE YOUR ADDRESS if you dont know):<TextField\n\nstyle ={{width: '375px'}}\n        value={name233}\n        helperText=\"You are claiming auctions for this address\"\n        placeholder={account22}\n        label=\"Enter 0x Address:\"\n        onChange={(e) => {\n          setName22(e.target.value);\n        }}\n      />\n    <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={auctiongrab2}\n          disabled={isMining2 || noaucgrab }\n        >\n          {isMining2 ? <CircularProgress size={26} /> : \"Grab ALL Auction winnings at once\"}\n        </Button>\n\n\n    </>\n    )\n\n  }\n//ADMIN ADMIN PANEL\n\nif(token.address === \"0x0000000000000000000000000000000000000000\")\n{\n  if(account !== \"0x543c3F3Ee66Cf54746d4c4011d5cACf544a427f5\"){\n\n  return (\n\n    \n    <>\n    </>\n  )\n  }\n  return (\n\n    \n    <>\n\n            <Button\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            onClick={faucet22}\n            //disabled={isMining}\n\n            disabled={isMining}\n          >\n            {isMining ? <CircularProgress size={26} /> : \"Distribute mined rewards to LP Staking Contract\"}\n          </Button>\n\n          <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={rewardStart}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Start a 9 day reward Period for Staking\"}\n        </Button>        \n        \n\n\n          </>\n      )\n  }\n\n\n  //LP Address\n  if(token.address === auctionaddress)\n{\n  dontshow = false\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif(token.address === proofOfWorkAddress)\n  {\n//faucet here\n\n    return (\n      <>\n      <div className={classes.container}>\n      </div>\n      </>\n      )\n  }\n  if(tokenAddress === zeroxBTCAddress)\n  {\n    //facuet\n  return (\n    <>\n    <div className={classes.container}>\n    <SliderInput\n          label={`Get test tokens ${name}`}     \n           \n          //maxValue={formattedTokenBalance}\n          maxValue={1000}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || (isMining3)}\n        />\n    <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"2Get Test Tokens\"}\n        </Button>\n    </div>\n    </>\n    )\n}\n//mainpage\n\n\n/*MAIN FUCKING PAGE LP PAGE\n\nsdfsdfdsf*/\n  if(te === \"0\")\n  {\n    if(networkName === \"mumbai\")\n    {\n/*\n      return (\n        <>\n          <div className={classes.container}>\n          <a href=\"https://quickswap.exchange/#/swap?outputCurrency=0xc64381719049F6f9D7034587aB6dfB7bff4Fbc52\" target=\"_blank\">BUY FORGE HERE</a>\n  https://quickswap.exchange/#/swap?outputCurrency=0xc64381719049F6f9D7034587aB6dfB7bff4Fbc52\n                <div className=\"App\">\n       <a href=\"https://faucet.polygon.technology/\" target=\"_blank\">Step 1) GET Polygon Testnet Polygon for transaction gas</a>\n       <h1> You have no Liquidity Tokens</h1>\n       <h1> Step 1 & 2 Aquire Forge and 0xBitcoin, for testnet the two last tabs have a way to get you testnet tokens</h1>\n       <h1> Get Liquidity Tokens via Quickswap @ </h1>\n       <h2><a href=\"https://quickswap.exchange/#/add/0x4098D72C0Db0fE0025e1A37c407DF7C1D3751407/0xD5FA53Ab5Cd234676e5c67aE5f13d347b2181eDa\" target=\"_blank\">Deposit 0xBTC + Forge for LP Tokens</a></h2>\n             </div>\n     \n        </div>\n        </>\n        )\n  \n\n\n    }\n    else\n    {\n    return (\n      <>\n        <div className={classes.container}>\n\n              <div className=\"App\">\n          <a href=\"https://faucets.chain.link/\" target=\"_blank\">Step 1) GET Kovan Testnet Ethereum for transaction gas</a>\n           </div>\n          <SliderInput\n            label={`Step two - MOVE SLIDER TO Get tokens, then stake them`}\n            //maxValue={formattedTokenBalance}\n            maxValue={1000}\n            id={`slider-input-${name}`}\n            className={classes.slider}\n            value={amount}\n            onChange={setAmount}\n            //disabled={isMining || hasZeroBalance || dontshow}\n            disabled={isMining || dontshow || (isMining3)}\n          />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          //disabled={isMining || hasZeroAmountSelected}\n          disabled={isMining  || hasZeroAmountSelected || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Get Test Tokens\"}\n        </Button>\n\n      </div>\n      </>\n      )*/\n\n    }\n  }\n\n  if(approvetomuch2){\n\n    tva =         <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={handleStakeSubmit2}\n    disabled={isMining2 || isMining6 || isMining4 || hasZeroAmountSelected || isMining5}\n  >\n    {isMining2 || isMining4 || isMining5? <CircularProgress size={26} /> : \"Approve & Bid 0xBTC for the Auction\"}\n  </Button>\n   }else{\n\n    tva =  <Button\n     color=\"primary\"\n     variant=\"contained\"\n     size=\"large\"\n     onClick={auctionOnly}\n     //disabled={isMining || hasZeroAmountSelected}\n     disabled={isMining || isMining6|| isMining2 ||  (isMining4) ||  hasZeroAmountSelected  || approvetomuch2|| isMining5}\n   >\n     {isMining || isMining3 ||isMining6 || isMining4 || isMining5 ? <CircularProgress size={26} /> : \"Bid on Auction\"}\n   </Button>\n \n   }\n   var fsdfosd = 1\n   if(startingauction !== nothing){\n   fsdfosd = parseInt(numberofAuctions.toString()) -1 + parseInt(startingauction.toString())\n   }\nvar ffedf\nvar maxapproved = 2100000000000000 < parseFloat(aprovamt2.toString())\nvar maxp  \nconsole.log(\"girat\", parseFloat(aprovamt2.toString()))\nif(!maxapproved){\n  maxp=   \"\"\n\n}\n   if(approvetomuch2){\n\n\n\n\n    ffedf=   <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleStakeSubmitAdvAuction}\n          disabled={isMining2  || isMining7 ||  isMining51 ||isMining6 || isMining4 || hasZeroAmountSelected || isMining5}\n        >\n          {isMining2 || isMining4 || isMining51 ||  isMining7 || isMining6  || isMining5? <CircularProgress size={26} /> : \"Approve and Bid 0xBTC for the Auction\"}\n        </Button>\n\n\n\n\n   }else{\n\n\n    ffedf = <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={auctionOnly2}\n    //disabled={isMining || hasZeroAmountSelected}\n    disabled={isMining || isMining51 || isMining7  || isMining6|| (isMining4) ||  hasZeroAmountSelected  || approvetomuch2 || isMining5}\n  >\n    {isMining || isMining3 || isMining51 || isMining7|| isMining6  || isMining4 || isMining5? <CircularProgress size={26} /> : \"Bid on Auctions\"}\n  </Button>\n   }\n  var day = \"Total 0xBTC to bid in Auction #\" + currentday+\" :\"\n  test = <h1>Auction #: {currentday}</h1>\n  var mx = \"\"\n  if(startingauction !== nothing && parseInt(startingauction?.toString()) !== fsdfosd){\n    mx  = \"Auctions #\"+startingauction+\" - \"+fsdfosd\n  }else{\n    mx = \"Auction #\" + startingauction\n  }\n    return(<>\n        \n      <div className={classes.container}>\n      <h1>Auction #: {currentday}</h1>\n      The Advanced Tab allows you to bid on auctions in the future, saving you from bidding every auction</div>\n    \n<Tabs>\n      <TabList><div style={{display: 'flex', justifyContent: 'center'} }>\n\n        <Tab className=\"theTabPanel\">Basic</Tab>\n        <Tab className=\"theTabPanel2\">Advanced</Tab>\n\n</div>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n        \n          <div className={classes.container}>\n      \n            <SliderInput\nclassName=\"BABY\"\n          label={day}\n          maxValue={check}\n          id={`slider-input-${name}`}\n          \n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance2}\n          //disabled={isMining2}\n        />\n        \n        <div> You will receive at most {percentz}% of the current auction or {coinz} Forge</div>\n       <div> {timelftmsg}</div>\n       <progress value={secPerDay2-timeleft} max={secPerDay2}></progress>\n      {tva}\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n            {maxp}\n        </div>\n        <div> Total Size of Current Auction {xxx} 0xBitcoin </div>\n        <h3> You have bid {xxxx} 0xBTC in the current Auction, you will receive {percentzz}% of the 8,192 Forge Tokens, if no one else bids</h3>\n        <div> {auctionmsg}</div>\n      </div>\n    \n        </TabPanel>\n        <TabPanel>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <p>Advanced Future Bidding System</p></div>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n            <h3>Inputs Variables:</h3><br></br></div>\n\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n          <p className=\"myHeader\">Amount - The total amount to be bid in all those auctions combined<br></br>\n          Starting Auction # - The first auction # to start bidding(must be a future auction)<br></br>\n          Total Auctions - The # of total auctions for which you wish to bid<br></br>\n          Era - Which Era you wish to bid on. Remember each Era is ~4 years. First Era is 1<br></br>\n          0x Address - The address with which to bid for. Default is your own<br></br>\n          *Amount per Auction must be greater than 0.33 0xBitcoin<br></br>\n         Ex. Current Auction #1.  I want to bid 1 0xBitcoin on each of the next 3 Auctions, not including this auction.<br></br>\n          Ex. Starting Auction # = 2, Total # Auctions to bid = 3, Amount = 3 0xBitcons</p></div>\n          <div className=\"Bab\" style={{display: 'flex', justifyContent: 'center'}}>\n            <SliderInput\n            size=\"large\"\n          label={\"Total amount of 0xBitcoin to bid\"}\n          maxValue={check}\n          id={`slider-input-${name}`}\n          className=\"DED\"\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance2}\n          //disabled={isMining2}\n        /></div>\n        \n       \n        <div style={{display: 'flex', justifyContent: 'center'}}> Input Starting Auction : \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value = {startingauction?.toString()}\n  placeholder={\"2\"}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountz}\n/>        <br></br></div>\n       \n       <div style={{display: 'flex', justifyContent: 'center'}}> Input Total Number of Auctions: \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value={auctionnumber?.toString()}\n  placeholder={\"2\"}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountzz}\n/>\n<br></br></div>       \n<div style={{display: 'flex', justifyContent: 'center'}}> Input Era: \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value={erazz}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountEra}\n/>\n<br></br></div><div style={{display: 'flex', justifyContent: 'center'}}> \nInput Address to bid for(USE YOUR ADDRESS if you dont know):<TextField\n      style ={{width: '605px'}}\n        value={name23}\n        helperText=\"This is the address your auction winnings will go to\"\n        placeholder={account22}\n        label=\"Enter 0x Address:\"\n        onChange={(e) => {\n          setName2(e.target.value);\n        }}\n      />\n\n      </div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n<h3>After clicking submit, you will bid {totz2} 0xBitcoin Tokens on {auctionnumber} auctions.  {mx}, in Era #{eraz}</h3></div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n{ffedf}\n</div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n{maxp}\n        </div>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n\n\n\n    <Snackbar\n        open={showErc20ApprovalSuccess3}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Max Approved! You may now bid!\n        </Alert>\n      </Snackbar>\n    <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          bid on the auction(s)!!\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Successfully bid on Auction(s)!!\n        </Alert>\n      </Snackbar>\n    \n\n    </>)\n}","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats6 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\n    \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_MemberUnits\",\n        args: [1, test2, account],\n      }) ?? []\n\n    return time\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Mock from \"../chain-info/AMock.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const GetApprovalAmt2 = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const auction = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  //MY STUFF\n\n  const rewardABI = Mock.abi\n  const MockInterface = new utils.Interface(rewardABI)\n    \n  /*\n    const [stakingBalance] =\n      useContractCall({\n        abi: sushiInterface,\n        address: sushi,\n        method: \"allowance\",\n        args: [account, LPRewardAddress],\n      }) ?? []\n      console.log(\"F U \", stakingBalance)\n\n      */\n    const [stakingBalance] =\n    useContractCall({\n      abi: MockInterface,\n      address: xbtc,\n      method: \"allowance\",\n      args: [account, auction],\n    }) ?? []\n\t\n    return stakingBalance\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeAuction2 = (addy: any) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n \n\n  const auctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n\n  const auc = new Contract(\n    auctionAddress, AuctionInterface\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(auc, \"WithdrawEz\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(addy)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useAuctions1 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\n\n  const { send: stakeTokensSend, state: stakeTokensState2 } =\n    useContractFunction(AuctionContract, \"burn0xBTCForMember\", {\n      transactionName: \"Auction tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(xbtc, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer2\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n\n      var str = amount\n      if(6 < 7){\n        str = \"210000000000000000\"\n      }\n\n    return approveErc20Send(AuctionAddress, str)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState2)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState2])\n\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport { AuctionStats } from \"../hooks\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AdvAuctions = (tokenAddress: string, startingauction: any, auctionnumber: any, Addy: any, era: any ) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nlet nothing\nvar tests = \"88\"\nvar fsdfdsfds = AuctionStats(tokenAddress)\nif(fsdfdsfds !== nothing){\n    if(fsdfdsfds>startingauction){\n      tests = fsdfdsfds.toString()\n  \n    }else{\n      tests=startingauction\n  }\n}\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(AuctionContract, \"FutureBurn0xBTCEasier\", {\n      transactionName: \"Auction tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(xbtc, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer2\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(era, tests, auctionnumber, Addy, amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    var str = amount\n    if(7 < 8){\n      str = \"210000000000000000\"\n    }\n\n\n    setAmountToStake(amount)\n    return approveErc20Send(AuctionAddress, str)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n\n\n\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens6 = (tokenAddress: string) => {\n\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"setRewardParamsALL\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"5\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens7 = (tokenAddress: string) => {\n  \n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"Z_setRewardParamsForge\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"4\", \"4\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens5 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n const zeroAbi = Zero.abi\n\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(xpw, \"AOpenMint\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(true, true, account)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport { AuctionStats } from \"../hooks\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AuctionNoApprove = (tokenAddress: string, startingauction: any, auctionnumber: any, Addy: any, era: any ) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(AuctionContract, \"FutureBurn0xBTCEasier\", {\n      transactionName: \"Auction tokens\",\n    })\n    let nothing\nvar tests = \"88\"\nvar fsdfdsfds = AuctionStats(tokenAddress)\nif(fsdfdsfds !== nothing){\nif(fsdfdsfds>startingauction){\n  tests = fsdfdsfds.toString()\n  \n}else{\n  tests=startingauction\n}\n}\n\n    const send =  (amount: string) => {\n\n        return approveErc20Send(era, tests, auctionnumber, Addy, amount)\n      }\n      const [state, setState] = useState(b2)\n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock0xBTC from \"../chain-info/AMock.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const ApproveOnlyMax2 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  var AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const LPAdd = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nconst rewardABI = LPFarm.abi\nconst mockABI = Mock0xBTC.abi\nconst mockInterface = new utils.Interface(mockABI)\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n\nconst mockLPContract = new Contract(\n    LPAdd, mockInterface\n    )\n\nconst mockContract = new Contract(\n    xbtc, mockInterface\n    )\n    var test = mockContract\n    var fff = \"Approve ERC20 transfer23\"\n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(test, \"approve\", {\n      transactionName: fff,\n    })\n\n    const send =  (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(AuctionAddress, \"99999999999999999999999999999999\")\n      }\n      const [state, setState] = useState(b2)\n      \n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AuctionThatCake = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\n\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)  \nconst pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\nconst zeroxBtcAddress  = \"synethix_LP_Rewardaddress\"\nconst zeroxBtcAddress2 = \"0xd7D81bf3cC94439B75C06569F099dEbc33c3EC02\"\nconst zeroAbi = Zero.abi\n\nconst LPFarmInterface2 = new utils.Interface(zeroAbi)\n\nconst xpw = new Contract(\n    pow_token, LPFarmInterface2\n)\n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState223z } =\nuseContractFunction(AuctionContract, \"burn0xBTCForMember\", {\n  transactionName: \"Auction tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(account, amount)\n}\nconst [state, setState] = useState(unstakeTokensState223z)\n\nuseEffect(() => {\n    setState(unstakeTokensState223z)\n\n}, [unstakeTokensState223z])\n\t\nreturn { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeReward2 = (tokenAddress: string) => {\n  const { chainId} = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n const zeroAbi = Zero.abi\n\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(xpw, \"ARewardSender\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send()\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeAuction = (addy: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n \n\n  const auctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n\n  const auc = new Contract(\n    auctionAddress, AuctionInterface\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  \n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(auc, \"WithdrawEz\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(addy)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats8 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n  var t = account\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"secondsPerDay\",\n        args: [],\n      }) ?? []\n  \n    return stakingBalance\n  }","import Auctionz from \"../chain-info/Auctions.json\"\nimport { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionPlayerStats = (address: string, amt: string )  => {\n  const { chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\nconst zeroAbi = Zero.abi\n\n\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\nvar test = 0\n\n  let nothing\n  if(amt !== nothing && amt !== \"\")\n  {\n    test = parseInt(amt)\n\n    \n  }\n\n  const [time] =\n  useContractCall({\n    abi: AuctionInterface,\n    address: AuctionAddress,\n    method: \"mapEraDay_Units\",\n    args: [1, test],\n  }) ?? []\n\n  var ex = parseFloat(amt)\n  var ex1 = Math.round(ex)\n\n\n  return time\n}\n\n/*\n\n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, 10],\n      }) ?? []\n*/\n      ","import Auctionz from \"../chain-info/Auctions.json\"\nimport { useContractCall, useEthers} from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionPlayerStats2 = (address: string, amt: string )  => {\n  const { account, chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  const zeroAbi = Zero.abi\n\n\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\nvar test = 0\n\n  let nothing\n  if(amt !== nothing && amt !== \"\")\n  {\n    test = parseInt(amt)\n\n    \n  }\n\t\n  const [time] =\n  useContractCall({\n    abi: AuctionInterface,\n    address: AuctionAddress,\n    method: \"mapEraDay_MemberUnits\",\n    args: [1, test, account],\n  }) ?? []\n\n  var ex = parseFloat(amt)\n  var ex1 = Math.round(ex)\n\n\n  return time\n}\n\n/*\n\n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, 10],\n      }) ?? []\n*/\n      ","import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\nimport {useStakingBalance, useStakingBalance2, useUnstakeTokens2, useStakingBalance3} from \"../../hooks\"\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n\n  const { chainId, error } = useEthers()\n  const { image, address, name } = token;\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LPTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const xbtcTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  // wtf is this? \n  const classes = useStyles()\n  const { account } = useEthers();\n  const tokenBalance = useTokenBalance(LPTokenAddress, account);\n\n  const tokenBalancez = useTokenBalance(xbtcTokenAddress, account);\n\n  var balance22 = useTokenBalance(xbtcTokenAddress, account);\n\n  const formattedBalance2: number = balance22\n  ? parseFloat(formatUnits(balance22, 8))\n  : 0\n\n  var balance223 = useTokenBalance(proofOfWorkAddress, account);\n\n  const formattedBalance22: number = balance223\n  ? parseFloat(formatUnits(balance223, 18))\n  : 0\n  const vfd = useTokenBalance(LPTokenAddress, account)\n  const stake = useStakingBalance3(LPTokenAddress)\n  var balance3 = stake\n  console.log(\"ffd\", balance3)\n  const formattedBalance3: number = balance3\n  ? parseFloat(formatUnits(balance3, 18))\n  : 0\n  var balance322 = useStakingBalance2(xbtcTokenAddress)\n\n  const formattedBalance32: number = balance322\n  ? parseFloat(formatUnits(balance322, 18))\n  : 0\n\n  var balance3223 = useStakingBalance(proofOfWorkAddress)\n\n  const formattedBalance322: number = balance3223\n  ? parseFloat(formatUnits(balance3223, 18))\n  : 0\n\n  var image2 = '/static/media/eth.6e1743e3.png'\n  var imagez = '/static/media/pow2.56016ef0.png'\n  var imagezz = '/static/media/dai.a2c311e8.png'\n  \n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n    if(token.address === auctionaddress)\n    {\n      return (\n        \n        <BalanceMsg\n          label={`Your 0xBitcoin balance`}\n          amount={formattedBalance2}\n          tokenImgSrc={imagezz}\n        />\n      );\n    }\n    if(token.address === LPTokenAddress)\n    {\n      var msg\n      //if(formattedBalance2 == 0){\n        \n        msg = <a href=\"https://quickswap.exchange/#/swap?outputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978\" >Click Here to buy 0xBitcoin Tokens on Quickswap</a>\n     // }\n  \n      return (<>\n      <div><h2>{msg}</h2></div>\n         <BalanceMsg\n            label={`Your 0xBitcoin balance`}\n            amount={formattedBalance2}\n            tokenImgSrc={imagezz}\n          /></>\n      );\n    }\n    if(token.address === xbtcTokenAddress)\n    {\n  return (     \n    <BalanceMsg\n      label={`Your ${name} balance`}\n      amount={formattedBalance2}\n      tokenImgSrc={image}\n    />\n  );\n    }\nvar gezz\n    if(formattedTokenBalance > 0){\n      gezz = <a href=\"https://quickswap.exchange/#/remove/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" >Remove Liquidity from LP</a>\n}\n  return (        <>\n      <div className={classes.contentContainer}>  <h2>\n      <BalanceMsg\n        label={`Your Forge `}\n        amount={formattedBalance22.toFixed(18)}\n        tokenImgSrc={imagez}\n      /> &nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/swap?inputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978&outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\">Buy Forge</a>\n</h2>\n<h2>\n      <BalanceMsg\n        label={`Your 0xBTC `}\n        amount={formattedBalance2.toFixed(8)}\n        tokenImgSrc={imagezz}\n        />&nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/swap?outputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978\">Buy 0xBitcoin on Polygon</a>\n        </h2>\n        <h2>\n        <BalanceMsg\n          label={`Your Wallets LP Tokens `}\n          amount={formattedTokenBalance.toFixed(18)}\n          tokenImgSrc={image2}\n        />&nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/add/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" >Add Liquidity (Forge + 0xBTC)</a>\n        </h2><h3>{gezz}</h3>\n<BalanceMsg\n          label={`You are Staking this many Quickswap LP tokens `}\n          amount={formattedBalance3.toFixed(18)}\n          tokenImgSrc={image2}\n        />\n\n<BalanceMsg\n        label={`Your Forge rewards `}\n        amount={formattedBalance322.toFixed(18)}\n        tokenImgSrc={imagez}\n      />\n      <BalanceMsg\n        label={`Your 0xBTC rewards `}\n        amount={(formattedBalance32* 1e10).toFixed(8)}\n        tokenImgSrc={imagezz}\n      />\n      </div>\n    </>\n\n    );\n  }","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { StakeForm } from \"./StakeForm\"\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg\n} from \"../../components\"\nimport { Token } from \"../Main\"\nimport { WalletBalance } from \"./WalletBalance\"\n\n\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\n\ninterface YourWalletProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n\n  const { chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  // wtf is this? \n  // Reacts way of holding state between components \n  // Could do it without <number> \n  // saving state between renders of components \n  // You'd have to pass it through as a prop to have another component use it \n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  const classes = useStyles()\n\n  return (\n    <Box>\n     \n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                //IF not Auction do this\n                if( token.address !== \"0x0000000000000000000000000000000000000000\" && token.address !== \"0x0000000000000000000000000000000000000001\"){\n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      <WalletBalance\n                        token={supportedTokens[selectedTokenIndex]}\n                      />\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )   \n                }\n                //IF LP token do this\n                else{\n                \n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )\n                }\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}","import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { utils } from \"ethers\"\nimport { SliderInput } from \"../../components\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, useStakingBalanceOTHER4, useStakingBalance6Forged, useStakingBalance6xBTC, useStakingBalance5, useUnstakeTokens22, useStakingBalanceOTHER3,useStakingBalance4, useUnstakeTokens22Other, useUnstakeTokens22Otherf, useStakeTokens, useStakingBalanceOTHER, GetApprovalAmt, StakeThatCake, ApproveOnlyMax, useStakingBalance, useStakingBalanceOTHER2, useStakingBalance2, useUnstakeTokens2, useStakingBalance3, AuctionStats, AuctionStats2, AuctionStats3, ProofOfWorkStats, ProofOfWorkStats2} from \"../../hooks\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications, useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components\"\n\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport { constants } from \"ethers\"\nimport helperConfig from \"../../helper-config.json\"\n\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n  slider2: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n\n  const { chainId, account, error } = useEthers()\n  \n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const zeroxBTCAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n\n  const { image, address: tokenAddress, name } = token\n  var imagez = '/static/media/pow2.56016ef0.png'\n  var imagezz = '/static/media/dai.a2c311e8.png'\n  const { notifications } = useNotifications()\n\n  var balance = useStakingBalance(tokenAddress)\n  const balance2 = useStakingBalance2(tokenAddress)\n  const stake = useStakingBalance3(tokenAddress)\n  const stake2 = useStakingBalanceOTHER(tokenAddress)\n  const stake4 = useStakingBalanceOTHER3(tokenAddress)\n  const stake5 = useStakingBalanceOTHER4(tokenAddress)\n  console.log(\"stake4\", stake4)\n  console.log(\"wtf2\", stake2)\n  const urshareofpool = useStakingBalance5(tokenAddress)\n \n  const day = AuctionStats(tokenAddress)\n  const timeEnd = AuctionStats2(tokenAddress)\n  const auctionPot = AuctionStats3(tokenAddress)\n  //const epoch = ProofOfWorkStats(tokenAddress)\n  const epoch = ProofOfWorkStats2(tokenAddress)\n  let nothing  \n  const oldLP = chainId ? brownieConfig[\"networks\"][networkName][\"oldLP\"] : constants.AddressZero\n  \n  const tokenBalanceOldLP = useTokenBalance(oldLP, account);\n\n  const tokenBalanceStaking = useStakingBalance6Forged(account)\n  const tokenBalanceStakingxBTC = useStakingBalance6xBTC(account)\n  var balStakingForge = 0\n  var balStakingxBTC = 0\n    if(tokenBalanceStaking !== nothing){\n      balStakingForge = tokenBalanceStaking\n  console.log(\"tokenBalanceStaking\", balStakingForge)\n    }\n    if(tokenBalanceStakingxBTC !== nothing){\n      balStakingxBTC = tokenBalanceStakingxBTC\n  console.log(\"tokenBalanceStakingxBTC\", balStakingxBTC)\n    }\n  var balOldLP = 0\nif(tokenBalanceOldLP !== nothing)\n{\n  balOldLP = parseInt(tokenBalanceOldLP.toString())\n\n}\nvar sharepool = 0\nif(urshareofpool !== nothing){\n  sharepool = urshareofpool *100;\n}\n  //typeof nothing === 'undefined'\n  var tepoch=0\n  var circ = 0\n  if(epoch !== nothing){\n    tepoch=parseFloat(epoch.toString())\n    circ = tepoch * (150 + 75)\n  }\nconst fug= useStakingBalance4(tokenAddress)\nconsole.log(\"fug\", fug  )\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n\n  var approvalamt = GetApprovalAmt(tokenAddress)\nvar aprovamt = \"0\"\n//LP Approval\n  if(approvalamt !== nothing)\n{\n    aprovamt = approvalamt.toString()\n}\n  var test\n  var endt\n  var cur\n  var auctionmsg =\"\"\n  var timeleft = 0\n  var totalPot=\"\"\n  if(auctionPot !== nothing)\n  {\n    totalPot =auctionPot.toString()\n  }\n  var dayz = 0\n  //GET AUction stats\n  if(nothing !== day)\n  {\n    test = day.toString()\n    dayz = parseFloat(day.toString()) * 8192\n  }\n  var circfinal = dayz + circ\n  if(nothing !== timeEnd)\n  {\n    endt = parseInt(timeEnd.toString())\n    cur = Math.round(Date.now() / 1000)\n\n      if((endt - cur) > 0)\n    {\n      timeleft = endt-cur\n    }\n    if(timeleft === 0)\n    {\n      auctionmsg = \"Current Auction is over when one last bid is recieved\"\n    }\n  }\n    if(token.address === zeroxBTCAddress)\n  {\n    balance = balance2\n\n  }\n\n     var balanceff = stake2\n  \n  if(token.address === LP_token)\n  {\n      balance = stake\n  }\n  var [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n  const handleStakeSubmitzz = () => {\n\n    var fuck7\n  if(typeof amount === 'number')\n  {\n    fuck7 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n  }\n  else{\n    fuck7 =  \"0\"\n  }\n    const amountAsWei = fuck7\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n\n\n\n\n  const { send: stakeOnlyz, state: unstakeTokensState22v3 } =\n  StakeThatCake(tokenAddress)\n\n\n\n  const stakeOnly = () => {\n    var fuck9\n    if(typeof amount === 'number')\n    {\n      fuck9 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n    }\n    else{\n      fuck9 =  \"0\"\n    }\n    const amountAsWei = fuck9\n    return stakeOnlyz(amountAsWei.toString())\n  }  \n  console.log(\"stake\", stake)\n  const formattedBalanceff: number = balanceff\n  ? parseFloat(formatUnits(balanceff, 18))\n  : 0\n  const formattedBalanceffff: number = stake4\n  ? parseFloat(formatUnits(stake4, 18))\n  : 0\n  const formattedBalanceffff5: number = stake5\n  ? parseFloat(formatUnits(stake5, 18))\n  : 0\n  const formattedBalance: number = balance\n  ? parseFloat(formatUnits(balance, 18))\n  : 0\n  var balance22 = useStakingBalance2(zeroxBTCAddress)\n\n  const formattedBalance2: number = balance22\n  ? parseFloat(formatUnits(balance22, 18))\n  : 0\n\n  var balance223 = useStakingBalance(proofOfWorkAddress)\n  var balance223zz = useStakingBalanceOTHER2(proofOfWorkAddress)\n\n  const formattedBalance22: number = balance223\n  ? parseFloat(formatUnits(balance223, 18))\n  : 0\n  const formattedBalance22zz: number = balance223zz\n  ? parseFloat(formatUnits(balance223zz, 18))\n  : 0\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n\n    const { send: unstakeTokensSend2, state: unstakeTokensState2 } =\n      useUnstakeTokens2()\n\n      const { send: unstakeTokensSend22, state: unstakeTokensState22 } =\n      useUnstakeTokens22()\n\n      const { send: unstakeTokensSend220, state: unstakeTokensState220 } =\n      useUnstakeTokens22Other()\n\n      const { send: unstakeTokensSend220f, state: unstakeTokensState220f } =\n      useUnstakeTokens22Otherf()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend()\n  }\n\n  const handleUnstakeSubmit2 = () => {\n    return unstakeTokensSend2()\n  }\n  const handleUnstakeSubmit22 = () => {\n    return unstakeTokensSend22()\n  }\n  const handleUnstakeSubmit220 = () => {\n    return unstakeTokensSend220()\n  }\n  const handleUnstakeSubmit220f = () => {\n    return unstakeTokensSend220f()\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack2 = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n    \n  }\n  const [showUnstakeSuccess2, setShowUnstakeSuccess2] = useState(false)\n\n  const handleCloseSnack3 = () => {\n    showUnstakeSuccess2 && setShowUnstakeSuccess2(false)\n    \n  }\n  useEffect(() => {\n\n    \n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n\n  useEffect(() => {\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Get rewards\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess2 && setShowUnstakeSuccess2(true)\n    }\n  }, [notifications, showUnstakeSuccess2])\n\n\n\n\n\n  \n  const isMining = unstakeTokensState.status === \"Mining\"\n\n  const isMining2 = unstakeTokensState2.status === \"Mining\"\nvar min = 0\n  if(timeleft > 1)\n{\n  min = timeleft / 60\n}\nvar hour = 0\nif(min > 90)\n{\nhour = min / 60\n}\n  const classes = useStyles()\n  var potineth = (parseFloat(totalPot)/100000000).toFixed(18)\n\n\n  const { send: maxApprove2, state: b22 } =\n  ApproveOnlyMax(tokenAddress )\n\n\n\n\n  const maxApprove = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return maxApprove2(amountAsWei.toString())\n  }  \nvar msgold = \"\"\nvar b\n  if(balOldLP > 0){\n    b = <a href =\"https://quickswap.exchange/#/remove/0xc64381719049f6f9d7034587ab6dfb7bff4fbc52/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" target=\"_blank\">CLICK HERE to Withdraw Old liquidity</a>\n    msgold = \"WITHDRAW YOUR LIQUIDITY \"\n  }\n\n\n\n\n\n\n\n\n\n\n  var fuck\n  if(typeof amount === 'string')\n  {\n    fuck =  parseFloat(amount).toFixed(8)\n\n  }\n  else{\n    fuck =  parseFloat(amount.toString())\n  }\n  var fuck2 = fuck.toString()\n\n  var approvetomuch = parseFloat(fuck2) * (1e18) > parseFloat(aprovamt.toString())\n  var te = \"0\"\n  if(tokenBalance !== nothing)\n  {\n    te = tokenBalance.toString()\n  }\n  const hastoolittle =  parseFloat(te) < parseFloat(fuck2) / 1e18\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n\n\n  const isMining4 = unstakeTokensState22v3.status === \"Mining\"\n  const isMining1 =  stakeTokensState.status === \"Mining\"\n  const isMining3 = unstakeTokensState.status === \"Mining\"\n  const isMining5 = b22.status === \"Mining\"\n  const isMining8 = stakeTokensState.status === \"Mining\"\n\nvar fsdfsdfsdf  =\"\"\n\n\n\n  const [showErc20ApprovalSuccess33, setShowErc20ApprovalSuccess33] =\n  useState(false)\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n  const [showStakeTokensSuccess2, setShowStakeTokensSuccess2] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showErc20ApprovalSuccess33 && setShowErc20ApprovalSuccess33(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n\n\n      if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer21\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess33 && setShowErc20ApprovalSuccess33(true)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\nif(token.address === auctionaddress)\n{\n  return(<>\n   <div> Current Auction: {test}</div>\n   <div> EndTime =  {endt} </div>\n   <div> Current Time: {cur}</div>\n   <div> TIme remaining: {timeleft} seconds or {min} minutes or {hour} hours</div> \n   <div>  {auctionmsg} </div>\n    <div> Total Pot Size of Current Auction {potineth} 0xBitcoin </div>\n    <div> Total Circulating Supply of 0xPW: {circfinal}</div>\n    <div> Total Maximum Supply of 0xPW: 53,000,000</div>\n  </>)\n}\nif(token.address === zeroxBTCAddress)\n{\nreturn (\n  <>\n    <div className={classes.contentContainer}>\n      <BalanceMsg\n        label={`Your Rewards = ${name} balance`}\n        amount={formattedBalance* 1e10}\n        tokenImgSrc={image}\n      />\n       <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit22}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n      </Button>\n    </div>\n    <Snackbar\n      open={showUnstakeSuccess}\n      autoHideDuration={5000}\n      onClose={handleCloseSnack}\n    >\n      <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens unstaked successfully!\n      </Alert>\n    </Snackbar>\n  </>\n)\n}\n\nvar msgbalz  = \"Your liquidity (Staked and Unstaked) is worth a total of \"+(balStakingForge/10**18).toFixed(3)+\" Forge and \"+(balStakingxBTC/10**8).toFixed(3)+\" 0xBitcoin Tokens\"\nvar msgBalz2 = <h3>{msgbalz}</h3>\n\nconsole.log('fsdfds',formattedBalanceffff )\nif(token.address !== LP_token || formattedBalanceff || formattedBalanceffff || formattedBalanceffff5)\n{\nreturn (\n  <>\n    <div className={classes.contentContainer}>\n\n  <h1> OLD CONTRACTS IS DEPRECIATED, PLEASE REMOVE ALL FUNDS FROM ALL THREE CONTRACTS</h1>\n  <h1> Please submit Exit Transaction</h1>\n    <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE FIRST OLD CONTRACT`}\n          amount={formattedBalanceffff5}\n          tokenImgSrc={image}\n        />\n\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit220f}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM FIRST CONTRACT`}\n      </Button>\n  <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE 2nd OLD CONTRACT`}\n          amount={formattedBalanceffff}\n          tokenImgSrc={image}\n        />\n\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit220}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM FIRST CONTRACT`}\n      </Button>\n    <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE 3rd OLD CONTRACT`}\n          amount={formattedBalanceff}\n          tokenImgSrc={image}\n        />\n\n      <BalanceMsg\n        label={`Your Rewards OLD Forge`}\n        amount={formattedBalance22zz}\n        tokenImgSrc={imagez}\n      />\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit22}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM SECOND CONTRACT`}\n      </Button>\n    </div>\n    <Snackbar\n      open={showUnstakeSuccess}\n      autoHideDuration={5000}\n      onClose={handleCloseSnack2}\n    >\n      <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens unstaked successfully!\n      </Alert>\n    </Snackbar>\n  </>\n)\n}\nvar ps = <h2>Your % of the Staking Pool: {sharepool.toFixed(4)}%</h2>\nif(approvetomuch)\n{\ntest = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleStakeSubmitzz}\n  disabled= {isMining || isMining8||hastoolittle || hasZeroAmountSelected  || (isMining3)|| isMining5 }\n>\n  {isMining || isMining3 ||isMining8|| isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"Approve & Stake\"}\n</Button>\n}\nelse{\n  test = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={stakeOnly}\n  //disabled={isMining || hasZeroAmountSelected}\n  disabled={isMining || isMining8||(isMining3) || hastoolittle  || hasZeroAmountSelected  || approvetomuch|| isMining5 }\n>\n  {isMining || isMining3 || isMining8||isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"Stake\"}\n</Button>\n}\nvar ted = formattedTokenBalance.toFixed(18)\nvar zeroBalz = formattedTokenBalance === 0\nvar textz =<a></a>\nif(parseFloat(ted) >= 0.000000000000071130){\n  var textz = <a href=\"https://quickswap.exchange/#/remove/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" ><h3>To Remove your Tokens from the Quickswap LP Click Here</h3></a>\n        \n\n}\n  return (\n    <>\n      <div className={classes.contentContainer}>\n      <h2> <a href=\"https://quickswap.exchange/#/add/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" >Click here to get Quickswap LP tokens by depositing Forge and 0xBTC into the Liquidity Pool</a></h2>\n            {textz}\n            <h2>Current Staking APY: {fug?.toFixed(0)}%</h2>\n            {msgBalz2}\n      <BalanceMsg\n          label={`Your un-staked Quickswap LP balance`}\n          amount={ted}\n          tokenImgSrc={image}\n        />\n        <SliderInput\n       \n          label={`Stake Quickswap LP Tokens - Move slider to amount desired`}\n  \n          maxValue={formattedTokenBalance}\n          id={`slider-input14-${name}`}\n          className=\"BABY\"\n          value={amount}\n          onChange={setAmount}\n          //disabled={isMining || hasZeroBalance || dontshow}\n          disabled={isMining || isMining8|| (isMining3)|| isMining5 || zeroBalz }\n        />\n         {test}\n        \n     \n{ps}\n        <BalanceMsg\n          label={`You are Staking this many LP tokens`}\n          amount={formattedBalance.toFixed(18)}\n          tokenImgSrc={image}\n        />\n\n<BalanceMsg\n        label={`Your Forge rewards `}\n        amount={formattedBalance22.toFixed(18)}\n        tokenImgSrc={imagez}\n      />\n      <BalanceMsg\n        label={`Your 0xBTC rewards `}\n        amount={(formattedBalance2* 1e10).toFixed(8)}\n        tokenImgSrc={imagezz}\n      />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit}\n          disabled={isMining}\n        >\n          {isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : `Get Rewards Only`}\n        </Button>        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit2}\n          disabled={isMining2}\n        >\n          {isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n        </Button>\n\n\n\n{msgold}{b}\n\n        </div>\n\n<Snackbar\n  open={showErc20ApprovalSuccess}\n  autoHideDuration={5000}\n  onClose={handleCloseSnack}\n>\n  <Alert onClose={handleCloseSnack} severity=\"success\">\n    ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n    initiate the staking transfer.\n  </Alert>\n</Snackbar>\n<Snackbar\n  open={showStakeTokensSuccess}\n  autoHideDuration={5000}\n  onClose={handleCloseSnack}\n>\n  <Alert onClose={handleCloseSnack} severity=\"success\">\n    Tokens staked successfully!\n  </Alert>\n</Snackbar>\n<Snackbar\n  open={showUnstakeSuccess2}\n  autoHideDuration={5000}\n  onClose={handleCloseSnack3}\n>\n  <Alert onClose={handleCloseSnack3} severity=\"success\">\n    Reward successfully Claimed!\n  </Alert>\n</Snackbar>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack2}\n      >\n        <Alert onClose={handleCloseSnack2} severity=\"success\">\n          Tokens unstaked successfully!\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showErc20ApprovalSuccess33}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Max Approved! You may now Stake w/o Approve!!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER3 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP2\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER4 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP3\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance5 = (address: string): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    var dead = 0\n    if(stakingBalance2 !== nothing && stakingBalance !== nothing){\n      dead = stakingBalance /  stakingBalance2\n    }\n\n    \n    \n    return dead\n  }","import { useContractCall, useEthers} from \"@usedapp/core\"\n\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const ProofOfWorkStats2 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const zeroAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n    //MY STUFF\n    const zeroAbi = Zero.abi\n\n    const ZeroInterface = new utils.Interface(zeroAbi)\n\n\n    const [epochCount] =\n    useContractCall({\n      abi: ZeroInterface,\n      address: zeroAddress,\n      method: \"getEpoch\",\n      args: [],\n    }) ?? []\nreturn epochCount\n  }\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance6Forged = (address: any): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance3] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate\",\n      args: [],\n    }) ?? []\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    if(stakingBalance3 !== nothing && stakingBalance2 !== nothing && stakingBalance !== nothing){\n     rateperyear = parseInt(stakingBalance3.toString()) / (4*10**16) * 10 *3600*7*24 / 10**18 *56 //10 /(4*10^16) *parseInt(stakingBalance.toString())/parseInt(stakingBalance.toString()) \n     Contractshare =parseInt(stakingBalance2.toString()) \n    }\n\n    const [unibal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [urUNIBal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"balanceOf\",\n      args: [account],\n    }) ?? []\n\n    const sushiABI = UniV2Pair.abi\n    const sushiInterface = new utils.Interface(sushiABI)\n    \n  \n    const [stakingBalance6, ff2, fff2] =\n      useContractCall({\n        abi: sushiInterface,\n        address: LPTOKEN,\n        method: \"getReserves\",\n        args: [],\n      }) ?? []\nvar dead =0\nvar apyz = 0\nvar ddddd = 0\nvar ddddd2 = 0\n    if(unibal !==nothing && stakingBalance !==nothing && stakingBalance2 !==nothing && urUNIBal !== nothing){\n      Contractshare =parseInt(stakingBalance2.toString()) *ff2/unibal\n    var urUniper = 1/parseInt(unibal.toString())*100\n    var unitotalForge = parseInt(ff2.toString())/(10**18)\n    var urUniTotal = urUniper\n    var TotalAPY = rateperyear/(Contractshare*2 )* 10**20\n     dead = TotalAPY \n      var fffff = stakingBalance3/(10**16)*(60*60*24*365)\n      ddddd = (ff2 * (stakingBalance)) / unibal + (ff2 * (urUNIBal)) / unibal\n      //0xbtc\n      \n      ddddd2 = stakingBalance6 * (stakingBalance) / unibal +  stakingBalance6 * (urUNIBal) / unibal\n\n    }\n    //total staked currently in Forge\n    return ddddd;\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance6xBTC = (address: any): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance3] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate\",\n      args: [],\n    }) ?? []\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    if(stakingBalance3 !== nothing && stakingBalance2 !== nothing && stakingBalance !== nothing){\n     rateperyear = parseInt(stakingBalance3.toString()) / (4*10**16) * 10 *3600*7*24 / 10**18 *56 //10 /(4*10^16) *parseInt(stakingBalance.toString())/parseInt(stakingBalance.toString()) \n     Contractshare =parseInt(stakingBalance2.toString()) \n    }\n\n    const [unibal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const sushiABI = UniV2Pair.abi\n    const sushiInterface = new utils.Interface(sushiABI)\n    \n  \n    const [urUNIBal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"balanceOf\",\n      args: [account],\n    }) ?? []\n\n    const [stakingBalance6, ff2, fff2] =\n      useContractCall({\n        abi: sushiInterface,\n        address: LPTOKEN,\n        method: \"getReserves\",\n        args: [],\n      }) ?? []\nvar dead =0\nvar apyz = 0\nvar ddddd = 0\nvar ddddd2 = 0\n    if(unibal !==nothing && stakingBalance !==nothing && stakingBalance2 !==nothing){\n      Contractshare =parseInt(stakingBalance2.toString()) *ff2/unibal\n    var urUniper = 1/parseInt(unibal.toString())*100\n    var unitotalForge = parseInt(ff2.toString())/(10**18)\n    var urUniTotal = urUniper\n    var TotalAPY = rateperyear/(Contractshare*2 )* 10**20\n     dead = TotalAPY \n      var fffff = stakingBalance3/(10**16)*(60*60*24*365)\n      ddddd = ff2 *stakingBalance / unibal\n      //0xbtc\n      ddddd2 = stakingBalance6 * (stakingBalance) / unibal +  stakingBalance6 * (urUNIBal) / unibal\n      apyz = fffff/ddddd\n\n    }\n    //total staked currently in Forge\n    return ddddd2;\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance4 = (address: string): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance3] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate\",\n      args: [],\n    }) ?? []\n    const [rewardrate2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate2\",\n      args: [],\n    }) ?? []\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    if(stakingBalance3 !== nothing && stakingBalance2 !== nothing && stakingBalance !== nothing){\n     rateperyear = parseInt(stakingBalance3.toString()) / (4*10**16) * 10 *3600*7*24 / 10**18 *56 //10 /(4*10^16) *parseInt(stakingBalance.toString())/parseInt(stakingBalance.toString()) \n     Contractshare =parseInt(stakingBalance2.toString()) \n    }\n\n    const [unibal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const sushiABI = UniV2Pair.abi\n    const sushiInterface = new utils.Interface(sushiABI)\n    \n  \n    const [stakingBalance6, ff2, fff2] =\n      useContractCall({\n        abi: sushiInterface,\n        address: LPTOKEN,\n        method: \"getReserves\",\n        args: [],\n      }) ?? []\nvar dead =0\nvar apyz = 0\n    if(unibal !==nothing && stakingBalance !==nothing && stakingBalance2 !==nothing){\n      Contractshare =parseInt(stakingBalance2.toString()) *ff2/unibal\n    var urUniper = 1/parseInt(unibal.toString())*100\n    var unitotalForge = parseInt(ff2.toString())/(10**18)\n    var urUniTotal = urUniper\n    var TotalAPY = rateperyear/(Contractshare*2 )* 10**20\n     dead = TotalAPY \n      var fffff = stakingBalance3/(10**16)*(60*60*24*365)\n      var ddddd = ff2 *stakingBalance2 / unibal\n      apyz = fffff/ddddd\n\n    }\n    var apyz22 = 0\n    if(unibal !==nothing && stakingBalance6 !==nothing && stakingBalance2 !==nothing){\n      var fffff3 = rewardrate2/(10**16)*(60*60*24*365)\n      var ddddd3 = stakingBalance6 *stakingBalance2 / unibal\n      apyz22 = (fffff3/ddddd3) / 2 * 100\n      console.log(\"apyzz \", apyz22)\n    }\n    return apyz/2*100 + apyz22\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER2 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n  //const { abi } = TokenFarm\n  //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  //const tokenFarmInterface = new utils.Interface(abi)\n\n  //MY STUFF\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n\n\n  \n\n  const [stakingBalance] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"earned\",\n      args: [account],\n    }) ?? []\n  return stakingBalance\n}\n","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens = () => {\n  \n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  \n\n\n\n  return useContractFunction(LPRewardsContract, \"getReward\", {\n    transactionName: \"Get rewards\",\n  })\n}\n","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens2 = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22 = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22Other = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP2\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22Otherf = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP3\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock0xBTC from \"../chain-info/AMock.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const ApproveOnlyMax = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  var AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const LPAdd = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nconst rewardABI = LPFarm.abi\nconst mockABI = Mock0xBTC.abi\nconst mockInterface = new utils.Interface(mockABI)\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n\nconst mockLPContract = new Contract(\n    LPAdd, mockInterface\n    )\n\nconst mockContract = new Contract(\n    xbtc, mockInterface\n    )\n    var test = mockContract\n    var fff = \"Approve ERC20 transfer23\"\nif(tokenAddress === LPAdd)\n{\n    test = mockLPContract\n    AuctionAddress = LPRewardAddress\n    fff = \"Approve ERC20 transfer21\"\n    \n}\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(test, \"approve\", {\n      transactionName: fff,\n    })\n\n    const send =  (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(AuctionAddress, \"99999999999999999999999999999999\")\n      }\n      const [state, setState] = useState(b2)\n      \n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg,\n} from \"../../components\"\nimport { Tab, Box, makeStyles } from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { Unstake } from \"./Unstake\"\n\ninterface TokenFarmContractProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n    margin: `${theme.spacing(4)}px 0`,\n    padding: theme.spacing(2),\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\n\nexport const TokenFarmContract = ({\n  supportedTokens,\n}: TokenFarmContractProps) => {\n  const classes = useStyles()\n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  return (\n    <Box><br></br>\n      <h1 className=\"MuiTypography-root\">Staking</h1>\n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                return (\n                  <TabPanel value={(index).toString()} key={index} >\n                    <Unstake token={token} />\n                  </TabPanel>\n                )\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}\n","/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport pow from \"../pow2.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\n//import DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const {account, chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n\n  const zxbtc_token = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n  const auction_addy = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n  var supportedTokens\n  if(account === \"0x543c3F3Ee66Cf54746d4c4011d5cACf544a427f5\")\n  {\n\n    supportedTokens= [\n      {\n        image: eth,\n        address: LP_token,\n        name: \"Auctions\",\n      },\n      {\n        image: pow,\n        address: \"0x0000000000000000000000000000000000000001\",\n        name: \"Auction Reedemer\",\n      },\n      {\n        image: pow,\n        address: pow_token,\n        name: \"Your Wallet\",\n      },\n      {\n        image: pow,\n        address: \"0x0000000000000000000000000000000000000000\",\n        name: \"Extra Contract Stuff\",\n      }\n    ]\n  }else{\n\n\n   supportedTokens = [\n    {\n      image: eth,\n      address: LP_token,\n      name: \"Auctions\",\n    },\n    {\n      image: pow,\n      address: \"0x0000000000000000000000000000000000000001\",\n      name: \"Auction Reedemer\",\n    },\n    {\n      image: pow,\n      address: pow_token,\n      name: \"Your Wallet\",\n    }\n  ]\n}\n  const supportedTokens2: Array<Token> = [\n    {\n      image: eth,\n      address: LP_token,\n      name: \"Staking\",\n    }\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && (error.name === \"UnsupportedChainIdError\" || error.name === \"t\")) {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)      \n    }\n  }, [error, showNetworkError])\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: \"MuiTypography-root\",\n        }}\n      >Forge Auction & Staking DAPP\n      </Typography><h1>Auctions</h1>\n      <YourWallet supportedTokens={supportedTokens} />\n      <TokenFarmContract supportedTokens={supportedTokens2} />\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          You MUST change Networks in Metamask to the POLYGON NETWORK to use the DAPP!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import React from \"react\"\nimport { Header } from \"./features/Header\"\nimport { Main } from \"./features/Main\"\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Container } from \"@material-ui/core\"\nimport discordimg from \"./discord.png\"\nimport forgedappimg from \"./forge22222.png\"\nexport const App = () => {\n  return (\n    <DAppProvider config={{\n      supportedChains: [ChainId.Polygon],\n      notifications: {\n        expirationPeriod: 1000,\n        checkInterval: 1000\n      }\n    }}>\n      <Header />\n      <Container maxWidth=\"lg\">\n\n        <Main />\n        \n      </Container>\n\n    </DAppProvider>\n\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}