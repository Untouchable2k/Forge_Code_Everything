{"version":3,"sources":["features/Header.tsx","eth.png","pow2.png","components/SliderInput.tsx","components/BalanceMsg.tsx","components/ConnectionRequiredMsg.tsx","hooks/useStakeTokens.ts","hooks/AuctionStats.ts","hooks/AuctionStats2.ts","hooks/AuctionStats3.ts","hooks/ApprovStats.ts","hooks/StakeOnly.ts","hooks/useStakingBalance.ts","hooks/try.ts","hooks/useStakingBalance2.ts","hooks/useStakingBalance3.ts","features/yourWallet/StakeForm.tsx","hooks/AuctionStats6.ts","hooks/ApprovStats2.ts","hooks/AuctionStats7.ts","hooks/distAuction2.ts","hooks/useAuctions.ts","hooks/AdvanceAuctions.ts","hooks/try3.ts","hooks/try4.ts","hooks/try2.ts","hooks/AuctionNoApprove.ts","hooks/ApprovOnly2.ts","hooks/AuctionOnly.ts","hooks/distributeReward.ts","hooks/distAuction.ts","hooks/AuctionStats8.ts","hooks/AuctionStats4.ts","hooks/AuctionStats5.ts","features/yourWallet/WalletBalance.tsx","features/yourWallet/YourWallet.tsx","features/tokenFarmContract/Unstake.tsx","hooks/useStakingBalanceOTHER.ts","hooks/useStakingBalanceOTHER3.ts","hooks/ProofOfWorkStats2.ts","hooks/useStakingBalance4.ts","hooks/useStakingBalanceOTHER2.ts","hooks/useUnstakeTokens.ts","hooks/useUnstakeTokens2.ts","hooks/useUnstakeTokens22.ts","hooks/useUnstakeTokens22Other.ts","hooks/ApprovOnly.ts","features/tokenFarmContract/TokenFarmContract.tsx","features/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","display","justifyContent","gap","Header","classes","useEthers","account","activateBrowserWallet","deactivate","isConnected","undefined","className","Button","color","variant","href","target","rel","slice","onClick","size","inputsContainer","gridTemplateRows","gridTemplateColumns","slider","SliderInput","label","id","maxValue","value","onChange","disabled","rest","sliderStep","inputStep","sliderMarks","Typography","gutterBottom","Slider","step","event","newValue","max","marks","Input","margin","Number","onBlur","inputProps","min","type","alignItems","tokenImg","width","amount","fontWeight","BalanceMsg","tokenImgSrc","component","src","alt","justifyItems","ConnectionRequiredMsg","style","useStakeTokens","tokenAddress","chainId","networkName","helperConfig","LPRewardAddress","brownieConfig","constants","AddressZero","rewardABI","LPFarm","abi","LPFarmInterface","utils","Interface","LPRewardsContract","Contract","useContractFunction","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","Erc20","tokenContract","approveErc20Send","approveErc20State","useState","amountToStake","setAmountToStake","useEffect","status","setState","AuctionStats","address","AuctionAddress","Auctionz","AuctionInterface","useContractCall","method","args","AuctionStats2","Math","round","Date","now","AuctionStats3","test2","stakingBalance","nothing","toString","GetApprovalAmt","LPTokenAddresss","Mock","MockInterface","StakeThatCake","unstakeTokensState22v3","useStakingBalance","useUnstakeTokens4","testabi","LPFarmInterface2","mock","useStakingBalance2","useStakingBalance3","flexDirection","maxWidth","StakeForm","token","error","name","zeroxBTCAddress","auctionaddress","LP_token","proofOfWorkAddress","tokenBalance","useTokenBalance","xbtcbalance","notifications","useNotifications","auctionPot","approvalamt","auctionPotYOURS","AuctionStats6","tokenBalancez","aprovamt","approvalamt2","auction","xbtc","GetApprovalAmt2","aprovamt2","currentday","fday","maxprevday","tb","name2","setAmount","eraz","setAmountEra","fmtInputzz","erazz","testz","ex","parseFloat","cdaystring","parseInt","TotalOwedAll","ff2f2","tttt","time555","x","time","AuctionStats7","daysnow","startingauction","setAmountz","auctionnumber","setAmountzz","totalPot","urpercent","urpercentz","numberofAuctions","name23","setName2","name233","setName22","addy","auctionAddress","auc","DistributeAuction2","getAuctionTokens2","AuctionsABI","AuctionContract","stakeTokensState2","str","length","substring","useAuctions1","stakeTokensSend2","Addy","era","TokenFarm","tests","fsdfdsfds","AdvAuctions","advAuction1","auctionState2","formattedTokenBalance","formatUnits","formattedTokenBalance2","check","useStakeTokens6","stakeTokensSend6","useStakeTokens7","stakeTokensSend7","unstakeTokensSend","unstakeTokensState","pow_token","zeroAbi","Zero","xpw","useUnstakeTokens5","b2","AuctionNoApprove","stakeOnlyzAuction","LPAdd","mockABI","Mock0xBTC","mockInterface","test","ApproveOnlyMax2","maxApprove2","b22","account22","unstakeTokensState223z","AuctionThatCake","auctionOnlyz","DistributeReward2","unstakeTokensSend22","DistributeAuction","maxApprove","amountAsWei","parseEther","xxx","xxxx","xxx2","toFixed","percentz","percentzz","coinz","showErc20ApprovalSuccess3","setShowErc20ApprovalSuccess3","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","filter","notification","fuck","tva","isMining","isMining2","isMining3","isMining4","isMining6","isMining7","isMining5","isMining51","fuck2","approvetomuch2","hasZeroBalance2","te","endt","cur","hasZeroAmountSelected","timeEnd","timeleft","auctionmsg","tokenBalancef","timelftmsg","sec","secPerDay2","secPerDay","AuctionStats8","hour","teeoff","amt","AuctionPlayerStats","teeoff2","AuctionPlayerStats2","totz2","msgowed","msgowed2","TextField","helperText","placeholder","e","CircularProgress","div","fuck8","ffedf","fsdfosd","day","decimalsLimit","decimalScale","onValueChange","Snackbar","open","autoHideDuration","onClose","Alert","severity","contentContainer","WalletBalance","image","LPTokenAddress","xbtcTokenAddress","balance22","formattedBalance2","balance223","formattedBalance22","balance3","console","log","msg","formattedBalance3","balance322","formattedBalance32","balance3223","formattedBalance322","image2","imagez","imagezz","tabContent","box","backgroundColor","borderRadius","header","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","Box","TabContext","TabList","map","index","Tab","TabPanel","slider2","Unstake","balance","balance2","stake","stake2","LPRewardAddressOLD","useStakingBalanceOTHER","stake4","useStakingBalanceOTHER3","epoch","zeroAddress","ZeroInterface","ProofOfWorkStats2","circ","fug","LPTOKEN","stakingBalance2","stakingBalance3","rateperyear","Contractshare","unibal","sushiABI","UniV2Pair","sushiInterface","stakingBalance6","ff2","dead","urUniper","urUniTotal","TotalAPY","useStakingBalance4","dayz","circfinal","balanceff","stakeOnlyz","formattedBalanceff","formattedBalanceffff","formattedBalance","balance223zz","useStakingBalanceOTHER2","formattedBalance22zz","useUnstakeTokens","useUnstakeTokens2","unstakeTokensSend2","unstakeTokensState2","useUnstakeTokens22","useUnstakeTokens22Other","unstakeTokensSend220","handleUnstakeSubmit22","showUnstakeSuccess","setShowUnstakeSuccess","handleCloseSnack2","showUnstakeSuccess2","setShowUnstakeSuccess2","handleCloseSnack3","potineth","mockLPContract","fff","ApproveOnlyMax","approvetomuch","hastoolittle","isMining8","showErc20ApprovalSuccess33","setShowErc20ApprovalSuccess33","fuck7","fuck9","TokenFarmContract","title","palette","common","white","textAlign","Main","eth","pow","supportedTokens2","showNetworkError","setShowNetworkError","handleCloseNetworkError","reason","root","App","DAppProvider","config","supportedChains","ChainId","Polygon","expirationPeriod","checkInterval","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+p69FAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,QAASF,EAAMG,QAAQ,GACvBC,QAAS,OACTC,eAAgB,WAChBC,IAAKN,EAAMG,QAAQ,QAIVI,EAAS,WACpB,IAAMC,EAAUV,IAEhB,EAAuDW,cAA/CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,sBAAuBC,EAAxC,EAAwCA,WAElCC,OAA0BC,IAAZJ,EAEpB,OACE,sBAAKK,UAAWP,EAAQP,UAAxB,UACE,cAACe,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAhC,SACA,mBAAIH,UAAU,UAAUI,KAAK,yBAAyBC,OAAO,SAASC,IAAI,sBAA1E,oBAEA,cAACL,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAhC,SACA,mBAAIH,UAAU,UAAUI,KAAK,8FAA8FC,OAAO,SAASC,IAAI,sBAA/I,yBAEA,cAACL,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAhC,SACA,mBAAIH,UAAU,UAAUI,KAAK,yCAAyCC,OAAO,SAASC,IAAI,sBAA1F,oBAEA,cAACL,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAhC,SACA,mBAAIH,UAAU,UAAUI,KAAK,oCAAoCC,OAAO,SAASC,IAAI,sBAArF,qBAECR,EACC,qCACE,cAACG,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAhC,0BACMR,QADN,IACMA,OADN,EACMA,EAASY,MAAM,EAAG,GADxB,qBACgCZ,QADhC,IACgCA,OADhC,EACgCA,EAASY,OAAO,MAEhD,cAACN,EAAA,EAAD,CAAQE,QAAQ,YAAYK,QAASX,EAArC,2BAKF,cAACI,EAAA,EAAD,CACED,UAAU,UACVE,MAAM,UACNO,KAAK,QACLN,QAAQ,YACRK,QAAS,kBAAMZ,KALjB,yB,OC5CO,MAA0B,gCCA1B,MAA0B,iC,uGCanCb,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyB,gBAAiB,CACfrB,QAAS,OACTE,IAAKN,EAAMG,QAAQ,GACnBuB,iBAAkB,OAClBC,oBAAqB,YAEvBC,OAAQ,OAGGC,EAAc,SAAC,GAQH,IAAD,IAPtBC,aAOsB,MAPd,GAOc,MANtBC,UAMsB,MANjB,eAMiB,EALtBC,EAKsB,EALtBA,SACAC,EAIsB,EAJtBA,MACAC,EAGsB,EAHtBA,SAGsB,IAFtBC,gBAEsB,SADnBC,EACmB,iBAiBhBC,EAAaL,EAAW,IACxBM,EAAYN,EAAW,GAEvBxB,EAAUV,IAEVyC,EAAc,CAClB,CACEN,MAAO,EACPH,MAAO,MAET,CACEG,MAAOD,EACPF,MAAO,SAQX,OACE,gDAASM,GAAT,cACGN,GACC,cAACU,EAAA,EAAD,CAAYT,GAAIA,EAAIU,cAAY,EAAhC,SACGX,IAGL,sBAAKf,UAAWP,EAAQiB,gBAAxB,UACE,8BACE,cAACiB,EAAA,EAAD,CACET,MAAwB,kBAAVA,EAAqBA,EAAQ,EAC3CU,KAAMN,EACNH,SAhDiB,SAACU,EAAYC,GACtCX,EAASW,IAgDD,kBAAiBd,EACjBe,IAAKd,EACLG,SAAUA,EACVY,MAAOZ,EAAW,GAAKI,MAG3B,8BACE,cAACS,EAAA,EAAD,CACEf,MAAOA,EACPgB,OAAO,QACPf,SAvDgB,SAACU,GACzBV,EAAgC,KAAvBU,EAAMxB,OAAOa,MAAe,GAAKiB,OAAON,EAAMxB,OAAOa,SAuDtDkB,OApDS,WACblB,EAAQ,EACVC,EAAS,GACAD,EAAQD,GACjBE,EAASF,IAiDHG,SAAUA,EACViB,WAAY,CACVT,KAAML,EACNe,IAAK,EACLP,IAAKd,EACLsB,KAAM,SACN,kBAAmBvB,eChG3BjC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,UAAW,CACPG,QAAS,cACTuB,oBAAqB,iBACrBrB,IAAKN,EAAMG,QAAQ,GACnBoD,WAAY,UAEhBC,SAAU,CACNC,MAAO,QAEXC,OAAQ,CACJC,WAAY,SAUPC,EAAa,SAAC,GAAqD,IAAnD9B,EAAkD,EAAlDA,MAAO4B,EAA2C,EAA3CA,OAAQG,EAAmC,EAAnCA,YAElCrD,EAAUV,IAEhB,OAAO,sBAAKiB,UAAWP,EAAQP,UAAxB,UACH,eAACuC,EAAA,EAAD,CAAYsB,UAAU,OAAtB,UAA8BhC,EAA9B,OACA,cAACU,EAAA,EAAD,CAAYzB,UAAWP,EAAQkD,OAAQI,UAAU,OAAjD,SAAyDJ,IACzD,qBAAK3C,UAAWP,EAAQgD,SAAUO,IAAKF,EAAaG,IAAI,mBC1B1DlE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTG,QAAS,OACTmD,WAAY,SACZU,aAAc,SACdvC,iBAAkB,aAITwC,EAAwB,WACnC,IAAM1D,EAAUV,IAGhB,EAAuDW,cAA/CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,sBAAuBC,EAAxC,EAAwCA,WAElCC,OAA0BC,IAAZJ,EACpB,OAGI,sBAAKK,UAAWP,EAAQP,UAAxB,UACCY,EACC,qCACE,cAACG,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAhC,0BACMR,QADN,IACMA,OADN,EACMA,EAASY,MAAM,EAAG,GADxB,qBACgCZ,QADhC,IACgCA,OADhC,EACgCA,EAASY,OAAO,MAEhD,cAACN,EAAA,EAAD,CAAQE,QAAQ,YAAYK,QAASX,EAArC,2BAKF,cAACI,EAAA,EAAD,CACED,UAAU,UACVE,MAAM,UACNO,KAAK,QACLN,QAAQ,YACRK,QAAS,kBAAMZ,KALjB,qBAWJ,qBAAKwD,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SACE,eAACmC,EAAA,EAAD,CAAYtB,QAAQ,KAAK4C,UAAU,OAAnC,uDAAoF,uBACpF,uBADA,kCACwC,mBAAG3C,KAAK,yBAAR,oCACxC,uBAFA,0BAEgC,mBAAGA,KAAK,yBAAR,uBAFhC,+B,wHC3BOiD,EAAiB,SAACC,GAC7B,IAAQC,EAAY7D,cAAZ6D,QAEFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAGhGC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAGjB,EACEK,YAAoBF,EAAmB,QAAS,CAC9CG,gBAAiB,iBAFPC,EAAd,EAAQC,KAA8BC,EAAtC,EAA+BC,MAKzBC,EAAiB,IAAIV,IAAMC,UAAUU,EAAMb,KAE3Cc,EAAgB,IAAIT,IAASf,EAAcsB,GAEjD,EACEN,YAAoBQ,EAAe,UAAW,CAC5CP,gBAAiB,2BAFPQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAKhC,EAA0CM,mBAAS,KAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACyB,YAA7BJ,EAAkBK,QACpBb,EAAgBU,KAOjB,CAACF,EAAmBE,EAAe5B,IAEtC,IAKA,EAA0B2B,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAUA,OARAF,qBAAU,WACyB,YAA7BJ,EAAkBK,OACpBC,EAASZ,GAETY,EAASN,KAEV,CAACA,EAAmBN,IAEhB,CAAED,KAfI,SAAC9B,GAEZ,OADAwC,EAAiBxC,GACVoC,EAAiBrB,EAAiBf,IAa5BgC,U,yBC/DJY,EAAe,SAACC,GAA4C,IAAD,EACpE,EAA6B9F,cAAZ6D,GAAjB,EAAQ5D,QAAR,EAAiB4D,SAQXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDkC,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAE7C,YACE8B,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,aACRC,KAAM,YALV,QAMQ,GAER,OARA,qBCfSC,EAAgB,SAACP,GAA4C,IAAD,EAC7DjC,EAAY7D,cAAZ6D,QAQFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDkC,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAK7C,GAHckC,KAAKC,MAAMC,KAAKC,MAAQ,KAGtC,UACEP,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,cACRC,KAAM,YALV,QAMQ,IAER,OARA,qBClBSM,EAAgB,SAACZ,GAA4C,IAAD,IA0BjEa,EAzBI9C,EAAY7D,cAAZ6D,QAQFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDkC,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAI7C,GAFckC,KAAKC,MAAMC,KAAKC,MAAQ,KAEtC,UACAP,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,aACRC,KAAM,YALR,QAMM,IANCQ,EAAP,oBAWED,EAZEE,YAWWD,EACLA,EAAeE,WAIf,IAGV,gBACEZ,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,kBACRC,KAAM,CAAC,EAAGO,YALd,QAMQ,GAER,OARA,qB,QCnCSI,EAAiB,SAACjB,GAA4C,IAAD,EAExE,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAIXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9F6C,EAAkBnD,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,YAG3FC,EAAY6C,EAAK3C,IACjB4C,EAAgB,IAAI1C,IAAMC,UAAUL,GAaxC,YACA8B,YAAgB,CACd5B,IAAK4C,EACLpB,QAASkB,EACTb,OAAQ,YACRC,KAAM,CAACnG,EAAS+D,YALlB,QAMM,GAEN,OARA,qBCpBSmD,EAAgB,SAACvD,GAC5B,IAAQC,EAAW7D,cAAX6D,QAEFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAKhGC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAGnB,EAA0CgB,mBAAS,KAAnD,mBAAsBE,GAAtB,WAEA,EACAb,YAAoBF,EAAmB,QAAS,CAC9CG,gBAAiB,iBAFLQ,EAAd,EAAQN,KAA+BqC,EAAvC,EAAgCnC,MAShC,EAA0BM,mBAAS6B,GAAnC,mBAAOnC,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASwB,KAEV,CAACA,IACG,CAAErC,KAVK,SAAC9B,GAEb,OADAwC,EAAiBxC,GACVoC,EAAiBpC,IAQXgC,U,QCtCFoC,EAAoB,SAACvB,GAA4C,IAAD,EAC3E,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAGXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAO9FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK5C,YACE8B,YAAgB,CACd5B,IAAKC,EACLuB,QAAS9B,EACTmC,OAAQ,SACRC,KAAM,CAACnG,YALX,QAMQ,GACR,OAPA,qBCnBWqH,EAAoB,SAAC1D,GAMhC,IAAM2D,EAAUN,EAAK3C,IAEfkD,EAAmB,IAAIhD,IAAMC,UAAU8C,GACvCE,EAAO,IAAI9C,IACbf,EAAc4D,GAGlB,EAA0CjC,mBAAS,KAAnD,mBAAsBE,GAAtB,WAEA,EACAb,YAAoB6C,EAAM,gBAAiB,CACzC5C,gBAAiB,2BAFLQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAShC,EAA0BM,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASN,KAEV,CAACA,IACG,CAAEP,KAVK,SAAC9B,GAEb,OADAwC,EAAiBxC,GACVoC,EAAiBpC,IAQXgC,UC7BJyC,GAAqB,SAAC5B,GAA4C,IAAD,EAC1E,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAQXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAE9FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK5C,YACE8B,YAAgB,CACd5B,IAAKC,EACLuB,QAAS9B,EACTmC,OAAQ,UACRC,KAAM,CAACnG,YALX,QAMQ,GAER,OARA,qBCjBS0H,GAAqB,SAAC7B,GAA4C,IAAD,EAE5E,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAIXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAE5FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK5C,YACE8B,YAAgB,CACd5B,IAAKC,EACLuB,QAAS9B,EACTmC,OAAQ,YACRC,KAAM,CAACnG,YALX,QAMQ,GACR,OAPA,qB,sCCCEZ,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTG,QAAS,OACTiI,cAAe,SACf9E,WAAY,SACZjD,IAAKN,EAAMG,QAAQ,GACnBsD,MAAO,QAET7B,OAAQ,CACN6B,MAAO,OACP6E,SAAU,aAODC,GAAY,SAAC,GAA+B,IAuBnDjB,EAvBsBkB,EAA4B,EAA5BA,MAE1B,EAA2B/H,cAAnB6D,EAAR,EAAQA,QACSD,GADjB,EAAiBoE,MACuBD,EAAhCjC,SAAuBmC,EAASF,EAATE,KAEzBnE,EAAcD,EAAUE,EAAaF,GAAW,UAChDqE,EAAkBrE,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAGvFgE,EAAiBtE,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YACzFiE,EAAWvE,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,YACpFkE,EAAqBxE,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YAC7FlE,EAAYD,cAAZC,QACFqI,EAAeC,YAAgB3E,EAAc3D,GAG7CuI,GADmBD,YAAgBF,EAAoBpI,GACzCsI,YAAgBL,EAAiBjI,IAC7CwI,EAAkBC,cAAlBD,cACF1I,EAAUV,KACVsJ,EAAajC,IACfkC,EAAc7B,IACZ8B,ECtDqB,SAAC/C,GAA4C,IAAD,IA0BjEa,EAzBJ,EAA6B3G,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAQXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDkC,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAI7C,GAFckC,KAAKC,MAAMC,KAAKC,MAAQ,KAEtC,UACAP,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,aACRC,KAAM,YALR,QAMM,IANCQ,EAAP,oBAWED,OAZEE,IAWWD,EACLA,EAAeE,WAIf,IAGV,gBACEZ,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,wBACRC,KAAM,CAAC,EAAGO,EAAO1G,YALrB,QAMQ,GAER,OARA,oBDmBsB6I,GAClBC,EAAgBR,YAAgBH,EAAUnI,GAE9C+I,EAAW,IAEVJ,IAAgB/B,IAEjBmC,EAAWJ,EAAY9B,YAE3B,IAAImC,GE/D2B,SAACnD,GAA4C,IAAD,EAEzE,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAIXC,EAAcD,EAAUE,EAAaF,GAAW,UAEhDqF,GADkBrF,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YACpFN,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,aAClFgF,EAAOtF,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAG5EC,EAAY6C,EAAK3C,IACjB4C,EAAgB,IAAI1C,IAAMC,UAAUL,GAaxC,YACA8B,YAAgB,CACd5B,IAAK4C,EACLpB,QAASqD,EACThD,OAAQ,YACRC,KAAM,CAACnG,EAASiJ,YALlB,QAMM,GAEN,OARA,oBFqCeE,GAGfC,GAAY,IACbJ,KAAiBpC,IAElBwC,GAAYJ,GAAanC,YAGzB,IACIwC,GAAa,EAEXC,GAAO1D,EAAajC,GACtB4F,GAAa,IAGbC,GAAK,IACNV,IAAkBlC,IAEnB4C,GAAKV,EAAcjC,YAGrB,OAAyBvB,mBAAS,IAAlC,qBAAOmE,GAAP,MACI,IADJ,MAEEnE,mBAAmD,IADrD,qBAAKtC,GAAL,MAAa0G,GAAb,MAEM,GACFpE,mBAAmD,GADrD,qBAEA,IAFA,YAGEA,mBAAmD,IADrD,qBAGF,IAHE,YAIFA,mBAAsD,MADtD,qBAAOqE,GAAP,MAAaC,GAAb,MAGI,GACJtE,mBAAsDkE,IADtD,qBAAKK,GAAL,YAGGA,KAAejD,GAEJiD,GAAWhD,WAEzB,IAAIiD,GAAQ,IACTH,KAAS/C,IAEZkD,GAAQH,GAAK9C,YAEb,OACAvB,mBAAsD,KADtD,qBAGKyE,IAHL,YAGa/G,GAAO6D,YACfmD,GAAKC,WAAWF,IAKnBG,IAJS7D,KAAKC,MAAM0D,IAIP,KAEXV,KAAS1C,IAIV2C,KAFAF,GAAac,SAASb,GAAKzC,aACH,GACNA,WACjBqD,GAAaZ,GAAKzC,YAItB,IAAMuD,GGhIqB,SAACC,GAA2B,IAAD,IACpD,EAA6BtK,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAQXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDkC,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAI7C,GAFckC,KAAKC,MAAMC,KAAKC,MAAQ,KAEtC,UACAP,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,aACRC,KAAM,YALR,QAMM,IANCQ,EAAP,yBADIC,IAWWD,GACLA,EAAeE,WAiBzB,IAXJ,IAAIyD,EAAO,EAGP,EAAJ,UACArE,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,mBACRC,KAAM,CAAC,EAAGQ,EAAgB3G,YAL5B,QAMM,GANDuK,EAAL,oBAQYC,EAAI,EAAGA,EAAE,GAAIA,IAAI,CAAC,IAAD,EAIrB,EAAJ,UACAvE,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,mBACRC,KAAM,CAAC,EAAGqE,EAAGxK,YALf,QAMM,GANDyK,EAAL,oBAOsB,IAAnBN,SAASM,KAKZH,GAA+B,EAAjBH,SAASM,IAIvB,OAAOH,EAAyB,EAAlBH,SAASI,GH+DJG,CAAcP,SAASZ,KAGxCoB,GAAU,IACXC,KAAoBhE,GAAWgE,IAAmBV,GAErDS,GAAUT,GAAWrD,WAEf+D,KAAoBhE,IAE5B+D,GAAWC,GAAiB/D,YAGzB,IAAI,GACJvB,mBAAsD4E,IADtD,qBAAKU,GAAL,MAAsBC,GAAtB,MAGA,GACAvF,mBAAsD,KADtD,qBAAOwF,GAAP,MAAsBC,GAAtB,MAGGJ,GAAU,IACXC,KAAoBhE,GAAWgE,IAAmBV,GAErDS,GAAUT,GAAWrD,WAEf+D,KAAoBhE,IAE5B+D,GAAWC,GAAiB/D,YAE1B,IAOMmE,GACFC,GACAC,GATAC,GAAmB,EACpBL,KAAkBlE,IAEnBuE,GAAmBlB,WAAWa,GAAcjE,aAQ9C,IAAI,GAAqBvB,mBAAStF,GAAlC,qBAAKoL,GAAL,MAAaC,GAAb,MACI,GAAuB/F,mBAAStF,GAApC,qBAAKsL,GAAL,MAAcC,GAAd,MAEA,GI3KgC,SAACC,GACjC,IAAQ5H,EAAY7D,cAAZ6D,QAEFC,EAAcD,EAAUE,EAAaF,GAAW,UAGhD6H,EAAiB7H,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAEvCuH,EAAM,IAAIhH,IACd+G,EAAgBzF,GAGlB,EAA0CV,mBAAS,KAAnD,mBAAsBE,GAAtB,WACA,EACAb,YAAoB+G,EAAK,aAAc,CACrC9G,gBAAiB,2BAFLQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAQhC,EAA0BM,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASN,KAEV,CAACA,IACG,CAAEP,KAVK,SAAC9B,GAEb,OADAwC,EAAiBxC,GACVoC,EAAiBoG,IAQXxG,SJ8If2G,CAFAL,GAAStL,GACK4L,GAAd,GAAQ9G,KAGR,IAHA,GAAiCE,MAI/BtB,EAAeC,IADqBoB,IAAtC,GAAQD,KAAR,GAA+BE,OAG7B,GK1KwB,SAACrB,GAC3B,MAA6B5D,cAArB6D,EAAR,EAAQA,QAAS5D,EAAjB,EAAiBA,QAGX6D,EAAcD,EAAUE,EAAaF,GAAW,UAChDkC,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YACzFgF,EAAOtF,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAG9E2H,EAAc9F,EAAS1B,IACvB2B,EAAmB,IAAIzB,IAAMC,UAAUqH,GACvCC,EAAkB,IAAIpH,IAC1BoB,EAAgBE,GAIhB,EACErB,YAAoBmH,EAAiB,qBAAsB,CACzDlH,gBAAiB,mBAFPC,EAAd,EAAQC,KAA8BiH,EAAtC,EAA+B/G,MAKzBC,EAAiB,IAAIV,IAAMC,UAAUU,EAAMb,KAE3Cc,EAAgB,IAAIT,IAASwE,EAAMjE,GAEzC,EACEN,YAAoBQ,EAAe,UAAW,CAC5CP,gBAAiB,4BAFPQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAKhC,EAA0CM,mBAAS,KAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACyB,YAA7BJ,EAAkBK,QACpBb,EAAgB7E,EAASuF,KAO1B,CAACF,EAAmBE,EAAe5B,IAEtC,IAWA,EAA0B2B,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAUA,OARAF,qBAAU,WACyB,YAA7BJ,EAAkBK,OACpBC,EAASoG,GAETpG,EAASN,KAEV,CAACA,EAAmB0G,IAEhB,CAAEjH,KArBI,SAAC9B,GACZwC,EAAiBxC,GAEf,IAAIgJ,EAAMhJ,EAKZ,OAJK,EAAIA,EAAOiJ,OAAO,IACnBD,EAAMA,EAAIE,UAAU,EAAE,GAAK,IAAMF,EAAIE,UAAU,IAG5C9G,EAAiBU,EAAgBkG,IAa3BhH,SL2GbmH,CAAaxI,GADCyI,GAAd,GAAQtH,KAA+BiH,GAAvC,GAAgC/G,MAGhC,GMzKuB,SAACrB,EAAsBiH,EAAsBE,EAAoBuB,EAAWC,GACrG,MAA6BvM,cAArB6D,EAAR,EAAQA,QAGFC,GAHN,EAAiB7D,QACDuM,EAARlI,IAEYT,EAAUE,EAAaF,GAAW,WAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9F4B,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YACzFgF,EAAOtF,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAG9E2H,EAAc9F,EAAS1B,IACvB2B,EAAmB,IAAIzB,IAAMC,UAAUqH,GACvCC,EAAkB,IAAIpH,IAC1BoB,EAAgBE,GAGdwG,EAAQ,KACRC,EAAY7G,EAAajC,QAFzBiD,IAGD6F,IAEGD,EADCC,EAAU7B,EACH6B,EAAU5F,WAGZ+D,GAIZ,IAAMzG,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK1C,GAJwB,IAAIO,IAC5BX,EAAiBO,GAIfK,YAAoBmH,EAAiB,wBAAyB,CAC5DlH,gBAAiB,oBAFPC,EAAd,EAAQC,KAA8BC,EAAtC,EAA+BC,MAKzBC,EAAiB,IAAIV,IAAMC,UAAUU,EAAMb,KAE3Cc,EAAgB,IAAIT,IAASwE,EAAMjE,GAEzC,EACEN,YAAoBQ,EAAe,UAAW,CAC5CP,gBAAiB,4BAFPQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAKhC,EAA0CM,mBAAS,KAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACyB,YAA7BJ,EAAkBK,QACpBb,EAAgByH,EAAKE,EAAO1B,EAAeuB,EAAM9G,KAOlD,CAACF,EAAmBE,EAAe5B,IAEtC,IAcA,EAA0B2B,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAUA,OARAF,qBAAU,WACyB,YAA7BJ,EAAkBK,OACpBC,EAASZ,GAETY,EAASN,KAEV,CAACA,EAAmBN,IAEhB,CAAED,KAxBI,SAAC9B,GACZ,IAAIgJ,EAAMhJ,EAUV,OATG,EAAIA,EAAOiJ,OAAO,IACnBD,EAAMA,EAAIE,UAAU,EAAE,GAAK,IAAMF,EAAIE,UAAU,IAE9C,EAAIlJ,EAAOiJ,OAAO,IACnBD,EAAMA,EAAIE,UAAU,EAAE,GAAK,IAAMF,EAAIE,UAAU,IAIjD1G,EAAiBxC,GACVoC,EAAiBU,EAAgBkG,IAa3BhH,SNsFb0H,CAAY/I,EAAciH,GAAiBO,GAAkBC,GAAQzB,IADvDgD,GAAd,GAAQ7H,KAA0B8H,GAAlC,GAA2B5H,MAIvB6H,GAAgCxE,EAClC4B,WAAW6C,YAAYzE,EAAc,KACrC,EAEsCA,GACtC4B,WAAW6C,YAAYzE,EAAc,IAYvC,IAAM0E,GAAiCxE,EACvC0B,WAAW6C,YAAYvE,EAAa,IACpC,EACEyE,GAAQ,EACTD,GAAyB,IAE1BC,GAAQD,IAEV,IAqCA,GOnP6B,SAACpJ,GAE9B,IAAQC,EAAY7D,cAAZ6D,QAEFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAEnB,EACAK,YAAoBF,EAAmB,yBAA0B,CAC/DG,gBAAiB,2BAFLQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAMhC,EAA0CM,mBAAS,KAAnD,mBAMA,GANA,UAM0BA,mBAASD,IAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASN,KAEV,CAACA,IACG,CAAEP,KAVI,WACX,OAAOM,EAAiB,IAAK,MAShBJ,SPuNbiI,GADYC,GAAd,GAAQpI,KAOR,IAPA,GAAgCE,MQrPH,SAACrB,GAG9B,IAAQC,EAAY7D,cAAZ6D,QAEFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAGnB,EACAK,YAAoBF,EAAmB,yBAA0B,CAC/DG,gBAAiB,2BAFLQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAMhC,EAA0CM,mBAAS,KAAnD,mBAMA,GANA,UAM0BA,mBAASD,IAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASN,KAEV,CAACA,IACG,CAAEP,KAVI,WACX,OAAOM,EAAiB,IAAK,MAShBJ,SR8NbmI,IADYC,GAAd,GAAQtI,KAUR,IAVA,GAAgCE,MAWhCqC,EAAkB1D,IADJ0J,GAAd,GAAQvI,KAAgCwI,GAAxC,GAAiCtI,MAI/B,GS1Q6B,SAACrB,GAChC,MAA6B5D,cAArB6D,EAAR,EAAQA,QAAS5D,EAAjB,EAAiBA,QAEX6D,EAAcD,EAAUE,EAAaF,GAAW,UAChD2J,EAAY3J,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YACvFsJ,EAAUC,EAAKpJ,IAEdkD,EAAmB,IAAIhD,IAAMC,UAAUgJ,GAEvCE,EAAM,IAAIhJ,IACZ6I,EAAWhG,GAGf,EAA0CjC,mBAAS,KAAnD,mBAAsBE,GAAtB,WAEA,EACAb,YAAoB+I,EAAK,YAAa,CACpC9I,gBAAiB,2BAFLQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAShC,EAA0BM,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASN,KAEV,CAACA,IACG,CAAEP,KAVK,SAAC9B,GAEb,OADAwC,EAAiBxC,GACVoC,GAAiB,GAAM,EAAMpF,IAQvBgF,ST6Ob2I,GAEA,IAHA,GAAQ7I,KAAR,GAAkCE,MAIlCqC,EAAkBY,IAElB,IAHA,GAAQnD,KAAR,GAAmCE,MAInCkC,KAGA,IAJA,GAAQpC,KAAR,GAA0BE,MUtQE,SAACrB,EAAsBiH,EAAsBE,EAAoBuB,EAAWC,GAC1G,MAA6BvM,cAArB6D,EAAR,EAAQA,QAGFC,GAHN,EAAiB7D,QACDuM,EAARlI,IAEYT,EAAUE,EAAaF,GAAW,WAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9F4B,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAI3F2H,GAHSjI,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAGhE6B,EAAS1B,KACvB2B,EAAmB,IAAIzB,IAAMC,UAAUqH,GACvCC,EAAkB,IAAIpH,IAC1BoB,EAAgBE,GAGZ7B,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK1C,GAJwB,IAAIO,IAC5BX,EAAiBO,GAIfK,YAAoBmH,EAAiB,wBAAyB,CAC5DlH,gBAAiB,oBAFPQ,EAAd,EAAQN,KAA+B8I,EAAvC,EAAgC5I,MAK9BwH,EAAQ,KACRC,EAAY7G,EAAajC,QAFrBiD,IAGL6F,IAEDD,EADCC,EAAU7B,EACH6B,EAAU5F,WAGZ+D,GAIJ,IAIE,EAA0BtF,mBAASsI,GAAnC,mBAAO5I,EAAP,KAAcW,EAAd,KAMA,OALAF,qBAAU,WACNE,EAASiI,KAEV,CAACA,IAEG,CAAE9I,KAVG,SAAC9B,GAEX,OAAOoC,EAAiBkH,EAAKE,EAAO1B,EAAeuB,EAAMrJ,IAQ5CgC,SV2NjB6I,CAAiBlK,EAAciH,GAAiBO,GAAkBC,GAAQzB,KAD5DmE,GAAd,GAAQhJ,KAAgC8I,GAAxC,GAAiC5I,MAGjC,GW7Q2B,SAACrB,GAC9B,MAA6B5D,cAArB6D,EAAR,EAAQA,QAGFC,GAHN,EAAiB7D,QACDuM,EAARlI,IAEYT,EAAUE,EAAaF,GAAW,WAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAChG4B,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YACvFgF,EAAOtF,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAC5E6J,EAAQnK,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,YAEnF2H,EAAc9F,EAAS1B,IACvB2B,EAAmB,IAAIzB,IAAMC,UAAUqH,GAIvC1H,GAHkB,IAAIO,IAC1BoB,EAAgBE,GAEA5B,EAAOC,KACnB2J,EAAUC,EAAU5J,IACpB6J,EAAgB,IAAI3J,IAAMC,UAAUwJ,GACpC1J,EAAkB,IAAIC,IAAMC,UAAUL,GAapCgK,GAZkB,IAAIzJ,IAC5BX,EAAiBO,GAII,IAAII,IACvBqJ,EAAOG,GAGU,IAAIxJ,IACrBwE,EAAMgF,IAKV,EAA0C5I,mBAAS,KAAnD,mBAAsBE,GAAtB,WACE,EACEb,YAAoBwJ,EAAM,UAAW,CACnCvJ,gBALQ,6BAGEQ,EAAd,EAAQN,KAA+B8I,EAAvC,EAAgC5I,MAS5B,EAA0BM,mBAASsI,GAAnC,mBAAO5I,EAAP,KAAcW,EAAd,KAOA,OALAF,qBAAU,WACNE,EAASiI,KAEV,CAACA,IAEG,CAAE9I,KAXG,SAAC9B,GAEX,OADAwC,EAAiBxC,GACVoC,EAAiBU,EAAgB,qCAS3Bd,SX2NjBoJ,GADcC,GAAd,GAAQvJ,KAA0BwJ,GAAlC,GAA2BtJ,MAG3BuJ,GAAY,KACD,OAAZvO,GAAoBA,IAAY4G,IACjC2H,GAAYvO,GAGV,OYrR2B,SAAC2D,GAC9B,MAA6B5D,cAArB6D,EAAR,EAAQA,QAAS5D,EAAjB,EAAiBA,QAIX6D,GAHU0I,EAARlI,IAGYT,EAAUE,EAAaF,GAAW,WAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9F4B,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAI3F2H,GAHSjI,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAGhE6B,EAAS1B,KACvB2B,EAAmB,IAAIzB,IAAMC,UAAUqH,GACvCC,EAAkB,IAAIpH,IAC1BoB,EAAgBE,GAIZ7B,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAItCoJ,GAHoB,IAAI7I,IAC5BX,EAAiBO,GAEDV,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,aAGtFsJ,EAAUC,EAAKpJ,IAEfkD,EAAmB,IAAIhD,IAAMC,UAAUgJ,GAM7C,GAJY,IAAI9I,IACZ6I,EAAWhG,GAG2BjC,mBAAS,MAAnD,mBAAsBE,GAAtB,WAEA,EACAb,YAAoBmH,EAAiB,qBAAsB,CACzDlH,gBAAiB,mBAFLQ,EAAd,EAAQN,KAA+B0J,EAAvC,EAAgCxJ,MAShC,EAA0BM,mBAASkJ,GAAnC,mBAAOxJ,EAAP,KAAcW,EAAd,KAOA,OALAF,qBAAU,WACNE,EAAS6I,KAEV,CAACA,IAEG,CAAE1J,KAXK,SAAC9B,GAEb,OADAwC,EAAiBxC,GACVoC,EAAiBpF,EAASgD,IASpBgC,SZkOXyJ,GADcC,GAAd,GAAQ5J,KAA2B0J,GAAnC,GAA4BxJ,MAG5B,GalS6B,SAACrB,GAChC,IAAQC,EAAW7D,cAAX6D,QAEFC,EAAcD,EAAUE,EAAaF,GAAW,UAChD2J,EAAY3J,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YACvFsJ,EAAUC,EAAKpJ,IAEdkD,EAAmB,IAAIhD,IAAMC,UAAUgJ,GAEvCE,EAAM,IAAIhJ,IACZ6I,EAAWhG,GAGf,EAA0CjC,mBAAS,KAAnD,mBAAsBE,GAAtB,WACA,EACAb,YAAoB+I,EAAK,gBAAiB,CACxC9I,gBAAiB,2BAFLQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAShC,EAA0BM,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASN,KAEV,CAACA,IACG,CAAEP,KAVK,SAAC9B,GAEb,OADAwC,EAAiBxC,GACVoC,KAQMJ,SbsQb2J,GADcC,GAAd,GAAQ9J,KAGR,IAHA,GAAmCE,McnSN,SAACwG,GAChC,IAAQ5H,EAAY7D,cAAZ6D,QAEFC,EAAcD,EAAUE,EAAaF,GAAW,UAGhD6H,EAAiB7H,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAEvCuH,EAAM,IAAIhH,IACd+G,EAAgBzF,GAGlB,EAA0CV,mBAAS,KAAnD,mBAAsBE,GAAtB,WAEA,EACAb,YAAoB+G,EAAK,aAAc,CACrC9G,gBAAiB,2BAFLQ,EAAd,EAAQN,KAA+BO,EAAvC,EAAgCL,MAShC,EAA0BM,mBAASD,GAAnC,mBAAOL,EAAP,KAAcW,EAAd,KAMA,OAJAF,qBAAU,WACNE,EAASN,KAEV,CAACA,IACG,CAAEP,KAVK,SAAC9B,GAEb,OADAwC,EAAiBxC,GACVoC,EAAiBoG,IAQXxG,SduQb6J,CAAkBlL,IA0CdmL,IA3CJ,GAAQhK,KAAR,GAAgCE,MA2Cf,WACjB,IAAM+J,EAAcxK,IAAMyK,WAAWhM,GAAO6D,YAC5C,OAAOwH,GAAYU,EAAYlI,cA0B/BoI,GAAM,GACNC,GAAO,EAOP,GANGtG,IAAoBhC,IAEnBsI,GAAOjF,WAAWrB,EAAgB/B,YAClCqI,IAAY,KAGbxG,IAAe9B,EAClB,CACEoE,GAAUf,WAAWvB,EAAW7B,YAEhC,IAAIsI,GAAOlF,WAAYvB,EAAY7B,YAAYuI,QAAQ,GACvDH,IAAOhF,WAAWkF,IAAS,KAAWtI,WAEtCoE,IAA8E,KAA/DhB,WAAWjH,GAAO6D,YAAcoD,WAAWiF,GAAKrI,cAA6BmE,GAA4C,IAAjCf,WAAWjH,GAAO6D,aAA4B,KAAKuI,QAAQ,GAEhKlE,GADU,IAATgE,IAC4C,IAA9BjF,WAAWiF,GAAKrI,YAA4BmE,GAAa,KAAKoE,QAAQ,GAG1E,EAIf,IAAIC,GAAW,IACZpE,KAAcrE,IAEjByI,GAAWpE,GAAUpE,YAErB,IAAIyI,GAAY,IACbpE,KAAetE,IAElB0I,GAAYpE,GAAWrE,YAEvB,IAAI0I,IAAStF,WAAWoF,IAAU,IAAM,MAAMD,QAAQ,GAGtD,GACA9J,oBAAS,GADT,qBAAOkK,GAAP,MAAkCC,GAAlC,MAEF,GACEnK,oBAAS,GADX,qBAAOoK,GAAP,MAAiCC,GAAjC,MAEA,GAA4DrK,oBAAS,GAArE,qBAAOsK,GAAP,MAA+BC,GAA/B,MAEMC,GAAmB,WACvBJ,IAA4BC,IAA4B,GACxDC,IAA0BC,IAA0B,GAEpDL,IAA6BC,IAA6B,IAG5DhK,qBAAU,WAEN+C,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,4BAAjCoN,EAAapL,mBACfqH,OAAS,KAEVyD,IAA4BC,IAA4B,GACzDC,IAA0BC,IAA0B,IAGpDrH,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,6BAAjCoN,EAAapL,mBACfqH,OAAS,KAEVuD,IAA6BC,IAA6B,GAC3DG,IAA0BC,IAA0B,IAIpDrH,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,mBAAjCoN,EAAapL,mBACfqH,OAAS,IAEXpB,GAAWX,IACXwF,IAA4BC,IAA4B,IACvDC,IAA0BC,IAA0B,MAEtD,CAACrH,EAAekH,GAA0BE,KAE7C,IASIK,GAUAC,GAnBEC,GAAuC,WAA5BpL,GAAiBW,OAC5B0K,GAAyC,WAA7BrE,GAAkBrG,OAC9B2K,GAA0C,WAA9B/C,GAAmB5H,OAC/B4K,GAA8C,WAAlC9B,GAAuB9I,OACnC6K,GAA8C,WAAlC/B,GAAuB9I,OACnC8K,GAAqC,WAAzB5D,GAAclH,OAC1B+K,GAA2B,WAAfnC,GAAI5I,OAChBgL,GAA2B,WAAd9C,GAAGlI,OAWlBiL,IANFV,GAFmB,kBAAXjN,GAEAiH,WAAWjH,IAAQoM,QAAQ,GAI3BnF,WAAWjH,GAAO6D,aAEXA,WAEb+J,GAA+C,IAA9B3G,WAAWgG,GAAKpJ,YAAoBoD,WAAWb,GAAUvC,YAGxEgK,IADc5G,WAAW0G,IAAkB1G,WAAWlB,EAASlC,YACnC,IAAVmG,IACpB8D,GAAK,IACNzI,IAAiBzB,IAElBkK,GAAKzI,EAAaxB,YAGjBkG,KAA2BnG,GAEnBmG,GAAuBlG,WAEZoD,WAAW6G,IAAM7G,WAAW0G,IAAlD,IAOII,GACAC,GAPEC,GAA0D,IAAlChH,WAAWjH,GAAO6D,YAI1CqK,GAAU9K,IAIZ+K,GAAW,EAEXC,GAAY,GAEbxK,IAAYsK,MAEbH,GAAO5G,SAAS+G,GAAQrK,cACxBmK,GAAM3K,KAAKC,MAAMC,KAAKC,MAAQ,MAEV,EAElB2K,GAAWJ,GAAKC,GAGhBI,GAAa,kGAGjB,IAAMC,GAAgB/I,YAAgBH,EAAUnI,GAM9CsR,IAJqCD,IACnCpH,WAAW6C,YAAYuE,GAAe,KAG3B,KACbE,GAAM,EACJ5O,GAAM,EACN6O,GAAa,EAEXC,GexgBqB,SAAC5L,GAA4C,IAAD,EACrE,EAA6B9F,cAAZ6D,GAAjB,EAAQ5D,QAAR,EAAiB4D,SAQXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDkC,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GAE7C,YACE8B,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,gBACRC,KAAM,YALV,QAMQ,GAER,OARA,oBfyfgBuL,GAIpB,GAHKD,KAAc7K,IACf4K,GAAWrH,SAASsH,GAAU5K,aAE/BsK,GAAW,EACd,CAEE,IAAIQ,GAAO,EACRR,GAAW,KAEdQ,GAAOR,GAAQ,KAEfxO,GAAMwO,GAAY,GAAO,GACzBI,GAAMJ,GAAY,IAGlBG,GAAa,8BAA8BnH,SAASwH,GAAKvC,QAAQ,IAAM,WAAWzM,GAAIyM,QAAQ,GAAG,cAAemC,GAAInC,QAAQ,GAAG,gBAE/HkC,GAAY,yDAMd,IAAIM,GgBhiB8B,SAAC/L,EAAiBgM,GAAmB,IAAD,EACpE,EAA2B9R,cAAnB6D,EAAR,EAAQA,QAEFC,GAFN,EAAiBkE,MAEGnE,EAAUE,EAAaF,GAAW,WAChD2J,EAAY3J,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YACxFsJ,EAAUC,EAAKpJ,IAGbyB,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GACvCoD,EAAmB,IAAIhD,IAAMC,UAAUgJ,GAM3CW,GAJU,IAAIzJ,IACZ6I,EAAWhG,GAGN,QAELX,IACDiL,GAA2B,KAARA,IAEpB1D,EAAOhE,SAAS0H,IAKlB,gBACA5L,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,kBACRC,KAAM,CAAC,EAAGgI,YALZ,QAMM,GANC1D,EAAP,oBAQIT,EAAKC,WAAW4H,GAIpB,OAHUxL,KAAKC,MAAM0D,GAGdS,EhBwfIqH,CAAmBnO,EAAc8F,IAE1CsI,GiBliB+B,SAAClM,EAAiBgM,GAAmB,IAAD,EACrE,EAAoC9R,cAA5BC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAEXC,GAFN,EAA0BkE,MAENnE,EAAUE,EAAaF,GAAW,WAChD2J,EAAY3J,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YACtFsJ,EAAUC,EAAKpJ,IAGfyB,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAEzFC,EAAY4B,EAAS1B,IACrB2B,EAAmB,IAAIzB,IAAMC,UAAUL,GACvCoD,EAAmB,IAAIhD,IAAMC,UAAUgJ,GAM3CW,GAJU,IAAIzJ,IACZ6I,EAAWhG,GAGN,QAELX,IACDiL,GAA2B,KAARA,IAEpB1D,EAAOhE,SAAS0H,IAKlB,gBACA5L,YAAgB,CACd5B,IAAK2B,EACLH,QAASC,EACTI,OAAQ,wBACRC,KAAM,CAAC,EAAGgI,EAAMnO,YALlB,QAMM,GANCyK,EAAP,oBAQIT,EAAKC,WAAW4H,GAIpB,OAHUxL,KAAKC,MAAM0D,GAGdS,EjB0fKuH,CAAoBrO,EAAc8F,IAM/C,IACIwI,GACDnH,KAAkBlE,IAMpBqL,GAJsB,MAAlBnH,IAGGb,WAAWjH,GAAO6D,YAAe,GAC3BuI,QAAQ,IAEdnF,WAAWjH,GAAO6D,YAAeoD,WAAWa,GAAcjE,aACpDuI,QAAQ,IAInBxE,KAAoBhE,GAAWkE,KAAkBlE,IAEpCqD,WAAWW,GAAgB/D,YAAcoD,WAAWa,GAAcjE,aAEnF,IAAIqL,GAAU9H,GAAa,KAAD,IAAC,GAAI,IAC/B,GAAc,OAAX8H,IAAmBA,GAAU,EAC9B,IAAIC,GAAW,oBAAoBD,GAAQ9C,QAAQ,GAAI,8BACnD,GAAe,IAAZ8C,GACHC,GAAW,oBAAoBD,GAAQ9C,QAAQ,GAAI,8BAEnD+C,GAAW,gBAMf,GAAqB,+CAAlBrK,EAAMjC,QAEP,OACA,qCAEA,qBAAKpC,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SAAyD,4EACzD,mCAAMwS,MAHN,kEAI+D,cAACC,EAAA,EAAD,CAEnE3O,MAAQ,CAACV,MAAO,SACRxB,MAAO+J,GACP+G,WAAW,6CACXC,YAAa/D,GACbnN,MAAM,oBACNI,SAAU,SAAC+Q,GACThH,GAAUgH,EAAE7R,OAAOa,UAGzB,cAACjB,EAAA,EAAD,CACMC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QArPa,WACnB,OAAO+K,GAAkBnC,KAqPnBhI,SAAU2O,GALhB,SAOOA,GAAY,cAACoC,EAAA,EAAD,CAAkB1R,KAAM,KAAS,yCAUxD,GAAqB,+CAAlBgH,EAAMjC,QAEP,MAAe,+CAAZ7F,EAKD,6BAOA,qCAEQ,cAACM,EAAA,EAAD,CACAC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QA5UO,WACf,IAAMkO,EAAcxK,IAAMyK,WAAWhM,GAAO6D,YAC5C,OAAO+H,GAAoBG,EAAYlI,aA6U/BpF,SAAU0O,GAPV,SASCA,GAAW,cAACqC,EAAA,EAAD,CAAkB1R,KAAM,KAAS,oDAG/C,cAACR,EAAA,EAAD,CACAC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAlZY,WAClB,OAAOqM,MAkZDzL,SAAU0O,IAAaE,GALvB,SAOCF,GAAW,cAACqC,EAAA,EAAD,CAAkB1R,KAAM,KAAS,wEAE/C,cAACR,EAAA,EAAD,CACEC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QApZa,WACnB,OAAOuM,MAoZD3L,SAAU0O,IAAaE,GALzB,SAOGF,GAAW,cAACqC,EAAA,EAAD,CAAkB1R,KAAM,KAAS,uEAiCvD,GAvBKgH,EAAMjC,UAAYqC,IAEV,EAqBVJ,EAAMjC,UAAYuC,EAIjB,OACE,mCACA,qBAAK/H,UAAWP,EAAQP,cAK5B,GAAGoE,IAAiBsE,EAGpB,OACE,mCACA,sBAAK5H,UAAWP,EAAQP,UAAxB,UACA,cAAC,EAAD,CACM6B,MAAK,0BAAqB4G,GAE1B1G,SAAU,IACVD,GAAE,uBAAkB2G,GACpB3H,UAAWP,EAAQoB,OACnBK,MAAOyB,GACPxB,SAAUkI,GACVjI,SAAU0O,IAAaE,KAE7B,cAAC/P,EAAA,EAAD,CACMC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QA7aO,WAEVmC,GAAS,MACVA,GAAS,KAEX,IAAM+L,EAAcxK,IAAMyK,WAAWhM,GAAO6D,YAAY4L,IAAI,MAC5D,OAAOpF,GAAkB0B,EAAYlI,aAwa/BpF,SAAU0O,IAAaE,GAL7B,SAOOF,GAAW,cAACqC,EAAA,EAAD,CAAkB1R,KAAM,KAAS,0BAgFnDoP,GAFCU,GAEa,cAACtQ,EAAA,EAAD,CACdC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAvkByB,WACzB,IAAMkO,EAAcxK,IAAMyK,WAAWhM,GAAO6D,YAAY4L,IAAI,MAC5D,OAAOrG,GAAiB2C,EAAYlI,aAskBpCpF,SAAU2O,IAAaG,IAAaD,IAAaW,IAAyBR,GAL5D,SAObL,IAAaE,IAAaG,GAAW,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,8BAIhE,cAACR,EAAA,EAAD,CACNC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAneiB,WAClB,IAAI6R,EAUJ,OANEA,EAFmB,kBAAX1P,GAEEuB,IAAMyK,WAAW/E,WAAWjH,GAAO6D,YAAYuI,QAAQ,IAAIqD,IAAI,MAGhE,IAGJ/D,GADagE,EACY7L,aA0d/BpF,SAAU0O,IAAYI,IAAYH,IAAeE,IAAeW,IAA0BL,IAAiBH,GANrG,SAQLN,IAAYE,IAAYE,IAAaD,IAAaG,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,oBAIrG,IACI6R,GADAC,GAAUzI,SAASgB,GAAiBtE,YAAa,EAAIsD,SAASQ,IAO9DgI,GALE/B,GAKO,cAACtQ,EAAA,EAAD,CACHC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QA7lB4B,WAClC,IAAMkO,EAAcxK,IAAMyK,WAAWhM,GAAO6D,YAAY4L,IAAI,MAC5D,OAAO9F,GAAYoC,EAAYlI,aA4lBzBpF,SAAU2O,IAAcI,IAAcE,IAAaH,IAAaD,IAAaW,IAAyBR,GALnG,SAOFL,IAAaE,IAAaI,IAAeF,IAAaD,IAAcE,GAAW,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,8BAS/G,cAACR,EAAA,EAAD,CACRC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QA/gBmB,WACnB,IAAMkO,EAAcxK,IAAMyK,WAAWhM,GAAO6D,YAAY4L,IAAI,MAC5D,OAAO3E,GAAkBiB,EAAYlI,aA+gBrCpF,SAAU0O,IAAYO,IAAcF,IAAcD,IAAaD,IAAeW,IAA0BL,IAAkBH,GANlH,SAQPN,IAAYE,IAAaK,IAAcF,IAAYD,IAAcD,IAAaG,GAAW,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,oBAG7H,IAAI+R,GAAM,kCAAoCxJ,GAAW,KAGvD,OAFK,6CAAgBA,MAEd,qCAEL,sBAAKhJ,UAAWP,EAAQP,UAAxB,UACA,6CAAgB8J,MADhB,yGAIN,eAAC,KAAD,WACM,cAAC,KAAD,UAAS,sBAAK5F,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,UAEP,cAAC,KAAD,CAAKU,UAAU,cAAf,mBACA,cAAC,KAAD,CAAKA,UAAU,eAAf,2BAIF,eAAC,KAAD,WACE,cAAC,KAAD,UAEE,sBAAKA,UAAWP,EAAQP,UAAxB,UACJ,qBAAKc,UAAU,QACT,cAAC,EAAD,CACFe,MAAOyR,GACPvR,SAAU0L,GACV3L,GAAE,uBAAkB2G,GACpB3H,UAAWP,EAAQoB,OACnBK,MAAOyB,GACPxB,SAAUkI,GACVjI,SAAU0O,IAAYU,KAGxB,6DAAgCxB,GAAhC,+BAAsEE,GAAtE,YACD,oCAAO+B,MACP,0BAAU/P,MAAOiQ,GAAWL,GAAU/O,IAAKoP,KAC3CtB,GACC,qBAAKzM,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SACQ,cAACW,EAAA,EAAD,CACNC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAASiO,GAETrN,SAAU0O,IAAaG,IAAcG,IAAaL,GAN5C,SAQLD,IAAYE,IAAaC,IAAaG,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,yDAGtF,kEAAqCmO,GAArC,iBACA,gDAAmBC,GAAnB,mDAAyEI,GAAzE,sDACA,oCAAO8B,WAIP,eAAC,KAAD,WACA,qBAAK3N,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SACE,iEAEF,sBAAK8D,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,UACI,mDAA0B,0BAL9B,sEAOqE,uBAPrE,sFAQqF,uBARrF,qEASoE,uBATpE,oFAUmF,uBAVnF,sEAWqE,uBAXrE,0DAaE,+IACA,8GACA,qBAAK8D,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SACE,cAAC,EAAD,CACFyB,MAAO,mCACPE,SAAU0L,GACV3L,GAAE,uBAAkB2G,GACpB3H,UAAWP,EAAQoB,OACnBK,MAAOyB,GACPxB,SAAUkI,GACVjI,SAAU0O,IAAYU,OAKxB,sBAAKpN,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,+CACR,cAAC,IAAD,CACE0B,GAAG,gBACH2G,KAAK,aACLzG,MAASoJ,GACT2H,YAAa,IACbQ,cAAe,EACfC,aAAc,EACdC,cAAenI,KART,WASE,0BAEH,sBAAKpH,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,uDACP,cAAC,IAAD,CACE0B,GAAG,gBACH2G,KAAK,aACLzG,MAAO4J,GACPmH,YAAY,qBACZQ,cAAe,EACfC,aAAc,EACdC,cAAejI,KAEjB,0BACA,sBAAKtH,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,kCACA,cAAC,IAAD,CACE0B,GAAG,gBACH2G,KAAK,aACLzG,MAAOuI,GACPgJ,cAAe,EACfC,aAAc,EACdC,cAAepJ,KAEjB,0BAAe,sBAAKnG,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,yEAC6C,cAACyS,EAAA,EAAD,CACtD3O,MAAQ,CAACV,MAAO,SACdxB,MAAO6J,GACPiH,WAAW,uDACXC,YAAa/D,GACbnN,MAAM,oBACNI,SAAU,SAAC+Q,GACTlH,GAASkH,EAAE7R,OAAOa,aAI5B,qBAAKkC,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SACA,sEAAyCsS,GAAzC,wBAAqEnH,GAArE,wBAAyGH,GAAzG,MAAqHiI,GAArH,aAAwIjJ,QACxI,qBAAKlG,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SACCgT,KAED,qBAAKlP,MAAO,CAAC/D,QAAS,OAAQC,eAAgB,UAA9C,SACgB,cAACW,EAAA,EAAD,CACNC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAASiO,GAETrN,SAAU0O,IAAYK,IAAcE,IAAeJ,IAAcG,GAN3D,SAQLN,IAAYE,IAAaG,IAAaE,IAAcJ,IAAaG,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,kEASrH,cAACmS,EAAA,EAAD,CACIC,KAAM1D,GACN2D,iBAAkB,IAClBC,QAAStD,GAHb,SAKI,cAACuD,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,uGAIJ,cAACL,EAAA,EAAD,CACIC,KAAMxD,GACNyD,iBAAkB,IAClBC,QAAStD,GAHb,SAKI,cAACuD,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,8GAKF,cAACL,EAAA,EAAD,CACEC,KAAMtD,GACNuD,iBAAkB,IAClBC,QAAStD,GAHX,SAKE,cAACuD,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,oD,kDkBxgCFlU,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiU,iBAAkB,CAChB7T,QAAS,OACTiI,cAAe,SACf9E,WAAY,SACZlD,eAAgB,aAChBC,IAAKN,EAAMG,QAAQ,QAGV+T,GAAgB,SAAC,GAAmC,IAAjC1L,EAAgC,EAAhCA,MAE9B,EAA2B/H,cAAnB6D,EAAR,EAAQA,QACA6P,GADR,EAAiB1L,MACgBD,EAAzB2L,OAAgBzL,GAASF,EAAlBjC,QAAkBiC,EAATE,MAElBnE,EAAcD,EAAUE,EAAaF,GAAW,UAChDsE,EAAiBtE,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YACzFwP,EAAiB9P,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,YAC1FyP,EAAmB/P,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YACxFkE,EAAqBxE,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YAE/FpE,EAAUV,KACRY,EAAYD,cAAZC,QACFqI,EAAeC,YAAgBoL,EAAgB1T,GAIjD4T,GAFkBtL,YAAgBqL,EAAkB3T,GAExCsI,YAAgBqL,EAAkB3T,IAE5C6T,EAA4BD,EAChC3J,WAAW6C,YAAY8G,EAAW,IAClC,EAEEE,EAAaxL,YAAgBF,EAAoBpI,GAE/C+T,EAA6BD,EACjC7J,WAAW6C,YAAYgH,EAAY,KACnC,EAGEE,GAFQ1L,YAAgBoL,EAAgB1T,GAC9B0H,MAEduM,QAAQC,IAAI,MAAOF,GACnB,IAmCQG,EAnCFC,EAA4BJ,EAChC/J,WAAW6C,YAAYkH,EAAU,KACjC,EACEK,EAAa5M,KAEX6M,EAA6BD,EACjCpK,WAAW6C,YAAYuH,EAAY,KACnC,EAEEE,EAAcnN,IAEZoN,EAA8BD,EAClCtK,WAAW6C,YAAYyH,EAAa,KACpC,EAEEE,EAAS,iCACTC,EAAS,kCACTC,EAAU,iCAER9H,EAAgCxE,EAClC4B,WAAW6C,YAAYzE,EAAc,KACrC,EACF,OAAGP,EAAMjC,UAAYqC,EAIjB,cAAC,EAAD,CACE9G,MAAK,yBACL4B,OAAQ6Q,EACR1Q,YAAawR,IAIhB7M,EAAMjC,UAAY6N,GAKjBS,EAAM,mBAAG1T,KAAK,8FAA8FC,OAAO,SAA7G,6DAGA,qCACR,8BAAK,6BAAKyT,MACP,cAAC,EAAD,CACG/S,MAAK,yBACL4B,OAAQ6Q,EACR1Q,YAAawR,QAIlB7M,EAAMjC,UAAY8N,EAGrB,cAAC,EAAD,CACEvS,MAAK,eAAU4G,EAAV,YACLhF,OAAQ6Q,EACR1Q,YAAasQ,IAKD,mCACZ,sBAAKpT,UAAWP,EAAQyT,iBAAxB,eAA4C,+BAC5C,cAAC,EAAD,CACEnS,MAAK,cACL4B,OAAQ+Q,EACR5Q,YAAauR,IAJ6B,kBAKrB,mBAAGjU,KAAK,8FAA8FC,OAAO,SAA7G,0BAE7B,+BACM,cAAC,EAAD,CACEU,MAAK,cACL4B,OAAQ6Q,EACR1Q,YAAawR,IAJrB,iBAK8B,mBAAGlU,KAAK,8FAA8FC,OAAO,SAA7G,yCAEtB,+BACA,cAAC,EAAD,CACEU,MAAK,0BACL4B,OAAQ6J,EACR1J,YAAasR,IAJf,iBAKsB,mBAAGhU,KAAK,yHAAyHC,OAAO,SAAxI,8CAE9B,cAAC,EAAD,CACUU,MAAK,iDACL4B,OAAQoR,EACRjR,YAAasR,IAGvB,cAAC,EAAD,CACQrT,MAAK,sBACL4B,OAAQwR,EACRrR,YAAauR,IAEf,cAAC,EAAD,CACEtT,MAAK,sBACL4B,OAA4B,KAApBsR,EACRnR,YAAawR,UCtIfvV,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCsV,WAAY,CACVlV,QAAS,OACTiI,cAAe,SACf9E,WAAY,SACZjD,IAAKN,EAAMG,QAAQ,IAErBoV,IAAK,CACHC,gBAAiB,QACjBC,aAAc,QAEhBC,OAAQ,CACNzU,MAAO,aAIE0U,GAAa,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,gBAE3B,EAA2BnV,cAAnB6D,EAAR,EAAQA,QAEFC,GAFN,EAAiBkE,MAEGnE,EAAUE,EAAaF,GAAW,WAOtD,GANuBA,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAM3CoB,mBAAiB,IAArE,mBAAO6P,EAAP,KAA2BC,EAA3B,KAQMjV,OAA0BC,IAFZL,cAAZC,QAIFF,EAAUV,KAEhB,OACE,cAACiW,GAAA,EAAD,UAEE,cAACA,GAAA,EAAD,CAAKhV,UAAWP,EAAQ+U,IAAxB,SACE,8BACG1U,EACC,eAACmV,GAAA,EAAD,CAAY/T,MAAO4T,EAAmBtO,WAAtC,UACE,cAAC0O,GAAA,EAAD,CAAS/T,SAjBA,SAACU,EAA8BC,GAClDiT,EAAsBjL,SAAShI,KAgBY,aAAW,kBAA5C,SACG+S,EAAgBM,KAAI,SAAC1N,EAAO2N,GAC3B,OACE,cAACC,GAAA,EAAD,CACEtU,MAAO0G,EAAME,KACbzG,MAAOkU,EAAM5O,YACR4O,QAKZP,EAAgBM,KAAI,SAAC1N,EAAO2N,GAE3B,MAAsB,+CAAlB3N,EAAMjC,SAA8E,+CAAlBiC,EAAMjC,QAE1E,cAAC8P,GAAA,EAAD,CAAUpU,MAAOkU,EAAM5O,WAAvB,SACE,sBAAKxG,UAAWP,EAAQ8U,WAAxB,UACE,cAAC,GAAD,CACE9M,MAAOoN,EAAgBC,KAIzB,cAAC,GAAD,CAAWrN,MAAOoN,EAAgBC,SAPEM,GAgBxC,cAACE,GAAA,EAAD,CAAUpU,MAAOkU,EAAM5O,WAAvB,SACE,qBAAKxG,UAAWP,EAAQ8U,WAAxB,SAGE,cAAC,GAAD,CAAW9M,MAAOoN,EAAgBC,QAJEM,SAY9C,cAAC,EAAD,WCtFNrW,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiU,iBAAkB,CAChB7T,QAAS,OACTiI,cAAe,SACf9E,WAAY,SACZlD,eAAgB,aAChBC,IAAKN,EAAMG,QAAQ,IAErBmW,QAAS,CACP7S,MAAO,OACP6E,SAAU,aAKDiO,GAAU,SAAC,GAAiC,IAA/B/N,EAA8B,EAA9BA,MAExB,EAAoC/H,cAA5B6D,EAAR,EAAQA,QAAS5D,EAAjB,EAAiBA,QAEX6D,GAFN,EAA0BkE,MAENnE,EAAUE,EAAaF,GAAW,WAChDqE,EAAkBrE,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YACvFgE,EAAiBtE,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YACzFiE,EAAWvE,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,YAGlFuP,GAFmB7P,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YAEtD4D,EAAvC2L,OAAgB9P,EAAuBmE,EAAhCjC,QAAuBmC,EAASF,EAATE,KAClC0M,EAAS,kCAELlM,EAAkBC,cAAlBD,cAEJsN,EAAU1O,IACR2O,EAAWtO,KACXuO,EAAQtO,KACRuO,EC9C8B,SAACpQ,GAA4C,IAAD,EAEhF,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAIXC,EAAcD,EAAUE,EAAaF,GAAW,UAEhDsS,GADkBtS,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YACzEN,EAAUI,EAAa,SAAaH,GAA1B,eAA2DI,IAAUC,aAElGC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK5C,YACE8B,YAAgB,CACd5B,IAAKC,EACLuB,QAASqQ,EACThQ,OAAQ,YACRC,KAAM,CAACnG,YALX,QAMQ,GAER,OARA,oBD8BamW,GACTC,EEhD+B,SAACvQ,GAA4C,IAAD,EACjF,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAIXC,EAAcD,EAAUE,EAAaF,GAAW,UAEhDsS,GADkBtS,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YACzEN,EAAUI,EAAa,SAAaH,GAA1B,gBAA4DI,IAAUC,aAEnGC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK5C,YACE8B,YAAgB,CACd5B,IAAKC,EACLuB,QAASqQ,EACThQ,OAAQ,YACRC,KAAM,CAACnG,YALX,QAMQ,GAER,OARA,oBFiCaqW,GACfpC,QAAQC,IAAI,SAAUkC,GACtBnC,QAAQC,IAAI,OAAQ+B,GAEpB,IAKIrP,EALEiM,EAAMjN,EAAajC,GACnBuN,EAAU9K,IACVsC,EAAajC,IAEb6P,EGvDyB,SAACzQ,GAA4C,IAAD,EACjEjC,EAAY7D,cAAZ6D,QAQFC,EAAcD,EAAUE,EAAaF,GAAW,UAChD2S,EAAc3S,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YAExFsJ,EAAUC,EAAKpJ,IAEfmS,EAAgB,IAAIjS,IAAMC,UAAUgJ,GAG1C,YACAvH,YAAgB,CACd5B,IAAKmS,EACL3Q,QAAS0Q,EACTrQ,OAAQ,WACRC,KAAM,YALR,QAMM,GACV,OAPI,oBHsCYsQ,GAIVC,GAAO,EACRJ,IAAU1P,IAEX8P,GAAa,IADNzM,WAAWqM,EAAMzP,aAG5B,IAAM8P,GI/D4B,SAAC9Q,GAAyC,IAAD,UAwCnEe,EAtCN,EAA6B7G,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAIXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9F0S,EAAUhT,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,YAEjFC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK5C,YACE8B,YAAgB,CACd5B,IAAKC,EACLuB,QAAS9B,EACTmC,OAAQ,YACRC,KAAM,CAACnG,YALX,QAMQ,GAND2G,EAAP,oBASA,YACAV,YAAgB,CACd5B,IAAKC,EACLuB,QAAS9B,EACTmC,OAAQ,cACRC,KAAM,YALR,QAMM,GANC0Q,EAAP,oBAQA,YACA5Q,YAAgB,CACd5B,IAAKC,EACLuB,QAAS9B,EACTmC,OAAQ,aACRC,KAAM,YALR,QAMM,GANC2Q,EAAP,oBAQIC,EAAc,EACdC,EAAgB,EACjBF,IAAoBlQ,GAAWiQ,IAAoBjQ,GAAWD,IAAmBC,IACnFmQ,EAAc5M,SAAS2M,EAAgBjQ,aAAe,EAAE,KAAF,IAAE,GAAI,KAAM,GAAI,KAAK,EAAE,GAA/D,SAAoE,GAAI,IAAI,GAC1FmQ,EAAe7M,SAAS0M,EAAgBhQ,aAGzC,gBACAZ,YAAgB,CACd5B,IAAKC,EACLuB,QAAS+Q,EACT1Q,OAAQ,cACRC,KAAM,YALR,QAMM,GANC8Q,EAAP,oBAQMC,EAAWC,GAAU9S,IACrB+S,EAAiB,IAAI7S,IAAMC,UAAU0S,GAG3C,YACEjR,YAAgB,CACd5B,IAAK+S,EACLvR,QAAS+Q,EACT1Q,OAAQ,cACRC,KAAM,YALV,QAMQ,GANR,mBAAOkR,EAAP,KAAwBC,EAAxB,KAOAC,GAPA,KAOM,GAMN,GALFtD,QAAQC,IAAI,MAAOmD,GACjBpD,QAAQC,IAAI,SAAS6C,GACrB9C,QAAQC,IAAI,gBAAgB8C,GAC5B/C,QAAQC,IAAI,mBAAmBoD,GAC/BrD,QAAQC,IAAI,0CACT+C,IAAUrQ,GAAWD,IAAkBC,GAAWiQ,IAAmBjQ,EAAQ,CAC9EqN,QAAQC,IAAI,sBAAsB/J,SAAS8M,EAAOpQ,aAEpDoN,QAAQC,IAAI,mBAAmB/J,SAASmN,IACtCrD,QAAQC,IAAI,uBAAuB/J,SAAS0M,EAAgBhQ,aAC5DmQ,EAAe7M,SAAS0M,EAAgBhQ,YAAayQ,EAAIL,EAC3DhD,QAAQC,IAAI,iBAAkB/J,SAAS8M,EAAOpQ,aAC9CoN,QAAQC,IAAI,SAAU/J,SAASxD,EAAeE,YAAYsD,SAAS8M,EAAOpQ,YAAY,KACtF,IAAI2Q,EAAW,EAAErN,SAAS8M,EAAOpQ,YAAY,IAC7CoN,QAAQC,IAAI,uBAAwB/J,SAASmN,EAAIzQ,YAAb,SAA0B,GAAI,KAC9CsD,SAASmN,EAAIzQ,YAAb,SAA0B,GAAI,IAAlD,IACI4Q,EAAaD,EACjBvD,QAAQC,IAAI,0BAA2BuD,EAAW,KAClDxD,QAAQC,IAAI,0CAA2C6C,EAAYC,EAAc,KACjF/C,QAAQC,IAAI,WAAuB,EAAXuD,EAAa,IAAI,SAAUV,EAAYC,EAAc,IAAI,aACjF,IAAIU,EAAWX,GAA2B,EAAdC,GAAb,SAAgC,GAAI,IACnD/C,QAAQC,IAAI,OAAQwD,GACpBzD,QAAQC,IAAI,QAAS6C,EAAYC,EAAc,GAC9CO,EAAOG,EAER,OAAOH,EJ9BAI,GACX1D,QAAQC,IAAI,MAAOyC,IACjB,IASIxI,GACA4C,GACAC,GAXE3I,GAAeC,YAAgB3E,EAAc3D,GAE/C2I,GAAc7B,IAChBiC,GAAW,IAEVJ,KAAgB/B,IAEjBmC,GAAWJ,GAAY9B,YAKzB,IAAIuK,GAAY,GACZD,GAAW,EACXnG,GAAS,GACVtC,IAAe9B,IAEhBoE,GAAUtC,EAAW7B,YAEvB,IAAI+Q,GAAO,EAERhR,IAAYiM,IAEb1E,GAAO0E,EAAIhM,WACX+Q,GAAoC,KAA7B3N,WAAW4I,EAAIhM,aAExB,IAAIgR,GAAYD,GAAOlB,GACpB9P,IAAYsK,KAEbH,GAAO5G,SAAS+G,EAAQrK,cACxBmK,GAAM3K,KAAKC,MAAMC,KAAKC,MAAQ,MAEV,IAElB2K,GAAWJ,GAAKC,IAEF,IAAbG,KAEDC,GAAa,0DAGZtJ,EAAMjC,UAAYoC,IAErB6N,EAAUC,GAIT,IAAI+B,GAAY7B,EAEhBnO,EAAMjC,UAAYsC,IAEjB2N,EAAUE,GAEd,IAAI,GACF1Q,mBAAmD,GADrD,qBAAKtC,GAAL,MAAa0G,GAAb,MAEA,GACEhG,EAAeC,GADHkB,GAAd,GAAQC,KAA8BC,GAAtC,GAA+BC,MAGvB6H,GAAgCxE,GACpC4B,WAAW6C,YAAYzE,GAAc,KACrC,EAmBJ,GACAnB,IADc6Q,GAAd,GAAQjT,KAAyBqC,GAAjC,GAA0BnC,MAiB1BiP,QAAQC,IAAI,QAAS8B,GACrB,IAAMgC,GAA6BF,GACjC7N,WAAW6C,YAAYgL,GAAW,KAClC,EACIG,GAA+B7B,EACnCnM,WAAW6C,YAAYsJ,EAAQ,KAC/B,EACI8B,GAA2BpC,EAC/B7L,WAAW6C,YAAYgJ,EAAS,KAChC,EACElC,GAAYnM,KAEVoM,GAA4BD,GAChC3J,WAAW6C,YAAY8G,GAAW,KAClC,EAEEE,GAAa1M,IACb+Q,GKpLiC,SAACtS,GAA4C,IAAD,EACjF,EAA6B9F,cAArBC,EAAR,EAAQA,QAAS4D,EAAjB,EAAiBA,QAGXC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,eAA2DI,IAAUC,YAOjGC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GAK5C,YACE8B,YAAgB,CACd5B,IAAKC,EACLuB,QAAS9B,EACTmC,OAAQ,SACRC,KAAM,CAACnG,YALX,QAMQ,GACR,OAPA,oBLkKmBoY,GAEbrE,GAA6BD,GACjC7J,WAAW6C,YAAYgH,GAAY,KACnC,EACIuE,GAA+BF,GACnClO,WAAW6C,YAAYqL,GAAc,KACrC,EAEF,GM5L8B,WAE9B,IAAQvU,EAAY7D,cAAZ6D,QAIFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC9FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAMnB,OAAOK,YAAoBF,EAAmB,YAAa,CACzDG,gBAAiB,gBN2KjB0T,GADYjL,GAAd,GAAQvI,KAAgCwI,GAAxC,GAAiCtI,MAI/B,GOpM6B,WAE/B,IAAQpB,EAAY7D,cAAZ6D,QAIFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAC5FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAKnB,OAAOK,YAAoBF,EAAmB,OAAQ,CAClDG,gBAAiB,mBPoLnB2T,GADYC,GAAd,GAAQ1T,KAAiC2T,GAAzC,GAAkCzT,MAGhC,GQvM4B,WAEhC,IAAQpB,EAAY7D,cAAZ6D,QAIFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,eAA2DI,IAAUC,YAC/FC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAKnB,OAAOK,YAAoBF,EAAmB,OAAQ,CAClDG,gBAAiB,mBRuLnB8T,GADc9J,GAAd,GAAQ9J,KAGR,IAHA,GAAmCE,MSvMF,WAErC,IAAQpB,EAAY7D,cAAZ6D,QAIFC,EAAcD,EAAUE,EAAaF,GAAW,UAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,gBAA4DI,IAAUC,YAChGC,EAAYC,EAAOC,IACnBC,EAAkB,IAAIC,IAAMC,UAAUL,GACtCM,EAAoB,IAAIC,IAC5BX,EAAiBO,GAKnB,OAAOK,YAAoBF,EAAmB,OAAQ,CAClDG,gBAAiB,mBT0LnB+T,IADcC,GAAd,GAAQ9T,KAUN+T,IAVF,GAAoC7T,MAUV,WAC5B,OAAO4J,OAMT,GAAoDtJ,oBAAS,GAA7D,qBAAOwT,GAAP,MAA2BC,GAA3B,MAEMC,GAAoB,WACxBF,IAAsBC,IAAsB,IAG9C,GAAsDzT,oBAAS,GAA/D,qBAAO2T,GAAP,MAA4BC,GAA5B,MAEMC,GAAoB,WACxBF,IAAuBC,IAAuB,IAGhDzT,qBAAU,WAIN+C,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,mBAAjCoN,EAAapL,mBACfqH,OAAS,IAEV6M,IAAsBC,IAAsB,KAE9C,CAACvQ,EAAesQ,KAGnBrT,qBAAU,WAGN+C,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,gBAAjCoN,EAAapL,mBACfqH,OAAS,IAEVgN,IAAuBC,IAAuB,KAEhD,CAAC1Q,EAAeyQ,KAOnB,IAAM9I,GAAyC,WAA9B7C,GAAmB5H,OAE9B0K,GAA2C,WAA/BqI,GAAoB/S,OACpC/C,GAAM,EACLwO,GAAW,IAEdxO,GAAMwO,GAAW,IAEnB,IAAIQ,GAAO,EACRhP,GAAM,KAETgP,GAAOhP,GAAM,IAEX,IAAM7C,GAAUV,KACZga,IAAYnP,WAAWe,IAAU,KAAWoE,QAAQ,IAGxD,GU3Q4B,SAACzL,GAC7B,MAA6B5D,cAArB6D,EAAR,EAAQA,QAGFC,GAHN,EAAiB7D,QACDuM,EAARlI,IAEYT,EAAUE,EAAaF,GAAW,WAChDG,EAAkBH,EAAUI,EAAa,SAAaH,GAA1B,YAAwDI,IAAUC,YAChG4B,EAAiBlC,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YACvFgF,EAAOtF,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAC5E6J,EAAQnK,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,YAEnF2H,EAAc9F,EAAS1B,IACvB2B,EAAmB,IAAIzB,IAAMC,UAAUqH,GAIvC1H,GAHkB,IAAIO,IAC1BoB,EAAgBE,GAEA5B,EAAOC,KACnB2J,EAAUC,EAAU5J,IACpB6J,EAAgB,IAAI3J,IAAMC,UAAUwJ,GACpC1J,EAAkB,IAAIC,IAAMC,UAAUL,GAMtCkV,GALoB,IAAI3U,IAC5BX,EAAiBO,GAII,IAAII,IACvBqJ,EAAOG,IAMHC,EAHa,IAAIzJ,IACrBwE,EAAMgF,GAGFoL,EAAM,2BACX3V,IAAiBoK,IAEhBI,EAAOkL,EACPvT,EAAiB/B,EACjBuV,EAAM,4BAGV,MAA0ChU,mBAAS,KAAnD,mBAAsBE,GAAtB,WACE,EACEb,YAAoBwJ,EAAM,UAAW,CACnCvJ,gBAAiB0U,IAFPlU,EAAd,EAAQN,KAA+B8I,EAAvC,EAAgC5I,MAS5B,EAA0BM,mBAASsI,GAAnC,mBAAO5I,EAAP,KAAcW,EAAd,KAOA,OALAF,qBAAU,WACNE,EAASiI,KAEV,CAACA,IAEG,CAAE9I,KAXG,SAAC9B,GAEX,OADAwC,EAAiBxC,GACVoC,EAAiBU,EAAgB,qCAS3Bd,SVmNnBuU,CAAe5V,GADD0K,GAAd,GAAQvJ,KAA0BwJ,GAAlC,GAA2BtJ,MAMrB8J,GAAa,WACjB,IAAMC,EAAcxK,IAAMyK,WAAWhM,GAAO6D,YAC5C,OAAOwH,GAAYU,EAAYlI,aAuB7B8J,IARiB,kBAAX3N,GAEAiH,WAAWjH,IAAQoM,QAAQ,GAI3BnF,WAAWjH,GAAO6D,aAEXA,WAEb2S,GAAqC,KAArBvP,WAAW0G,IAAkB1G,WAAWlB,GAASlC,YACjEiK,GAAK,IACNzI,KAAiBzB,IAElBkK,GAAKzI,GAAaxB,YAEpB,IAAM4S,GAAgBxP,WAAW6G,IAAM7G,WAAW0G,IAAS,KACrDM,GAA0D,IAAlChH,WAAWjH,GAAO6D,YAG1CyJ,GAA8C,WAAlCnJ,GAAuBzB,OAEnC2K,IADatL,GAAiBW,OACY,WAA9B4H,GAAmB5H,QAC/B+K,GAA2B,WAAfnC,GAAI5I,OAChBgU,GAAwC,WAA5B3U,GAAiBW,OAYnC,IAVgBpF,EAAA,GAQjB6P,IAAYE,IAAaC,IAAaF,IAAaK,KAAa+B,EAAA,EAG/DlN,oBAAS,IADT,qBAAOqU,GAAP,MAAmCC,GAAnC,MAEA,GACEtU,oBAAS,GADX,qBAAOoK,GAAP,MAAiCC,GAAjC,MAEA,GAA4DrK,oBAAS,GAArE,qBAAOsK,GAAP,MAA+BC,GAA/B,MACA,GAA8DvK,oBAAS,GAAvE,qBAEMwK,IAFN,YAEyB,WACvBJ,IAA4BC,IAA4B,GACxDgK,IAA8BC,IAA8B,GAC5DhK,IAA0BC,IAA0B,KAqCxD,OAlCEpK,qBAAU,WAIN+C,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,2BAAjCoN,EAAapL,mBACfqH,OAAS,KAEVyD,IAA4BC,IAA4B,GACzDC,IAA0BC,IAA0B,IAGpDrH,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,6BAAjCoN,EAAapL,mBACfqH,OAAS,IAEV0N,IAA8BC,IAA8B,GAG7DpR,EAAcuH,QACZ,SAACC,GAAD,MACwB,uBAAtBA,EAAapN,MACoB,iBAAjCoN,EAAapL,mBACfqH,OAAS,IAEXyD,IAA4BC,IAA4B,IACvDC,IAA0BC,IAA0B,MAEtD,CAACrH,EAAekH,GAA0BE,KAE5C9H,EAAMjC,UAAYqC,EAEZ,qCACN,qDAAwBiG,MACxB,+CAAkB4C,GAAlB,OACA,kDAAqBC,MACrB,oDAAuBG,GAAvB,eAA6CxO,GAA7C,eAA8DgP,GAA9D,YACA,qCAAQP,GAAR,OACC,sEAAyCgI,GAAzC,iBACA,sEAAyCvB,MACzC,+EAGD/P,EAAMjC,UAAYoC,EAGnB,qCACE,sBAAK5H,UAAWP,GAAQyT,iBAAxB,UACE,cAAC,EAAD,CACEnS,MAAK,yBAAoB4G,EAApB,YACLhF,OAA0B,KAAlBkV,GACR/U,YAAasQ,IAEd,cAACnT,EAAA,EAAD,CACCC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAASgY,GACTpX,SAAU2O,GALX,SAOED,GAAW,cAACqC,EAAA,EAAD,CAAkB1R,KAAM,KAA3B,wCAGb,cAACmS,EAAA,EAAD,CACEC,KAAM4F,GACN3F,iBAAkB,IAClBC,QAAStD,GAHX,SAKE,cAACuD,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,iDAQNW,QAAQC,IAAI,SAAS+D,IAClBnQ,EAAMjC,UAAYsC,GAAY6P,IAAsBC,GAGrD,qCACE,sBAAK5X,UAAWP,GAAQyT,iBAAxB,UAEF,4GACA,iEACA,cAAC,EAAD,CACQnS,MAAK,gEACL4B,OAAQiV,GACR9U,YAAasQ,IAGlB,cAACnT,EAAA,EAAD,CACGC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QA7OyB,WAC7B,OAAO+X,MA6OHnX,SAAU2O,GALb,SAOID,GAAW,cAACqC,EAAA,EAAD,CAAkB1R,KAAM,KAA3B,yDAEb,cAAC,EAAD,CACMM,MAAK,iEACL4B,OAAQgV,GACR7U,YAAasQ,IAGjB,cAAC,EAAD,CACErS,MAAK,yBACL4B,OAAQqV,GACRlV,YAAauR,IAEhB,cAACpU,EAAA,EAAD,CACGC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAASgY,GACTpX,SAAU2O,GALb,SAOID,GAAW,cAACqC,EAAA,EAAD,CAAkB1R,KAAM,KAA3B,6DAGb,cAACmS,EAAA,EAAD,CACEC,KAAM4F,GACN3F,iBAAkB,IAClBC,QAAS4F,GAHX,SAKE,cAAC3F,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,iDASNnF,GAFGqL,GAEI,cAAClZ,EAAA,EAAD,CACLC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QA7W4B,WAE1B,IAAIgZ,EASJ,OANAA,EAFmB,kBAAX7W,GAEEuB,IAAMyK,WAAW/E,WAAWjH,GAAO6D,YAAYuI,QAAQ,KAGxD,IAGFvK,GADagV,EACehT,aAmWrCpF,SAAW0O,IAAYuJ,IAAWD,IAAgBxI,IAA2BZ,IAAaI,GALrF,SAOJN,IAAYE,IAAYqJ,IAAYpJ,IAAaF,IAAaK,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,UAIrG,cAACR,EAAA,EAAD,CACPC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAjWkB,WAChB,IAAIiZ,EASJ,OANEA,EAFmB,kBAAX9W,GAEEuB,IAAMyK,WAAW/E,WAAWjH,GAAO6D,YAAYuI,QAAQ,KAGxD,IAGJ2I,GADa+B,EACUjT,aAyVhCpF,SAAU0O,IAAYuJ,IAAYrJ,IAAcoJ,IAAiBxI,IAA0BuI,IAAgB/I,GANpG,SAQNN,IAAYE,IAAaqJ,IAAWpJ,IAAaF,IAAaK,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,sBAI1G,qCACE,sBAAKT,UAAWP,GAAQyT,iBAAxB,UACA,mCAAK,mBAAG9S,KAAK,yHAAyHC,OAAO,SAAxI,4GACC,8DAA0BiW,SAA1B,IAA0BA,QAA1B,EAA0BA,GAAKvH,QAAQ,GAAvC,OACN,cAAC,EAAD,CACIhO,MAAK,sCACL4B,OAAQ6J,GACR1J,YAAasQ,IAEf,cAAC,EAAD,CACErS,MAAK,4DACLE,SAAUuL,GACVxL,GAAE,wBAAmB2G,GACrB3H,UAAWP,GAAQ8V,QACnBrU,MAAOyB,GACPxB,SAAUkI,GAEVjI,SAAU0O,IAAYuJ,IAAarJ,IAAaI,KAEhDtC,GAGM,cAAC7N,EAAA,EAAD,CACNC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAASiO,GAETrN,SAAU0O,IAAYuJ,IAAYrJ,IAAeI,GAN3C,SAQLN,IAAYE,IAAaC,IAAaF,IAAaK,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAS,yDAInG,cAAC,EAAD,CACEM,MAAK,sCACL4B,OAAQkV,GACR/U,YAAasQ,IAGvB,cAAC,EAAD,CACQrS,MAAK,sBACL4B,OAAQ+Q,GACR5Q,YAAauR,IAEf,cAAC,EAAD,CACEtT,MAAK,sBACL4B,OAA2B,KAAnB6Q,GACR1Q,YAvgBQ,mCAygBR,cAAC7C,EAAA,EAAD,CACEC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QA5WoB,WAC1B,OAAOwM,MA4WD5L,SAAU0O,GALZ,SAOGA,IAAYE,IAAaC,IAAaF,IAAaK,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAvF,qBAxDL,WAyDmB,cAACR,EAAA,EAAD,CACfC,MAAM,UACNC,QAAQ,YACRM,KAAK,QACLD,QAhXqB,WAC3B,OAAO2X,MAgXD/W,SAAU2O,GALK,SAOdD,IAAYE,IAAaC,IAAaF,IAAaK,GAAY,cAAC+B,EAAA,EAAD,CAAkB1R,KAAM,KAAvF,wCASX,cAACmS,EAAA,EAAD,CACEC,KAAMxD,GACNyD,iBAAkB,IAClBC,QAAStD,GAHX,SAKE,cAACuD,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,qHAKF,cAACL,EAAA,EAAD,CACEC,KAAMtD,GACNuD,iBAAkB,IAClBC,QAAStD,GAHX,SAKE,cAACuD,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,2CAIF,cAACL,EAAA,EAAD,CACEC,KAAM+F,GACN9F,iBAAkB,IAClBC,QAAS+F,GAHX,SAKE,cAAC9F,GAAA,EAAD,CAAOD,QAAS+F,GAAmB7F,SAAS,UAA5C,4CAII,cAACL,EAAA,EAAD,CACEC,KAAM4F,GACN3F,iBAAkB,IAClBC,QAAS4F,GAHX,SAKE,cAAC3F,GAAA,EAAD,CAAOD,QAAS4F,GAAmB1F,SAAS,UAA5C,6CAIF,cAACL,EAAA,EAAD,CACEC,KAAMyG,GACNxG,iBAAkB,IAClBC,QAAStD,GAHX,SAKE,cAACuD,GAAA,EAAD,CAAOD,QAAStD,GAAkBwD,SAAS,UAA3C,gHWjnBFlU,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCsV,WAAY,CACVlV,QAAS,OACTiI,cAAe,SACf9E,WAAY,SACZjD,IAAKN,EAAMG,QAAQ,IAErBoV,IAAK,CACHC,gBAAiB,QACjBC,aAAc,OACdxS,OAAO,GAAD,OAAKjD,EAAMG,QAAQ,GAAnB,QACND,QAASF,EAAMG,QAAQ,IAEzBuV,OAAQ,CACNzU,MAAO,aAKEwZ,GAAoB,SAAC,GAEH,IAD7B7E,EAC4B,EAD5BA,gBAEMpV,EAAUV,KAChB,EAAoDkG,mBAAiB,GAArE,mBAAO6P,EAAP,KAA2BC,EAA3B,KAQMjV,OAA0BC,IAFZL,cAAZC,QAIR,OACE,eAACqV,GAAA,EAAD,WAAK,uBACH,oBAAIhV,UAAU,qBAAd,qBACA,cAACgV,GAAA,EAAD,CAAKhV,UAAWP,EAAQ+U,IAAxB,SACE,8BACG1U,EACC,eAACmV,GAAA,EAAD,CAAY/T,MAAO4T,EAAmBtO,WAAtC,UACE,cAAC0O,GAAA,EAAD,CAAS/T,SAfA,SAACU,EAA8BC,GAClDiT,EAAsBjL,SAAShI,KAcY,aAAW,kBAA5C,SACG+S,EAAgBM,KAAI,SAAC1N,EAAO2N,GAC3B,OACE,cAACC,GAAA,EAAD,CACEtU,MAAO0G,EAAME,KACbzG,MAAOkU,EAAM5O,YACR4O,QAKZP,EAAgBM,KAAI,SAAC1N,EAAO2N,GAC3B,OACE,cAACE,GAAA,EAAD,CAAUpU,MAAQkU,EAAO5O,WAAzB,SACE,cAAC,GAAD,CAASiB,MAAOA,KADwB2N,SAOhD,cAAC,EAAD,YC/CNrW,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC0a,MAAO,CACLzZ,MAAOjB,EAAM2a,QAAQC,OAAOC,MAC5BC,UAAW,SACX5a,QAASF,EAAMG,QAAQ,QAKd4a,GAAO,WAClB,IAqBInF,EArBJ,EAAmCnV,cAA5BC,EAAP,EAAOA,QAAS4D,EAAhB,EAAgBA,QAASmE,EAAzB,EAAyBA,MAGnBlE,GADUzE,KACIwE,EAAUE,EAAaF,GAAW,WAIhDuE,GAFmBvE,EAAUI,EAAa,SAAaH,GAA1B,WAAuDI,IAAUC,YAC5EN,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YACjFN,EAAUI,EAAa,SAAaH,GAA1B,SAAqDI,IAAUC,aACpFqJ,EAAY3J,EAAUI,EAAa,SAAaH,GAA1B,UAAsDI,IAAUC,YAExEN,EAAUI,EAAa,SAAaH,GAA1B,KAAiDI,IAAUC,YAEpEN,EAAUI,EAAa,SAAaH,GAA1B,QAAoDI,IAAUC,YAa3FgR,EAHa,+CAAZlV,EAGgB,CACf,CACEyT,MAAO6G,EACPzU,QAASsC,EACTH,KAAM,YAER,CACEyL,MAAO8G,EACP1U,QAAS,6CACTmC,KAAM,oBAER,CACEyL,MAAO8G,EACP1U,QAAS0H,EACTvF,KAAM,eAER,CACEyL,MAAO8G,EACP1U,QAAS,6CACTmC,KAAM,yBAMO,CACjB,CACEyL,MAAO6G,EACPzU,QAASsC,EACTH,KAAM,YAER,CACEyL,MAAO8G,EACP1U,QAAS,6CACTmC,KAAM,oBAER,CACEyL,MAAO8G,EACP1U,QAAS0H,EACTvF,KAAM,gBAIV,IAAMwS,EAAiC,CACrC,CACE/G,MAAO6G,EACPzU,QAASsC,EACTH,KAAM,YAIV,EAAgD1C,oBAAS,GAAzD,mBAAOmV,EAAP,KAAyBC,EAAzB,KAEMC,EAA0B,SAC9BzY,EACA0Y,GAEe,cAAXA,GAIJH,GAAoBC,GAAoB,IAe1C,OAPAjV,qBAAU,YACJsC,GAAyB,4BAAfA,EAAMC,MAAqD,MAAfD,EAAMC,KAG9DyS,GAAoBC,GAAoB,IAFvCD,GAAoBC,GAAoB,KAI1C,CAAC3S,EAAO0S,IAET,qCACE,cAAC3Y,EAAA,EAAD,CACEtB,QAAQ,KACR4C,UAAU,KACVtD,QAAS,CACP+a,KAAM,sBAJV,0CAOa,0CACb,cAAC,GAAD,CAAY3F,gBAAiBA,IAC7B,cAAC,GAAD,CAAmBA,gBAAiBsF,IACpC,cAACvH,EAAA,EAAD,CACEC,KAAMuH,EACNtH,iBAAkB,IAClBC,QAASuH,EAHX,SAKE,cAACtH,GAAA,EAAD,CAAOD,QAASuH,EAAyBrH,SAAS,UAAlD,gG,8BCpJKwH,GAAM,WACjB,OACE,eAACC,GAAA,EAAD,CAAcC,OAAQ,CACpBC,gBAAiB,CAACC,KAAQC,SAC1B3S,cAAe,CACb4S,iBAAkB,IAClBC,cAAe,MAJnB,UAOE,cAAC,EAAD,IACA,cAACC,GAAA,EAAD,CAAW1T,SAAS,KAApB,SAEE,cAAC,GAAD,U,OCPY2T,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ea9f755b.chunk.js","sourcesContent":["import { Button, Link, makeStyles} from \"@material-ui/core\"\nimport { useEthers } from \"@usedapp/core\"\n\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4),\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    gap: theme.spacing(1)\n  },\n}))\n\nexport const Header = () => {\n  const classes = useStyles()\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n\n  return (\n    <div className={classes.container}>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org\" target=\"_blank\" rel=\"noopener noreferrer\">Home</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://quickswap.exchange/#/swap?outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\" target=\"_blank\" rel=\"noopener noreferrer\">Buy Forge</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org/whitepaper.html\" target=\"_blank\" rel=\"noopener noreferrer\">Info</a>\n      </Button>\n      <Button color=\"primary\" variant=\"contained\">\n      <a  className=\"buttonD\" href=\"https://forgetoken.org/stats.html\" target=\"_blank\" rel=\"noopener noreferrer\">Stats</a>\n      </Button>\n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n            {`${account?.slice(0, 4)}...${account?.slice(-3)}`}\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          className=\"buttonW\"\n          color=\"primary\"\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n    </div>\n  )\n}","export default __webpack_public_path__ + \"static/media/eth.6e1743e3.png\";","export default __webpack_public_path__ + \"static/media/pow2.56016ef0.png\";","import React from \"react\";\nimport { Slider, Input, Typography, makeStyles } from \"@material-ui/core\";\n\ninterface SliderInputProps {\n  label?: string;\n  id?: string;\n  maxValue: number;\n  value: number | string | (string | number)[];\n  onChange: (newValue: number | string | Array<number | string>) => void;\n  disabled?: boolean;\n  [x: string]: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  inputsContainer: {\n    display: \"grid\",\n    gap: theme.spacing(3),\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: \"1fr auto\",\n  },\n  slider: {},\n}));\n\nexport const SliderInput = ({\n  label = \"\",\n  id = \"input-slider\",\n  maxValue,\n  value,\n  onChange,\n  disabled = false,\n  ...rest\n}: SliderInputProps) => {\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    onChange(newValue);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      onChange(0);\n    } else if (value > maxValue) {\n      onChange(maxValue);\n    }\n  };\n\n  const sliderStep = maxValue / 100;\n  const inputStep = maxValue / 50;\n\n  const classes = useStyles();\n\n  const sliderMarks = [\n    {\n      value: 0,\n      label: \"0%\",\n    },\n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n\n  // ... is a \"Spread\" operator\n  // standard javascript thing\n  // works on iterables\n  // expands a list\n  return (\n    <div {...rest}>\n      {label && (\n        <Typography id={id} gutterBottom>\n          {label}\n        </Typography>\n      )}\n      <div className={classes.inputsContainer}>\n        <div>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            step={sliderStep}\n            onChange={handleSliderChange}\n            aria-labelledby={id}\n            max={maxValue}\n            disabled={disabled}\n            marks={disabled ? [] : sliderMarks}\n          />\n        </div>\n        <div>\n          <Input\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            disabled={disabled}\n            inputProps={{\n              step: inputStep,\n              min: 0,\n              max: maxValue,\n              type: \"number\",\n              \"aria-labelledby\": id,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\"\nimport { Typography, makeStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\"\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    }\n}))\n\ninterface BalanceMsgProps {\n    label: string;\n    amount: number;\n    tokenImgSrc: string\n}\n\nexport const BalanceMsg = ({ label, amount, tokenImgSrc }: BalanceMsgProps) => {\n\n    const classes = useStyles()\n\n    return <div className={classes.container}>\n        <Typography component=\"span\">{label}:</Typography>\n        <Typography className={classes.amount} component=\"span\">{amount}</Typography>\n        <img className={classes.tokenImg} src={tokenImgSrc} alt=\"token logo\" />\n    </div>\n}","import React from \"react\";\nimport { Typography, makeStyles, Button } from \"@material-ui/core\";\n\nimport { useEthers } from \"@usedapp/core\"\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"grid\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    gridTemplateRows: \"150px\"\n  },\n}));\n\nexport const ConnectionRequiredMsg = () => {\n  const classes = useStyles();\n\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n  return (     \n      \n      \n      <div className={classes.container}>\n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n            {`${account?.slice(0, 4)}...${account?.slice(-3)}`}\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          className=\"buttonW\"\n          color=\"primary\"\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Typography variant=\"h6\" component=\"span\">Please connect your Metamask account.     <br></br> \n      <br></br>You must be on POLYGON Network <a href=\"https://chainlist.org/\">Go here to add Polygon</a> \n      <br></br> Search for Polygon in <a href=\"https://chainlist.org/\">Chainlist</a> to add the network \n      </Typography>\n      \n      \n      \n      </div>\n      \n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contract\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(LPRewardsContract, \"stake\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(tokenAddress, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(LPRewardAddress, amount)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n  var t = account\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"currentDay\",\n        args: [],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats2 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    \n  \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"nextDayTime\",\n        args: [],\n      }) ?? []\n  \n    return time\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats3 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\n    \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, test2 ],\n      }) ?? []\n      \n    return time\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Mock from \"../chain-info/AMock.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const GetApprovalAmt = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTokenAddresss = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n\n  const rewardABI = Mock.abi\n  const MockInterface = new utils.Interface(rewardABI)\n    \n  /*\n    const [stakingBalance] =\n      useContractCall({\n        abi: sushiInterface,\n        address: sushi,\n        method: \"allowance\",\n        args: [account, LPRewardAddress],\n      }) ?? []\n      console.log(\"F U \", stakingBalance)\n\n      */\n    const [stakingBalance] =\n    useContractCall({\n      abi: MockInterface,\n      address: LPTokenAddresss,\n      method: \"allowance\",\n      args: [account, LPRewardAddress],\n    }) ?? []\n\t\n    return stakingBalance\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const StakeThatCake = (tokenAddress: string) => {\n  const { chainId} = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\n\n\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"stake\", {\n  transactionName: \"Stake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(amount)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  //const { abi } = TokenFarm\n  //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  //const tokenFarmInterface = new utils.Interface(abi)\n\n  //MY STUFF\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n\n\n  \n\n  const [stakingBalance] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"earned\",\n      args: [account],\n    }) ?? []\n  return stakingBalance\n}\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Mock from \"../chain-info/AMock.json\"\n\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens4 = (tokenAddress: string) => {\n\n\n\n \n\n  const testabi = Mock.abi\n\n  const LPFarmInterface2 = new utils.Interface(testabi)\n  const mock = new Contract(\n      tokenAddress, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(mock, \"withdrawToken\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(amount)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance2 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"earned2\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance3 = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n    return stakingBalance\n  }","import React, { useEffect, useState } from \"react\"\nimport { SliderInput } from \"../../components\"\nimport { useEthers, useTokenBalance, useNotifications, addressEqual } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\"\nimport CurrencyInput from 'react-currency-input-field';\nimport { Token } from \"../Main\"\nimport { useStakeTokens,AuctionStats8, ApproveOnlyMax2, DistributeAuction2, DistributeReward2, AuctionStats7, AuctionStats6, AdvAuctions, AuctionNoApprove, GetApprovalAmt2, AuctionThatCake, StakeThatCake,GetApprovalAmt,  DistributeAuction, AuctionPlayerStats2, GetLPStats, useStakeTokens6, useStakeTokens7, AuctionStats, AuctionStats2, useUnstakeTokens4, useUnstakeTokens5, useAuctions1, AuctionStats3, AuctionPlayerStats } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"@reach/tabs\";\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n\n  const { chainId, error } = useEthers()\n  const { address: tokenAddress, name } = token\n  \n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const zeroxBTCAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  const { account } = useEthers()\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n\n  const xbtctokenBalance = useTokenBalance(proofOfWorkAddress, account)\n  const xbtcbalance = useTokenBalance(zeroxBTCAddress, account)\n  const { notifications } = useNotifications()\n  const classes = useStyles()\n  const auctionPot = AuctionStats3(tokenAddress)\n  var approvalamt = GetApprovalAmt(tokenAddress)\n  const auctionPotYOURS = AuctionStats6(tokenAddress)\n  const tokenBalancez = useTokenBalance(LP_token, account);\n  let nothing\nvar aprovamt = \"0\"\n//LP Approval\n  if(approvalamt !== nothing)\n{\n    aprovamt = approvalamt.toString()\n}\nvar approvalamt2 = GetApprovalAmt2(tokenAddress)\n\n  //Auction Approval\nvar aprovamt2 = \"0\"\nif(approvalamt2 !== nothing)\n{\n  aprovamt2 = approvalamt2.toString()\n}\n\n  let arrayofdaysauction = []\n  var currentday = 0\n  \n  const fday = AuctionStats(tokenAddress)\n  var maxprevday = \"0\"\n  \n\n  var tb = \"0\"\n  if(tokenBalancez !== nothing)\n  {\n    tb = tokenBalancez.toString()\n  }\n\n  const [name2, setName] = useState(\"\");\n  var [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n    var [amountsdfsd, setAmountsdfsd] =\n      useState<number | string | Array<number | string>>(1)\n    const [amount2, setAmount2] =\n      useState<number | string | Array<number | string>>(0)\n\n  const [eraz, setAmountEra] =\n  useState<string | undefined | Array<number | string>>(\"1\")\n  \n  var [fmtInputzz, setInput] =\n  useState<string | undefined | Array<number | string>>(tb)\n  var fmtInputz = \"2\"\n  if(fmtInputzz !== nothing)\n  {\n    fmtInputz = fmtInputzz.toString();\n  }\n  var erazz = \"1\"\n  if(eraz !== nothing)\n{\n  erazz = eraz.toString()\n}\n  const [paddy, setAddress] =\n  useState<string | undefined | Array<number | string>>(\"0\")\n  //GETS CURRENT day 10 amt\n   var testz = amount.toString()\n   var ex = parseFloat(testz)\n   var ex1 = Math.round(ex)\n\n   //var testing = AuctionPlayerStats(tokenAddress, \"10\")\n   \nvar cdaystring = \"1\"\n\n   if(fday !== nothing )\n   {\n     currentday = parseInt(fday.toString())\n     var temp = currentday - 1 \n     maxprevday = temp.toString()\n      cdaystring = fday.toString()\n \n   }\n   \n  const TotalOwedAll = AuctionStats7(parseInt(maxprevday))\n   \n   \n  var daysnow = \"0\"\n  if(startingauction !== nothing && startingauction <= cdaystring)\n{\n  daysnow = cdaystring.toString()\n}\nelse if(startingauction !== nothing)\n{\ndaysnow = (startingauction).toString()\n}\n\n   var [startingauction, setAmountz] =\n   useState<string | undefined | Array<number | string>>(cdaystring)\n   \n   const [auctionnumber, setAmountzz] =\n   useState<string | undefined | Array<number | string>>(\"1\")\n\n  var daysnow = \"0\"\n  if(startingauction !== nothing && startingauction <= cdaystring)\n{\n  daysnow = cdaystring.toString()\n}\nelse if(startingauction !== nothing)\n{\ndaysnow = (startingauction).toString()\n}\n  var numberofAuctions = 1\n  if(auctionnumber !== nothing)\n  {\n    numberofAuctions = parseFloat(auctionnumber.toString())\n  }\n\n\n    var totalPot\n  var urpercent\n  var urpercentz\n\n  var [name23, setName2] = useState(account);\n  var [name233, setName22] = useState(account);\n  name233 =account\n  const { send: getAuctionTokens2, state: unstakeTokensState2za } =\n  DistributeAuction2(name233)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const { send: stakeTokensSend2, state: stakeTokensState2 } =\n    useAuctions1(tokenAddress)\n\n    const { send: advAuction1, state: auctionState2 } =\n    AdvAuctions(tokenAddress, startingauction, numberofAuctions, name23, eraz  )\n\n  \n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n    const formattedTokenBalancezz: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 0))\n    : 0\n\t\n\n\n    var check2 = 0\n    if(formattedTokenBalance > 0)\n    {\n      check2 = formattedTokenBalance\n    }\n\n\n    const formattedTokenBalance2: number = xbtcbalance\n  ? parseFloat(formatUnits(xbtcbalance, 8))\n  : 0 \n  var check = 0\n  if(formattedTokenBalance2 > 0)\n  {\n    check = formattedTokenBalance2\n  }\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n  const handleStakeSubmitzz = () => {\n\n    var fuck7\n  if(typeof amount === 'number')\n  {\n    fuck7 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n  }\n  else{\n    fuck7 =  \"0\"\n  }\n    const amountAsWei = fuck7\n\t\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n\n\n  const handleStakeSubmit2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeTokensSend2(amountAsWei.toString())\n  }\n  //TESTING V\n\n  // advanced auction submit\n\n  const handleStakeSubmitAdvAuction = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return advAuction1(amountAsWei.toString())\n  }\n\n  //sets up LPRewards to run\n\n  const { send: stakeTokensSend6, state: stakeTokensState5 } =\n    useStakeTokens6(tokenAddress)\n\n  const rewardStart = () => {\n    return stakeTokensSend6()\n  }\n\n  const { send: stakeTokensSend7, state: stakeTokensState6 } =\n    useStakeTokens7(tokenAddress)\n\n  const rewardStart2 = () => {\n    return stakeTokensSend7()\n  }\n  //lp run done\n\n\n  //LP faucet\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n  useUnstakeTokens4(tokenAddress)\n\n  //0xBTC faucet\n    const { send: unstakeTokensSend2, state: unstakeTokensState22 } =\n    useUnstakeTokens5(tokenAddress)\n\n    const { send: unstakeTokensSend2z, state: unstakeTokensState221 } =\n    useUnstakeTokens4(zeroxBTCAddress)\n//stake only no approve\n    const { send: stakeOnlyz, state: unstakeTokensState22v3 } =\n    StakeThatCake(tokenAddress)\n\n\n    const { send: stakeOnlyzAuction, state: b2 } =\n    AuctionNoApprove(tokenAddress, startingauction, numberofAuctions, name23, eraz  )\n\n    const { send: maxApprove2, state: b22 } =\n    ApproveOnlyMax2(tokenAddress )\n\nvar account22 = \"0x\"\nif(account !== null && account !== nothing){\n  account22 = account\n}\n\n    const { send: auctionOnlyz, state: unstakeTokensState223z } =\n    AuctionThatCake(tokenAddress)\n//admin\n    const { send: unstakeTokensSend22, state: unstakeTokensState2 } =\n    DistributeReward2(tokenAddress)\n\n    const { send: getAuctionTokens, state: unstakeTokensState2z } =\n    DistributeAuction(tokenAddress)\n\n\n  const faucet = () => {\n  \n    if(amount > 1000){\n      amount = 1000\n    }\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return unstakeTokensSend(amountAsWei.toString())\n  }\n\n  const faucet22 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend22(amountAsWei.toString())\n  }\n\n  const faucet2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend2(amountAsWei.toString())\n  }\n  const faucet23 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend2z(amountAsWei.toString())\n  }\n  const stakeOnly = () => {\n    var fuck9\n    if(typeof amount === 'number')\n    {\n      fuck9 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n    }\n    else{\n      fuck9 =  \"0\"\n    }\n    const amountAsWei = fuck9\n    return stakeOnlyz(amountAsWei.toString())\n  }  \n\n  const auctionOnly2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString()).div(1e10)\n    return stakeOnlyzAuction(amountAsWei.toString())\n  }  \n  const maxApprove = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return maxApprove2(amountAsWei.toString())\n  }  \n  \n  const auctionOnly = () => {\n    var fuck8\n\t\n    if(typeof amount === 'number')\n    {\n      fuck8 =   utils.parseEther(parseFloat(amount.toString()).toFixed(8)).div(1e10)\n    }\n    else{\n      fuck8 =  \"0\"\n    }\n    const amountAsWei = fuck8\n    return auctionOnlyz(amountAsWei.toString())\n  }\n\n\n\n  const auctiongrab = () => {\n    return getAuctionTokens(name2)\n  }\n  const auctiongrab2 = () => {\n    return getAuctionTokens2(name2)\n  }\n\nvar xxx = \"\"\nvar xxxx = 0\n    if(auctionPotYOURS !== nothing)\n    {\n        xxxx = parseFloat(auctionPotYOURS.toString())\n        xxxx = xxxx/100000000\n\n    }\n    if(auctionPot !== nothing)\n    {\n      totalPot =parseFloat(auctionPot.toString())\n\t  \n      var xxx2 = parseFloat((auctionPot).toString()).toFixed(3)\n      xxx = (parseFloat(xxx2) /  100000000).toString()\n\t  \n      urpercent = (((parseFloat(amount.toString()) + parseFloat(xxxx.toString())) * 100000000) / (totalPot + parseFloat(amount.toString()) *  100000000) * 100).toFixed(2)\n      if(xxxx !== 0){\n        urpercentz = ((parseFloat(xxxx.toString()) * 100000000) / (totalPot ) * 100).toFixed(2)\n      }\n      else{\n        urpercentz=0\n      }\n\t  \n    }\n    var percentz = \"0\"\n    if(urpercent !== nothing)\n    {\n    percentz = urpercent.toString()\n    }\n    var percentzz = \"0\"\n    if(urpercentz !== nothing)\n    {\n    percentzz = urpercentz.toString()\n    }\n    var coinz = (parseFloat(percentz)/100 * 8192).toFixed(2)\n\n\n    const [showErc20ApprovalSuccess3, setShowErc20ApprovalSuccess3] =\n    useState(false)\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n\n    showErc20ApprovalSuccess3 && setShowErc20ApprovalSuccess3(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer2\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer23\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess3 && setShowErc20ApprovalSuccess3(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Auction tokens\"\n      ).length > 0\n    ) {\n      setAmountz(cdaystring)\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  const isMining = stakeTokensState.status === \"Mining\"\n  const isMining2 = stakeTokensState2.status === \"Mining\"  \n  const isMining3 = unstakeTokensState.status === \"Mining\"\n  const isMining4 = unstakeTokensState223z.status === \"Mining\"\n  const isMining6 = unstakeTokensState223z.status === \"Mining\"\n  const isMining7 = auctionState2.status === \"Mining\"\n  const isMining5 = b22.status === \"Mining\"\n  const isMining51 = b2.status === \"Mining\"\n  const hasZeroBalance = formattedTokenBalance === 0  \n  var fuck\n  if(typeof amount === 'string')\n  {\n    fuck =  parseFloat(amount).toFixed(8)\n\n  }\n  else{\n    fuck =  parseFloat(amount.toString())\n  }\n  var fuck2 = fuck.toString()\n  var tva \n  var approvetomuch2 = parseFloat(fuck.toString()) * 1e8 > parseFloat(aprovamt2.toString())\n\n  var approvetomuch = parseFloat(fuck2) * (1e18) > parseFloat(aprovamt.toString())\n  const hasZeroBalance2 = check === 0\n  var te = \"0\"\n  if(tokenBalance !== nothing)\n  {\n    te = tokenBalance.toString()\n  }\n  var xbtcte =\"0\"\n  if(formattedTokenBalance2 !== nothing)\n  {\n    xbtcte = formattedTokenBalance2.toString()\n  }\n  const hastoolittle =  parseFloat(te) < parseFloat(fuck2) / 1e18\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var dontshow = true\n\n\n  const timeEnd = AuctionStats2(tokenAddress)\n  var test\n  var endt\n  var cur\n  var timeleft = 0\n\n  var auctionmsg =\"\"\n\n  if(nothing !== timeEnd)\n  {\n    endt = parseInt(timeEnd.toString())\n    cur = Math.round(Date.now() / 1000)\n\n      if((endt - cur) > 0)\n    {\n      timeleft = endt-cur\n    }\n    else{\n      auctionmsg = \"Current Auction is over when one last bid is recieved. Next auction will then immediatly begin\"\n    }\n  }\n  const tokenBalancef = useTokenBalance(LP_token, account);\n\n  const formattedTokenBalancef: number = tokenBalancef\n    ? parseFloat(formatUnits(tokenBalancef, 18))\n    : 0;\n  \nvar timelftmsg = \"0\" \nvar sec = 0\n  var min = 0\n  var secPerDay2 = 0\n\n  const secPerDay = AuctionStats8(LP_token)\n  if(secPerDay !== nothing){\n    secPerDay2=parseInt(secPerDay.toString())\n  }\nif(timeleft > 1)\n{\n \n  var hour = 0\n  if(timeleft > 60)\n  {\n  hour = timeleft / (60*60)\n  \n  min = timeleft / (60)  % 60  \n  sec = timeleft % (60)\n  }\n  //timelftmsg = \"Auction time remaining: \"+timeleft.toFixed(0)+ \" seconds or \"+min.toFixed(0)+\" minutes or \" +hour.toFixed(0)+\" hours\"\n  timelftmsg = \"Auction time remaining =   \"+parseInt(hour.toFixed(2)) + \" Hours: \"+min.toFixed(0)+\" Minutes : \" +sec.toFixed(0)+\" Seconds\"\n}else{\n  timelftmsg =\"Current Auction will end when one last bid is recieved\"\n}\nif(name2 !== nothing && name2 !==\"\")\n{\n } //auction addy\n\nvar teeoff = AuctionPlayerStats(tokenAddress, name2)\n\nvar teeoff2 = AuctionPlayerStats2(tokenAddress, name2)\nvar f = 0\nif(teeoff !== nothing)\n{\n  f = teeoff2/teeoff * 8192\n } //auction addy\n var totz = 0\n var totz2\n if(auctionnumber !== nothing)\n {\n   if(auctionnumber === \"0\")\n   {\n\n  totz = parseFloat(amount.toString()) /  2\n  totz2 = totz.toFixed(2);\n   }else{\n  totz = parseFloat(amount.toString()) /  parseFloat(auctionnumber.toString())\n  totz2 = totz.toFixed(2);\n   }\n }\n var distanceDays = 0\n if(startingauction !== nothing && auctionnumber !== nothing)\n{\n  distanceDays = parseFloat(startingauction.toString()) + parseFloat(auctionnumber.toString()) -1\n}\nvar msgowed = TotalOwedAll/10**18\nif(msgowed!== 8192 && msgowed > 0){\n  var msgowed2 = \"YOU WILL RECIEVE \"+msgowed.toFixed(2)+ \" Forge when you redeem\"\n}else if(msgowed !== 0){\n  var msgowed2 = \"YOU WILL RECIEVE \"+msgowed.toFixed(2)+ \" Forge when you redeem\"\n}else{\n  var msgowed2 = \"Zero to Claim\"\n}\n\nvar saying = \"Grab your Forge Auction #\" +name2 +\" winnings\"\n\n  //REAL Uniswap LP Panel\n  if(token.address === \"0x0000000000000000000000000000000000000001\")\n  {\n    return(\n    <>\n\n    <div style={{display: 'flex', justifyContent: 'center'}}><h2> Auto redeemer for Auction Participants.</h2></div>\n    <h2> {msgowed2}</h2>\n    Input Address to redeem for(USE YOUR ADDRESS if you dont know):<TextField\n\nstyle ={{width: '375px'}}\n        value={name233}\n        helperText=\"You are claiming auctions for this address\"\n        placeholder={account22}\n        label=\"Enter 0x Address:\"\n        onChange={(e) => {\n          setName22(e.target.value);\n        }}\n      />\n    <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={auctiongrab2}\n          disabled={isMining2 }\n        >\n          {isMining2 ? <CircularProgress size={26} /> : \"Grab ALL Auction winnings at once\"}\n        </Button>\n\n\n    </>\n    )\n\n  }\n//ADMIN ADMIN PANEL\n\nif(token.address === \"0x0000000000000000000000000000000000000000\")\n{\n  if(account !== \"0x543c3F3Ee66Cf54746d4c4011d5cACf544a427f5\"){\n\n  return (\n\n    \n    <>\n    </>\n  )\n  }\n  return (\n\n    \n    <>\n\n            <Button\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            onClick={faucet22}\n            //disabled={isMining}\n\n            disabled={isMining}\n          >\n            {isMining ? <CircularProgress size={26} /> : \"Distribute mined rewards to LP Staking Contract\"}\n          </Button>\n\n          <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={rewardStart}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Start a 60 second reward Period for the 0xBTC in the LP Reward Pool\"}\n        </Button>        \n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={rewardStart2}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Start a 60 second reward Period for Forge in the LP Reward Pool\"}\n        </Button>\n\n\n          </>\n      )\n  }\n\n\n  //LP Address\n  if(token.address === auctionaddress)\n{\n  dontshow = false\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif(token.address === proofOfWorkAddress)\n  {\n//faucet here\n\n    return (\n      <>\n      <div className={classes.container}>\n      </div>\n      </>\n      )\n  }\n  if(tokenAddress === zeroxBTCAddress)\n  {\n    //facuet\n  return (\n    <>\n    <div className={classes.container}>\n    <SliderInput\n          label={`Get test tokens ${name}`}         \n          //maxValue={formattedTokenBalance}\n          maxValue={1000}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || (isMining3)}\n        />\n    <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          disabled={isMining || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"2Get Test Tokens\"}\n        </Button>\n    </div>\n    </>\n    )\n}\n//mainpage\n\n\n\n\n\n/*MAIN FUCKING PAGE LP PAGE\n\nsdfsdfdsf*/\n  if(te === \"0\")\n  {\n    if(networkName === \"mumbai\")\n    {\n/*\n      return (\n        <>\n          <div className={classes.container}>\n          <a href=\"https://quickswap.exchange/#/swap?outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\" target=\"_blank\">BUY FORGE HERE</a>\n  https://quickswap.exchange/#/swap?outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\n                <div className=\"App\">\n       <a href=\"https://faucet.polygon.technology/\" target=\"_blank\">Step 1) GET Polygon Testnet Polygon for transaction gas</a>\n       <h1> You have no Liquidity Tokens</h1>\n       <h1> Step 1 & 2 Aquire Forge and 0xBitcoin, for testnet the two last tabs have a way to get you testnet tokens</h1>\n       <h1> Get Liquidity Tokens via Quickswap @ </h1>\n       <h2><a href=\"https://quickswap.exchange/#/add/0x4098D72C0Db0fE0025e1A37c407DF7C1D3751407/0xD5FA53Ab5Cd234676e5c67aE5f13d347b2181eDa\" target=\"_blank\">Deposit 0xBTC + Forge for LP Tokens</a></h2>\n             </div>\n     \n        </div>\n        </>\n        )\n  \n\n\n    }\n    else\n    {\n    return (\n      <>\n        <div className={classes.container}>\n\n              <div className=\"App\">\n          <a href=\"https://faucets.chain.link/\" target=\"_blank\">Step 1) GET Kovan Testnet Ethereum for transaction gas</a>\n           </div>\n          <SliderInput\n            label={`Step two - MOVE SLIDER TO Get tokens, then stake them`}\n            //maxValue={formattedTokenBalance}\n            maxValue={1000}\n            id={`slider-input-${name}`}\n            className={classes.slider}\n            value={amount}\n            onChange={setAmount}\n            //disabled={isMining || hasZeroBalance || dontshow}\n            disabled={isMining || dontshow || (isMining3)}\n          />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          //disabled={isMining || hasZeroAmountSelected}\n          disabled={isMining  || hasZeroAmountSelected || (isMining3)}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Get Test Tokens\"}\n        </Button>\n\n      </div>\n      </>\n      )*/\n\n    }\n  }\n\n  if(approvetomuch2){\n\n    tva =         <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={handleStakeSubmit2}\n    disabled={isMining2 || isMining6 || isMining4 || hasZeroAmountSelected || isMining5}\n  >\n    {isMining2 || isMining4 || isMining5? <CircularProgress size={26} /> : \"BID 0xBTC for the Auction\"}\n  </Button>\n   }else{\n\n    tva =  <Button\n     color=\"primary\"\n     variant=\"contained\"\n     size=\"large\"\n     onClick={auctionOnly}\n     //disabled={isMining || hasZeroAmountSelected}\n     disabled={isMining || isMining6|| isMining2 ||  (isMining4) ||  hasZeroAmountSelected  || approvetomuch2|| isMining5}\n   >\n     {isMining || isMining3 ||isMining6 || isMining4 || isMining5 ? <CircularProgress size={26} /> : \"BID W/o APPROVE\"}\n   </Button>\n \n   }\nvar fsdfosd = parseInt(numberofAuctions.toString()) -1 + parseInt(daysnow)\nvar ffedf\n   if(approvetomuch2){\n\n\n\n\n    ffedf=   <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleStakeSubmitAdvAuction}\n          disabled={isMining2  || isMining7 ||  isMining51 ||isMining6 || isMining4 || hasZeroAmountSelected || isMining5}\n        >\n          {isMining2 || isMining4 || isMining51 ||  isMining7 || isMining6  || isMining5? <CircularProgress size={26} /> : \"BID 0xBTC for the Auction\"}\n        </Button>\n\n\n\n\n   }else{\n\n\n    ffedf = <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={auctionOnly2}\n    //disabled={isMining || hasZeroAmountSelected}\n    disabled={isMining || isMining51 || isMining7  || isMining6|| (isMining4) ||  hasZeroAmountSelected  || approvetomuch2 || isMining5}\n  >\n    {isMining || isMining3 || isMining51 || isMining7|| isMining6  || isMining4 || isMining5? <CircularProgress size={26} /> : \"Bid W/o APPROVE\"}\n  </Button>\n   }\n  var day = \"Total 0xBTC to bid in Auction #\" + currentday+\" :\"\n  test = <h1>Auction #: {currentday}</h1>\n  \n    return(<>\n        \n      <div className={classes.container}>\n      <h1>Auction #: {currentday}</h1>\n      The Advanced Tab allows you to bid on auctions in the future, saving you from bidding every auction</div>\n    \n<Tabs>\n      <TabList><div style={{display: 'flex', justifyContent: 'center'} }>\n\n        <Tab className=\"theTabPanel\">Basic</Tab>\n        <Tab className=\"theTabPanel2\">Advanced</Tab>\n\n</div>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n        \n          <div className={classes.container}>\n      <div className=\"App\"></div>\n            <SliderInput\n          label={day}\n          maxValue={check}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance2}\n          //disabled={isMining2}\n        />\n        <div> You will recieve at most {percentz}% of the current auction or {coinz} Forge</div>\n       <div> {timelftmsg}</div>\n       <progress value={secPerDay2-timeleft} max={secPerDay2}></progress>\n      {tva}\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n                <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={maxApprove}\n          //disabled={isMining || hasZeroAmountSelected}\n          disabled={isMining || (isMining4) || isMining5 || isMining2}\n        >\n          {isMining || isMining3 || isMining4 || isMining5 ? <CircularProgress size={26} /> : \"MAX APPROVE, so you dont have to approve everytime\"}\n        </Button>\n        </div>\n        <div> Total Size of Current Auction {xxx} 0xBitcoin </div>\n        <h3> You have bid {xxxx} 0xBTC in the current Auction, you will recieve {percentzz}% of the 8,192 Forge Tokens, if no one else bids</h3>\n        <div> {auctionmsg}</div>\n      </div>\n    \n        </TabPanel>\n        <TabPanel>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <p>Advanced Future Bidding System</p></div>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n            <h3>Inputs Variables:</h3><br></br></div>\n\n          Ammount - The total amount to be bid in all those auctions combined<br></br>\n          Starting Auction # - The first auction # to start bidding(must be a future auction)<br></br>\n          Total Auctions - The # of total auctions for which you wish to bid<br></br>\n          Era - Which Era you wish to bid on. Remember each Era is ~4 years. First Era is 1<br></br>\n          0x Address - The address with which to bid for. Default is your own<br></br>\n          *Amount per Auction must be greater than 0.33 0xBitcoin\n          <p>Ex. Current Auction #1.  I want to bid 1 0xBitcoin on each of the next 3 Auctions, not including this auction.</p>\n          <p>Ex. Starting Auction # = 2, Total # Auctions to bid = 3, Amount = 3 0xBitcons</p>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <SliderInput\n          label={\"Total amount of 0xBitcoin to bid\"}\n          maxValue={check}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance2}\n          //disabled={isMining2}\n        /></div>\n        \n       \n        <div style={{display: 'flex', justifyContent: 'center'}}> Input Starting Auction to bid on: \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value = {daysnow}\n  placeholder={\"2\"}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountz}\n/>        <br></br></div>\n       \n       <div style={{display: 'flex', justifyContent: 'center'}}> Input Total Number of Auctions to bid on: \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value={numberofAuctions}\n  placeholder=\"Number of auctions\"\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountzz}\n/>\n<br></br></div>       \n<div style={{display: 'flex', justifyContent: 'center'}}> Input Era to bid on: \n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  value={erazz}\n  decimalsLimit={0}\n  decimalScale={0}\n  onValueChange={setAmountEra}\n/>\n<br></br></div><div style={{display: 'flex', justifyContent: 'center'}}> \nInput Address to bid for(USE YOUR ADDRESS if you dont know):<TextField\n      style ={{width: '605px'}}\n        value={name23}\n        helperText=\"This is the address your auction winnings will go to\"\n        placeholder={account22}\n        label=\"Enter 0x Address:\"\n        onChange={(e) => {\n          setName2(e.target.value);\n        }}\n      />\n      </div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n<h3>After clicking submit, you will bid {totz2} 0xBitcoin Tokens on {auctionnumber} auctions.  Auction #{daysnow} - {fsdfosd}, in Era #{eraz}</h3></div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n{ffedf}\n</div>\n<div style={{display: 'flex', justifyContent: 'center'}}>\n                <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={maxApprove}\n          //disabled={isMining || hasZeroAmountSelected}\n          disabled={isMining || isMining7  || isMining51 || (isMining4) || isMining5 }\n        >\n          {isMining || isMining3 || isMining7 || isMining51 || isMining4 || isMining5 ? <CircularProgress size={26} /> : \"MAX APPROVE, so you dont have to approve everytime\"}\n        </Button>\n        </div>\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n\n\n\n    <Snackbar\n        open={showErc20ApprovalSuccess3}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Max Approved! You may now bid w/o approve!\n        </Alert>\n      </Snackbar>\n    <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          bid on the auction(s)!!\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Successfully bid on Auction(s)!!\n        </Alert>\n      </Snackbar>\n    \n\n    </>)\n}\n","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats6 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\n    \n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_MemberUnits\",\n        args: [1, test2, account],\n      }) ?? []\n\n    return time\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Mock from \"../chain-info/AMock.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const GetApprovalAmt2 = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const auction = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  //MY STUFF\n\n  const rewardABI = Mock.abi\n  const MockInterface = new utils.Interface(rewardABI)\n    \n  /*\n    const [stakingBalance] =\n      useContractCall({\n        abi: sushiInterface,\n        address: sushi,\n        method: \"allowance\",\n        args: [account, LPRewardAddress],\n      }) ?? []\n      console.log(\"F U \", stakingBalance)\n\n      */\n    const [stakingBalance] =\n    useContractCall({\n      abi: MockInterface,\n      address: xbtc,\n      method: \"allowance\",\n      args: [account, auction],\n    }) ?? []\n\t\n    return stakingBalance\n  }","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats7 = (ff2f2: Number): number => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const test  = Math.round(Date.now() / 1000)\n    let nothing;\n    const [stakingBalance] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"currentDay\",\n      args: [],\n    }) ?? []\n\n\n    var test2\n    if(nothing !== stakingBalance){\n      test2 = stakingBalance.toString()\n    }\n    else\n    {\n      test2 = \"0\"\n    }\nvar tttt = 0\n\n\nvar [time555] =\nuseContractCall({\n  abi: AuctionInterface,\n  address: AuctionAddress,\n  method: \"getEmissionShare\",\n  args: [1, stakingBalance, account],\n}) ?? []\n\n    for(var x = 1; x<25; x++){\n\n  \n\n    var [time] =\n    useContractCall({\n      abi: AuctionInterface,\n      address: AuctionAddress,\n      method: \"getEmissionShare\",\n      args: [1, x, account],\n    }) ?? []\n    if(parseInt(time) === 0 ){\n      \n    }else{\n      \n\n    tttt = tttt + parseInt(time) * 4\n    }\n    }\n\n    return tttt - parseInt(time555)*4\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeAuction2 = (addy: any) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n \n\n  const auctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n\n  const auc = new Contract(\n    auctionAddress, AuctionInterface\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(auc, \"WithdrawEz\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(addy)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useAuctions1 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\n\n  const { send: stakeTokensSend, state: stakeTokensState2 } =\n    useContractFunction(AuctionContract, \"burn0xBTCForMember\", {\n      transactionName: \"Auction tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(xbtc, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer2\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n\n      var str = amount\n      if(6 < amount.length-1){\n        str = str.substring(0,7) + \"9\" + str.substring(7+1)\n      }\n\n    return approveErc20Send(AuctionAddress, str)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState2)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState2])\n\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport { AuctionStats } from \"../hooks\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AdvAuctions = (tokenAddress: string, startingauction: any, auctionnumber: any, Addy: any, era: any ) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nlet nothing\nvar tests = \"88\"\nvar fsdfdsfds = AuctionStats(tokenAddress)\nif(fsdfdsfds !== nothing){\n    if(fsdfdsfds>startingauction){\n      tests = fsdfdsfds.toString()\n  \n    }else{\n      tests=startingauction\n  }\n}\nfsdfdsfds\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(AuctionContract, \"FutureBurn0xBTCEasier\", {\n      transactionName: \"Auction tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(xbtc, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer2\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(era, tests, auctionnumber, Addy, amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    var str = amount\n    if(7 < amount.length-1){\n      str = str.substring(0,7) + \"9\" + str.substring(7+1)\n    }\n    if(8 < amount.length-1){\n      str = str.substring(0,8) + \"9\" + str.substring(8+1)\n    }\n\n\n    setAmountToStake(amount)\n    return approveErc20Send(AuctionAddress, str)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n\n\n\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens6 = (tokenAddress: string) => {\n\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"Z_setRewardParams0xBTC\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"4\", \"4\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens7 = (tokenAddress: string) => {\n\n\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"Z_setRewardParamsForge\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"4\", \"4\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens5 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n const zeroAbi = Zero.abi\n\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(xpw, \"AOpenMint\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(true, true, account)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport { AuctionStats } from \"../hooks\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AuctionNoApprove = (tokenAddress: string, startingauction: any, auctionnumber: any, Addy: any, era: any ) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(AuctionContract, \"FutureBurn0xBTCEasier\", {\n      transactionName: \"Auction tokens\",\n    })\n    let nothing\nvar tests = \"88\"\nvar fsdfdsfds = AuctionStats(tokenAddress)\nif(fsdfdsfds !== nothing){\nif(fsdfdsfds>startingauction){\n  tests = fsdfdsfds.toString()\n  \n}else{\n  tests=startingauction\n}\n}\n\n    const send =  (amount: string) => {\n\n        return approveErc20Send(era, tests, auctionnumber, Addy, amount)\n      }\n      const [state, setState] = useState(b2)\n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock0xBTC from \"../chain-info/AMock.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const ApproveOnlyMax2 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  var AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const LPAdd = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nconst rewardABI = LPFarm.abi\nconst mockABI = Mock0xBTC.abi\nconst mockInterface = new utils.Interface(mockABI)\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n\nconst mockLPContract = new Contract(\n    LPAdd, mockInterface\n    )\n\nconst mockContract = new Contract(\n    xbtc, mockInterface\n    )\n    var test = mockContract\n    var fff = \"Approve ERC20 transfer23\"\n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(test, \"approve\", {\n      transactionName: fff,\n    })\n\n    const send =  (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(AuctionAddress, \"99999999999999999999999999999999\")\n      }\n      const [state, setState] = useState(b2)\n      \n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const AuctionThatCake = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\n\n\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)  \nconst pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\nconst zeroxBtcAddress  = \"synethix_LP_Rewardaddress\"\nconst zeroxBtcAddress2 = \"0xd7D81bf3cC94439B75C06569F099dEbc33c3EC02\"\nconst zeroAbi = Zero.abi\n\nconst LPFarmInterface2 = new utils.Interface(zeroAbi)\n\nconst xpw = new Contract(\n    pow_token, LPFarmInterface2\n)\n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState223z } =\nuseContractFunction(AuctionContract, \"burn0xBTCForMember\", {\n  transactionName: \"Auction tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(account, amount)\n}\nconst [state, setState] = useState(unstakeTokensState223z)\n\nuseEffect(() => {\n    setState(unstakeTokensState223z)\n\n}, [unstakeTokensState223z])\n\t\nreturn { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeReward2 = (tokenAddress: string) => {\n  const { chainId} = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n const zeroAbi = Zero.abi\n\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(xpw, \"ARewardSender\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send()\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Auctionz from \"../chain-info/Auctions.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const DistributeAuction = (addy: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n \n\n  const auctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n\n  const auc = new Contract(\n    auctionAddress, AuctionInterface\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n  \n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(auc, \"WithdrawEz\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(addy)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionStats8 = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n  var t = account\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n    //MY STUFF\n    const rewardABI = Auctionz.abi\n    const AuctionInterface = new utils.Interface(rewardABI)\n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"secondsPerDay\",\n        args: [],\n      }) ?? []\n  \n    return stakingBalance\n  }","import Auctionz from \"../chain-info/Auctions.json\"\nimport { useContractCall, useEthers, useBlockMeta } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionPlayerStats = (address: string, amt: string )  => {\n  const { chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\nconst zeroAbi = Zero.abi\n\n\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\nvar test = 0\n\n  let nothing\n  if(amt !== nothing && amt !== \"\")\n  {\n    test = parseInt(amt)\n\n    \n  }\n\n  const [time] =\n  useContractCall({\n    abi: AuctionInterface,\n    address: AuctionAddress,\n    method: \"mapEraDay_Units\",\n    args: [1, test],\n  }) ?? []\n\n  var ex = parseFloat(amt)\n  var ex1 = Math.round(ex)\n\n\n  return time\n}\n\n/*\n\n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, 10],\n      }) ?? []\n*/\n      ","import Auctionz from \"../chain-info/Auctions.json\"\nimport { useContractCall, useEthers} from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionPlayerStats2 = (address: string, amt: string )  => {\n  const { account, chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  const zeroAbi = Zero.abi\n\n\n  const AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  //MY STUFF\n  const rewardABI = Auctionz.abi\n  const AuctionInterface = new utils.Interface(rewardABI)\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      pow_token, LPFarmInterface2\n  )\n\nvar test = 0\n\n  let nothing\n  if(amt !== nothing && amt !== \"\")\n  {\n    test = parseInt(amt)\n\n    \n  }\n\t\n  const [time] =\n  useContractCall({\n    abi: AuctionInterface,\n    address: AuctionAddress,\n    method: \"mapEraDay_MemberUnits\",\n    args: [1, test, account],\n  }) ?? []\n\n  var ex = parseFloat(amt)\n  var ex1 = Math.round(ex)\n\n\n  return time\n}\n\n/*\n\n    const [time] =\n      useContractCall({\n        abi: AuctionInterface,\n        address: AuctionAddress,\n        method: \"mapEraDay_Units\",\n        args: [1, 10],\n      }) ?? []\n*/\n      ","import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\nimport {useStakingBalance, useStakingBalance2, useUnstakeTokens2, useStakingBalance3} from \"../../hooks\"\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n\n  const { chainId, error } = useEthers()\n  const { image, address, name } = token;\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LPTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const xbtcTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n  // wtf is this? \n  const classes = useStyles()\n  const { account } = useEthers();\n  const tokenBalance = useTokenBalance(LPTokenAddress, account);\n\n  const tokenBalancez = useTokenBalance(xbtcTokenAddress, account);\n\n  var balance22 = useTokenBalance(xbtcTokenAddress, account);\n\n  const formattedBalance2: number = balance22\n  ? parseFloat(formatUnits(balance22, 8))\n  : 0\n\n  var balance223 = useTokenBalance(proofOfWorkAddress, account);\n\n  const formattedBalance22: number = balance223\n  ? parseFloat(formatUnits(balance223, 18))\n  : 0\n  const vfd = useTokenBalance(LPTokenAddress, account)\n  const stake = useStakingBalance3(LPTokenAddress)\n  var balance3 = stake\n  console.log(\"ffd\", balance3)\n  const formattedBalance3: number = balance3\n  ? parseFloat(formatUnits(balance3, 18))\n  : 0\n  var balance322 = useStakingBalance2(xbtcTokenAddress)\n\n  const formattedBalance32: number = balance322\n  ? parseFloat(formatUnits(balance322, 18))\n  : 0\n\n  var balance3223 = useStakingBalance(proofOfWorkAddress)\n\n  const formattedBalance322: number = balance3223\n  ? parseFloat(formatUnits(balance3223, 18))\n  : 0\n\n  var image2 = '/static/media/eth.6e1743e3.png'\n  var imagez = '/static/media/pow2.56016ef0.png'\n  var imagezz = '/static/media/dai.a2c311e8.png'\n  \n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n    if(token.address === auctionaddress)\n    {\n      return (\n        \n        <BalanceMsg\n          label={`Your 0xBitcoin balance`}\n          amount={formattedBalance2}\n          tokenImgSrc={imagezz}\n        />\n      );\n    }\n    if(token.address === LPTokenAddress)\n    {\n      var msg\n      //if(formattedBalance2 == 0){\n        \n        msg = <a href=\"https://quickswap.exchange/#/swap?outputCurrency=0x71b821aa52a49f32eed535fca6eb5aa130085978\" target=\"_blank\">Click Here to buy 0xBitcoin Tokens on Quickswap</a>\n     // }\n  \n      return (<>\n      <div><h2>{msg}</h2></div>\n         <BalanceMsg\n            label={`Your 0xBitcoin balance`}\n            amount={formattedBalance2}\n            tokenImgSrc={imagezz}\n          /></>\n      );\n    }\n    if(token.address === xbtcTokenAddress)\n    {\n  return (     \n    <BalanceMsg\n      label={`Your ${name} balance`}\n      amount={formattedBalance2}\n      tokenImgSrc={image}\n    />\n  );\n    }\n\n  return (        <>\n      <div className={classes.contentContainer}>  <h2>\n      <BalanceMsg\n        label={`Your Forge `}\n        amount={formattedBalance22}\n        tokenImgSrc={imagez}\n      /> &nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/swap?outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\" target=\"_blank\">Buy Forge</a>\n</h2>\n<h2>\n      <BalanceMsg\n        label={`Your 0xBTC `}\n        amount={formattedBalance2}\n        tokenImgSrc={imagezz}\n        />&nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/swap?outputCurrency=0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\" target=\"_blank\">Buy 0xBitcoin on Polygon</a>\n        </h2>\n        <h2>\n        <BalanceMsg\n          label={`Your Wallets LP Tokens `}\n          amount={formattedTokenBalance}\n          tokenImgSrc={image2}\n        />&nbsp; &nbsp; &nbsp;<a href=\"https://quickswap.exchange/#/add/0x562322f8e7131d0bb9f487ae566935d3be96406b/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" target=\"_blank\">Add Liquidity (Forge + 0xBTC)</a>\n        </h2>\n<BalanceMsg\n          label={`You are Staking this many Quickswap LP tokens `}\n          amount={formattedBalance3}\n          tokenImgSrc={image2}\n        />\n\n<BalanceMsg\n        label={`Your Forge rewards `}\n        amount={formattedBalance322}\n        tokenImgSrc={imagez}\n      />\n      <BalanceMsg\n        label={`Your 0xBTC rewards `}\n        amount={formattedBalance32* 1e10}\n        tokenImgSrc={imagezz}\n      />\n      </div>\n    </>\n\n    );\n  }","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { StakeForm } from \"./StakeForm\"\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg\n} from \"../../components\"\nimport { Token } from \"../Main\"\nimport { WalletBalance } from \"./WalletBalance\"\n\n\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport helperConfig from \"../../helper-config.json\"\n\nimport { constants } from \"ethers\"\n\ninterface YourWalletProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n\n  const { chainId, error } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  // wtf is this? \n  // Reacts way of holding state between components \n  // Could do it without <number> \n  // saving state between renders of components \n  // You'd have to pass it through as a prop to have another component use it \n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  const classes = useStyles()\n\n  return (\n    <Box>\n     \n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                //IF not Auction do this\n                if( token.address !== \"0x0000000000000000000000000000000000000000\" && token.address !== \"0x0000000000000000000000000000000000000001\"){\n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      <WalletBalance\n                        token={supportedTokens[selectedTokenIndex]}\n                      />\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )   \n                }\n                //IF LP token do this\n                else{\n                \n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )\n                }\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}","import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { utils } from \"ethers\"\nimport { SliderInput } from \"../../components\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, useUnstakeTokens22, useStakingBalanceOTHER3,useStakingBalance4, useUnstakeTokens22Other, useStakeTokens, useStakingBalanceOTHER, GetApprovalAmt, StakeThatCake, ApproveOnlyMax, useStakingBalance, useStakingBalanceOTHER2, useStakingBalance2, useUnstakeTokens2, useStakingBalance3, AuctionStats, AuctionStats2, AuctionStats3, ProofOfWorkStats, ProofOfWorkStats2} from \"../../hooks\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications, useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components\"\n\nimport brownieConfig from \"../../brownie-config-json.json\"\n\nimport { constants } from \"ethers\"\nimport helperConfig from \"../../helper-config.json\"\n\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n  slider2: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n\n  const { chainId, account, error } = useEthers()\n  \n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const zeroxBTCAddress = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const auctionaddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const proofOfWorkAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n\n  const { image, address: tokenAddress, name } = token\n  var imagez = '/static/media/pow2.56016ef0.png'\n  var imagezz = '/static/media/dai.a2c311e8.png'\n  const { notifications } = useNotifications()\n\n  var balance = useStakingBalance(tokenAddress)\n  const balance2 = useStakingBalance2(tokenAddress)\n  const stake = useStakingBalance3(tokenAddress)\n  const stake2 = useStakingBalanceOTHER(tokenAddress)\n  const stake4 = useStakingBalanceOTHER3(tokenAddress)\n  console.log(\"stake4\", stake4)\n  console.log(\"wtf2\", stake2)\n  \n  const day = AuctionStats(tokenAddress)\n  const timeEnd = AuctionStats2(tokenAddress)\n  const auctionPot = AuctionStats3(tokenAddress)\n  //const epoch = ProofOfWorkStats(tokenAddress)\n  const epoch = ProofOfWorkStats2(tokenAddress)\n  let nothing\n  //typeof nothing === 'undefined'\n  var tepoch=0\n  var circ = 0\n  if(epoch !== nothing){\n    tepoch=parseFloat(epoch.toString())\n    circ = tepoch * (150 + 75)\n  }\nconst fug= useStakingBalance4(tokenAddress)\nconsole.log(\"fug\", fug  )\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n\n  var approvalamt = GetApprovalAmt(tokenAddress)\nvar aprovamt = \"0\"\n//LP Approval\n  if(approvalamt !== nothing)\n{\n    aprovamt = approvalamt.toString()\n}\n  var test\n  var endt\n  var cur\n  var auctionmsg =\"\"\n  var timeleft = 0\n  var totalPot=\"\"\n  if(auctionPot !== nothing)\n  {\n    totalPot =auctionPot.toString()\n  }\n  var dayz = 0\n  //GET AUction stats\n  if(nothing !== day)\n  {\n    test = day.toString()\n    dayz = parseFloat(day.toString()) * 8192\n  }\n  var circfinal = dayz + circ\n  if(nothing !== timeEnd)\n  {\n    endt = parseInt(timeEnd.toString())\n    cur = Math.round(Date.now() / 1000)\n\n      if((endt - cur) > 0)\n    {\n      timeleft = endt-cur\n    }\n    if(timeleft === 0)\n    {\n      auctionmsg = \"Current Auction is over when one last bid is recieved\"\n    }\n  }\n    if(token.address === zeroxBTCAddress)\n  {\n    balance = balance2\n\n  }\n\n     var balanceff = stake2\n  \n  if(token.address === LP_token)\n  {\n      balance = stake\n  }\n  var [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n  const handleStakeSubmitzz = () => {\n\n    var fuck7\n  if(typeof amount === 'number')\n  {\n    fuck7 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n  }\n  else{\n    fuck7 =  \"0\"\n  }\n    const amountAsWei = fuck7\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n\n\n\n\n  const { send: stakeOnlyz, state: unstakeTokensState22v3 } =\n  StakeThatCake(tokenAddress)\n\n\n\n  const stakeOnly = () => {\n    var fuck9\n    if(typeof amount === 'number')\n    {\n      fuck9 =   utils.parseEther(parseFloat(amount.toString()).toFixed(18))\n    }\n    else{\n      fuck9 =  \"0\"\n    }\n    const amountAsWei = fuck9\n    return stakeOnlyz(amountAsWei.toString())\n  }  \n  console.log(\"stake\", stake)\n  const formattedBalanceff: number = balanceff\n  ? parseFloat(formatUnits(balanceff, 18))\n  : 0\n  const formattedBalanceffff: number = stake4\n  ? parseFloat(formatUnits(stake4, 18))\n  : 0\n  const formattedBalance: number = balance\n  ? parseFloat(formatUnits(balance, 18))\n  : 0\n  var balance22 = useStakingBalance2(zeroxBTCAddress)\n\n  const formattedBalance2: number = balance22\n  ? parseFloat(formatUnits(balance22, 18))\n  : 0\n\n  var balance223 = useStakingBalance(proofOfWorkAddress)\n  var balance223zz = useStakingBalanceOTHER2(proofOfWorkAddress)\n\n  const formattedBalance22: number = balance223\n  ? parseFloat(formatUnits(balance223, 18))\n  : 0\n  const formattedBalance22zz: number = balance223zz\n  ? parseFloat(formatUnits(balance223zz, 18))\n  : 0\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n\n    const { send: unstakeTokensSend2, state: unstakeTokensState2 } =\n      useUnstakeTokens2()\n\n      const { send: unstakeTokensSend22, state: unstakeTokensState22 } =\n      useUnstakeTokens22()\n\n      const { send: unstakeTokensSend220, state: unstakeTokensState220 } =\n      useUnstakeTokens22Other()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend()\n  }\n\n  const handleUnstakeSubmit2 = () => {\n    return unstakeTokensSend2()\n  }\n  const handleUnstakeSubmit22 = () => {\n    return unstakeTokensSend22()\n  }\n  const handleUnstakeSubmit220 = () => {\n    return unstakeTokensSend220()\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack2 = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n    \n  }\n  const [showUnstakeSuccess2, setShowUnstakeSuccess2] = useState(false)\n\n  const handleCloseSnack3 = () => {\n    showUnstakeSuccess2 && setShowUnstakeSuccess2(false)\n    \n  }\n  useEffect(() => {\n\n    \n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n\n  useEffect(() => {\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Get rewards\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess2 && setShowUnstakeSuccess2(true)\n    }\n  }, [notifications, showUnstakeSuccess2])\n\n\n\n\n\n  \n  const isMining = unstakeTokensState.status === \"Mining\"\n\n  const isMining2 = unstakeTokensState2.status === \"Mining\"\nvar min = 0\n  if(timeleft > 1)\n{\n  min = timeleft / 60\n}\nvar hour = 0\nif(min > 90)\n{\nhour = min / 60\n}\n  const classes = useStyles()\n  var potineth = (parseFloat(totalPot)/100000000).toFixed(18)\n\n\n  const { send: maxApprove2, state: b22 } =\n  ApproveOnlyMax(tokenAddress )\n\n\n\n\n  const maxApprove = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return maxApprove2(amountAsWei.toString())\n  }  \n\n\n\n\n\n\n\n\n\n\n\n\n  var fuck\n  if(typeof amount === 'string')\n  {\n    fuck =  parseFloat(amount).toFixed(8)\n\n  }\n  else{\n    fuck =  parseFloat(amount.toString())\n  }\n  var fuck2 = fuck.toString()\n\n  var approvetomuch = parseFloat(fuck2) * (1e18) > parseFloat(aprovamt.toString())\n  var te = \"0\"\n  if(tokenBalance !== nothing)\n  {\n    te = tokenBalance.toString()\n  }\n  const hastoolittle =  parseFloat(te) < parseFloat(fuck2) / 1e18\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n\n\n  const isMining4 = unstakeTokensState22v3.status === \"Mining\"\n  const isMining1 =  stakeTokensState.status === \"Mining\"\n  const isMining3 = unstakeTokensState.status === \"Mining\"\n  const isMining5 = b22.status === \"Mining\"\n  const isMining8 = stakeTokensState.status === \"Mining\"\n\nvar fsdfsdfsdf  =<Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={maxApprove}\n//disabled={isMining || hasZeroAmountSelected}\ndisabled={isMining || isMining8||(isMining3) ||  isMining5 }\n>\n{isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"MAX APPROVE, so you dont have to approve every stake\"}\n</Button>\n  const [showErc20ApprovalSuccess33, setShowErc20ApprovalSuccess33] =\n  useState(false)\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n  const [showStakeTokensSuccess2, setShowStakeTokensSuccess2] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showErc20ApprovalSuccess33 && setShowErc20ApprovalSuccess33(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n\n\n      if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer21\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess33 && setShowErc20ApprovalSuccess33(true)\n    }\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\nif(token.address === auctionaddress)\n{\n  return(<>\n   <div> Current Auction: {test}</div>\n   <div> EndTime =  {endt} </div>\n   <div> Current Time: {cur}</div>\n   <div> TIme remaining: {timeleft} seconds or {min} minutes or {hour} hours</div> \n   <div>  {auctionmsg} </div>\n    <div> Total Pot Size of Current Auction {potineth} 0xBitcoin </div>\n    <div> Total Circulating Supply of 0xPW: {circfinal}</div>\n    <div> Total Maximum Supply of 0xPW: 53,000,000</div>\n  </>)\n}\nif(token.address === zeroxBTCAddress)\n{\nreturn (\n  <>\n    <div className={classes.contentContainer}>\n      <BalanceMsg\n        label={`Your Rewards = ${name} balance`}\n        amount={formattedBalance* 1e10}\n        tokenImgSrc={image}\n      />\n       <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit22}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n      </Button>\n    </div>\n    <Snackbar\n      open={showUnstakeSuccess}\n      autoHideDuration={5000}\n      onClose={handleCloseSnack}\n    >\n      <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens unstaked successfully!\n      </Alert>\n    </Snackbar>\n  </>\n)\n}\n\nconsole.log('fsdfds',formattedBalanceffff )\nif(token.address !== LP_token || formattedBalanceff || formattedBalanceffff)\n{\nreturn (\n  <>\n    <div className={classes.contentContainer}>\n\n  <h1> OLD CONTRACTS IS DEPRECIATED, PLEASE REMOVE ALL FUNDS FROM BOTH CONTRACTS</h1>\n  <h1> Please submit Exit Transaction</h1>\n  <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE FIRST OLD CONTRACT`}\n          amount={formattedBalanceffff}\n          tokenImgSrc={image}\n        />\n\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit220}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM FIRST CONTRACT`}\n      </Button>\n    <BalanceMsg\n          label={`You are Staking this many LP tokens IN THE SECOND OLD CONTRACT`}\n          amount={formattedBalanceff}\n          tokenImgSrc={image}\n        />\n\n      <BalanceMsg\n        label={`Your Rewards OLD Forge`}\n        amount={formattedBalance22zz}\n        tokenImgSrc={imagez}\n      />\n     <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit22}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward FROM SECOND CONTRACT`}\n      </Button>\n    </div>\n    <Snackbar\n      open={showUnstakeSuccess}\n      autoHideDuration={5000}\n      onClose={handleCloseSnack2}\n    >\n      <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens unstaked successfully!\n      </Alert>\n    </Snackbar>\n  </>\n)\n}\nif(approvetomuch)\n{\ntest = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleStakeSubmitzz}\n  disabled= {isMining || isMining8||hastoolittle || hasZeroAmountSelected  || (isMining3)|| isMining5 }\n>\n  {isMining || isMining3 ||isMining8|| isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"Stake\"}\n</Button>\n}\nelse{\n  test = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={stakeOnly}\n  //disabled={isMining || hasZeroAmountSelected}\n  disabled={isMining || isMining8||(isMining3) || hastoolittle  || hasZeroAmountSelected  || approvetomuch|| isMining5 }\n>\n  {isMining || isMining3 || isMining8||isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"Stake W/O APPROVE\"}\n</Button>\n}\n  return (\n    <>\n      <div className={classes.contentContainer}>\n      <h2> <a href=\"https://quickswap.exchange/#/add/0xF44fB43066F7ECC91058E3A614Fb8A15A2735276/0x71B821aa52a49F32EEd535fCA6Eb5aa130085978\" target=\"_blank\">Click here to get Quickswap LP tokens by depositing Forge and 0xBTC into the Liquidity Pool</a></h2>\n            <h2>Current Staking APY: {fug?.toFixed(0)}%</h2>\n      <BalanceMsg\n          label={`Your un-staked Quickswap LP balance`}\n          amount={formattedTokenBalance}\n          tokenImgSrc={image}\n        />\n        <SliderInput\n          label={`Stake Quickswap LP Tokens - Move slider to amount desired`}\n          maxValue={formattedTokenBalance}\n          id={`slider-input2-${name}`}\n          className={classes.slider2}\n          value={amount}\n          onChange={setAmount}\n          //disabled={isMining || hasZeroBalance || dontshow}\n          disabled={isMining || isMining8|| (isMining3)|| isMining5 }\n        />\n         {test}\n        \n     \n                <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={maxApprove}\n          //disabled={isMining || hasZeroAmountSelected}\n          disabled={isMining || isMining8||(isMining3) ||  isMining5 }\n        >\n          {isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : \"MAX APPROVE, so you dont have to approve every stake\"}\n        </Button>\n\n\n        <BalanceMsg\n          label={`You are Staking this many LP tokens`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        />\n\n<BalanceMsg\n        label={`Your Forge rewards `}\n        amount={formattedBalance22}\n        tokenImgSrc={imagez}\n      />\n      <BalanceMsg\n        label={`Your 0xBTC rewards `}\n        amount={formattedBalance2* 1e10}\n        tokenImgSrc={imagezz}\n      />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit}\n          disabled={isMining}\n        >\n          {isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : `Get Rewards Only`}\n        </Button>        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit2}\n          disabled={isMining2}\n        >\n          {isMining || isMining3 || isMining4 || isMining2 || isMining5 ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n        </Button>\n\n\n\n\n\n        </div>\n\n<Snackbar\n  open={showErc20ApprovalSuccess}\n  autoHideDuration={5000}\n  onClose={handleCloseSnack}\n>\n  <Alert onClose={handleCloseSnack} severity=\"success\">\n    ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n    initiate the staking transfer.\n  </Alert>\n</Snackbar>\n<Snackbar\n  open={showStakeTokensSuccess}\n  autoHideDuration={5000}\n  onClose={handleCloseSnack}\n>\n  <Alert onClose={handleCloseSnack} severity=\"success\">\n    Tokens staked successfully!\n  </Alert>\n</Snackbar>\n<Snackbar\n  open={showUnstakeSuccess2}\n  autoHideDuration={5000}\n  onClose={handleCloseSnack3}\n>\n  <Alert onClose={handleCloseSnack3} severity=\"success\">\n    Reward successfully Claimed!\n  </Alert>\n</Snackbar>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack2}\n      >\n        <Alert onClose={handleCloseSnack2} severity=\"success\">\n          Tokens unstaked successfully!\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showErc20ApprovalSuccess33}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Max Approved! You may now Stake w/o Approve!!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER = (address: string): BigNumber | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER3 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPRewardAddressOLD = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP2\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddressOLD,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers} from \"@usedapp/core\"\n\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport Zero from \"../chain-info/ProofOfWork.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const ProofOfWorkStats2 = (address: string): BigNumber | undefined => {\n    const { chainId } = useEthers()\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n\n\n    const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n    const zeroAddress = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n    //MY STUFF\n    const zeroAbi = Zero.abi\n\n    const ZeroInterface = new utils.Interface(zeroAbi)\n\n\n    const [epochCount] =\n    useContractCall({\n      abi: ZeroInterface,\n      address: zeroAddress,\n      method: \"getEpoch\",\n      args: [],\n    }) ?? []\nreturn epochCount\n  }\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport UniV2Pair from \"../chain-info/UniswapV2Pair.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance4 = (address: string): number | undefined => {\n    \n  const { account, chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const LPTOKEN = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  //MY STUFF\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance3] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"rewardRate\",\n      args: [],\n    }) ?? []\n    let nothing\n    var rateperyear = 0\n    var Contractshare = 0\n    if(stakingBalance3 !== nothing && stakingBalance2 !== nothing && stakingBalance !== nothing){\n     rateperyear = parseInt(stakingBalance3.toString()) / (4*10**16) * 10 *3600*7*24 / 10**18 *56 //10 /(4*10^16) *parseInt(stakingBalance.toString())/parseInt(stakingBalance.toString()) \n     Contractshare =parseInt(stakingBalance2.toString()) \n    }\n\n    const [unibal] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPTOKEN,\n      method: \"totalSupply\",\n      args: [],\n    }) ?? []\n\n    const sushiABI = UniV2Pair.abi\n    const sushiInterface = new utils.Interface(sushiABI)\n    \n  \n    const [stakingBalance6, ff2, fff2] =\n      useContractCall({\n        abi: sushiInterface,\n        address: LPTOKEN,\n        method: \"getReserves\",\n        args: [],\n      }) ?? []\nvar dead =0\n  console.log(\"FER\", stakingBalance6)\n    console.log(\"testee\",rateperyear)\n    console.log(\"Their share: \",Contractshare  )\n    console.log(\"Their shareff2: \",ff2  )\n    console.log(\"get what their liq is worth in forgex2\")\n    if(unibal !==nothing && stakingBalance !==nothing && stakingBalance2 !==nothing){\n      console.log(\"Their shareunibal: \",parseInt(unibal.toString()  ))\n\n    console.log(\"Their shareff2: \",parseInt(ff2  ) )\n      console.log(\"Their shareunibal3: \",parseInt(stakingBalance2.toString()) )\n      Contractshare =parseInt(stakingBalance2.toString()) *ff2/unibal\n    console.log(\"uni tot supply\", parseInt(unibal.toString()))\n    console.log(\"uni % \", parseInt(stakingBalance.toString())/parseInt(unibal.toString())*100)\n    var urUniper = 1/parseInt(unibal.toString())*100\n    console.log(\"unitotal Forge owned\", parseInt(ff2.toString())/(10**18))\n    var unitotalForge = parseInt(ff2.toString())/(10**18)\n    var urUniTotal = urUniper\n    console.log(\"TOTAL FOrge wned in Uni\", urUniTotal/100)\n    console.log(\"they will get this many Forge per year:\", rateperyear*Contractshare/100)\n    console.log(\"Turning \", urUniTotal*2/100,\" into \", rateperyear*Contractshare/100,\" forge :o\")\n    var TotalAPY = rateperyear/(Contractshare*2 )* 10**20\n    console.log(\"APY \", TotalAPY)\n    console.log(\"APY2 \", rateperyear/Contractshare*2)\n     dead = TotalAPY \n    }\n    return dead\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalanceOTHER2 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n  //const { abi } = TokenFarm\n  //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  //const tokenFarmInterface = new utils.Interface(abi)\n\n  //MY STUFF\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n\n\n  \n\n  const [stakingBalance] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"earned\",\n      args: [account],\n    }) ?? []\n  return stakingBalance\n}\n","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens = () => {\n  \n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  \n\n\n\n  return useContractFunction(LPRewardsContract, \"getReward\", {\n    transactionName: \"Get rewards\",\n  })\n}\n","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens2 = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22 = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\nexport const useUnstakeTokens22Other = () => {\n\n  const { chainId } = useEthers()\n\n\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"NEWsynethix_LP2\"] : constants.AddressZero\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock0xBTC from \"../chain-info/AMock.json\"\nimport Auctionz from \"../chain-info/Auctions.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const ApproveOnlyMax = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = TokenFarm\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const LPRewardAddress = chainId ? brownieConfig[\"networks\"][networkName][\"synethix_LP\"] : constants.AddressZero\n  var AuctionAddress = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  const xbtc = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n  const LPAdd = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n//MEME ACTUAL USING LP Contracts\nconst AuctionsABI = Auctionz.abi\nconst AuctionInterface = new utils.Interface(AuctionsABI)\nconst AuctionContract = new Contract(\n  AuctionAddress, AuctionInterface\n)\nconst rewardABI = LPFarm.abi\nconst mockABI = Mock0xBTC.abi\nconst mockInterface = new utils.Interface(mockABI)\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n\nconst mockLPContract = new Contract(\n    LPAdd, mockInterface\n    )\n\nconst mockContract = new Contract(\n    xbtc, mockInterface\n    )\n    var test = mockContract\n    var fff = \"Approve ERC20 transfer23\"\nif(tokenAddress === LPAdd)\n{\n    test = mockLPContract\n    AuctionAddress = LPRewardAddress\n    fff = \"Approve ERC20 transfer21\"\n    \n}\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n  const { send: approveErc20Send, state: b2 } =\n    useContractFunction(test, \"approve\", {\n      transactionName: fff,\n    })\n\n    const send =  (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(AuctionAddress, \"99999999999999999999999999999999\")\n      }\n      const [state, setState] = useState(b2)\n      \n      useEffect(() => {\n          setState(b2)\n      \n      }, [b2])\n\t\n      return { send, state }}","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg,\n} from \"../../components\"\nimport { Tab, Box, makeStyles } from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { Unstake } from \"./Unstake\"\n\ninterface TokenFarmContractProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n    margin: `${theme.spacing(4)}px 0`,\n    padding: theme.spacing(2),\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\n\nexport const TokenFarmContract = ({\n  supportedTokens,\n}: TokenFarmContractProps) => {\n  const classes = useStyles()\n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  return (\n    <Box><br></br>\n      <h1 className=\"MuiTypography-root\">Staking</h1>\n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                return (\n                  <TabPanel value={(index).toString()} key={index} >\n                    <Unstake token={token} />\n                  </TabPanel>\n                )\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}\n","/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport pow from \"../pow2.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\n//import DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const {account, chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  const LP_token = chainId ? brownieConfig[\"networks\"][networkName][\"LP_token\"] : constants.AddressZero\n  const pow_token = chainId ? brownieConfig[\"networks\"][networkName][\"pow_token\"] : constants.AddressZero\n\n  const zxbtc_token = chainId ? brownieConfig[\"networks\"][networkName][\"xbtc\"] : constants.AddressZero\n\n  const auction_addy = chainId ? brownieConfig[\"networks\"][networkName][\"auction\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n  var supportedTokens\n  if(account === \"0x543c3F3Ee66Cf54746d4c4011d5cACf544a427f5\")\n  {\n\n    supportedTokens= [\n      {\n        image: eth,\n        address: LP_token,\n        name: \"Auctions\",\n      },\n      {\n        image: pow,\n        address: \"0x0000000000000000000000000000000000000001\",\n        name: \"Auction Reedemer\",\n      },\n      {\n        image: pow,\n        address: pow_token,\n        name: \"Your Wallet\",\n      },\n      {\n        image: pow,\n        address: \"0x0000000000000000000000000000000000000000\",\n        name: \"Extra Contract Stuff\",\n      }\n    ]\n  }else{\n\n\n   supportedTokens = [\n    {\n      image: eth,\n      address: LP_token,\n      name: \"Auctions\",\n    },\n    {\n      image: pow,\n      address: \"0x0000000000000000000000000000000000000001\",\n      name: \"Auction Reedemer\",\n    },\n    {\n      image: pow,\n      address: pow_token,\n      name: \"Your Wallet\",\n    }\n  ]\n}\n  const supportedTokens2: Array<Token> = [\n    {\n      image: eth,\n      address: LP_token,\n      name: \"Staking\",\n    }\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && (error.name === \"UnsupportedChainIdError\" || error.name === \"t\")) {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)      \n    }\n  }, [error, showNetworkError])\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: \"MuiTypography-root\",\n        }}\n      >Forge Auction & Staking DAPP\n      </Typography><h1>Auctions</h1>\n      <YourWallet supportedTokens={supportedTokens} />\n      <TokenFarmContract supportedTokens={supportedTokens2} />\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          You MUST change Networks in Metamask to the POLYGON NETWORK to use the DAPP!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import React from \"react\"\nimport { Header } from \"./features/Header\"\nimport { Main } from \"./features/Main\"\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Container } from \"@material-ui/core\"\nimport discordimg from \"./discord.png\"\nimport forgedappimg from \"./forge22222.png\"\nexport const App = () => {\n  return (\n    <DAppProvider config={{\n      supportedChains: [ChainId.Polygon],\n      notifications: {\n        expirationPeriod: 1000,\n        checkInterval: 1000\n      }\n    }}>\n      <Header />\n      <Container maxWidth=\"lg\">\n\n        <Main />\n        \n      </Container>\n\n    </DAppProvider>\n\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}