{
	"schemaVersion": "2.0.0",
	"contractName": "MedianTestHelper",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "int256[]",
						"name": "list",
						"type": "int256[]"
					}
				],
				"name": "publicGet",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256[]",
						"name": "list",
						"type": "int256[]"
					},
					{
						"internalType": "uint256",
						"name": "k1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "k2",
						"type": "uint256"
					}
				],
				"name": "publicQuickselectTwo",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {}
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610ba9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630fb75cff1461003b578063115efb20146100fc575b600080fd5b6100e36004803603606081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460208302840111640100000000831117156100a057600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356101b1565b6040805192835260208301919091528051918290030190f35b61019f6004803603602081101561011257600080fd5b81019060208101813564010000000081111561012d57600080fd5b82018360208201111561013f57600080fd5b8035906020019184602083028401116401000000008311171561016157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506101d2945050505050565b60408051918252519081900360200190f35b6000806101c6856000600188510387876101e5565b91509150935093915050565b60006101dd826102c3565b90505b919050565b6000808284106101f457600080fd5b8386111580156102045750848411155b61020d57600080fd5b82861115801561021d5750848311155b61022657600080fd5b600786860310156102475761023e87878787876102d6565b915091506102b9565b600061025488888861078d565b9050808411610265578095506102b3565b84811015610278578060010196506102b3565b80851115801561028757508381105b61028d57fe5b61029988888388610871565b92506102aa88826001018887610871565b91506102b99050565b50610226565b9550959350505050565b60006101dd6102d183610903565b610991565b6000806000868660010103905060008888600001815181106102f457fe5b6020026020010151905060008260011061032e577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610346565b89896001018151811061033d57fe5b60200260200101515b9050600083600210610378577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610390565b8a8a6002018151811061038757fe5b60200260200101515b90506000846003106103c2577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6103da565b8b8b600301815181106103d157fe5b60200260200101515b905060008560041061040c577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610424565b8c8c6004018151811061041b57fe5b60200260200101515b9050600086600510610456577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61046e565b8d8d6005018151811061046557fe5b60200260200101515b90506000876006106104a0577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104b8565b8e8e600601815181106104af57fe5b60200260200101515b9050858713156104c6579495945b838513156104d2579293925b818313156104de579091905b848713156104ea579395935b838613156104f6579294925b8083131561050057915b8486131561050c579394935b8082131561051657905b82871315610522579195915b8186131561052e579094905b8085131561053857935b82861315610544579194915b8084131561054e57925b8285131561055a579193915b81841315610566579092905b82841315610572579192915b8d8c038061058257879a5061064f565b806001141561059357869a5061064f565b80600214156105a457859a5061064f565b80600314156105b557849a5061064f565b80600414156105c657839a5061064f565b80600514156105d757829a5061064f565b80600614156105e857819a5061064f565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6b31206f7574206f6620626f756e647300000000000000000000000000000000604482015290519081900360640190fd5b8e8c038d8d141561066d57508a99506102b998505050505050505050565b8061068457509698506102b9975050505050505050565b806001141561069f57509598506102b9975050505050505050565b80600214156106ba57509498506102b9975050505050505050565b80600314156106d557509398506102b9975050505050505050565b80600414156106f057509298506102b9975050505050505050565b806005141561070b57509198506102b9975050505050505050565b806006141561072657509098506102b9975050505050505050565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6b32206f7574206f6620626f756e647300000000000000000000000000000000604482015290519081900360640190fd5b60008084600285850104815181106107a157fe5b602002602001015190506001840393506001830192505b600184019350808585815181106107cb57fe5b6020026020010151126107b8575b600183039250808584815181106107ec57fe5b6020026020010151136107d9578284101561085c5784838151811061080d57fe5b602002602001015185858151811061082157fe5b602002602001015186868151811061083557fe5b6020026020010187868151811061084857fe5b602090810291909101019190915252610865565b8291505061086a565b6107b8565b9392505050565b60008184111561088057600080fd5b8282111561088d57600080fd5b828410156108e457600784840310156108b95760006108af86868686876102d6565b5091506108fb9050565b60006108c686868661078d565b90508083116108d7578093506108de565b8060010194505b5061088d565b8484815181106108f057fe5b602002602001015190505b949350505050565b606080825167ffffffffffffffff8111801561091e57600080fd5b50604051908082528060200260200182016040528015610948578160200160208202803683370190505b50905060005b835181101561098a5783818151811061096357fe5b602002602001015182828151811061097757fe5b602090810291909101015260010161094e565b5092915050565b60008151600010610a0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6c697374206d757374206e6f7420626520656d70747900000000000000000000604482015290519081900360640190fd5b81516002810460018216610a4257600080610a288660006001870360018703876101e5565b9092509050610a378282610a5b565b9450505050506101e0565b610a528460006001850384610871565b925050506101e0565b60008083128015610a6c5750600082135b80610a825750600083138015610a825750600082125b15610aa2576002610a938484610ad3565b81610a9a57fe5b059050610acd565b6000600280850781850701059050610ac9610ac36002860560028605610ad3565b82610ad3565b9150505b92915050565b6000828201818312801590610ae85750838112155b80610afd5750600083128015610afd57508381125b61086a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610b536021913960400191505060405180910390fdfe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77a2646970667358221220ba6e0bdc73a1d159626c257ed8b2357cba2a84cfe8461b33453e02368394097364736f6c63430006060033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBA9 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xFB75CFF EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x115EFB20 EQ PUSH2 0xFC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP DUP3 CALLDATALOAD SWAP4 POP POP POP PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x1D2 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C6 DUP6 PUSH1 0x0 PUSH1 0x1 DUP9 MLOAD SUB DUP8 DUP8 PUSH2 0x1E5 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD DUP3 PUSH2 0x2C3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 LT PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO DUP1 ISZERO PUSH2 0x204 JUMPI POP DUP5 DUP5 GT ISZERO JUMPDEST PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 GT ISZERO DUP1 ISZERO PUSH2 0x21D JUMPI POP DUP5 DUP4 GT ISZERO JUMPDEST PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP7 DUP7 SUB LT ISZERO PUSH2 0x247 JUMPI PUSH2 0x23E DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2D6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x254 DUP9 DUP9 DUP9 PUSH2 0x78D JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT PUSH2 0x265 JUMPI DUP1 SWAP6 POP PUSH2 0x2B3 JUMP JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x278 JUMPI DUP1 PUSH1 0x1 ADD SWAP7 POP PUSH2 0x2B3 JUMP JUMPDEST DUP1 DUP6 GT ISZERO DUP1 ISZERO PUSH2 0x287 JUMPI POP DUP4 DUP2 LT JUMPDEST PUSH2 0x28D JUMPI INVALID JUMPDEST PUSH2 0x299 DUP9 DUP9 DUP4 DUP9 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP PUSH2 0x2AA DUP9 DUP3 PUSH1 0x1 ADD DUP9 DUP8 PUSH2 0x871 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B9 SWAP1 POP JUMP JUMPDEST POP PUSH2 0x226 JUMP JUMPDEST SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD PUSH2 0x2D1 DUP4 PUSH2 0x903 JUMP JUMPDEST PUSH2 0x991 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 DUP7 PUSH1 0x1 ADD SUB SWAP1 POP PUSH1 0x0 DUP9 DUP9 PUSH1 0x0 ADD DUP2 MLOAD DUP2 LT PUSH2 0x2F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 LT PUSH2 0x32E JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x346 JUMP JUMPDEST DUP10 DUP10 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x33D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x2 LT PUSH2 0x378 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x390 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x2 ADD DUP2 MLOAD DUP2 LT PUSH2 0x387 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x3 LT PUSH2 0x3C2 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x3DA JUMP JUMPDEST DUP12 DUP12 PUSH1 0x3 ADD DUP2 MLOAD DUP2 LT PUSH2 0x3D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x4 LT PUSH2 0x40C JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x424 JUMP JUMPDEST DUP13 DUP13 PUSH1 0x4 ADD DUP2 MLOAD DUP2 LT PUSH2 0x41B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x5 LT PUSH2 0x456 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x46E JUMP JUMPDEST DUP14 DUP14 PUSH1 0x5 ADD DUP2 MLOAD DUP2 LT PUSH2 0x465 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x6 LT PUSH2 0x4A0 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x4B8 JUMP JUMPDEST DUP15 DUP15 PUSH1 0x6 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP DUP6 DUP8 SGT ISZERO PUSH2 0x4C6 JUMPI SWAP5 SWAP6 SWAP5 JUMPDEST DUP4 DUP6 SGT ISZERO PUSH2 0x4D2 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 DUP4 SGT ISZERO PUSH2 0x4DE JUMPI SWAP1 SWAP2 SWAP1 JUMPDEST DUP5 DUP8 SGT ISZERO PUSH2 0x4EA JUMPI SWAP4 SWAP6 SWAP4 JUMPDEST DUP4 DUP7 SGT ISZERO PUSH2 0x4F6 JUMPI SWAP3 SWAP5 SWAP3 JUMPDEST DUP1 DUP4 SGT ISZERO PUSH2 0x500 JUMPI SWAP2 JUMPDEST DUP5 DUP7 SGT ISZERO PUSH2 0x50C JUMPI SWAP4 SWAP5 SWAP4 JUMPDEST DUP1 DUP3 SGT ISZERO PUSH2 0x516 JUMPI SWAP1 JUMPDEST DUP3 DUP8 SGT ISZERO PUSH2 0x522 JUMPI SWAP2 SWAP6 SWAP2 JUMPDEST DUP2 DUP7 SGT ISZERO PUSH2 0x52E JUMPI SWAP1 SWAP5 SWAP1 JUMPDEST DUP1 DUP6 SGT ISZERO PUSH2 0x538 JUMPI SWAP4 JUMPDEST DUP3 DUP7 SGT ISZERO PUSH2 0x544 JUMPI SWAP2 SWAP5 SWAP2 JUMPDEST DUP1 DUP5 SGT ISZERO PUSH2 0x54E JUMPI SWAP3 JUMPDEST DUP3 DUP6 SGT ISZERO PUSH2 0x55A JUMPI SWAP2 SWAP4 SWAP2 JUMPDEST DUP2 DUP5 SGT ISZERO PUSH2 0x566 JUMPI SWAP1 SWAP3 SWAP1 JUMPDEST DUP3 DUP5 SGT ISZERO PUSH2 0x572 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST DUP14 DUP13 SUB DUP1 PUSH2 0x582 JUMPI DUP8 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x593 JUMPI DUP7 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x2 EQ ISZERO PUSH2 0x5A4 JUMPI DUP6 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x3 EQ ISZERO PUSH2 0x5B5 JUMPI DUP5 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x4 EQ ISZERO PUSH2 0x5C6 JUMPI DUP4 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x5 EQ ISZERO PUSH2 0x5D7 JUMPI DUP3 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x6 EQ ISZERO PUSH2 0x5E8 JUMPI DUP2 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6B31206F7574206F6620626F756E647300000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP15 DUP13 SUB DUP14 DUP14 EQ ISZERO PUSH2 0x66D JUMPI POP DUP11 SWAP10 POP PUSH2 0x2B9 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x684 JUMPI POP SWAP7 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x69F JUMPI POP SWAP6 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x2 EQ ISZERO PUSH2 0x6BA JUMPI POP SWAP5 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x3 EQ ISZERO PUSH2 0x6D5 JUMPI POP SWAP4 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x4 EQ ISZERO PUSH2 0x6F0 JUMPI POP SWAP3 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x5 EQ ISZERO PUSH2 0x70B JUMPI POP SWAP2 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 EQ ISZERO PUSH2 0x726 JUMPI POP SWAP1 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6B32206F7574206F6620626F756E647300000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x2 DUP6 DUP6 ADD DIV DUP2 MLOAD DUP2 LT PUSH2 0x7A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 DUP5 SUB SWAP4 POP PUSH1 0x1 DUP4 ADD SWAP3 POP JUMPDEST PUSH1 0x1 DUP5 ADD SWAP4 POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x7CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SLT PUSH2 0x7B8 JUMPI JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SGT PUSH2 0x7D9 JUMPI DUP3 DUP5 LT ISZERO PUSH2 0x85C JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x80D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x821 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x835 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x848 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH2 0x865 JUMP JUMPDEST DUP3 SWAP2 POP POP PUSH2 0x86A JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 GT ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x88D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x7 DUP5 DUP5 SUB LT ISZERO PUSH2 0x8B9 JUMPI PUSH1 0x0 PUSH2 0x8AF DUP7 DUP7 DUP7 DUP7 DUP8 PUSH2 0x2D6 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x8FB SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8C6 DUP7 DUP7 DUP7 PUSH2 0x78D JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT PUSH2 0x8D7 JUMPI DUP1 SWAP4 POP PUSH2 0x8DE JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP5 POP JUMPDEST POP PUSH2 0x88D JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x91E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x948 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x98A JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x963 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x977 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x94E JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 LT PUSH2 0xA03 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C697374206D757374206E6F7420626520656D70747900000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND PUSH2 0xA42 JUMPI PUSH1 0x0 DUP1 PUSH2 0xA28 DUP7 PUSH1 0x0 PUSH1 0x1 DUP8 SUB PUSH1 0x1 DUP8 SUB DUP8 PUSH2 0x1E5 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xA37 DUP3 DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0xA52 DUP5 PUSH1 0x0 PUSH1 0x1 DUP6 SUB DUP5 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT DUP1 ISZERO PUSH2 0xA6C JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 PUSH2 0xA82 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xA82 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST ISZERO PUSH2 0xAA2 JUMPI PUSH1 0x2 PUSH2 0xA93 DUP5 DUP5 PUSH2 0xAD3 JUMP JUMPDEST DUP2 PUSH2 0xA9A JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH2 0xACD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 DUP6 SMOD DUP2 DUP6 SMOD ADD SDIV SWAP1 POP PUSH2 0xAC9 PUSH2 0xAC3 PUSH1 0x2 DUP7 SDIV PUSH1 0x2 DUP7 SDIV PUSH2 0xAD3 JUMP JUMPDEST DUP3 PUSH2 0xAD3 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP2 DUP4 SLT DUP1 ISZERO SWAP1 PUSH2 0xAE8 JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0xAFD JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xAFD JUMPI POP DUP4 DUP2 SLT JUMPDEST PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xB53 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT INVALID MSTORE8 PUSH10 0x676E6564536166654D61 PUSH21 0x683A206164646974696F6E206F766572666C6F77A2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH15 0xBDC73A1D159626C257ED8B2357CBA 0x2A DUP5 0xCF 0xE8 CHAINID SHL CALLER GASLIMIT RETURNDATACOPY MUL CALLDATASIZE DUP4 SWAP5 MULMOD PUSH20 0x64736F6C63430006060033000000000000000000 ",
				"sourceMap": "50:360:49:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;50:360:49;;;;;;;"
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630fb75cff1461003b578063115efb20146100fc575b600080fd5b6100e36004803603606081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460208302840111640100000000831117156100a057600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356101b1565b6040805192835260208301919091528051918290030190f35b61019f6004803603602081101561011257600080fd5b81019060208101813564010000000081111561012d57600080fd5b82018360208201111561013f57600080fd5b8035906020019184602083028401116401000000008311171561016157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506101d2945050505050565b60408051918252519081900360200190f35b6000806101c6856000600188510387876101e5565b91509150935093915050565b60006101dd826102c3565b90505b919050565b6000808284106101f457600080fd5b8386111580156102045750848411155b61020d57600080fd5b82861115801561021d5750848311155b61022657600080fd5b600786860310156102475761023e87878787876102d6565b915091506102b9565b600061025488888861078d565b9050808411610265578095506102b3565b84811015610278578060010196506102b3565b80851115801561028757508381105b61028d57fe5b61029988888388610871565b92506102aa88826001018887610871565b91506102b99050565b50610226565b9550959350505050565b60006101dd6102d183610903565b610991565b6000806000868660010103905060008888600001815181106102f457fe5b6020026020010151905060008260011061032e577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610346565b89896001018151811061033d57fe5b60200260200101515b9050600083600210610378577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610390565b8a8a6002018151811061038757fe5b60200260200101515b90506000846003106103c2577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6103da565b8b8b600301815181106103d157fe5b60200260200101515b905060008560041061040c577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610424565b8c8c6004018151811061041b57fe5b60200260200101515b9050600086600510610456577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61046e565b8d8d6005018151811061046557fe5b60200260200101515b90506000876006106104a0577f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104b8565b8e8e600601815181106104af57fe5b60200260200101515b9050858713156104c6579495945b838513156104d2579293925b818313156104de579091905b848713156104ea579395935b838613156104f6579294925b8083131561050057915b8486131561050c579394935b8082131561051657905b82871315610522579195915b8186131561052e579094905b8085131561053857935b82861315610544579194915b8084131561054e57925b8285131561055a579193915b81841315610566579092905b82841315610572579192915b8d8c038061058257879a5061064f565b806001141561059357869a5061064f565b80600214156105a457859a5061064f565b80600314156105b557849a5061064f565b80600414156105c657839a5061064f565b80600514156105d757829a5061064f565b80600614156105e857819a5061064f565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6b31206f7574206f6620626f756e647300000000000000000000000000000000604482015290519081900360640190fd5b8e8c038d8d141561066d57508a99506102b998505050505050505050565b8061068457509698506102b9975050505050505050565b806001141561069f57509598506102b9975050505050505050565b80600214156106ba57509498506102b9975050505050505050565b80600314156106d557509398506102b9975050505050505050565b80600414156106f057509298506102b9975050505050505050565b806005141561070b57509198506102b9975050505050505050565b806006141561072657509098506102b9975050505050505050565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6b32206f7574206f6620626f756e647300000000000000000000000000000000604482015290519081900360640190fd5b60008084600285850104815181106107a157fe5b602002602001015190506001840393506001830192505b600184019350808585815181106107cb57fe5b6020026020010151126107b8575b600183039250808584815181106107ec57fe5b6020026020010151136107d9578284101561085c5784838151811061080d57fe5b602002602001015185858151811061082157fe5b602002602001015186868151811061083557fe5b6020026020010187868151811061084857fe5b602090810291909101019190915252610865565b8291505061086a565b6107b8565b9392505050565b60008184111561088057600080fd5b8282111561088d57600080fd5b828410156108e457600784840310156108b95760006108af86868686876102d6565b5091506108fb9050565b60006108c686868661078d565b90508083116108d7578093506108de565b8060010194505b5061088d565b8484815181106108f057fe5b602002602001015190505b949350505050565b606080825167ffffffffffffffff8111801561091e57600080fd5b50604051908082528060200260200182016040528015610948578160200160208202803683370190505b50905060005b835181101561098a5783818151811061096357fe5b602002602001015182828151811061097757fe5b602090810291909101015260010161094e565b5092915050565b60008151600010610a0357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6c697374206d757374206e6f7420626520656d70747900000000000000000000604482015290519081900360640190fd5b81516002810460018216610a4257600080610a288660006001870360018703876101e5565b9092509050610a378282610a5b565b9450505050506101e0565b610a528460006001850384610871565b925050506101e0565b60008083128015610a6c5750600082135b80610a825750600083138015610a825750600082125b15610aa2576002610a938484610ad3565b81610a9a57fe5b059050610acd565b6000600280850781850701059050610ac9610ac36002860560028605610ad3565b82610ad3565b9150505b92915050565b6000828201818312801590610ae85750838112155b80610afd5750600083128015610afd57508381125b61086a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610b536021913960400191505060405180910390fdfe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77a2646970667358221220ba6e0bdc73a1d159626c257ed8b2357cba2a84cfe8461b33453e02368394097364736f6c63430006060033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xFB75CFF EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x115EFB20 EQ PUSH2 0xFC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP DUP3 CALLDATALOAD SWAP4 POP POP POP PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1B1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x1D2 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C6 DUP6 PUSH1 0x0 PUSH1 0x1 DUP9 MLOAD SUB DUP8 DUP8 PUSH2 0x1E5 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD DUP3 PUSH2 0x2C3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 LT PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO DUP1 ISZERO PUSH2 0x204 JUMPI POP DUP5 DUP5 GT ISZERO JUMPDEST PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 GT ISZERO DUP1 ISZERO PUSH2 0x21D JUMPI POP DUP5 DUP4 GT ISZERO JUMPDEST PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP7 DUP7 SUB LT ISZERO PUSH2 0x247 JUMPI PUSH2 0x23E DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2D6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x254 DUP9 DUP9 DUP9 PUSH2 0x78D JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT PUSH2 0x265 JUMPI DUP1 SWAP6 POP PUSH2 0x2B3 JUMP JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x278 JUMPI DUP1 PUSH1 0x1 ADD SWAP7 POP PUSH2 0x2B3 JUMP JUMPDEST DUP1 DUP6 GT ISZERO DUP1 ISZERO PUSH2 0x287 JUMPI POP DUP4 DUP2 LT JUMPDEST PUSH2 0x28D JUMPI INVALID JUMPDEST PUSH2 0x299 DUP9 DUP9 DUP4 DUP9 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP PUSH2 0x2AA DUP9 DUP3 PUSH1 0x1 ADD DUP9 DUP8 PUSH2 0x871 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B9 SWAP1 POP JUMP JUMPDEST POP PUSH2 0x226 JUMP JUMPDEST SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD PUSH2 0x2D1 DUP4 PUSH2 0x903 JUMP JUMPDEST PUSH2 0x991 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP7 DUP7 PUSH1 0x1 ADD SUB SWAP1 POP PUSH1 0x0 DUP9 DUP9 PUSH1 0x0 ADD DUP2 MLOAD DUP2 LT PUSH2 0x2F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 LT PUSH2 0x32E JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x346 JUMP JUMPDEST DUP10 DUP10 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x33D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x2 LT PUSH2 0x378 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x390 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x2 ADD DUP2 MLOAD DUP2 LT PUSH2 0x387 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x3 LT PUSH2 0x3C2 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x3DA JUMP JUMPDEST DUP12 DUP12 PUSH1 0x3 ADD DUP2 MLOAD DUP2 LT PUSH2 0x3D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x4 LT PUSH2 0x40C JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x424 JUMP JUMPDEST DUP13 DUP13 PUSH1 0x4 ADD DUP2 MLOAD DUP2 LT PUSH2 0x41B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x5 LT PUSH2 0x456 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x46E JUMP JUMPDEST DUP14 DUP14 PUSH1 0x5 ADD DUP2 MLOAD DUP2 LT PUSH2 0x465 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x6 LT PUSH2 0x4A0 JUMPI PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x4B8 JUMP JUMPDEST DUP15 DUP15 PUSH1 0x6 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD JUMPDEST SWAP1 POP DUP6 DUP8 SGT ISZERO PUSH2 0x4C6 JUMPI SWAP5 SWAP6 SWAP5 JUMPDEST DUP4 DUP6 SGT ISZERO PUSH2 0x4D2 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP2 DUP4 SGT ISZERO PUSH2 0x4DE JUMPI SWAP1 SWAP2 SWAP1 JUMPDEST DUP5 DUP8 SGT ISZERO PUSH2 0x4EA JUMPI SWAP4 SWAP6 SWAP4 JUMPDEST DUP4 DUP7 SGT ISZERO PUSH2 0x4F6 JUMPI SWAP3 SWAP5 SWAP3 JUMPDEST DUP1 DUP4 SGT ISZERO PUSH2 0x500 JUMPI SWAP2 JUMPDEST DUP5 DUP7 SGT ISZERO PUSH2 0x50C JUMPI SWAP4 SWAP5 SWAP4 JUMPDEST DUP1 DUP3 SGT ISZERO PUSH2 0x516 JUMPI SWAP1 JUMPDEST DUP3 DUP8 SGT ISZERO PUSH2 0x522 JUMPI SWAP2 SWAP6 SWAP2 JUMPDEST DUP2 DUP7 SGT ISZERO PUSH2 0x52E JUMPI SWAP1 SWAP5 SWAP1 JUMPDEST DUP1 DUP6 SGT ISZERO PUSH2 0x538 JUMPI SWAP4 JUMPDEST DUP3 DUP7 SGT ISZERO PUSH2 0x544 JUMPI SWAP2 SWAP5 SWAP2 JUMPDEST DUP1 DUP5 SGT ISZERO PUSH2 0x54E JUMPI SWAP3 JUMPDEST DUP3 DUP6 SGT ISZERO PUSH2 0x55A JUMPI SWAP2 SWAP4 SWAP2 JUMPDEST DUP2 DUP5 SGT ISZERO PUSH2 0x566 JUMPI SWAP1 SWAP3 SWAP1 JUMPDEST DUP3 DUP5 SGT ISZERO PUSH2 0x572 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST DUP14 DUP13 SUB DUP1 PUSH2 0x582 JUMPI DUP8 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x593 JUMPI DUP7 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x2 EQ ISZERO PUSH2 0x5A4 JUMPI DUP6 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x3 EQ ISZERO PUSH2 0x5B5 JUMPI DUP5 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x4 EQ ISZERO PUSH2 0x5C6 JUMPI DUP4 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x5 EQ ISZERO PUSH2 0x5D7 JUMPI DUP3 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST DUP1 PUSH1 0x6 EQ ISZERO PUSH2 0x5E8 JUMPI DUP2 SWAP11 POP PUSH2 0x64F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6B31206F7574206F6620626F756E647300000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP15 DUP13 SUB DUP14 DUP14 EQ ISZERO PUSH2 0x66D JUMPI POP DUP11 SWAP10 POP PUSH2 0x2B9 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x684 JUMPI POP SWAP7 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x69F JUMPI POP SWAP6 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x2 EQ ISZERO PUSH2 0x6BA JUMPI POP SWAP5 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x3 EQ ISZERO PUSH2 0x6D5 JUMPI POP SWAP4 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x4 EQ ISZERO PUSH2 0x6F0 JUMPI POP SWAP3 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x5 EQ ISZERO PUSH2 0x70B JUMPI POP SWAP2 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 EQ ISZERO PUSH2 0x726 JUMPI POP SWAP1 SWAP9 POP PUSH2 0x2B9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6B32206F7574206F6620626F756E647300000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x2 DUP6 DUP6 ADD DIV DUP2 MLOAD DUP2 LT PUSH2 0x7A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 DUP5 SUB SWAP4 POP PUSH1 0x1 DUP4 ADD SWAP3 POP JUMPDEST PUSH1 0x1 DUP5 ADD SWAP4 POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x7CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SLT PUSH2 0x7B8 JUMPI JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SGT PUSH2 0x7D9 JUMPI DUP3 DUP5 LT ISZERO PUSH2 0x85C JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x80D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x821 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x835 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x848 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD SWAP2 SWAP1 SWAP2 MSTORE MSTORE PUSH2 0x865 JUMP JUMPDEST DUP3 SWAP2 POP POP PUSH2 0x86A JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 GT ISZERO PUSH2 0x880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x88D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x7 DUP5 DUP5 SUB LT ISZERO PUSH2 0x8B9 JUMPI PUSH1 0x0 PUSH2 0x8AF DUP7 DUP7 DUP7 DUP7 DUP8 PUSH2 0x2D6 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x8FB SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8C6 DUP7 DUP7 DUP7 PUSH2 0x78D JUMP JUMPDEST SWAP1 POP DUP1 DUP4 GT PUSH2 0x8D7 JUMPI DUP1 SWAP4 POP PUSH2 0x8DE JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP5 POP JUMPDEST POP PUSH2 0x88D JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x91E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x948 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x98A JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x963 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x977 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x94E JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 LT PUSH2 0xA03 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C697374206D757374206E6F7420626520656D70747900000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND PUSH2 0xA42 JUMPI PUSH1 0x0 DUP1 PUSH2 0xA28 DUP7 PUSH1 0x0 PUSH1 0x1 DUP8 SUB PUSH1 0x1 DUP8 SUB DUP8 PUSH2 0x1E5 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xA37 DUP3 DUP3 PUSH2 0xA5B JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0xA52 DUP5 PUSH1 0x0 PUSH1 0x1 DUP6 SUB DUP5 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1E0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLT DUP1 ISZERO PUSH2 0xA6C JUMPI POP PUSH1 0x0 DUP3 SGT JUMPDEST DUP1 PUSH2 0xA82 JUMPI POP PUSH1 0x0 DUP4 SGT DUP1 ISZERO PUSH2 0xA82 JUMPI POP PUSH1 0x0 DUP3 SLT JUMPDEST ISZERO PUSH2 0xAA2 JUMPI PUSH1 0x2 PUSH2 0xA93 DUP5 DUP5 PUSH2 0xAD3 JUMP JUMPDEST DUP2 PUSH2 0xA9A JUMPI INVALID JUMPDEST SDIV SWAP1 POP PUSH2 0xACD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 DUP6 SMOD DUP2 DUP6 SMOD ADD SDIV SWAP1 POP PUSH2 0xAC9 PUSH2 0xAC3 PUSH1 0x2 DUP7 SDIV PUSH1 0x2 DUP7 SDIV PUSH2 0xAD3 JUMP JUMPDEST DUP3 PUSH2 0xAD3 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP2 DUP4 SLT DUP1 ISZERO SWAP1 PUSH2 0xAE8 JUMPI POP DUP4 DUP2 SLT ISZERO JUMPDEST DUP1 PUSH2 0xAFD JUMPI POP PUSH1 0x0 DUP4 SLT DUP1 ISZERO PUSH2 0xAFD JUMPI POP DUP4 DUP2 SLT JUMPDEST PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xB53 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT INVALID MSTORE8 PUSH10 0x676E6564536166654D61 PUSH21 0x683A206164646974696F6E206F766572666C6F77A2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH15 0xBDC73A1D159626C257ED8B2357CBA 0x2A DUP5 0xCF 0xE8 CHAINID SHL CALLER GASLIMIT RETURNDATACOPY MUL CALLDATASIZE DUP4 SWAP5 MULMOD PUSH20 0x64736F6C63430006060033000000000000000000 ",
				"sourceMap": "50:360:49:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;50:360:49;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;208:200:49;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;208:200:49;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;208:200:49;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;208:200:49;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;208:200:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;208:200:49;;-1:-1:-1;;208:200:49;;;-1:-1:-1;;;208:200:49;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;80:124;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;80:124:49;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;80:124:49;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;80:124:49;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;80:124:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;80:124:49;;-1:-1:-1;80:124:49;;-1:-1:-1;;;;;80:124:49:i;:::-;;;;;;;;;;;;;;;;208:200;317:6;325;348:55;370:4;376:1;393;379:4;:11;:15;396:2;400;348:21;:55::i;:::-;341:62;;;;208:200;;;;;;:::o;80:124::-;154:6;177:22;194:4;177:16;:22::i;:::-;170:29;;80:124;;;;:::o;4881:800:11:-;5049:11;5062;5096:2;5091;:7;5083:16;;12:1:-1;9;2:12;5083:16:11;5119:2;5113;:8;;:20;;;;;5131:2;5125;:8;;5113:20;5105:29;;12:1:-1;9;2:12;5105:29:11;5154:2;5148;:8;;:20;;;;;5166:2;5160;:8;;5148:20;5140:29;;12:1:-1;9;2:12;5140:29:11;1449:1;5206:2;5201;:7;:35;5197:103;;;5255:36;5270:4;5276:2;5280;5284;5288;5255:14;:36::i;:::-;5248:43;;;;;;5197:103;5307:16;5326:23;5336:4;5342:2;5346;5326:9;:23::i;:::-;5307:42;;5367:8;5361:2;:14;5357:314;;5392:8;5387:13;;5357:314;;;5430:2;5419:8;:13;5415:256;;;5449:8;5460:1;5449:12;5444:17;;5415:256;;;5499:8;5493:2;:14;;:31;;;;;5522:2;5511:8;:13;5493:31;5486:39;;;;5542:35;5554:4;5560:2;5564:8;5574:2;5542:11;:35::i;:::-;5535:42;;5594:39;5606:4;5612:8;5623:1;5612:12;5626:2;5630;5594:11;:39::i;:::-;5587:46;-1:-1:-1;5643:19:11;;-1:-1:-1;5643:19:11;5415:256;5176:501;;;;4881:800;;;;;;;;:::o;554:132::-;630:6;653:28;670:10;675:4;670;:10::i;:::-;653:16;:28::i;1587:2197::-;1739:11;1752;2005;2028:2;2019;2024:1;2019:6;:11;2005:25;;2036:9;2048:4;2053:2;2058:1;2053:6;2048:12;;;;;;;;;;;;;;2036:24;;2066:9;2082:3;2078:1;:7;:32;;170:8;2078:32;;;2088:4;2093:2;2098:1;2093:6;2088:12;;;;;;;;;;;;;;2078:32;2066:44;;2116:9;2132:3;2128:1;:7;:32;;170:8;2128:32;;;2138:4;2143:2;2148:1;2143:6;2138:12;;;;;;;;;;;;;;2128:32;2116:44;;2166:9;2182:3;2178:1;:7;:32;;170:8;2178:32;;;2188:4;2193:2;2198:1;2193:6;2188:12;;;;;;;;;;;;;;2178:32;2166:44;;2216:9;2232:3;2228:1;:7;:32;;170:8;2228:32;;;2238:4;2243:2;2248:1;2243:6;2238:12;;;;;;;;;;;;;;2228:32;2216:44;;2266:9;2282:3;2278:1;:7;:32;;170:8;2278:32;;;2288:4;2293:2;2298:1;2293:6;2288:12;;;;;;;;;;;;;;2278:32;2266:44;;2316:9;2332:3;2328:1;:7;:32;;170:8;2328:32;;;2338:4;2343:2;2348:1;2343:6;2338:12;;;;;;;;;;;;;;2328:32;2316:44;;2376:2;2371;:7;2367:35;;;2393:2;;2397;2367:35;2416:2;2411;:7;2407:35;;;2433:2;;2437;2407:35;2456:2;2451;:7;2447:35;;;2473:2;;2477;2447:35;2496:2;2491;:7;2487:35;;;2513:2;;2517;2487:35;2536:2;2531;:7;2527:35;;;2553:2;;2557;2527:35;2576:2;2571;:7;2567:35;;;2593:2;2567:35;2616:2;2611;:7;2607:35;;;2633:2;;2637;2607:35;2656:2;2651;:7;2647:35;;;2673:2;2647:35;2696:2;2691;:7;2687:35;;;2713:2;;2717;2687:35;2736:2;2731;:7;2727:35;;;2753:2;;2757;2727:35;2776:2;2771;:7;2767:35;;;2793:2;2767:35;2816:2;2811;:7;2807:35;;;2833:2;;2837;2807:35;2856:2;2851;:7;2847:35;;;2873:2;2847:35;2896:2;2891;:7;2887:35;;;2913:2;;2917;2887:35;2936:2;2931;:7;2927:35;;;2953:2;;2957;2927:35;2976:2;2971;:7;2967:35;;;2993:2;;2997;2967:35;3025:7;;;3042:11;3038:302;;3063:2;3056:9;;3038:302;;;3081:6;3091:1;3081:11;3077:263;;;3102:2;3095:9;;3077:263;;;3120:6;3130:1;3120:11;3116:224;;;3141:2;3134:9;;3116:224;;;3159:6;3169:1;3159:11;3155:185;;;3180:2;3173:9;;3155:185;;;3198:6;3208:1;3198:11;3194:146;;;3219:2;3212:9;;3194:146;;;3237:6;3247:1;3237:11;3233:107;;;3258:2;3251:9;;3233:107;;;3276:6;3286:1;3276:11;3272:68;;;3297:2;3290:9;;3272:68;;;3312:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3272:68;3363:7;;;3380:8;;;3376:404;;;-1:-1:-1;3399:4:11;;-1:-1:-1;3391:19:11;;-1:-1:-1;;;;;;;;;3391:19:11;3376:404;3426:11;3422:358;;-1:-1:-1;3454:2:11;;-1:-1:-1;3440:17:11;;-1:-1:-1;;;;;;;;3440:17:11;3422:358;3473:6;3483:1;3473:11;3469:311;;;-1:-1:-1;3501:2:11;;-1:-1:-1;3487:17:11;;-1:-1:-1;;;;;;;;3487:17:11;3469:311;3520:6;3530:1;3520:11;3516:264;;;-1:-1:-1;3548:2:11;;-1:-1:-1;3534:17:11;;-1:-1:-1;;;;;;;;3534:17:11;3516:264;3567:6;3577:1;3567:11;3563:217;;;-1:-1:-1;3595:2:11;;-1:-1:-1;3581:17:11;;-1:-1:-1;;;;;;;;3581:17:11;3563:217;3614:6;3624:1;3614:11;3610:170;;;-1:-1:-1;3642:2:11;;-1:-1:-1;3628:17:11;;-1:-1:-1;;;;;;;;3628:17:11;3610:170;3661:6;3671:1;3661:11;3657:123;;;-1:-1:-1;3689:2:11;;-1:-1:-1;3675:17:11;;-1:-1:-1;;;;;;;;3675:17:11;3657:123;3708:6;3718:1;3708:11;3704:76;;;-1:-1:-1;3736:2:11;;-1:-1:-1;3722:17:11;;-1:-1:-1;;;;;;;;3722:17:11;3704:76;3752:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6003:1223;6102:7;;6270:4;6287:1;6276:7;;;6275:13;6270:19;;;;;;;;;;;;;;6255:34;;6301:1;6295:7;;;;6357:1;6351:7;;;;6364:858;6404:1;6398:7;;;;6433:5;6422:4;6427:2;6422:8;;;;;;;;;;;;;;:16;6385:55;;6447;6466:1;6460:7;;;;6495:5;6484:4;6489:2;6484:8;;;;;;;;;;;;;;:16;6447:55;;6518:2;6513;:7;6509:707;;;6556:4;6561:2;6556:8;;;;;;;;;;;;;;6566:4;6571:2;6566:8;;;;;;;;;;;;;;6533:4;6538:2;6533:8;;;;;;;;;;;;;6543:4;6548:2;6543:8;;;;;;;;;;;;;;;;;6532:43;;;;;6509:707;;;7205:2;7198:9;;;;;6509:707;6364:858;;6003:1223;;;;;;:::o;3940:773::-;4052:10;4086:1;4080:2;:7;;4072:16;;12:1:-1;9;2:12;4072:16:11;4107:2;4102:1;:7;;4094:16;;12:1:-1;9;2:12;4094:16:11;4128:2;4123;:7;4116:572;;;1449:1;4149:2;4144;:7;:35;4140:153;;;4191:13;4230:34;4245:4;4251:2;4255;4259:1;4262;4230:14;:34::i;:::-;-1:-1:-1;4214:50:11;-1:-1:-1;4274:10:11;;-1:-1:-1;4274:10:11;4140:153;4300:18;4321:23;4331:4;4337:2;4341;4321:9;:23::i;:::-;4300:44;;4361:10;4356:1;:15;4352:330;;4503:10;4498:15;;4352:330;;;4659:10;4672:1;4659:14;4654:19;;4352:330;4116:572;;;;4700:4;4705:2;4700:8;;;;;;;;;;;;;;4693:15;;3940:773;;;;;;;:::o;7355:246::-;7424:15;7449:21;7486:4;:11;7473:25;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7473:25:11;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;144:17;;-1:-1;7473:25:11;-1:-1:-1;7449:49:11;-1:-1:-1;7509:9:11;7504:75;7528:4;:11;7524:1;:15;7504:75;;;7565:4;7570:1;7565:7;;;;;;;;;;;;;;7554:5;7560:1;7554:8;;;;;;;;;;;;;;;;;:18;7541:3;;7504:75;;;-1:-1:-1;7591:5:11;7355:246;-1:-1:-1;;7355:246:11:o;815:506::-;898:6;926:4;:11;922:1;:15;914:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;984:11;;1029:1;1023:7;;1040;;;1036:281;;1062:14;1084;1127:62;1142:4;1148:1;1157;1151:3;:7;1174:1;1160:11;:15;1177:11;1127:14;:62::i;:::-;1106:83;;-1:-1:-1;1106:83:11;-1:-1:-1;1204:36:11;1106:83;;1204:18;:36::i;:::-;1197:43;;;;;;;;1036:281;1268:42;1280:4;1286:1;1295;1289:3;:7;1298:11;1268;:42::i;:::-;1261:49;;;;;;1828:267:18;1898:6;1924:1;1919:2;:6;:16;;;;;1934:1;1929:2;:6;1919:16;1918:40;;;;1946:1;1941:2;:6;:16;;;;;1956:1;1951:2;:6;1941:16;1914:83;;;1989:1;1975:11;1979:2;1983;1975:3;:11::i;:::-;:15;;;;;;1968:22;;;;1914:83;2002:16;2041:1;2022:6;;;2031;;;2022:15;2021:21;;-1:-1:-1;2055:35:18;2059:19;2068:1;2063:2;:6;2076:1;2071:2;:6;2059:3;:19::i;:::-;2080:9;2055:3;:35::i;:::-;2048:42;;;1828:267;;;;;:::o;1403:196::-;1459:6;1484:5;;;1504:6;;;;;;:16;;;1519:1;1514;:6;;1504:16;1503:38;;;;1530:1;1526;:5;:14;;;;;1539:1;1535;:5;1526:14;1495:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
			},
			"methodIdentifiers": {
				"publicGet(int256[])": "115efb20",
				"publicQuickselectTwo(int256[],uint256,uint256)": "0fb75cff"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"list\",\"type\":\"int256[]\"}],\"name\":\"publicGet\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"list\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k2\",\"type\":\"uint256\"}],\"name\":\"publicQuickselectTwo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/tests/MedianTestHelper.sol\":\"MedianTestHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/Median.sol\":{\"keccak256\":\"0x7d5f7e0c161b9e0476ced988b190130c37a2141f13a91c664fd043226a98fb83\",\"urls\":[\"bzz-raw://396ee17f9cc94d4a55147273eb00de166de60415c2691cca92d953b2b6b6d65e\",\"dweb:/ipfs/QmUnPtGVpwDuMivPiZiv9zzCQXf2t4jsM38VS1oM4CV3WT\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/SignedSafeMath.sol\":{\"keccak256\":\"0x83e027df9251983d079e85187b87362d4898bc3052fd72ca365c89504b7f52ff\",\"urls\":[\"bzz-raw://3d56e6e2396d11b77828a3c6e531b525eb9d8c8a18e21aacac7284f46a74d8c0\",\"dweb:/ipfs/QmXvbrYGJVmnstRFZr3axhVT5ZCiWZSyCUnMu4p8jmNUHg\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/tests/MedianTestHelper.sol\":{\"keccak256\":\"0x0f3cd2cac033f22cadabcbc9ae9c060e68ff17006bc846c79a2eb8de3a2aaede\",\"urls\":[\"bzz-raw://68aed1175c11c055675ada3c1e2aacd7311969c79bb2d131a89a7efc4707c906\",\"dweb:/ipfs/QmXoLTQesVBN5BrThhAhPyAVgZekGcNhbMHc8JpMJrGED2\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/vendor/SafeMath.sol\":{\"keccak256\":\"0x95dbe2dd5ab8682b99bc3d7d297b621d4237442da160f78d3323ee5c4a06ded3\",\"urls\":[\"bzz-raw://d753308ff4eb43fba6f9ede371a33f707c5818350770dcb078a7d78ac8251361\",\"dweb:/ipfs/Qme64eYKWoTQiP3WhqGHoMqrENNZ9L8SdBLQ2hx5SmzUda\"]}},\"version\":1}",
		"userdoc": {
			"methods": {}
		}
	},
	"sources": {
		"tests/MedianTestHelper.sol": {
			"id": 49
		},
		"Median.sol": {
			"id": 11
		},
		"vendor/SafeMath.sol": {
			"id": 62
		},
		"SignedSafeMath.sol": {
			"id": 18
		}
	},
	"sourceCodes": {
		"tests/MedianTestHelper.sol": "pragma solidity ^0.6.0;\n\nimport \"../Median.sol\";\n\ncontract MedianTestHelper {\n  function publicGet(int256[] memory list)\n    public\n    pure\n    returns (int256)\n  {\n    return Median.calculate(list);\n  }\n\n  function publicQuickselectTwo(int256[] memory list, uint256 k1, uint256 k2)\n    public\n    pure\n    returns (int256, int256)\n  {\n    return Median.quickselectTwo(list, 0, list.length - 1, k1, k2);\n  }\n}\n",
		"Median.sol": "pragma solidity ^0.6.0;\n\nimport \"./vendor/SafeMath.sol\";\nimport \"./SignedSafeMath.sol\";\n\nlibrary Median {\n  using SignedSafeMath for int256;\n\n  int256 constant INT_MAX = 2**255-1;\n\n  /**\n   * @notice Returns the sorted middle, or the average of the two middle indexed items if the\n   * array has an even number of elements.\n   * @dev The list passed as an argument isn't modified.\n   * @dev This algorithm has expected runtime O(n), but for adversarially chosen inputs\n   * the runtime is O(n^2).\n   * @param list The list of elements to compare\n   */\n  function calculate(int256[] memory list)\n    internal\n    pure\n    returns (int256)\n  {\n    return calculateInplace(copy(list));\n  }\n\n  /**\n   * @notice See documentation for function calculate.\n   * @dev The list passed as an argument may be permuted.\n   */\n  function calculateInplace(int256[] memory list)\n    internal\n    pure\n    returns (int256)\n  {\n    require(0 < list.length, \"list must not be empty\");\n    uint256 len = list.length;\n    uint256 middleIndex = len / 2;\n    if (len % 2 == 0) {\n      int256 median1;\n      int256 median2;\n      (median1, median2) = quickselectTwo(list, 0, len - 1, middleIndex - 1, middleIndex);\n      return SignedSafeMath.avg(median1, median2);\n    } else {\n      return quickselect(list, 0, len - 1, middleIndex);\n    }\n  }\n\n  /**\n   * @notice Maximum length of list that shortSelectTwo can handle\n   */\n  uint256 constant SHORTSELECTTWO_MAX_LENGTH = 7;\n\n  /**\n   * @notice Select the k1-th and k2-th element from list of length at most 7\n   * @dev Uses an optimal sorting network\n   */\n  function shortSelectTwo(\n    int256[] memory list,\n    uint256 lo,\n    uint256 hi,\n    uint256 k1,\n    uint256 k2\n  )\n    private\n    pure\n    returns (int256 k1th, int256 k2th)\n  {\n    // Uses an optimal sorting network (https://en.wikipedia.org/wiki/Sorting_network)\n    // for lists of length 7. Network layout is taken from\n    // http://jgamble.ripco.net/cgi-bin/nw.cgi?inputs=7&algorithm=hibbard&output=svg\n\n    uint256 len = hi + 1 - lo;\n    int256 x0 = list[lo + 0];\n    int256 x1 = 1 < len ? list[lo + 1] : INT_MAX;\n    int256 x2 = 2 < len ? list[lo + 2] : INT_MAX;\n    int256 x3 = 3 < len ? list[lo + 3] : INT_MAX;\n    int256 x4 = 4 < len ? list[lo + 4] : INT_MAX;\n    int256 x5 = 5 < len ? list[lo + 5] : INT_MAX;\n    int256 x6 = 6 < len ? list[lo + 6] : INT_MAX;\n\n    if (x0 > x1) {(x0, x1) = (x1, x0);}\n    if (x2 > x3) {(x2, x3) = (x3, x2);}\n    if (x4 > x5) {(x4, x5) = (x5, x4);}\n    if (x0 > x2) {(x0, x2) = (x2, x0);}\n    if (x1 > x3) {(x1, x3) = (x3, x1);}\n    if (x4 > x6) {(x4, x6) = (x6, x4);}\n    if (x1 > x2) {(x1, x2) = (x2, x1);}\n    if (x5 > x6) {(x5, x6) = (x6, x5);}\n    if (x0 > x4) {(x0, x4) = (x4, x0);}\n    if (x1 > x5) {(x1, x5) = (x5, x1);}\n    if (x2 > x6) {(x2, x6) = (x6, x2);}\n    if (x1 > x4) {(x1, x4) = (x4, x1);}\n    if (x3 > x6) {(x3, x6) = (x6, x3);}\n    if (x2 > x4) {(x2, x4) = (x4, x2);}\n    if (x3 > x5) {(x3, x5) = (x5, x3);}\n    if (x3 > x4) {(x3, x4) = (x4, x3);}\n\n    uint256 index1 = k1 - lo;\n    if (index1 == 0) {k1th = x0;}\n    else if (index1 == 1) {k1th = x1;}\n    else if (index1 == 2) {k1th = x2;}\n    else if (index1 == 3) {k1th = x3;}\n    else if (index1 == 4) {k1th = x4;}\n    else if (index1 == 5) {k1th = x5;}\n    else if (index1 == 6) {k1th = x6;}\n    else {revert(\"k1 out of bounds\");}\n\n    uint256 index2 = k2 - lo;\n    if (k1 == k2) {return (k1th, k1th);}\n    else if (index2 == 0) {return (k1th, x0);}\n    else if (index2 == 1) {return (k1th, x1);}\n    else if (index2 == 2) {return (k1th, x2);}\n    else if (index2 == 3) {return (k1th, x3);}\n    else if (index2 == 4) {return (k1th, x4);}\n    else if (index2 == 5) {return (k1th, x5);}\n    else if (index2 == 6) {return (k1th, x6);}\n    else {revert(\"k2 out of bounds\");}\n  }\n\n  /**\n   * @notice Selects the k-th ranked element from list, looking only at indices between lo and hi\n   * (inclusive). Modifies list in-place.\n   */\n  function quickselect(int256[] memory list, uint256 lo, uint256 hi, uint256 k)\n    private\n    pure\n    returns (int256 kth)\n  {\n    require(lo <= k);\n    require(k <= hi);\n    while (lo < hi) {\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\n        int256 ignore;\n        (kth, ignore) = shortSelectTwo(list, lo, hi, k, k);\n        return kth;\n      }\n      uint256 pivotIndex = partition(list, lo, hi);\n      if (k <= pivotIndex) {\n        // since pivotIndex < (original hi passed to partition),\n        // termination is guaranteed in this case\n        hi = pivotIndex;\n      } else {\n        // since (original lo passed to partition) <= pivotIndex,\n        // termination is guaranteed in this case\n        lo = pivotIndex + 1;\n      }\n    }\n    return list[lo];\n  }\n\n  /**\n   * @notice Selects the k1-th and k2-th ranked elements from list, looking only at indices between\n   * lo and hi (inclusive). Modifies list in-place.\n   */\n  function quickselectTwo(\n    int256[] memory list,\n    uint256 lo,\n    uint256 hi,\n    uint256 k1,\n    uint256 k2\n  )\n    internal // for testing\n    pure\n    returns (int256 k1th, int256 k2th)\n  {\n    require(k1 < k2);\n    require(lo <= k1 && k1 <= hi);\n    require(lo <= k2 && k2 <= hi);\n\n    while (true) {\n      if (hi - lo < SHORTSELECTTWO_MAX_LENGTH) {\n        return shortSelectTwo(list, lo, hi, k1, k2);\n      }\n      uint256 pivotIdx = partition(list, lo, hi);\n      if (k2 <= pivotIdx) {\n        hi = pivotIdx;\n      } else if (pivotIdx < k1) {\n        lo = pivotIdx + 1;\n      } else {\n        assert(k1 <= pivotIdx && pivotIdx < k2);\n        k1th = quickselect(list, lo, pivotIdx, k1);\n        k2th = quickselect(list, pivotIdx + 1, hi, k2);\n        return (k1th, k2th);\n      }\n    }\n  }\n\n  /**\n   * @notice Partitions list in-place using Hoare's partitioning scheme.\n   * Only elements of list between indices lo and hi (inclusive) will be modified.\n   * Returns an index i, such that:\n   * - lo <= i < hi\n   * - forall j in [lo, i]. list[j] <= list[i]\n   * - forall j in [i, hi]. list[i] <= list[j]\n   */\n  function partition(int256[] memory list, uint256 lo, uint256 hi)\n    private\n    pure\n    returns (uint256)\n  {\n    // We don't care about overflow of the addition, because it would require a list\n    // larger than any feasible computer's memory.\n    int256 pivot = list[(lo + hi) / 2];\n    lo -= 1; // this can underflow. that's intentional.\n    hi += 1;\n    while (true) {\n      do {\n        lo += 1;\n      } while (list[lo] < pivot);\n      do {\n        hi -= 1;\n      } while (list[hi] > pivot);\n      if (lo < hi) {\n        (list[lo], list[hi]) = (list[hi], list[lo]);\n      } else {\n        // Let orig_lo and orig_hi be the original values of lo and hi passed to partition.\n        // Then, hi < orig_hi, because hi decreases *strictly* monotonically\n        // in each loop iteration and\n        // - either list[orig_hi] > pivot, in which case the first loop iteration\n        //   will achieve hi < orig_hi;\n        // - or list[orig_hi] <= pivot, in which case at least two loop iterations are\n        //   needed:\n        //   - lo will have to stop at least once in the interval\n        //     [orig_lo, (orig_lo + orig_hi)/2]\n        //   - (orig_lo + orig_hi)/2 < orig_hi\n        return hi;\n      }\n    }\n  }\n\n  /**\n   * @notice Makes an in-memory copy of the array passed in\n   * @param list Reference to the array to be copied\n   */\n  function copy(int256[] memory list)\n    private\n    pure\n    returns(int256[] memory)\n  {\n    int256[] memory list2 = new int256[](list.length);\n    for (uint256 i = 0; i < list.length; i++) {\n      list2[i] = list[i];\n    }\n    return list2;\n  }\n}\n",
		"vendor/SafeMath.sol": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"SignedSafeMath.sol": "pragma solidity ^0.6.0;\n\nlibrary SignedSafeMath {\n  int256 constant private _INT256_MIN = -2**255;\n\n  /**\n   * @dev Multiplies two signed integers, reverts on overflow.\n   */\n  function mul(int256 a, int256 b) internal pure returns (int256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n    int256 c = a * b;\n    require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n   */\n  function div(int256 a, int256 b) internal pure returns (int256) {\n    require(b != 0, \"SignedSafeMath: division by zero\");\n    require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n    int256 c = a / b;\n\n    return c;\n  }\n\n  /**\n   * @dev Subtracts two signed integers, reverts on overflow.\n   */\n  function sub(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a - b;\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Adds two signed integers, reverts on overflow.\n   */\n  function add(int256 a, int256 b) internal pure returns (int256) {\n    int256 c = a + b;\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @notice Computes average of two signed integers, ensuring that the computation\n   * doesn't overflow.\n   * @dev If the result is not an integer, it is rounded towards zero. For example,\n   * avg(-3, -4) = -3\n   */\n  function avg(int256 _a, int256 _b)\n    internal\n    pure\n    returns (int256)\n  {\n    if ((_a < 0 && _b > 0) || (_a > 0 && _b < 0)) {\n      return add(_a, _b) / 2;\n    }\n    int256 remainder = (_a % 2 + _b % 2) / 2;\n    return add(add(_a / 2, _b / 2), remainder);\n  }\n}\n"
	},
	"sourceTreeHashHex": "0xa5f825bb2ee7696786975398645ab35c4699da7ffd8d379d722ab0f558ddfa71",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.6+commit.6c089d02.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}