/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface FlagsInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    addAccess: TypedFunctionDescription<{ encode([_user]: [string]): string }>;

    checkEnabled: TypedFunctionDescription<{ encode([]: []): string }>;

    disableAccessCheck: TypedFunctionDescription<{ encode([]: []): string }>;

    enableAccessCheck: TypedFunctionDescription<{ encode([]: []): string }>;

    getFlag: TypedFunctionDescription<{ encode([subject]: [string]): string }>;

    getFlags: TypedFunctionDescription<{
      encode([subjects]: [string[]]): string;
    }>;

    hasAccess: TypedFunctionDescription<{
      encode([_user, _calldata]: [string, Arrayish]): string;
    }>;

    lowerFlags: TypedFunctionDescription<{
      encode([subjects]: [string[]]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    raiseFlag: TypedFunctionDescription<{
      encode([subject]: [string]): string;
    }>;

    raiseFlags: TypedFunctionDescription<{
      encode([subjects]: [string[]]): string;
    }>;

    raisingAccessController: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    removeAccess: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    setRaisingAccessController: TypedFunctionDescription<{
      encode([racAddress]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;
  };

  events: {
    AddedAccess: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    CheckAccessDisabled: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    CheckAccessEnabled: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    FlagLowered: TypedEventDescription<{
      encodeTopics([subject]: [string | null]): string[];
    }>;

    FlagRaised: TypedEventDescription<{
      encodeTopics([subject]: [string | null]): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    RaisingAccessControllerUpdated: TypedEventDescription<{
      encodeTopics([previous, current]: [
        string | null,
        string | null
      ]): string[];
    }>;

    RemovedAccess: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;
  };
}

export class Flags extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Flags;
  attach(addressOrName: string): Flags;
  deployed(): Promise<Flags>;

  on(event: EventFilter | string, listener: Listener): Flags;
  once(event: EventFilter | string, listener: Listener): Flags;
  addListener(eventName: EventFilter | string, listener: Listener): Flags;
  removeAllListeners(eventName: EventFilter | string): Flags;
  removeListener(eventName: any, listener: Listener): Flags;

  interface: FlagsInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    checkEnabled(): Promise<boolean>;

    disableAccessCheck(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enableAccessCheck(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getFlag(subject: string): Promise<boolean>;

    getFlags(subjects: string[]): Promise<boolean[]>;

    hasAccess(_user: string, _calldata: Arrayish): Promise<boolean>;

    lowerFlags(
      subjects: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(): Promise<string>;

    raiseFlag(
      subject: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    raiseFlags(
      subjects: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    raisingAccessController(): Promise<string>;

    removeAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRaisingAccessController(
      racAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addAccess(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  checkEnabled(): Promise<boolean>;

  disableAccessCheck(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enableAccessCheck(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getFlag(subject: string): Promise<boolean>;

  getFlags(subjects: string[]): Promise<boolean[]>;

  hasAccess(_user: string, _calldata: Arrayish): Promise<boolean>;

  lowerFlags(
    subjects: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(): Promise<string>;

  raiseFlag(
    subject: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  raiseFlags(
    subjects: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  raisingAccessController(): Promise<string>;

  removeAccess(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRaisingAccessController(
    racAddress: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddedAccess(user: null): EventFilter;

    CheckAccessDisabled(): EventFilter;

    CheckAccessEnabled(): EventFilter;

    FlagLowered(subject: string | null): EventFilter;

    FlagRaised(subject: string | null): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;

    RaisingAccessControllerUpdated(
      previous: string | null,
      current: string | null
    ): EventFilter;

    RemovedAccess(user: null): EventFilter;
  };

  estimate: {
    acceptOwnership(): Promise<BigNumber>;

    addAccess(_user: string): Promise<BigNumber>;

    checkEnabled(): Promise<BigNumber>;

    disableAccessCheck(): Promise<BigNumber>;

    enableAccessCheck(): Promise<BigNumber>;

    getFlag(subject: string): Promise<BigNumber>;

    getFlags(subjects: string[]): Promise<BigNumber>;

    hasAccess(_user: string, _calldata: Arrayish): Promise<BigNumber>;

    lowerFlags(subjects: string[]): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    raiseFlag(subject: string): Promise<BigNumber>;

    raiseFlags(subjects: string[]): Promise<BigNumber>;

    raisingAccessController(): Promise<BigNumber>;

    removeAccess(_user: string): Promise<BigNumber>;

    setRaisingAccessController(racAddress: string): Promise<BigNumber>;

    transferOwnership(_to: string): Promise<BigNumber>;
  };
}
