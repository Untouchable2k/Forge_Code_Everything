/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface AccessControllerInterfaceInterface extends Interface {
  functions: {
    hasAccess: TypedFunctionDescription<{
      encode([user, data]: [string, Arrayish]): string;
    }>;
  };

  events: {};
}

export class AccessControllerInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): AccessControllerInterface;
  attach(addressOrName: string): AccessControllerInterface;
  deployed(): Promise<AccessControllerInterface>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): AccessControllerInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): AccessControllerInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AccessControllerInterface;
  removeAllListeners(
    eventName: EventFilter | string
  ): AccessControllerInterface;
  removeListener(eventName: any, listener: Listener): AccessControllerInterface;

  interface: AccessControllerInterfaceInterface;

  functions: {
    hasAccess(user: string, data: Arrayish): Promise<boolean>;
  };

  hasAccess(user: string, data: Arrayish): Promise<boolean>;

  filters: {};

  estimate: {
    hasAccess(user: string, data: Arrayish): Promise<BigNumber>;
  };
}
