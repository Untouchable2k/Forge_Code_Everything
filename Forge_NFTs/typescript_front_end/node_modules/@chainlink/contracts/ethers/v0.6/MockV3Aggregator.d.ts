/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MockV3AggregatorInterface extends Interface {
  functions: {
    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    description: TypedFunctionDescription<{ encode([]: []): string }>;

    getAnswer: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    getRoundData: TypedFunctionDescription<{
      encode([_roundId]: [BigNumberish]): string;
    }>;

    getTimestamp: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRound: TypedFunctionDescription<{ encode([]: []): string }>;

    latestRoundData: TypedFunctionDescription<{ encode([]: []): string }>;

    latestTimestamp: TypedFunctionDescription<{ encode([]: []): string }>;

    updateAnswer: TypedFunctionDescription<{
      encode([_answer]: [BigNumberish]): string;
    }>;

    updateRoundData: TypedFunctionDescription<{
      encode([_roundId, _answer, _timestamp, _startedAt]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    AnswerUpdated: TypedEventDescription<{
      encodeTopics([current, roundId, updatedAt]: [
        BigNumberish | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    NewRound: TypedEventDescription<{
      encodeTopics([roundId, startedBy, startedAt]: [
        BigNumberish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class MockV3Aggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockV3Aggregator;
  attach(addressOrName: string): MockV3Aggregator;
  deployed(): Promise<MockV3Aggregator>;

  on(event: EventFilter | string, listener: Listener): MockV3Aggregator;
  once(event: EventFilter | string, listener: Listener): MockV3Aggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockV3Aggregator;
  removeAllListeners(eventName: EventFilter | string): MockV3Aggregator;
  removeListener(eventName: any, listener: Listener): MockV3Aggregator;

  interface: MockV3AggregatorInterface;

  functions: {
    decimals(): Promise<number>;

    description(): Promise<string>;

    getAnswer(arg0: BigNumberish): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish
    ): Promise<{
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getTimestamp(arg0: BigNumberish): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    latestRoundData(): Promise<{
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    latestTimestamp(): Promise<BigNumber>;

    updateAnswer(
      _answer: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateRoundData(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    version(): Promise<BigNumber>;
  };

  decimals(): Promise<number>;

  description(): Promise<string>;

  getAnswer(arg0: BigNumberish): Promise<BigNumber>;

  getRoundData(
    _roundId: BigNumberish
  ): Promise<{
    roundId: BigNumber;
    answer: BigNumber;
    startedAt: BigNumber;
    updatedAt: BigNumber;
    answeredInRound: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getTimestamp(arg0: BigNumberish): Promise<BigNumber>;

  latestAnswer(): Promise<BigNumber>;

  latestRound(): Promise<BigNumber>;

  latestRoundData(): Promise<{
    roundId: BigNumber;
    answer: BigNumber;
    startedAt: BigNumber;
    updatedAt: BigNumber;
    answeredInRound: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  latestTimestamp(): Promise<BigNumber>;

  updateAnswer(
    _answer: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateRoundData(
    _roundId: BigNumberish,
    _answer: BigNumberish,
    _timestamp: BigNumberish,
    _startedAt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  version(): Promise<BigNumber>;

  filters: {
    AnswerUpdated(
      current: BigNumberish | null,
      roundId: BigNumberish | null,
      updatedAt: null
    ): EventFilter;

    NewRound(
      roundId: BigNumberish | null,
      startedBy: string | null,
      startedAt: null
    ): EventFilter;
  };

  estimate: {
    decimals(): Promise<BigNumber>;

    description(): Promise<BigNumber>;

    getAnswer(arg0: BigNumberish): Promise<BigNumber>;

    getRoundData(_roundId: BigNumberish): Promise<BigNumber>;

    getTimestamp(arg0: BigNumberish): Promise<BigNumber>;

    latestAnswer(): Promise<BigNumber>;

    latestRound(): Promise<BigNumber>;

    latestRoundData(): Promise<BigNumber>;

    latestTimestamp(): Promise<BigNumber>;

    updateAnswer(_answer: BigNumberish): Promise<BigNumber>;

    updateRoundData(
      _roundId: BigNumberish,
      _answer: BigNumberish,
      _timestamp: BigNumberish,
      _startedAt: BigNumberish
    ): Promise<BigNumber>;

    version(): Promise<BigNumber>;
  };
}
