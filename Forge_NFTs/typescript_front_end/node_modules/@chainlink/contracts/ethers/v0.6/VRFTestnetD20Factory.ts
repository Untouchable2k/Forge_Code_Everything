/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { Arrayish } from "ethers/utils";

import { TransactionOverrides } from ".";
import { VRFTestnetD20 } from "./VRFTestnetD20";

export class VRFTestnetD20Factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _vrfCoordinator: string,
    _link: string,
    _keyHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<VRFTestnetD20> {
    return super.deploy(_vrfCoordinator, _link, _keyHash, overrides) as Promise<
      VRFTestnetD20
    >;
  }
  getDeployTransaction(
    _vrfCoordinator: string,
    _link: string,
    _keyHash: Arrayish,
    overrides?: TransactionOverrides
  ): UnsignedTransaction {
    return super.getDeployTransaction(
      _vrfCoordinator,
      _link,
      _keyHash,
      overrides
    );
  }
  attach(address: string): VRFTestnetD20 {
    return super.attach(address) as VRFTestnetD20;
  }
  connect(signer: Signer): VRFTestnetD20Factory {
    return super.connect(signer) as VRFTestnetD20Factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VRFTestnetD20 {
    return new Contract(address, _abi, signerOrProvider) as VRFTestnetD20;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_link",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "d20Results",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "latestRoll",
    outputs: [
      {
        internalType: "uint256",
        name: "d20result",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256"
      }
    ],
    name: "rawFulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_seed",
        type: "uint256"
      }
    ],
    name: "requestRandomness",
    outputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userProvidedSeed",
        type: "uint256"
      }
    ],
    name: "rollDice",
    outputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107b53803806107b58339818101604052606081101561003357600080fd5b508051602082015160409092015160018054600080546001600160a01b039586166001600160a01b031993841681178416179093559390941690841681179093169092179055600455670de0b6b3a764000060055561071e806100976000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063acfff37711610050578063acfff377146100e8578063ae383a4d14610105578063dc6cfe101461010d57610072565b80634ab5fc501461007757806394985ddd146100a65780639e317f12146100cb575b600080fd5b6100946004803603602081101561008d57600080fd5b5035610136565b60408051918252519081900360200190f35b6100c9600480360360408110156100bc57600080fd5b5080359060200135610154565b005b610094600480360360208110156100e157600080fd5b50356101e8565b610094600480360360208110156100fe57600080fd5b50356101fa565b61009461030d565b6100946004803603606081101561012357600080fd5b5080359060208101359060400135610351565b6003818154811061014357fe5b600091825260209091200154905081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146101da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604482015290519081900360640190fd5b6101e482826104ee565b5050565b60026020526000908152604090205481565b60055460008054604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192939273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d602081101561029c57600080fd5b505110156102f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806106be602b913960400191505060405180910390fd5b600061030660045460055485610351565b9392505050565b60038054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061034157fe5b9060005260206000200154905090565b600080546001546040805160208082018990528183018790528251808303840181526060808401948590527f4000aea00000000000000000000000000000000000000000000000000000000090945273ffffffffffffffffffffffffffffffffffffffff94851660648401818152608485018b905260a48501958652825160c486015282519690971696634000aea09691958b9593949193909260e4909101918501908083838d5b838110156104115781810151838201526020016103f9565b50505050905090810190601f16801561043e5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561045f57600080fd5b505af1158015610473573d6000803e3d6000fd5b505050506040513d602081101561048957600080fd5b50506000848152600260205260408120546104a99086908590309061054a565b6000868152600260205260409020549091506104cc90600163ffffffff61059e16565b6000868152600260205260409020556104e58582610612565b95945050505050565b6000610512600161050684601463ffffffff61063e16565b9063ffffffff61059e16565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0155505050565b604080516020808201969096528082019490945273ffffffffffffffffffffffffffffffffffffffff9290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60008282018381101561030657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6000816106ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b8183816106b557fe5b06939250505056fe4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e7472616374207769746820666175636574a26469706673582212206e996e807736fdef4e65b1635d18a3204cc06fea23482269bcea3b102ddd251d64736f6c63430006060033";
