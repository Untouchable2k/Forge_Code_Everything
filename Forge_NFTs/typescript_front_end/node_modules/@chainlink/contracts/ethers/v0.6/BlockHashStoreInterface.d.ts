/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BlockHashStoreInterfaceInterface extends Interface {
  functions: {
    getBlockhash: TypedFunctionDescription<{
      encode([number]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class BlockHashStoreInterface extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): BlockHashStoreInterface;
  attach(addressOrName: string): BlockHashStoreInterface;
  deployed(): Promise<BlockHashStoreInterface>;

  on(event: EventFilter | string, listener: Listener): BlockHashStoreInterface;
  once(
    event: EventFilter | string,
    listener: Listener
  ): BlockHashStoreInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BlockHashStoreInterface;
  removeAllListeners(eventName: EventFilter | string): BlockHashStoreInterface;
  removeListener(eventName: any, listener: Listener): BlockHashStoreInterface;

  interface: BlockHashStoreInterfaceInterface;

  functions: {
    getBlockhash(number: BigNumberish): Promise<string>;
  };

  getBlockhash(number: BigNumberish): Promise<string>;

  filters: {};

  estimate: {
    getBlockhash(number: BigNumberish): Promise<BigNumber>;
  };
}
