/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface VRFTestHelperInterface extends Interface {
  functions: {
    PROOF_LENGTH: TypedFunctionDescription<{ encode([]: []): string }>;

    affineECAdd_: TypedFunctionDescription<{
      encode([p1, p2, invZ]: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish
      ]): string;
    }>;

    bigModExp_: TypedFunctionDescription<{
      encode([base, exponent]: [BigNumberish, BigNumberish]): string;
    }>;

    ecmulVerify_: TypedFunctionDescription<{
      encode([x, scalar, q]: [
        BigNumberish[],
        BigNumberish,
        BigNumberish[]
      ]): string;
    }>;

    fieldHash_: TypedFunctionDescription<{ encode([b]: [Arrayish]): string }>;

    hashToCurve_: TypedFunctionDescription<{
      encode([pk, x]: [BigNumberish[], BigNumberish]): string;
    }>;

    linearCombination_: TypedFunctionDescription<{
      encode([c, p1, cp1Witness, s, p2, sp2Witness, zInv]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish[],
        BigNumberish,
        BigNumberish[],
        BigNumberish[],
        BigNumberish
      ]): string;
    }>;

    projectiveECAdd_: TypedFunctionDescription<{
      encode([px, py, qx, qy]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    randomValueFromVRFProof_: TypedFunctionDescription<{
      encode([proof]: [Arrayish]): string;
    }>;

    scalarFromCurvePoints_: TypedFunctionDescription<{
      encode([hash, pk, gamma, uWitness, v]: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish[],
        string,
        BigNumberish[]
      ]): string;
    }>;

    squareRoot_: TypedFunctionDescription<{
      encode([x]: [BigNumberish]): string;
    }>;

    verifyLinearCombinationWithGenerator_: TypedFunctionDescription<{
      encode([c, p, s, lcWitness]: [
        BigNumberish,
        BigNumberish[],
        BigNumberish,
        string
      ]): string;
    }>;

    verifyVRFProof_: TypedFunctionDescription<{
      encode([
        pk,
        gamma,
        c,
        s,
        seed,
        uWitness,
        cGammaWitness,
        sHashWitness,
        zInv
      ]: [
        BigNumberish[],
        BigNumberish[],
        BigNumberish,
        BigNumberish,
        BigNumberish,
        string,
        BigNumberish[],
        BigNumberish[],
        BigNumberish
      ]): string;
    }>;

    ySquared_: TypedFunctionDescription<{
      encode([x]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class VRFTestHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VRFTestHelper;
  attach(addressOrName: string): VRFTestHelper;
  deployed(): Promise<VRFTestHelper>;

  on(event: EventFilter | string, listener: Listener): VRFTestHelper;
  once(event: EventFilter | string, listener: Listener): VRFTestHelper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): VRFTestHelper;
  removeAllListeners(eventName: EventFilter | string): VRFTestHelper;
  removeListener(eventName: any, listener: Listener): VRFTestHelper;

  interface: VRFTestHelperInterface;

  functions: {
    PROOF_LENGTH(): Promise<BigNumber>;

    affineECAdd_(
      p1: BigNumberish[],
      p2: BigNumberish[],
      invZ: BigNumberish
    ): Promise<BigNumber[]>;

    bigModExp_(base: BigNumberish, exponent: BigNumberish): Promise<BigNumber>;

    ecmulVerify_(
      x: BigNumberish[],
      scalar: BigNumberish,
      q: BigNumberish[]
    ): Promise<boolean>;

    fieldHash_(b: Arrayish): Promise<BigNumber>;

    hashToCurve_(pk: BigNumberish[], x: BigNumberish): Promise<BigNumber[]>;

    linearCombination_(
      c: BigNumberish,
      p1: BigNumberish[],
      cp1Witness: BigNumberish[],
      s: BigNumberish,
      p2: BigNumberish[],
      sp2Witness: BigNumberish[],
      zInv: BigNumberish
    ): Promise<BigNumber[]>;

    projectiveECAdd_(
      px: BigNumberish,
      py: BigNumberish,
      qx: BigNumberish,
      qy: BigNumberish
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    randomValueFromVRFProof_(proof: Arrayish): Promise<BigNumber>;

    scalarFromCurvePoints_(
      hash: BigNumberish[],
      pk: BigNumberish[],
      gamma: BigNumberish[],
      uWitness: string,
      v: BigNumberish[]
    ): Promise<BigNumber>;

    squareRoot_(x: BigNumberish): Promise<BigNumber>;

    verifyLinearCombinationWithGenerator_(
      c: BigNumberish,
      p: BigNumberish[],
      s: BigNumberish,
      lcWitness: string
    ): Promise<boolean>;

    verifyVRFProof_(
      pk: BigNumberish[],
      gamma: BigNumberish[],
      c: BigNumberish,
      s: BigNumberish,
      seed: BigNumberish,
      uWitness: string,
      cGammaWitness: BigNumberish[],
      sHashWitness: BigNumberish[],
      zInv: BigNumberish
    ): Promise<void>;

    ySquared_(x: BigNumberish): Promise<BigNumber>;
  };

  PROOF_LENGTH(): Promise<BigNumber>;

  affineECAdd_(
    p1: BigNumberish[],
    p2: BigNumberish[],
    invZ: BigNumberish
  ): Promise<BigNumber[]>;

  bigModExp_(base: BigNumberish, exponent: BigNumberish): Promise<BigNumber>;

  ecmulVerify_(
    x: BigNumberish[],
    scalar: BigNumberish,
    q: BigNumberish[]
  ): Promise<boolean>;

  fieldHash_(b: Arrayish): Promise<BigNumber>;

  hashToCurve_(pk: BigNumberish[], x: BigNumberish): Promise<BigNumber[]>;

  linearCombination_(
    c: BigNumberish,
    p1: BigNumberish[],
    cp1Witness: BigNumberish[],
    s: BigNumberish,
    p2: BigNumberish[],
    sp2Witness: BigNumberish[],
    zInv: BigNumberish
  ): Promise<BigNumber[]>;

  projectiveECAdd_(
    px: BigNumberish,
    py: BigNumberish,
    qx: BigNumberish,
    qy: BigNumberish
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  randomValueFromVRFProof_(proof: Arrayish): Promise<BigNumber>;

  scalarFromCurvePoints_(
    hash: BigNumberish[],
    pk: BigNumberish[],
    gamma: BigNumberish[],
    uWitness: string,
    v: BigNumberish[]
  ): Promise<BigNumber>;

  squareRoot_(x: BigNumberish): Promise<BigNumber>;

  verifyLinearCombinationWithGenerator_(
    c: BigNumberish,
    p: BigNumberish[],
    s: BigNumberish,
    lcWitness: string
  ): Promise<boolean>;

  verifyVRFProof_(
    pk: BigNumberish[],
    gamma: BigNumberish[],
    c: BigNumberish,
    s: BigNumberish,
    seed: BigNumberish,
    uWitness: string,
    cGammaWitness: BigNumberish[],
    sHashWitness: BigNumberish[],
    zInv: BigNumberish
  ): Promise<void>;

  ySquared_(x: BigNumberish): Promise<BigNumber>;

  filters: {};

  estimate: {
    PROOF_LENGTH(): Promise<BigNumber>;

    affineECAdd_(
      p1: BigNumberish[],
      p2: BigNumberish[],
      invZ: BigNumberish
    ): Promise<BigNumber>;

    bigModExp_(base: BigNumberish, exponent: BigNumberish): Promise<BigNumber>;

    ecmulVerify_(
      x: BigNumberish[],
      scalar: BigNumberish,
      q: BigNumberish[]
    ): Promise<BigNumber>;

    fieldHash_(b: Arrayish): Promise<BigNumber>;

    hashToCurve_(pk: BigNumberish[], x: BigNumberish): Promise<BigNumber>;

    linearCombination_(
      c: BigNumberish,
      p1: BigNumberish[],
      cp1Witness: BigNumberish[],
      s: BigNumberish,
      p2: BigNumberish[],
      sp2Witness: BigNumberish[],
      zInv: BigNumberish
    ): Promise<BigNumber>;

    projectiveECAdd_(
      px: BigNumberish,
      py: BigNumberish,
      qx: BigNumberish,
      qy: BigNumberish
    ): Promise<BigNumber>;

    randomValueFromVRFProof_(proof: Arrayish): Promise<BigNumber>;

    scalarFromCurvePoints_(
      hash: BigNumberish[],
      pk: BigNumberish[],
      gamma: BigNumberish[],
      uWitness: string,
      v: BigNumberish[]
    ): Promise<BigNumber>;

    squareRoot_(x: BigNumberish): Promise<BigNumber>;

    verifyLinearCombinationWithGenerator_(
      c: BigNumberish,
      p: BigNumberish[],
      s: BigNumberish,
      lcWitness: string
    ): Promise<BigNumber>;

    verifyVRFProof_(
      pk: BigNumberish[],
      gamma: BigNumberish[],
      c: BigNumberish,
      s: BigNumberish,
      seed: BigNumberish,
      uWitness: string,
      cGammaWitness: BigNumberish[],
      sHashWitness: BigNumberish[],
      zInv: BigNumberish
    ): Promise<BigNumber>;

    ySquared_(x: BigNumberish): Promise<BigNumber>;
  };
}
