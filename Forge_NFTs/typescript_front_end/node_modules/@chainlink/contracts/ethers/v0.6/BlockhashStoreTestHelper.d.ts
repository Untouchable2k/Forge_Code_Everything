/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BlockhashStoreTestHelperInterface extends Interface {
  functions: {
    getBlockhash: TypedFunctionDescription<{
      encode([n]: [BigNumberish]): string;
    }>;

    godmodeSetHash: TypedFunctionDescription<{
      encode([n, h]: [BigNumberish, Arrayish]): string;
    }>;

    store: TypedFunctionDescription<{ encode([n]: [BigNumberish]): string }>;

    storeEarliest: TypedFunctionDescription<{ encode([]: []): string }>;

    storeVerifyHeader: TypedFunctionDescription<{
      encode([n, header]: [BigNumberish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class BlockhashStoreTestHelper extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): BlockhashStoreTestHelper;
  attach(addressOrName: string): BlockhashStoreTestHelper;
  deployed(): Promise<BlockhashStoreTestHelper>;

  on(event: EventFilter | string, listener: Listener): BlockhashStoreTestHelper;
  once(
    event: EventFilter | string,
    listener: Listener
  ): BlockhashStoreTestHelper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BlockhashStoreTestHelper;
  removeAllListeners(eventName: EventFilter | string): BlockhashStoreTestHelper;
  removeListener(eventName: any, listener: Listener): BlockhashStoreTestHelper;

  interface: BlockhashStoreTestHelperInterface;

  functions: {
    getBlockhash(n: BigNumberish): Promise<string>;

    godmodeSetHash(
      n: BigNumberish,
      h: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    store(
      n: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    storeEarliest(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    storeVerifyHeader(
      n: BigNumberish,
      header: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getBlockhash(n: BigNumberish): Promise<string>;

  godmodeSetHash(
    n: BigNumberish,
    h: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  store(
    n: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  storeEarliest(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  storeVerifyHeader(
    n: BigNumberish,
    header: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getBlockhash(n: BigNumberish): Promise<BigNumber>;

    godmodeSetHash(n: BigNumberish, h: Arrayish): Promise<BigNumber>;

    store(n: BigNumberish): Promise<BigNumber>;

    storeEarliest(): Promise<BigNumber>;

    storeVerifyHeader(n: BigNumberish, header: Arrayish): Promise<BigNumber>;
  };
}
