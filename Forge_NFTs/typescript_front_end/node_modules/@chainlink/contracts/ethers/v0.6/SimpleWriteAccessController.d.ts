/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface SimpleWriteAccessControllerInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    addAccess: TypedFunctionDescription<{ encode([_user]: [string]): string }>;

    checkEnabled: TypedFunctionDescription<{ encode([]: []): string }>;

    disableAccessCheck: TypedFunctionDescription<{ encode([]: []): string }>;

    enableAccessCheck: TypedFunctionDescription<{ encode([]: []): string }>;

    hasAccess: TypedFunctionDescription<{
      encode([_user]: [string, Arrayish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    removeAccess: TypedFunctionDescription<{
      encode([_user]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;
  };

  events: {
    AddedAccess: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;

    CheckAccessDisabled: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    CheckAccessEnabled: TypedEventDescription<{
      encodeTopics([]: []): string[];
    }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    RemovedAccess: TypedEventDescription<{
      encodeTopics([user]: [null]): string[];
    }>;
  };
}

export class SimpleWriteAccessController extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): SimpleWriteAccessController;
  attach(addressOrName: string): SimpleWriteAccessController;
  deployed(): Promise<SimpleWriteAccessController>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): SimpleWriteAccessController;
  once(
    event: EventFilter | string,
    listener: Listener
  ): SimpleWriteAccessController;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): SimpleWriteAccessController;
  removeAllListeners(
    eventName: EventFilter | string
  ): SimpleWriteAccessController;
  removeListener(
    eventName: any,
    listener: Listener
  ): SimpleWriteAccessController;

  interface: SimpleWriteAccessControllerInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    checkEnabled(): Promise<boolean>;

    disableAccessCheck(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enableAccessCheck(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    hasAccess(_user: string, arg1: Arrayish): Promise<boolean>;

    owner(): Promise<string>;

    removeAccess(
      _user: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addAccess(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  checkEnabled(): Promise<boolean>;

  disableAccessCheck(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enableAccessCheck(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  hasAccess(_user: string, arg1: Arrayish): Promise<boolean>;

  owner(): Promise<string>;

  removeAccess(
    _user: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddedAccess(user: null): EventFilter;

    CheckAccessDisabled(): EventFilter;

    CheckAccessEnabled(): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;

    RemovedAccess(user: null): EventFilter;
  };

  estimate: {
    acceptOwnership(): Promise<BigNumber>;

    addAccess(_user: string): Promise<BigNumber>;

    checkEnabled(): Promise<BigNumber>;

    disableAccessCheck(): Promise<BigNumber>;

    enableAccessCheck(): Promise<BigNumber>;

    hasAccess(_user: string, arg1: Arrayish): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    removeAccess(_user: string): Promise<BigNumber>;

    transferOwnership(_to: string): Promise<BigNumber>;
  };
}
