/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface VRFTestnetD20Interface extends Interface {
  functions: {
    d20Results: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    latestRoll: TypedFunctionDescription<{ encode([]: []): string }>;

    nonces: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    rawFulfillRandomness: TypedFunctionDescription<{
      encode([requestId, randomness]: [Arrayish, BigNumberish]): string;
    }>;

    requestRandomness: TypedFunctionDescription<{
      encode([_keyHash, _fee, _seed]: [
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    rollDice: TypedFunctionDescription<{
      encode([userProvidedSeed]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class VRFTestnetD20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VRFTestnetD20;
  attach(addressOrName: string): VRFTestnetD20;
  deployed(): Promise<VRFTestnetD20>;

  on(event: EventFilter | string, listener: Listener): VRFTestnetD20;
  once(event: EventFilter | string, listener: Listener): VRFTestnetD20;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): VRFTestnetD20;
  removeAllListeners(eventName: EventFilter | string): VRFTestnetD20;
  removeListener(eventName: any, listener: Listener): VRFTestnetD20;

  interface: VRFTestnetD20Interface;

  functions: {
    d20Results(arg0: BigNumberish): Promise<BigNumber>;

    latestRoll(): Promise<BigNumber>;

    nonces(arg0: Arrayish): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: Arrayish,
      randomness: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestRandomness(
      _keyHash: Arrayish,
      _fee: BigNumberish,
      _seed: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    rollDice(
      userProvidedSeed: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  d20Results(arg0: BigNumberish): Promise<BigNumber>;

  latestRoll(): Promise<BigNumber>;

  nonces(arg0: Arrayish): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: Arrayish,
    randomness: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  requestRandomness(
    _keyHash: Arrayish,
    _fee: BigNumberish,
    _seed: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  rollDice(
    userProvidedSeed: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    d20Results(arg0: BigNumberish): Promise<BigNumber>;

    latestRoll(): Promise<BigNumber>;

    nonces(arg0: Arrayish): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: Arrayish,
      randomness: BigNumberish
    ): Promise<BigNumber>;

    requestRandomness(
      _keyHash: Arrayish,
      _fee: BigNumberish,
      _seed: BigNumberish
    ): Promise<BigNumber>;

    rollDice(userProvidedSeed: BigNumberish): Promise<BigNumber>;
  };
}
