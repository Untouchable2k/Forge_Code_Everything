{"ast":null,"code":"import _slicedToArray from\"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useContractCall,useEthers}from\"@usedapp/core\";import TokenFarm from\"../chain-info/DaughterContract.json\";import{utils,constants}from\"ethers\";import brownieConfig from\"../brownie-config-json.json\";import helperConfig from\"../helper-config.json\";/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */export var AllowanceUser2=function AllowanceUser2(){var _useContractCall;var _useEthers=useEthers(),account=_useEthers.account,chainId=_useEthers.chainId;var abi=TokenFarm.abi;var networkName=chainId?helperConfig[chainId]:\"ganache\";var NFTAddy=chainId?brownieConfig[\"networks\"][networkName][\"NFTBOOK\"]:constants.AddressZero;var NFTAddy2=chainId?brownieConfig[\"networks\"][networkName][\"weth_token\"]:constants.AddressZero;var NFTAddy3=chainId?brownieConfig[\"networks\"][networkName][\"fau_token\"]:constants.AddressZero;var tokenFarmInterface=new utils.Interface(abi);var _ref=(_useContractCall=useContractCall({abi:tokenFarmInterface,address:NFTAddy2,method:\"allowance\",args:[account,NFTAddy]}))!==null&&_useContractCall!==void 0?_useContractCall:[],_ref2=_slicedToArray(_ref,1),stakingBalance=_ref2[0];return stakingBalance;};","map":{"version":3,"sources":["/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser2.ts"],"names":["useContractCall","useEthers","TokenFarm","utils","constants","brownieConfig","helperConfig","AllowanceUser2","account","chainId","abi","networkName","NFTAddy","AddressZero","NFTAddy2","NFTAddy3","tokenFarmInterface","Interface","address","method","args","stakingBalance"],"mappings":"0MAAA,OAASA,eAAT,CAA0BC,SAA1B,KAA2C,eAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,qCAAtB,CACA,OAASC,KAAT,CAA2BC,SAA3B,KAA4C,QAA5C,CAGA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CAEA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAA6B,sBACzD,eAA6BN,SAAS,EAAtC,CAAQO,OAAR,YAAQA,OAAR,CAAiBC,OAAjB,YAAiBA,OAAjB,CACA,GAAQC,CAAAA,GAAR,CAAgBR,SAAhB,CAAQQ,GAAR,CACA,GAAMC,CAAAA,WAAW,CAAGF,OAAO,CAAGH,YAAY,CAACG,OAAD,CAAf,CAA2B,SAAtD,CACA,GAAMG,CAAAA,OAAO,CAAGH,OAAO,CAAGJ,aAAa,CAAC,UAAD,CAAb,CAA0BM,WAA1B,EAAuC,SAAvC,CAAH,CAAuDP,SAAS,CAACS,WAAxF,CACA,GAAMC,CAAAA,QAAQ,CAAGL,OAAO,CAAGJ,aAAa,CAAC,UAAD,CAAb,CAA0BM,WAA1B,EAAuC,YAAvC,CAAH,CAA0DP,SAAS,CAACS,WAA5F,CACA,GAAME,CAAAA,QAAQ,CAAGN,OAAO,CAAGJ,aAAa,CAAC,UAAD,CAAb,CAA0BM,WAA1B,EAAuC,WAAvC,CAAH,CAAyDP,SAAS,CAACS,WAA3F,CACA,GAAMG,CAAAA,kBAAkB,CAAG,GAAIb,CAAAA,KAAK,CAACc,SAAV,CAAoBP,GAApB,CAA3B,CAEA,2BACEV,eAAe,CAAC,CACdU,GAAG,CAAEM,kBADS,CAEdE,OAAO,CAAEJ,QAFK,CAGdK,MAAM,CAAE,WAHM,CAIdC,IAAI,CAAE,CAACZ,OAAD,CAAUI,OAAV,CAJQ,CAAD,CADjB,qDAMQ,EANR,8BAAOS,cAAP,UASA,MAAOA,CAAAA,cAAP,CACD,CAnBM","sourcesContent":["import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AllowanceUser2 = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const NFTAddy2 = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const NFTAddy3 = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy2,\n      method: \"allowance\",\n      args: [account, NFTAddy],\n    }) ?? [] \n    \n \n  return stakingBalance\n}\n"]},"metadata":{},"sourceType":"module"}