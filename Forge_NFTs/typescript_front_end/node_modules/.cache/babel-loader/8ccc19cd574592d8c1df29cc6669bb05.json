{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { SliderInput } from \"../../components\";\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, CircularProgress, Snackbar, makeStyles } from \"@material-ui/core\";\nimport { useStakeTokens } from \"../../hooks\";\nimport { utils } from \"ethers\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport \"../../App.css\"; // This is the typescript way of saying this compent needs this type\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      gap: theme.spacing(2),\n      width: \"100%\"\n    },\n    slider: {\n      width: \"100%\",\n      maxWidth: \"400px\"\n    }\n  };\n}); // token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\n\nexport var StakeForm = function StakeForm(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var tokenAddress = token.address,\n      name = token.name;\n\n  var _useEthers = useEthers(),\n      account = _useEthers.account;\n\n  var tokenBalance = useTokenBalance(tokenAddress, account);\n\n  var _useNotifications = useNotifications(),\n      notifications = _useNotifications.notifications;\n\n  var classes = useStyles();\n\n  var _useStakeTokens = useStakeTokens(tokenAddress),\n      stakeTokensSend = _useStakeTokens.send,\n      stakeTokensState = _useStakeTokens.state;\n\n  var formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n\n  var handleStakeSubmit = function handleStakeSubmit() {\n    var amountAsWei = utils.parseEther(amount.toString());\n    return stakeTokensSend(amountAsWei.toString());\n  };\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      amount = _useState2[0],\n      setAmount = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showErc20ApprovalSuccess = _useState4[0],\n      setShowErc20ApprovalSuccess = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showStakeTokensSuccess = _useState6[0],\n      setShowStakeTokensSuccess = _useState6[1];\n\n  var handleCloseSnack = function handleCloseSnack() {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false);\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false);\n  };\n\n  useEffect(function () {\n    if (notifications.filter(function (notification) {\n      return notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 transfer\";\n    }).length > 0) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true);\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false);\n    }\n\n    if (notifications.filter(function (notification) {\n      return notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake tokens\";\n    }).length > 0) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false);\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true);\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess]);\n  var isMining = stakeTokensState.status === \"Mining\";\n  var hasZeroBalance = formattedTokenBalance === 0;\n  var hasZeroAmountSelected = parseFloat(amount.toString()) === 0;\n  var imgz = new Array();\n  var imgzNum = new Array();\n  var p;\n\n  for (var x = 1; x < 31; x++) {\n    var sc = \"https://forgetoken.org/api/forge/NFT/\" + x + \".png\";\n    imgz[x] = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: sc,\n      alt: \"Awaitng Results\",\n      width: \"212em\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, _this);\n    imgzNum[x] = /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"#\", x, \" \", imgz[x]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 16\n    }, _this);\n  }\n\n  p = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\" + \", imgzNum, \" + \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: [\"  \", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://forgetoken.org/api/forge/NFT/1.png\",\n        alt: \"Awaitng Results\",\n        width: \"600px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 44\n      }, _this), p, /*#__PURE__*/_jsxDEV(SliderInput, {\n        label: \"Stake \".concat(name),\n        maxValue: formattedTokenBalance,\n        id: \"slider-input-\".concat(name),\n        className: classes.slider,\n        value: amount,\n        onChange: setAmount,\n        disabled: isMining || hasZeroBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        size: \"large\",\n        onClick: handleStakeSubmit,\n        disabled: isMining || hasZeroAmountSelected,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 23\n        }, _this) : \"Stake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showErc20ApprovalSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"ERC-20 token transfer approved successfully! Now approve the 2nd tx to initiate the staking transfer.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showStakeTokensSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens staked successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"J+/RPaOZ7l2G7LGpsO57SSOkuIA=\", false, function () {\n  return [useEthers, useTokenBalance, useNotifications, useStyles, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx"],"names":["React","useEffect","useState","SliderInput","useEthers","useTokenBalance","useNotifications","formatUnits","Button","CircularProgress","Snackbar","makeStyles","useStakeTokens","utils","Alert","useStyles","theme","container","display","flexDirection","alignItems","gap","spacing","width","slider","maxWidth","StakeForm","token","tokenAddress","address","name","account","tokenBalance","notifications","classes","stakeTokensSend","send","stakeTokensState","state","formattedTokenBalance","parseFloat","handleStakeSubmit","amountAsWei","parseEther","amount","toString","setAmount","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","filter","notification","type","transactionName","length","isMining","status","hasZeroBalance","hasZeroAmountSelected","imgz","Array","imgzNum","p","x","sc"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { SliderInput } from \"../../components\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useStakeTokens } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\n\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n  const { address: tokenAddress, name } = token\n\n  const { account } = useEthers()\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n  const { notifications } = useNotifications()\n\n  const classes = useStyles()\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n  const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  const isMining = stakeTokensState.status === \"Mining\"\n\n  const hasZeroBalance = formattedTokenBalance === 0\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var imgz = new Array();\n  var imgzNum = new Array();\nvar p \nfor(var x =1; x<31; x++){\n  var sc = \"https://forgetoken.org/api/forge/NFT/\"+x+\".png\"\n  imgz[x]= <img src={sc} alt=\"Awaitng Results\" width=\"212em\"></img>\n  imgzNum[x] = <h4>#{x} {imgz[x]}</h4>\n}\np = <p> + {imgzNum} + </p>\n\n  return (\n    <>\n      <div className={classes.container}>  <img src=\"https://forgetoken.org/api/forge/NFT/1.png\" alt=\"Awaitng Results\" width=\"600px\"></img>\n      {p}\n        <SliderInput\n          label={`Stake ${name}`}\n          maxValue={formattedTokenBalance}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance}\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleStakeSubmit}\n          disabled={isMining || hasZeroAmountSelected}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Stake\"}\n        </Button>\n      </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the staking transfer.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens staked successfully!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}