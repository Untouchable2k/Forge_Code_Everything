{"ast":null,"code":"import _defineProperty from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nexport function chainStateReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _a, _b, _c;\n\n  var current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      var newState = action.state;\n\n      if (action.blockNumber === current) {\n        // merge with existing state to prevent requests coming out of order\n        // from overwriting the data\n        var oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n\n        for (var _i = 0, _Object$entries = Object.entries(oldState); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              address = _Object$entries$_i[0],\n              entries = _Object$entries$_i[1];\n\n          newState = Object.assign(Object.assign({}, newState), _defineProperty({}, address, Object.assign(Object.assign({}, entries), newState[address])));\n        }\n      }\n\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, {\n        blockNumber: action.blockNumber,\n        state: newState\n      }));\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), _defineProperty({}, action.chainId, Object.assign(Object.assign({}, state[action.chainId]), {\n        blockNumber: action.blockNumber,\n        error: action.error\n      })));\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../src/providers/chainState/chainStateReducer.ts"],"names":[],"mappings":";;AA4BA,OAAM,SAAU,iBAAV,GAA6D;AAAA,MAAjC,KAAiC,uEAAlB,EAAkB;AAAA,MAAd,MAAc;;;;AACjE,MAAM,OAAO,GAAA,CAAA,EAAA,GAAG,KAAK,CAAC,MAAM,CAAC,OAAR,CAAR,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,WAAvC;;AACA,MAAI,CAAC,OAAD,IAAY,MAAM,CAAC,WAAP,IAAsB,OAAtC,EAA+C;AAC7C,QAAI,MAAM,CAAC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAI,QAAQ,GAAG,MAAM,CAAC,KAAtB;;AACA,UAAI,MAAM,CAAC,WAAP,KAAuB,OAA3B,EAAoC;AAClC;AACA;AACA,YAAM,QAAQ,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,KAAK,CAAC,MAAM,CAAC,OAAR,CAAR,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,KAA1B,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,EAA/B,GAAmC,EAAjD;;AACA,2CAAiC,MAAM,CAAC,OAAP,CAAe,QAAf,CAAjC,qCAA2D;AAAtD;AAAA,cAAO,OAAP;AAAA,cAAgB,OAAhB;;AACH,UAAA,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACH,QADG,CAAA,sBAEL,OAFK,EAEG,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,OADI,CAAA,EAEJ,QAAQ,CAAC,OAAD,CAFJ,CAFH,EAAR;AAOD;AACF;;AACD,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,sBAEG,MAAM,CAAC,OAFV,EAEoB;AAAE,QAAA,WAAW,EAAE,MAAM,CAAC,WAAtB;AAAmC,QAAA,KAAK,EAAE;AAA1C,OAFpB,EAAA;AAID,KApBD,MAoBO,IAAI,MAAM,CAAC,IAAP,KAAgB,aAApB,EAAmC;AACxC,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,sBAEG,MAAM,CAAC,OAFV,EAEkB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,KAAK,CAAC,MAAM,CAAC,OAAR,CAAZ,CAAA,EAA4B;AAAE,QAAA,WAAW,EAAE,MAAM,CAAC,WAAtB;AAAmC,QAAA,KAAK,EAAE,MAAM,CAAC;AAAjD,OAA5B,CAFlB,EAAA;AAID;AACF;;AACD,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["export function chainStateReducer(state = {}, action) {\n    var _a, _b, _c;\n    const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n    if (!current || action.blockNumber >= current) {\n        if (action.type === 'FETCH_SUCCESS') {\n            let newState = action.state;\n            if (action.blockNumber === current) {\n                // merge with existing state to prevent requests coming out of order\n                // from overwriting the data\n                const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n                for (const [address, entries] of Object.entries(oldState)) {\n                    newState = Object.assign(Object.assign({}, newState), { [address]: Object.assign(Object.assign({}, entries), newState[address]) });\n                }\n            }\n            return Object.assign(Object.assign({}, state), { [action.chainId]: { blockNumber: action.blockNumber, state: newState } });\n        }\n        else if (action.type === 'FETCH_ERROR') {\n            return Object.assign(Object.assign({}, state), { [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), { blockNumber: action.blockNumber, error: action.error }) });\n        }\n    }\n    return state;\n}\n//# sourceMappingURL=chainStateReducer.js.map"]},"metadata":{},"sourceType":"module"}