{"ast":null,"code":"import _slicedToArray from\"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{useContractFunction,useEthers}from\"@usedapp/core\";import DC from\"../chain-info/DaughterContract.json\";import Erc20 from\"../chain-info/ERC20.json\";import{utils,constants}from\"ethers\";import{Contract}from\"@ethersproject/contracts\";import brownieConfig from\"../brownie-config-json.json\";import helperConfig from\"../helper-config.json\";/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */export var useStakeTokens=function useStakeTokens(tokenAddress){var _useEthers=useEthers(),chainId=_useEthers.chainId,account=_useEthers.account;var abi=DC.abi;var networkName=chainId?helperConfig[chainId]:\"ganache\";var tokenFarmContractAddress=chainId?brownieConfig[\"networks\"][networkName][\"DappToken\"]:constants.AddressZero;var NFTBOOK=chainId?brownieConfig[\"networks\"][networkName][\"NFTBOOK\"]:constants.AddressZero;var tokenFarmInterface=new utils.Interface(abi);var tokenFarmContract=new Contract(NFTBOOK,tokenFarmInterface);var _useContractFunction=useContractFunction(tokenFarmContract,\"startBuyoutAuction\",{transactionName:\"Stake tokens\"}),stakeTokensSend=_useContractFunction.send,stakeTokensState=_useContractFunction.state;var erc20Interface=new utils.Interface(Erc20.abi);var tokenContract=new Contract(NFTBOOK,erc20Interface);var _useContractFunction2=useContractFunction(tokenContract,\"approve\",{transactionName:\"Approve ERC20 transfer\"}),approveErc20Send=_useContractFunction2.send,approveErc20State=_useContractFunction2.state;var _useState=useState(\"0\"),_useState2=_slicedToArray(_useState,2),amountToStake=_useState2[0],setAmountToStake=_useState2[1];var options={value:amountToStake};useEffect(function(){if(approveErc20State.status===\"Success\"){stakeTokensSend(account,options);}// the dependency arry\n// the code inside the useEffect anytime\n// anything in this list changes\n// if you want something to run when the component first runs\n// you just have a blank list\n},[approveErc20State,amountToStake,tokenAddress]);// eslint-disable-line react-hooks/exhaustive-deps\nvar send=function send(amount){setAmountToStake(amount);return approveErc20Send(tokenFarmContractAddress,amount);};var _useState3=useState(approveErc20State),_useState4=_slicedToArray(_useState3,2),state=_useState4[0],setState=_useState4[1];useEffect(function(){if(approveErc20State.status===\"Success\"){setState(stakeTokensState);}else{setState(approveErc20State);}},[approveErc20State,stakeTokensState]);return{send:send,state:state};};","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens.ts"],"names":["useEffect","useState","useContractFunction","useEthers","DC","Erc20","utils","constants","Contract","brownieConfig","helperConfig","useStakeTokens","tokenAddress","chainId","account","abi","networkName","tokenFarmContractAddress","AddressZero","NFTBOOK","tokenFarmInterface","Interface","tokenFarmContract","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","tokenContract","approveErc20Send","approveErc20State","amountToStake","setAmountToStake","options","value","status","amount","setState"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport DC from \"../chain-info/DaughterContract.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = DC\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    NFTBOOK,\n    tokenFarmInterface\n  )\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"startBuyoutAuction\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(NFTBOOK, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  var options = { value: amountToStake };\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, options)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(tokenFarmContractAddress, amount)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n"]},"metadata":{},"sourceType":"module"}