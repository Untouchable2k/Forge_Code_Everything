{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/TokenFarm.json\";\nimport Erc20 from \"../chain-info/ERC20.json\";\nimport { utils, constants } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport brownieConfig from \"../brownie-config-json.json\";\nimport helperConfig from \"../helper-config.json\";\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\n\nexport var useStakeTokens = function useStakeTokens(tokenAddress) {\n  _s();\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId;\n\n  var abi = TokenFarm.abi;\n  var networkName = chainId ? helperConfig[chainId] : \"ganache\";\n  var dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero;\n  var tokenFarmInterface = new utils.Interface(abi);\n  var tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface);\n\n  var _useContractFunction = useContractFunction(tokenFarmContract, \"stakeTokens\", {\n    transactionName: \"Stake tokens\"\n  }),\n      stakeTokensSend = _useContractFunction.send,\n      stakeTokensState = _useContractFunction.state;\n\n  var erc20Interface = new utils.Interface(Erc20.abi);\n  var tokenContract = new Contract(tokenAddress, erc20Interface);\n\n  var _useContractFunction2 = useContractFunction(tokenContract, \"approve\", {\n    transactionName: \"Approve ERC20 transfer\"\n  }),\n      approveErc20Send = _useContractFunction2.send,\n      approveErc20State = _useContractFunction2.state;\n\n  var _useState = useState(\"0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      amountToStake = _useState2[0],\n      setAmountToStake = _useState2[1];\n\n  useEffect(function () {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake, tokenAddress);\n    } // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n\n  }, [approveErc20State, amountToStake, tokenAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var send = function send(amount) {\n    setAmountToStake(amount);\n    return approveErc20Send(tokenFarmContractAddress, amount);\n  };\n\n  var _useState3 = useState(approveErc20State),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  useEffect(function () {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState);\n    } else {\n      setState(approveErc20State);\n    }\n  }, [approveErc20State, stakeTokensState]);\n  return {\n    send: send,\n    state: state\n  };\n};\n\n_s(useStakeTokens, \"r7DPBSMfParFVc7tpQsV4plrUL0=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens.ts"],"names":["useEffect","useState","useContractFunction","useEthers","TokenFarm","Erc20","utils","constants","Contract","brownieConfig","helperConfig","useStakeTokens","tokenAddress","chainId","abi","networkName","dappTokenAddress","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","tokenFarmContractAddress","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","tokenContract","approveErc20Send","approveErc20State","amountToStake","setAmountToStake","status","amount","setState"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    tokenFarmContractAddress,\n    tokenFarmInterface\n  )\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"stakeTokens\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(tokenAddress, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake, tokenAddress)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(tokenFarmContractAddress, amount)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n"]},"metadata":{},"sourceType":"module"}