{"ast":null,"code":"import _slicedToArray from\"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useEthers}from\"@usedapp/core\";import{StakeForm}from\"./StakeForm\";import{Tab,makeStyles,Box}from\"@material-ui/core\";import{TabContext,TabList,TabPanel}from\"@material-ui/lab\";import{ConnectionRequiredMsg}from\"../../components\";import{WalletBalance}from\"./WalletBalance\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=makeStyles(function(theme){return{tabContent:{display:\"flex\",flexDirection:\"column\",alignItems:\"center\",gap:theme.spacing(4)},box:{backgroundColor:\"white\",borderRadius:\"25px\"},header:{color:\"white\"}};});export var YourWallet=function YourWallet(_ref){var supportedTokens=_ref.supportedTokens;// wtf is this? \n// Reacts way of holding state between components \n// Could do it without <number> \n// saving state between renders of components \n// You'd have to pass it through as a prop to have another component use it \nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),selectedTokenIndex=_useState2[0],setSelectedTokenIndex=_useState2[1];var handleChange=function handleChange(event,newValue){setSelectedTokenIndex(parseInt(newValue));};var _useEthers=useEthers(),account=_useEthers.account;var isConnected=account!==undefined;var classes=useStyles();return/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(\"h1\",{className:classes.header,children:\"Your Wallet\"}),/*#__PURE__*/_jsx(Box,{className:classes.box,children:/*#__PURE__*/_jsx(\"div\",{children:isConnected?/*#__PURE__*/_jsxs(TabContext,{value:selectedTokenIndex.toString(),children:[/*#__PURE__*/_jsx(TabList,{onChange:handleChange,\"aria-label\":\"stake form tabs\",children:supportedTokens.map(function(token,index){return/*#__PURE__*/_jsx(Tab,{label:token.name,value:index.toString()},index);})}),supportedTokens.map(function(token,index){return/*#__PURE__*/_jsx(TabPanel,{value:index.toString(),children:/*#__PURE__*/_jsxs(\"div\",{className:classes.tabContent,children:[/*#__PURE__*/_jsx(WalletBalance,{token:supportedTokens[selectedTokenIndex]}),/*#__PURE__*/_jsx(StakeForm,{token:supportedTokens[selectedTokenIndex]})]})},index);})]}):/*#__PURE__*/_jsx(ConnectionRequiredMsg,{})})})]});};","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/YourWallet.tsx"],"names":["React","useState","useEthers","StakeForm","Tab","makeStyles","Box","TabContext","TabList","TabPanel","ConnectionRequiredMsg","WalletBalance","useStyles","theme","tabContent","display","flexDirection","alignItems","gap","spacing","box","backgroundColor","borderRadius","header","color","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","handleChange","event","newValue","parseInt","account","isConnected","undefined","classes","toString","map","token","index","name"],"mappings":"uMAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,SAAT,KAA0B,eAA1B,CACA,OAASC,SAAT,KAA0B,aAA1B,CACA,OAASC,GAAT,CAAcC,UAAd,CAA0BC,GAA1B,KAAqC,mBAArC,CACA,OAASC,UAAT,CAAqBC,OAArB,CAA8BC,QAA9B,KAA8C,kBAA9C,CACA,OACEC,qBADF,KAEO,kBAFP,CAIA,OAASC,aAAT,KAA8B,iBAA9B,C,wFAMA,GAAMC,CAAAA,SAAS,CAAGP,UAAU,CAAC,SAACQ,KAAD,QAAY,CACvCC,UAAU,CAAE,CACVC,OAAO,CAAE,MADC,CAEVC,aAAa,CAAE,QAFL,CAGVC,UAAU,CAAE,QAHF,CAIVC,GAAG,CAAEL,KAAK,CAACM,OAAN,CAAc,CAAd,CAJK,CAD2B,CAOvCC,GAAG,CAAE,CACHC,eAAe,CAAE,OADd,CAEHC,YAAY,CAAE,MAFX,CAPkC,CAWvCC,MAAM,CAAE,CACNC,KAAK,CAAE,OADD,CAX+B,CAAZ,EAAD,CAA5B,CAgBA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAA0C,IAAvCC,CAAAA,eAAuC,MAAvCA,eAAuC,CAClE;AACA;AACA;AACA;AACA;AACA,cAAoDzB,QAAQ,CAAS,CAAT,CAA5D,wCAAO0B,kBAAP,eAA2BC,qBAA3B,eAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAA+BC,QAA/B,CAAoD,CACvEH,qBAAqB,CAACI,QAAQ,CAACD,QAAD,CAAT,CAArB,CACD,CAFD,CAIA,eAAoB7B,SAAS,EAA7B,CAAQ+B,OAAR,YAAQA,OAAR,CAEA,GAAMC,CAAAA,WAAW,CAAGD,OAAO,GAAKE,SAAhC,CAEA,GAAMC,CAAAA,OAAO,CAAGxB,SAAS,EAAzB,CAEA,mBACE,MAAC,GAAD,yBACE,WAAI,SAAS,CAAEwB,OAAO,CAACb,MAAvB,yBADF,cAEE,KAAC,GAAD,EAAK,SAAS,CAAEa,OAAO,CAAChB,GAAxB,uBACE,qBACGc,WAAW,cACV,MAAC,UAAD,EAAY,KAAK,CAAEP,kBAAkB,CAACU,QAAnB,EAAnB,wBACE,KAAC,OAAD,EAAS,QAAQ,CAAER,YAAnB,CAAiC,aAAW,iBAA5C,UACGH,eAAe,CAACY,GAAhB,CAAoB,SAACC,KAAD,CAAQC,KAAR,CAAkB,CACrC,mBACE,KAAC,GAAD,EACE,KAAK,CAAED,KAAK,CAACE,IADf,CAEE,KAAK,CAAED,KAAK,CAACH,QAAN,EAFT,EAGOG,KAHP,CADF,CAOD,CARA,CADH,EADF,CAYGd,eAAe,CAACY,GAAhB,CAAoB,SAACC,KAAD,CAAQC,KAAR,CAAkB,CACrC,mBACE,KAAC,QAAD,EAAU,KAAK,CAAEA,KAAK,CAACH,QAAN,EAAjB,uBACE,aAAK,SAAS,CAAED,OAAO,CAACtB,UAAxB,wBACE,KAAC,aAAD,EACE,KAAK,CAAEY,eAAe,CAACC,kBAAD,CADxB,EADF,cAME,KAAC,SAAD,EAAW,KAAK,CAAED,eAAe,CAACC,kBAAD,CAAjC,EANF,GADF,EAAwCa,KAAxC,CADF,CAYD,CAbA,CAZH,GADU,cA6BV,KAAC,qBAAD,IA9BJ,EADF,EAFF,GADF,CAwCD,CA1DM","sourcesContent":["import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { StakeForm } from \"./StakeForm\"\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg\n} from \"../../components\"\nimport { Token } from \"../Main\"\nimport { WalletBalance } from \"./WalletBalance\"\n\ninterface YourWalletProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n  // wtf is this? \n  // Reacts way of holding state between components \n  // Could do it without <number> \n  // saving state between renders of components \n  // You'd have to pass it through as a prop to have another component use it \n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  const classes = useStyles()\n\n  return (\n    <Box>\n      <h1 className={classes.header}>Your Wallet</h1>\n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      <WalletBalance\n                        token={supportedTokens[selectedTokenIndex]}\n                      />\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}