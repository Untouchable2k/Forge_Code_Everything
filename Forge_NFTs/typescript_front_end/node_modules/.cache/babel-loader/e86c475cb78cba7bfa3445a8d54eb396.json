{"ast":null,"code":"var _jsxFileName = \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/WalletBalance.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEtherBalance, useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport var WalletBalance = function WalletBalance(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var image = token.image,\n      address = token.address,\n      name = token.name;\n\n  var _useEthers = useEthers(),\n      account = _useEthers.account;\n\n  var tokenBalance = useTokenBalance(address, account);\n  var formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  var tokenBalance2 = useEtherBalance(account);\n\n  if (address == \"0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\") {\n    formattedTokenBalance = tokenBalance2 ? parseFloat(formatUnits(tokenBalance2, 18)) : 0;\n  } else {\n    formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  }\n\n  if (address == \"0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\") {\n    return /*#__PURE__*/_jsxDEV(BalanceMsg, {\n      label: \"Your Forge balance\",\n      amount: formattedTokenBalance,\n      tokenImgSrc: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, _this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_s(WalletBalance, \"fp1kY5Tm5yVnGdGrJ4jbhS4NfXo=\", false, function () {\n  return [useEthers, useTokenBalance, useEtherBalance];\n});\n\n_c = WalletBalance;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletBalance\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/WalletBalance.tsx"],"names":["React","useEtherBalance","useEthers","useTokenBalance","formatUnits","BalanceMsg","WalletBalance","token","image","address","name","account","tokenBalance","formattedTokenBalance","parseFloat","tokenBalance2"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,eAArC,QAA4D,eAA5D;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAMA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAmC;AAAA;;AAAA,MAAhCC,KAAgC,QAAhCA,KAAgC;AAC9D,MAAQC,KAAR,GAAiCD,KAAjC,CAAQC,KAAR;AAAA,MAAeC,OAAf,GAAiCF,KAAjC,CAAeE,OAAf;AAAA,MAAwBC,IAAxB,GAAiCH,KAAjC,CAAwBG,IAAxB;;AAEA,mBAAoBR,SAAS,EAA7B;AAAA,MAAQS,OAAR,cAAQA,OAAR;;AACA,MAAMC,YAAY,GAAGT,eAAe,CAACM,OAAD,EAAUE,OAAV,CAApC;AAEA,MAAIE,qBAA6B,GAAGD,YAAY,GAC9CE,UAAU,CAACV,WAAW,CAACQ,YAAD,EAAe,EAAf,CAAZ,CADoC,GAE9C,CAFF;AAID,MAAMG,aAAa,GAAGd,eAAe,CAACU,OAAD,CAArC;;AACC,MAAGF,OAAO,IAAG,4CAAb,EAA0D;AAEzDI,IAAAA,qBAAqB,GAAGE,aAAa,GAClCD,UAAU,CAACV,WAAW,CAACW,aAAD,EAAgB,EAAhB,CAAZ,CADwB,GAElC,CAFH;AAGA,GALD,MAKK;AAEHF,IAAAA,qBAAqB,GAAGD,YAAY,GAClCE,UAAU,CAACV,WAAW,CAACQ,YAAD,EAAe,EAAf,CAAZ,CADwB,GAElC,CAFF;AAGD;;AACD,MAAGH,OAAO,IAAI,4CAAd,EACA;AACA,wBACE,QAAC,UAAD;AACE,MAAA,KAAK,sBADP;AAEE,MAAA,MAAM,EAAEI,qBAFV;AAGE,MAAA,WAAW,EAAEL;AAHf;AAAA;AAAA;AAAA;AAAA,aADF;AAOC,GATD,MASK;AAEH,wBAAQ,qCAAR;AAID;AACF,CAtCM;;GAAMF,a;UAGSJ,S,EACCC,e,EAMAF,e;;;KAVVK,a","sourcesContent":["import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEtherBalance, useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n  const { image, address, name } = token;\n\n  const { account } = useEthers();\n  const tokenBalance = useTokenBalance(address, account);\n\n  var formattedTokenBalance: number = tokenBalance\n  ? parseFloat(formatUnits(tokenBalance, 18))\n  : 0;\n\n const tokenBalance2 = useEtherBalance(account);\n  if(address ==\"0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\"){\n\n   formattedTokenBalance = tokenBalance2\n    ? parseFloat(formatUnits(tokenBalance2, 18))\n    : 0;\n  }else{\n\n    formattedTokenBalance = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n  }\n  if(address == \"0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\")\n  {\n  return (\n    <BalanceMsg\n      label={`Your Forge balance`}\n      amount={formattedTokenBalance}\n      tokenImgSrc={image}\n    />\n  );\n  }else{\n\n    return (<></>\n    );\n\n\n  }\n};\n"]},"metadata":{},"sourceType":"module"}