{"ast":null,"code":"import _regeneratorRuntime from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { isLocalChain } from '../helpers';\nimport { useEthers } from '../hooks';\nimport { useBlockNumber } from './blockNumber';\nimport { useConfig, useUpdateConfig } from './config';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\n\nexport function LocalMulticallProvider(_ref) {\n  var children = _ref.children;\n  var updateConfig = useUpdateConfig();\n\n  var _useConfig = useConfig(),\n      multicallAddresses = _useConfig.multicallAddresses;\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var _useState = useState(LocalMulticallState.Unknown),\n      _useState2 = _slicedToArray(_useState, 2),\n      localMulticallState = _useState2[0],\n      setLocalMulticallState = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      multicallBlockNumber = _useState4[0],\n      setMulticallBlockNumber = _useState4[1];\n\n  var blockNumber = useBlockNumber();\n  useEffect(function () {\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!isLocalChain(chainId)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      var signer = library.getSigner();\n\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error);\n        return;\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying);\n\n      var deployMulticall = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _yield$deployContract, contractAddress, _blockNumber;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return deployContract(multicallABI, signer);\n\n                case 3:\n                  _yield$deployContract = _context.sent;\n                  contractAddress = _yield$deployContract.contractAddress;\n                  _blockNumber = _yield$deployContract.blockNumber;\n                  updateConfig({\n                    multicallAddresses: _defineProperty({}, chainId, contractAddress)\n                  });\n                  setMulticallBlockNumber(_blockNumber);\n                  setLocalMulticallState(LocalMulticallState.Deployed);\n                  _context.next = 14;\n                  break;\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t0 = _context[\"catch\"](0);\n                  setLocalMulticallState(LocalMulticallState.Error);\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 11]]);\n        }));\n\n        return function deployMulticall() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      deployMulticall();\n    }\n  }, [library, chainId]);\n  var awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    }, void 0);\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    }, void 0);\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    }, void 0);\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/LocalMulticallProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { isLocalChain } from '../helpers';\nimport { useEthers } from '../hooks';\nimport { useBlockNumber } from './blockNumber';\nimport { useConfig, useUpdateConfig } from './config';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n(function (LocalMulticallState) {\n    LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n    LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n    LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n    LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n    LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\nexport function LocalMulticallProvider({ children }) {\n    const updateConfig = useUpdateConfig();\n    const { multicallAddresses } = useConfig();\n    const { library, chainId } = useEthers();\n    const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n    const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n    const blockNumber = useBlockNumber();\n    useEffect(() => {\n        if (!library || !chainId) {\n            setLocalMulticallState(LocalMulticallState.Unknown);\n        }\n        else if (!isLocalChain(chainId)) {\n            setLocalMulticallState(LocalMulticallState.NonLocal);\n        }\n        else if (multicallAddresses && multicallAddresses[chainId]) {\n            setLocalMulticallState(LocalMulticallState.Deployed);\n        }\n        else if (localMulticallState !== LocalMulticallState.Deploying) {\n            const signer = library.getSigner();\n            if (!signer) {\n                setLocalMulticallState(LocalMulticallState.Error);\n                return;\n            }\n            setLocalMulticallState(LocalMulticallState.Deploying);\n            const deployMulticall = async () => {\n                try {\n                    const { contractAddress, blockNumber } = await deployContract(multicallABI, signer);\n                    updateConfig({ multicallAddresses: { [chainId]: contractAddress } });\n                    setMulticallBlockNumber(blockNumber);\n                    setLocalMulticallState(LocalMulticallState.Deployed);\n                }\n                catch (_a) {\n                    setLocalMulticallState(LocalMulticallState.Error);\n                }\n            };\n            deployMulticall();\n        }\n    }, [library, chainId]);\n    const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n    if (localMulticallState === LocalMulticallState.Deploying ||\n        (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)) {\n        return _jsx(\"div\", { children: \"Deploying multicall...\" }, void 0);\n    }\n    else if (localMulticallState === LocalMulticallState.Error) {\n        return _jsx(\"div\", { children: \"Error deploying multicall contract\" }, void 0);\n    }\n    else {\n        return _jsx(_Fragment, { children: children }, void 0);\n    }\n}\n//# sourceMappingURL=LocalMulticallProvider.js.map"]},"metadata":{},"sourceType":"module"}