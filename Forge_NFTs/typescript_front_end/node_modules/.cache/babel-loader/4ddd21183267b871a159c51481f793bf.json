{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/DaughterContract.json\";\nimport { utils, constants } from \"ethers\";\nimport brownieConfig from \"../brownie-config-json.json\";\nimport helperConfig from \"../helper-config.json\";\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\n\nexport var CurrentRedeem2 = function CurrentRedeem2(amt) {\n  _s();\n\n  var _useContractCall;\n\n  var _useEthers = useEthers(),\n      account = _useEthers.account,\n      chainId = _useEthers.chainId;\n\n  console.log(\"FIRST12\");\n  var abi = TokenFarm.abi;\n  var networkName = chainId ? helperConfig[chainId] : \"ganache\";\n  var NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero;\n  var tokenFarmInterface = new utils.Interface(abi);\n  console.log(\"Esti\", amt);\n\n  var _ref = (_useContractCall = useContractCall({\n    abi: tokenFarmInterface,\n    address: NFTAddy,\n    method: \"estimator\",\n    args: [amt]\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [],\n      _ref2 = _slicedToArray(_ref, 1),\n      stakingBalance = _ref2[0];\n\n  return;\n};\n\n_s(CurrentRedeem2, \"oi+efPOmCds4qh0t3MZb9ot7PVs=\", false, function () {\n  return [useEthers, useContractCall];\n});\n\n_c = CurrentRedeem2;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentRedeem2\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentRedeem.ts"],"names":["useContractCall","useEthers","TokenFarm","utils","constants","brownieConfig","helperConfig","CurrentRedeem2","amt","account","chainId","console","log","abi","networkName","NFTAddy","AddressZero","tokenFarmInterface","Interface","address","method","args","stakingBalance"],"mappings":";;;;AAAA,SAASA,eAAT,EAA0BC,SAA1B,QAA2C,eAA3C;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,SAASC,KAAT,EAA2BC,SAA3B,QAA4C,QAA5C;AAGA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAwC;AAAA;;AAAA;;AACpE,mBAA6BP,SAAS,EAAtC;AAAA,MAAQQ,OAAR,cAAQA,OAAR;AAAA,MAAiBC,OAAjB,cAAiBA,OAAjB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,MAAQC,GAAR,GAAgBX,SAAhB,CAAQW,GAAR;AACA,MAAMC,WAAW,GAAGJ,OAAO,GAAGJ,YAAY,CAACI,OAAD,CAAf,GAA2B,SAAtD;AACA,MAAMK,OAAO,GAAGL,OAAO,GAAGL,aAAa,CAAC,UAAD,CAAb,CAA0BS,WAA1B,EAAuC,SAAvC,CAAH,GAAuDV,SAAS,CAACY,WAAxF;AAEA,MAAMC,kBAAkB,GAAG,IAAId,KAAK,CAACe,SAAV,CAAoBL,GAApB,CAA3B;AACDF,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,GAApB;;AACC,iCACER,eAAe,CAAC;AACda,IAAAA,GAAG,EAAEI,kBADS;AAEdE,IAAAA,OAAO,EAAEJ,OAFK;AAGdK,IAAAA,MAAM,EAAE,WAHM;AAIdC,IAAAA,IAAI,EAAE,CAACb,GAAD;AAJQ,GAAD,CADjB,+DAMQ,EANR;AAAA;AAAA,MAAOc,cAAP;;AAQA;AACD,CAlBM;;GAAMf,c;UACkBN,S,EAS3BD,e;;;KAVSO,c","sourcesContent":["import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const CurrentRedeem2 = (amt: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  console.log(\"FIRST12\")\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n console.log(\"Esti\", amt)\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"estimator\",\n      args: [amt],\n    }) ?? []\n\n  return \n}\n"]},"metadata":{},"sourceType":"module"}