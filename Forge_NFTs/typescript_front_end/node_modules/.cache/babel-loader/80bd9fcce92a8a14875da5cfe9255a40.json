{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, CircularProgress, Snackbar, makeStyles } from \"@material-ui/core\";\nimport { useUnstakeTokens, useStakingBalance } from \"../../hooks\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { SliderInput, BalanceMsg } from \"../../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    contentContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      gap: theme.spacing(2)\n    }\n  };\n});\nexport var Unstake = function Unstake(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var image = token.image,\n      tokenAddress = token.address,\n      name = token.name;\n\n  var _useNotifications = useNotifications(),\n      notifications = _useNotifications.notifications;\n\n  var balance = useStakingBalance(tokenAddress);\n  var formattedBalance = balance ? parseFloat(formatUnits(balance, 18)) : 0;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      amount = _useState2[0],\n      setAmount = _useState2[1];\n\n  var _useUnstakeTokens = useUnstakeTokens(),\n      unstakeTokensSend = _useUnstakeTokens.send,\n      unstakeTokensState = _useUnstakeTokens.state;\n\n  var handleUnstakeSubmit = function handleUnstakeSubmit() {\n    return unstakeTokensSend(tokenAddress);\n  };\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showUnstakeSuccess = _useState4[0],\n      setShowUnstakeSuccess = _useState4[1];\n\n  var handleCloseSnack = function handleCloseSnack() {\n    showUnstakeSuccess && setShowUnstakeSuccess(false);\n  };\n\n  useEffect(function () {\n    if (notifications.filter(function (notification) {\n      return notification.type === \"transactionSucceed\" && notification.transactionName === \"Unstake tokens\";\n    }).length > 0) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true);\n    }\n  }, [notifications, showUnstakeSuccess]);\n  var isMining = unstakeTokensState.status === \"Mining\";\n  var classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.contentContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(BalanceMsg, {\n          label: \"Your staked \".concat(name, \" balance\"),\n          amount: formattedBalance,\n          tokenImgSrc: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(SliderInput, {\n          label: \"Stake \".concat(name),\n          maxValue: formattedBalance,\n          id: \"slider-input-\".concat(name),\n          className: \"6\",\n          value: amount,\n          onChange: setAmount,\n          disabled: isMining\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          size: \"large\",\n          onClick: handleUnstakeSubmit,\n          disabled: isMining,\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 23\n          }, _this) : \"Unstake all \".concat(name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showUnstakeSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens unstaked successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Unstake, \"P279vlP4AabePZ/w0sHkdIlDyZc=\", false, function () {\n  return [useNotifications, useStakingBalance, useUnstakeTokens, useStyles];\n});\n\n_c = Unstake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Unstake\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx"],"names":["React","useState","useEffect","Button","CircularProgress","Snackbar","makeStyles","useUnstakeTokens","useStakingBalance","Alert","useNotifications","formatUnits","SliderInput","BalanceMsg","useStyles","theme","contentContainer","display","flexDirection","alignItems","justifyContent","gap","spacing","Unstake","token","image","tokenAddress","address","name","notifications","balance","formattedBalance","parseFloat","amount","setAmount","unstakeTokensSend","send","unstakeTokensState","state","handleUnstakeSubmit","showUnstakeSuccess","setShowUnstakeSuccess","handleCloseSnack","filter","notification","type","transactionName","length","isMining","status","classes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, useStakingBalance } from \"../../hooks\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {SliderInput, SliderInput2, BalanceMsg } from \"../../components\"\n\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n  const { image, address: tokenAddress, name } = token\n\n  const { notifications } = useNotifications()\n\n  const balance = useStakingBalance(tokenAddress)\n\n  const formattedBalance: number = balance\n    ? parseFloat(formatUnits(balance, 18))\n    : 0\n\n    const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend(tokenAddress)\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n  const isMining = unstakeTokensState.status === \"Mining\"\n\n\n  const classes = useStyles()\n\n  return (\n    <>\n      <div className={classes.contentContainer}>\n\n      <div className={\"content\"}>\n\n      \n        <BalanceMsg\n          label={`Your staked ${name} balance`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        />\n      <SliderInput\n          label={`Stake ${name}`}\n          maxValue={formattedBalance}\n          id={`slider-input-${name}`}\n            className={\"6\"}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit}\n          disabled={isMining}\n        >\n          {isMining ? <CircularProgress size={26} /> : `Unstake all ${name}`}\n        </Button>\n      </div>\n      </div>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens unstaked successfully!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}