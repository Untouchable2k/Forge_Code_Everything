{"ast":null,"code":"import _slicedToArray from\"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";/* eslint-disable spaced-comment */ /// <reference types=\"react-scripts\" />\nimport React,{useEffect,useState}from\"react\";import dai from\"../dai.png\";import forge from\"../forgetoken.png\";import forgeNFT from\"../forgenft.png\";import{YourWallet}from\"./yourWallet\";import{TokenFarmContract}from\"./tokenFarmContract\";import{useEthers}from\"@usedapp/core\";import{constants}from\"ethers\";import{Snackbar,Typography,makeStyles}from\"@material-ui/core\";import Alert from\"@material-ui/lab/Alert\";import brownieConfig from\"../brownie-config-json.json\";import helperConfig from\"../helper-config.json\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nvar useStyles=makeStyles(function(theme){return{title:{color:theme.palette.common.white,textAlign:\"center\",padding:theme.spacing(4)}};});export var Main=function Main(){var _useEthers=useEthers(),chainId=_useEthers.chainId,error=_useEthers.error;var classes=useStyles();var networkName=chainId?helperConfig[chainId]:\"ganache\";console.log(typeof chainId);// We need to pull the DAPP token address from the .json file written to by Brownie\nvar dappTokenAddress=chainId?brownieConfig[\"networks\"][networkName][\"DappToken\"]:constants.AddressZero;var wethTokenAddress=chainId?brownieConfig[\"networks\"][networkName][\"weth_token\"]:constants.AddressZero;var fauTokenAddress=chainId?brownieConfig[\"networks\"][networkName][\"fau_token\"]:constants.AddressZero;var dist=chainId?brownieConfig[\"networks\"][networkName][\"distrubtor\"]:constants.AddressZero;// console.log(dappTokenAddress)\n/**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */var supportedTokens=[{image:forge,address:wethTokenAddress,name:\"Bid on NFT\"},{image:dai,address:fauTokenAddress,name:\"Claim & Browse NFTs\"}];var supportedTokens2=[{image:forgeNFT,address:wethTokenAddress,name:\"Vote on Price to sell NFT\"},{image:forgeNFT,address:fauTokenAddress,name:\"Redeem Shares for profit from sales\"},{image:forgeNFT,address:dappTokenAddress,name:\"Buy NFT with Shares\"},{image:forgeNFT,address:dist,name:\"Admin\"}];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showNetworkError=_useState2[0],setShowNetworkError=_useState2[1];var handleCloseNetworkError=function handleCloseNetworkError(event,reason){if(reason===\"clickaway\"){return;}showNetworkError&&setShowNetworkError(false);};/**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */useEffect(function(){if(error&&(error.name===\"UnsupportedChainIdError\"||error.name===\"t\")){!showNetworkError&&setShowNetworkError(true);}else{showNetworkError&&setShowNetworkError(false);}},[error,showNetworkError]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h2\",component:\"h1\",classes:{root:classes.title},children:\"Forge NFT dAPP\"}),/*#__PURE__*/_jsx(YourWallet,{supportedTokens:supportedTokens}),/*#__PURE__*/_jsx(TokenFarmContract,{supportedTokens:supportedTokens2}),/*#__PURE__*/_jsx(Snackbar,{open:showNetworkError,autoHideDuration:5000,onClose:handleCloseNetworkError,children:/*#__PURE__*/_jsx(Alert,{onClose:handleCloseNetworkError,severity:\"warning\",children:\"You gotta connect to the Mumbai Testnet network!\"})})]});};","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/Main.tsx"],"names":["React","useEffect","useState","dai","forge","forgeNFT","YourWallet","TokenFarmContract","useEthers","constants","Snackbar","Typography","makeStyles","Alert","brownieConfig","helperConfig","useStyles","theme","title","color","palette","common","white","textAlign","padding","spacing","Main","chainId","error","classes","networkName","console","log","dappTokenAddress","AddressZero","wethTokenAddress","fauTokenAddress","dist","supportedTokens","image","address","name","supportedTokens2","showNetworkError","setShowNetworkError","handleCloseNetworkError","event","reason","root"],"mappings":"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","sourcesContent":["/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport forge from \"../forgetoken.png\"\nimport forgeNFT from \"../forgenft.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\nimport DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const { chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  console.log(typeof chainId)\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  const dist = chainId ? brownieConfig[\"networks\"][networkName][\"distrubtor\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n   const supportedTokens: Array<Token> = [\n    {\n      image: forge,\n      address: wethTokenAddress,\n      name: \"Bid on NFT\",\n    },\n    {\n      image: dai,\n      address: fauTokenAddress,\n      name: \"Claim & Browse NFTs\",\n    }\n  ]\n  const supportedTokens2: Array<Token> = [\n    {\n      image: forgeNFT,\n      address: wethTokenAddress,\n      name: \"Vote on Price to sell NFT\",\n    },\n    {\n      image: forgeNFT,\n      address: fauTokenAddress,\n      name: \"Redeem Shares for profit from sales\",\n    },\n    {\n      image: forgeNFT,\n      address: dappTokenAddress,\n      name: \"Buy NFT with Shares\",\n    },\n    {\n      image: forgeNFT,\n      address: dist,\n      name: \"Admin\",\n    }\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && (error.name === \"UnsupportedChainIdError\"  || error.name === \"t\")) {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)\n    }\n  }, [error, showNetworkError])\n\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: classes.title,\n        }}\n      >\n        Forge NFT dAPP\n      </Typography>\n      <YourWallet supportedTokens={supportedTokens} />\n      <TokenFarmContract supportedTokens={supportedTokens2} />\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          You gotta connect to the Mumbai Testnet network!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}