{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, CircularProgress, Snackbar, makeStyles } from \"@material-ui/core\";\nimport { useUnstakeTokens, AuctionEnd, DistTimeKiwi, DistTime, RedeemBuyNFTNoApprove, RedeemNoApprove, AllowanceUser, CurrentVotePrice, useStakeTokens4, useStakeTokens3, SharesNeeded, CurrentRedeem2, CurrentVotePrice2, VotePrice, useStakingBalance } from \"../../hooks\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useNotifications, useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { SliderInput, BalanceMsg } from \"../../components\";\nimport \"../../App.css\";\nimport { utils } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    contentContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      gap: theme.spacing(2)\n    }\n  };\n});\nexport var Unstake = function Unstake(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var image = token.image,\n      tokenAddress = token.address,\n      name = token.name;\n\n  var _useEthers = useEthers(),\n      account = _useEthers.account;\n\n  var _useNotifications = useNotifications(),\n      notifications = _useNotifications.notifications;\n\n  var balance = useStakingBalance(tokenAddress);\n  var nothing;\n  var testTime = DistTime();\n\n  if (testTime !== nothing) {\n    console.log(\"testTime \", parseFloat(testTime.toString()));\n  } // console.log(\"TestTime \", testTime)\n\n\n  var testTimeKiwi = DistTimeKiwi();\n\n  if (testTimeKiwi !== nothing) {\n    console.log(\"TestTimeKiwi \", parseFloat(testTimeKiwi.toString()));\n  } //console.log(\"TestTimeKiwi \", testTimeKiwi)\n  //Gets vote price and sell price\n\n\n  var curVoteP = CurrentVotePrice(tokenAddress);\n  var formattedVoteP = curVoteP ? parseFloat(formatUnits(curVoteP, 18)) : 0;\n  var yourPrice = \"0\";\n\n  if (formattedVoteP !== nothing) {\n    yourPrice = formattedVoteP.toFixed(3);\n  }\n\n  var curVoteP2 = CurrentVotePrice2(tokenAddress);\n  var curVoteP2a = 0;\n\n  if (curVoteP2 != nothing) {\n    curVoteP2a = curVoteP2;\n  }\n\n  var formattedVoteP2 = curVoteP2a ? parseFloat(formatUnits(curVoteP2a, 18)) : 0;\n  var actualPriceSlider = 0;\n  var actualPrice = 0;\n\n  if (formattedVoteP2 !== nothing) {\n    actualPriceSlider = formattedVoteP2;\n    actualPrice = formattedVoteP2;\n  }\n\n  var balance2 = useTokenBalance(\"0x9265858344c8e0b3754Fc60B42DCF3ddd61fb8F9\", account);\n  var formattedBalance = balance2 ? parseFloat(formatUnits(balance2, 0)) : 0;\n\n  var _useState = useState(actualPriceSlider),\n      _useState2 = _slicedToArray(_useState, 2),\n      amount = _useState2[0],\n      setAmount = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      amount2 = _useState4[0],\n      setAmount2 = _useState4[1];\n\n  if (amount == 0 && actualPriceSlider !== 0) {\n    setAmount(actualPriceSlider);\n  }\n\n  var _useUnstakeTokens = useUnstakeTokens(),\n      unstakeTokensSend = _useUnstakeTokens.send,\n      unstakeTokensState = _useUnstakeTokens.state;\n\n  var handleUnstakeSubmit = function handleUnstakeSubmit() {\n    return unstakeTokensSend(tokenAddress);\n  };\n\n  var _VotePrice = VotePrice(tokenAddress),\n      doVotePrice = _VotePrice.send,\n      unstakeTokensState2 = _VotePrice.state;\n\n  var handleVotePrice = function handleVotePrice() {\n    var amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString());\n    return doVotePrice(amountAsWei.toString());\n  };\n\n  var _useStakeTokens = useStakeTokens3(tokenAddress),\n      doRedeemShares = _useStakeTokens.send,\n      unstakeTokensState234 = _useStakeTokens.state;\n\n  var handleRedeem = function handleRedeem() {\n    return doRedeemShares(Number(amount2).toString());\n  };\n\n  var _RedeemNoApprove = RedeemNoApprove(tokenAddress),\n      doRedeemSharesNoApprove = _RedeemNoApprove.send,\n      unstakeTokensState2346 = _RedeemNoApprove.state;\n\n  var handleRedeem2 = function handleRedeem2() {\n    return doRedeemSharesNoApprove(Number(amount2).toString());\n  };\n\n  var _RedeemBuyNFTNoApprov = RedeemBuyNFTNoApprove(tokenAddress),\n      doCashinSharesNoApprove = _RedeemBuyNFTNoApprov.send,\n      unstakeTokensState23456 = _RedeemBuyNFTNoApprov.state;\n\n  var handleCashinNoApprove = function handleCashinNoApprove() {\n    return doCashinSharesNoApprove();\n  };\n\n  var _useStakeTokens2 = useStakeTokens4(tokenAddress),\n      doCashinShares = _useStakeTokens2.send,\n      unstakeTokensState2345 = _useStakeTokens2.state;\n\n  var handleCashin = function handleCashin() {\n    return doCashinShares(Number(amount).toString());\n  };\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showUnstakeSuccess = _useState6[0],\n      setShowUnstakeSuccess = _useState6[1];\n\n  var handleCloseSnack = function handleCloseSnack() {\n    showUnstakeSuccess && setShowUnstakeSuccess(false);\n  };\n\n  useEffect(function () {\n    if (notifications.filter(function (notification) {\n      return notification.type === \"transactionSucceed\" && notification.transactionName === \"Unstake tokens\";\n    }).length > 0) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true);\n    }\n  }, [notifications, showUnstakeSuccess]);\n  var isMining = unstakeTokensState.status === \"Mining\";\n  var isMining2 = unstakeTokensState2345.status === \"Mining\";\n  var isMining3 = unstakeTokensState23456.status === \"Mining\";\n  var isMining4 = unstakeTokensState2346.status === \"Mining\";\n  var isMining5 = unstakeTokensState234.status === \"Mining\";\n  var isMining6 = unstakeTokensState2.status === \"Mining\";\n  var shares = SharesNeeded(amount.toString());\n  var sharesNeeded = 0;\n\n  if (shares !== nothing) {\n    sharesNeeded = parseFloat(shares.toString());\n  }\n\n  var alowz = AllowanceUser();\n  var allowance = 0;\n\n  if (alowz !== nothing) {\n    allowance = parseFloat(alowz.toString());\n  }\n\n  var endsAt = AuctionEnd(amount.toString());\n  var EndsAtt = 0;\n  var noAuc = false;\n\n  if (endsAt !== nothing) {\n    EndsAtt = parseFloat(endsAt.toString());\n  }\n\n  var secondsSinceEpoch = Math.round(Date.now() / 1000);\n  var waitTilFinished;\n\n  if (secondsSinceEpoch < EndsAtt) {\n    waitTilFinished = /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wait until Auction is over to claim a NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 22\n    }, _this);\n    noAuc = true;\n  }\n\n  var amountAsWei = utils.parseEther(Number(amount2).toFixed(0).toString());\n  var test = CurrentRedeem2(Number(amount2).toFixed(0).toString());\n  var redeemamt = 0;\n  console.log(\"TEST,\", test);\n\n  if (test !== nothing) {\n    redeemamt = parseFloat(test.toString());\n  }\n\n  var test2 = CurrentRedeem2(formattedBalance.toString());\n  var redeemamtMax = 0;\n\n  if (test2 !== nothing) {\n    redeemamtMax = parseFloat(test2.toString());\n  }\n  /*\n  Test for max payouts total\n  var test3 = CurrentRedeem2(\"320000\")\n   var redeemamtMax2 = 0\n  if(test3 !== nothing){\n   redeemamtMax2 = parseFloat(test3.toString()) / 10 ** 18\n  }*/\n\n\n  var classes = useStyles();\n\n  if (tokenAddress == \"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\") {\n    var msgmsg = \"\";\n\n    if (parseFloat(yourPrice) > 0.0001) {\n      msgmsg = \"Your current Voted Price to sell: \" + yourPrice + \" Forge\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.contentContainer,\n        children: [/*#__PURE__*/_jsxDEV(BalanceMsg, {\n          label: \"Your shares of Forge NFT\",\n          amount: formattedBalance,\n          tokenImgSrc: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, _this), msgmsg, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 16\n        }, _this), \"Everyone total overall sell price: \", actualPrice, \" Forge\", /*#__PURE__*/_jsxDEV(SliderInput, {\n          style: {\n            width: \"350px\"\n          },\n          label: \"Decide on price to sell NFTs for\",\n          minValue: actualPriceSlider / 10 + 1 / Math.pow(10, 18),\n          maxValue: actualPriceSlider * 10 - 1 / Math.pow(10, 18),\n          id: \"slider-input-\".concat(name),\n          className: \"6\",\n          value: amount,\n          onChange: setAmount,\n          disabled: isMining\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          size: \"large\",\n          onClick: handleVotePrice,\n          disabled: isMining || isMining6,\n          children: isMining || isMining6 ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 36\n          }, _this) : \"Vote on Price to sell NFT for\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: showUnstakeSuccess,\n        autoHideDuration: 5000,\n        onClose: handleCloseSnack,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnack,\n          severity: \"success\",\n          children: \"Successfully voted on new price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true);\n  } else if (tokenAddress == \"0xFab46E002BbF0b4509813474841E0716E6730136\") {\n    var butText = \"Cash in \" + amount + \" shares for \" + (redeemamt / Math.pow(10, 18) * 2 / 3).toFixed(5) + \" Forge\";\n    var but = \"test\";\n\n    var but2 = /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      size: \"large\",\n      onClick: handleRedeem,\n      disabled: isMining || isMining5,\n      children: isMining || isMining5 ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 26\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 28\n      }, _this) : butText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 15\n    }, _this);\n\n    if (allowance > amount) {\n      but = \"nohear2\";\n      but2 = /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        size: \"large\",\n        onClick: handleRedeem2,\n        disabled: isMining || isMining4,\n        children: isMining || isMining4 ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 30\n        }, _this) : butText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 12\n      }, _this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.contentContainer,\n          children: [/*#__PURE__*/_jsxDEV(BalanceMsg, {\n            label: \"Your shares of Forge NFT\",\n            amount: formattedBalance,\n            tokenImgSrc: image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 9\n          }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 11\n          }, _this), \"You can redeem your \", formattedBalance, \" shares for: \", (redeemamtMax / Math.pow(10, 18) * 2 / 3).toFixed(5), \" Forge\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 107\n          }, _this), \"Wait until auction ends to recieve maximum\", /*#__PURE__*/_jsxDEV(SliderInput, {\n            label: \"Decide on how many Forge NFT Fractionalized shares to cash in\",\n            maxValue: formattedBalance,\n            minValue: 0,\n            id: \"slider-input-\".concat(name),\n            className: \"6\",\n            value: amount2,\n            onChange: setAmount2,\n            disabled: isMining\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 9\n          }, _this), \"Once you cash in, you can never claim again\", but2]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 7\n        }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n          open: showUnstakeSuccess,\n          autoHideDuration: 5000,\n          onClose: handleCloseSnack,\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            onClose: handleCloseSnack,\n            severity: \"success\",\n            children: \"Claimed Forge for your NFT shares.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 9\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 7\n        }, _this)]\n      }, void 0, true)\n    }, void 0, false);\n  } else {\n    var butText = \"Click to trade \" + sharesNeeded + \" shares for NFT\";\n    var but3 = \"tes\";\n\n    var but4 = /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      size: \"large\",\n      onClick: handleCashin,\n      disabled: isMining || noAuc || isMining2,\n      children: isMining || isMining2 ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 26\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 27\n      }, _this) : butText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 14\n    }, _this);\n\n    if (allowance > sharesNeeded) {\n      but3 = \"too\";\n      but4 = /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        size: \"large\",\n        onClick: handleCashinNoApprove,\n        disabled: isMining || noAuc || isMining3,\n        children: isMining || isMining3 ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 30\n        }, _this) : butText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 12\n      }, _this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.contentContainer,\n        children: [/*#__PURE__*/_jsxDEV(BalanceMsg, {\n          label: \"Your shares of Forge NFT\",\n          amount: formattedBalance,\n          tokenImgSrc: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 1\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 3\n        }, _this), \"You can redeem your \", formattedBalance, \" shares for \", Math.floor(formattedBalance / sharesNeeded), \" Forge NFTs\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 109\n        }, _this), \"Each NFT costs \", sharesNeeded, \" shares\", waitTilFinished, but4, \"After redeeming go to the top section \\\"Claim and Browse NFTs to select your NFT\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: showUnstakeSuccess,\n        autoHideDuration: 5000,\n        onClose: handleCloseSnack,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnack,\n          severity: \"success\",\n          children: \"Successfully bought NFT, now go to Claim and Browse above and claim your NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 1\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 1\n      }, _this)]\n    }, void 0, true);\n  }\n};\n\n_s(Unstake, \"7Nmhycpji7aRx6ZUpI1qKJaY2w4=\", false, function () {\n  return [useEthers, useNotifications, useStakingBalance, useTokenBalance, useUnstakeTokens, useStakeTokens3, useStakeTokens4, useStyles];\n});\n\n_c = Unstake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Unstake\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx"],"names":["React","useState","useEffect","Button","CircularProgress","Snackbar","makeStyles","useUnstakeTokens","AuctionEnd","DistTimeKiwi","DistTime","RedeemBuyNFTNoApprove","RedeemNoApprove","AllowanceUser","CurrentVotePrice","useStakeTokens4","useStakeTokens3","SharesNeeded","CurrentRedeem2","CurrentVotePrice2","VotePrice","useStakingBalance","Alert","useNotifications","useEthers","useTokenBalance","formatUnits","SliderInput","BalanceMsg","utils","useStyles","theme","contentContainer","display","flexDirection","alignItems","justifyContent","gap","spacing","Unstake","token","image","tokenAddress","address","name","account","notifications","balance","nothing","testTime","console","log","parseFloat","toString","testTimeKiwi","curVoteP","formattedVoteP","yourPrice","toFixed","curVoteP2","curVoteP2a","formattedVoteP2","actualPriceSlider","actualPrice","balance2","formattedBalance","amount","setAmount","amount2","setAmount2","unstakeTokensSend","send","unstakeTokensState","state","handleUnstakeSubmit","doVotePrice","unstakeTokensState2","handleVotePrice","amountAsWei","parseEther","Number","doRedeemShares","unstakeTokensState234","handleRedeem","doRedeemSharesNoApprove","unstakeTokensState2346","handleRedeem2","doCashinSharesNoApprove","unstakeTokensState23456","handleCashinNoApprove","doCashinShares","unstakeTokensState2345","handleCashin","showUnstakeSuccess","setShowUnstakeSuccess","handleCloseSnack","filter","notification","type","transactionName","length","isMining","status","isMining2","isMining3","isMining4","isMining5","isMining6","shares","sharesNeeded","alowz","allowance","endsAt","EndsAtt","noAuc","secondsSinceEpoch","Math","round","Date","now","waitTilFinished","test","redeemamt","test2","redeemamtMax","classes","msgmsg","width","butText","but","but2","but3","but4","floor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, AuctionEnd, DistTimeKiwi, DistTime, RedeemBuyNFTNoApprove, RedeemNoApprove, AllowanceUser, CurrentVotePrice, useStakeTokens4, useStakeTokens3, SharesNeeded, CurrentRedeem2, CurrentVotePrice2, VotePrice, useStakingBalance } from \"../../hooks\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications, useEthers, useTokenBalance  } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {SliderInput, SliderInput2, BalanceMsg } from \"../../components\"\nimport \"../../App.css\"\n\nimport { utils } from \"ethers\"\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n  const { image, address: tokenAddress, name } = token\n\n  const { account } = useEthers();\n  const { notifications } = useNotifications()\n\n  const balance = useStakingBalance(tokenAddress)\n\n  let nothing\n  const testTime = DistTime()\n  if(testTime!== nothing){\n\n    console.log(\"testTime \", parseFloat(testTime.toString()))\n  }\n  // console.log(\"TestTime \", testTime)\n  const testTimeKiwi = DistTimeKiwi()\n  if(testTimeKiwi!== nothing){\n    console.log(\"TestTimeKiwi \", parseFloat(testTimeKiwi.toString()))\n  }\n  //console.log(\"TestTimeKiwi \", testTimeKiwi)\n  //Gets vote price and sell price\n  const curVoteP = CurrentVotePrice(tokenAddress)\n\n  const formattedVoteP: number = curVoteP\n    ? parseFloat(formatUnits(curVoteP, 18))\n    : 0\n    \n  var yourPrice = \"0\"\n  if(formattedVoteP!== nothing){\n\n    yourPrice = formattedVoteP.toFixed(3)\n  }\n  \n  const curVoteP2 = CurrentVotePrice2(tokenAddress)\n\n\n\n  var curVoteP2a = 0\n  if(curVoteP2 != nothing){\n    curVoteP2a = curVoteP2\n  \n  }\n      const formattedVoteP2: number = curVoteP2a\n        ? parseFloat(formatUnits(curVoteP2a, 18))\n        : 0\n  \n        \n  var actualPriceSlider = 0\n  var actualPrice = 0\n  if(formattedVoteP2!== nothing){\n    actualPriceSlider = formattedVoteP2\n\n    actualPrice = formattedVoteP2 \n  }\n  \n  const balance2 = useTokenBalance(\"0x9265858344c8e0b3754Fc60B42DCF3ddd61fb8F9\", account)\n\n  const formattedBalance: number = balance2\n    ? parseFloat(formatUnits(balance2, 0))\n    : 0\n\n    const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(actualPriceSlider)\n\n\n    const [amount2, setAmount2] =\n    useState<number | string | Array<number | string>>(0)\n\n\n\n\nif(amount == 0 && actualPriceSlider !== 0){\n  setAmount(actualPriceSlider)\n}\n\n\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend(tokenAddress)\n  }\n\n\n\n  const { send: doVotePrice, state: unstakeTokensState2 } =\n    VotePrice(tokenAddress)\n\n  const handleVotePrice = () => {\n    const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n    return doVotePrice(amountAsWei.toString())\n  }\n\n\n\n  const { send: doRedeemShares, state: unstakeTokensState234 } =\n    useStakeTokens3(tokenAddress)\n\n  const handleRedeem = () => {\n    return doRedeemShares(Number(amount2).toString())\n  }\n\n\n\n  const { send: doRedeemSharesNoApprove, state: unstakeTokensState2346 } =\n    RedeemNoApprove(tokenAddress)\n\n  const handleRedeem2 = () => {\n    return doRedeemSharesNoApprove(Number(amount2).toString())\n  }\n  \n  \n\n  const { send: doCashinSharesNoApprove, state: unstakeTokensState23456 } =\n  RedeemBuyNFTNoApprove(tokenAddress)\n\n  const handleCashinNoApprove = () => {\n    return doCashinSharesNoApprove()\n  }\n\n  const { send: doCashinShares, state: unstakeTokensState2345 } =\n    useStakeTokens4(tokenAddress)\n\n  const handleCashin = () => {\n    return doCashinShares(Number(amount).toString())\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n  const isMining = unstakeTokensState.status === \"Mining\"\n  const isMining2 = unstakeTokensState2345.status === \"Mining\"\n  const isMining3 = unstakeTokensState23456.status === \"Mining\"\n  const isMining4 = unstakeTokensState2346.status === \"Mining\"\n  const isMining5 = unstakeTokensState234.status === \"Mining\"\n  const isMining6 = unstakeTokensState2.status === \"Mining\"\n\n  \nvar shares = SharesNeeded(amount.toString())\nvar sharesNeeded = 0\nif(shares !== nothing){\n  sharesNeeded = parseFloat(shares.toString())\n\n} \n\n\nvar alowz = AllowanceUser()\nvar allowance = 0\nif(alowz !== nothing){\n  allowance = parseFloat(alowz.toString())\n}\nvar endsAt = AuctionEnd(amount.toString())\nvar EndsAtt = 0\nvar noAuc = false\nif(endsAt!== nothing){\n  EndsAtt = parseFloat(endsAt.toString())\n}\n\nvar secondsSinceEpoch = Math.round(Date.now() / 1000)\nvar waitTilFinished\nif(secondsSinceEpoch < EndsAtt){\n  waitTilFinished =  <h1>Wait until Auction is over to claim a NFT</h1>  \n  noAuc = true\n}\nconst amountAsWei = utils.parseEther(Number(amount2).toFixed(0).toString())\n var test =  CurrentRedeem2(Number(amount2).toFixed(0).toString())\n var redeemamt = 0\n console.log(\"TEST,\", test)\n if(test !== nothing){\n   redeemamt = parseFloat(test.toString()) \n } \n var test2 = CurrentRedeem2(formattedBalance.toString())\n var redeemamtMax = 0\n if(test2 !== nothing){\n  redeemamtMax = parseFloat(test2.toString())\n } \n /*\n Test for max payouts total\n var test3 = CurrentRedeem2(\"320000\")\n\n var redeemamtMax2 = 0\n if(test3 !== nothing){\n  redeemamtMax2 = parseFloat(test3.toString()) / 10 ** 18\n }*/\n\n  const classes = useStyles()\nif(tokenAddress == \"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\")\n\n{\n  var msgmsg = \"\"\n  if(parseFloat(yourPrice) > 0.0001){\n    msgmsg = \"Your current Voted Price to sell: \" +yourPrice + \" Forge\"\n}\n  return (\n    <>\n      <div className={classes.contentContainer}>\n\n        <BalanceMsg\n          label={`Your shares of Forge NFT`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        /><br></br>\n       {msgmsg}<br></br>\n       Everyone total overall sell price: {actualPrice} Forge\n        <SliderInput\n        style={{width: \"350px\"}}\n          label={`Decide on price to sell NFTs for`}\n          minValue={actualPriceSlider/10 + 1/(10**18)}\n          maxValue={actualPriceSlider*10 - 1/(10**18)}\n          id={`slider-input-${name}`}\n            className={\"6\"}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleVotePrice}\n          disabled={isMining || isMining6}\n        >\n          {isMining || isMining6 ? <CircularProgress size={26} /> : `Vote on Price to sell NFT for`}\n        </Button>\n      </div>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Successfully voted on new price\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}else if(tokenAddress == \"0xFab46E002BbF0b4509813474841E0716E6730136\"){\n  var butText =\"Cash in \"+ amount +\" shares for \"+ (redeemamt / 10**18 * 2/3  ).toFixed(5) +\" Forge\"\n  var but = \"test\"\n  var but2 =  <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleRedeem}\n  disabled={isMining || isMining5}\n>\n  {isMining || isMining5 ? <CircularProgress size={26} /> : butText}\n  </Button>\n  if(allowance > amount){\n    but  = \"nohear2\"\n    but2 = <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={handleRedeem2}\n    disabled={isMining || isMining4}\n  >\n    {isMining || isMining4 ? <CircularProgress size={26} /> : butText}\n  </Button>\n  }\n  return(<>\n  <>\n      <div className={classes.contentContainer}>\n\n      \n        <BalanceMsg\n          label={`Your shares of Forge NFT`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        /><br></br>\n       You can redeem your {formattedBalance} shares for: {(redeemamtMax / 10**18 * 2/3).toFixed(5)} Forge<br></br>\n       Wait until auction ends to recieve maximum\n        <SliderInput\n          label={`Decide on how many Forge NFT Fractionalized shares to cash in`}\n          maxValue={formattedBalance}\n          minValue={0}\n          id={`slider-input-${name}`}\n            className={\"6\"}\n          value={amount2}\n          onChange={setAmount2}\n          disabled={isMining }\n        />\n        Once you cash in, you can never claim again\n        {but2}\n\n      </div>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Claimed Forge for your NFT shares.\n        </Alert>\n      </Snackbar>\n    </>\n  \n  \n  \n  </>)\n}else{\n  var butText = \"Click to trade \"+sharesNeeded+\" shares for NFT\"\n  var but3 = \"tes\"\n  var but4 = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleCashin}\n  disabled={isMining || noAuc || isMining2}\n>\n  {isMining|| isMining2 ? <CircularProgress size={26} /> : butText}\n</Button>\n  if(allowance > sharesNeeded){\n    but3 = \"too\"\n    but4 = <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={handleCashinNoApprove}\n    disabled={isMining || noAuc || isMining3}\n  >\n    {isMining || isMining3 ? <CircularProgress size={26} /> : butText}\n  </Button>\n  }\n  return(<>\n  \n  \n  <div className={classes.contentContainer}>\n\n<BalanceMsg\n  label={`Your shares of Forge NFT`}\n  amount={formattedBalance}\n  tokenImgSrc={image}\n/><br></br>\nYou can redeem your {formattedBalance} shares for {Math.floor((formattedBalance / sharesNeeded))} Forge NFTs<br></br>Each NFT costs {sharesNeeded} shares\n{waitTilFinished}\n{but4}\nAfter redeeming go to the top section \"Claim and Browse NFTs to select your NFT\"\n</div>\n<Snackbar\nopen={showUnstakeSuccess}\nautoHideDuration={5000}\nonClose={handleCloseSnack}\n>\n<Alert onClose={handleCloseSnack} severity=\"success\">\n  Successfully bought NFT, now go to Claim and Browse above and claim your NFT\n</Alert>\n</Snackbar>\n  \n  \n  \n  \n  \n  </>)\n}\n}\n"]},"metadata":{},"sourceType":"module"}