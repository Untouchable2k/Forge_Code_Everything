{"ast":null,"code":"import _slicedToArray from\"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useContractCall,useEthers}from\"@usedapp/core\";import TokenFarm from\"../chain-info/DaughterContract.json\";import{utils,constants}from\"ethers\";import brownieConfig from\"../brownie-config-json.json\";import helperConfig from\"../helper-config.json\";/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */export var CurrentVotePrice2=function CurrentVotePrice2(address){var _useContractCall,_useContractCall2;var _useEthers=useEthers(),account=_useEthers.account,chainId=_useEthers.chainId;var abi=TokenFarm.abi;var networkName=chainId?helperConfig[chainId]:\"ganache\";var NFTAddy=chainId?brownieConfig[\"networks\"][networkName][\"NFTBOOK\"]:constants.AddressZero;var tokenFarmInterface=new utils.Interface(abi);var _ref=(_useContractCall=useContractCall({abi:tokenFarmInterface,address:NFTAddy,method:\"votesTotal\",args:[]}))!==null&&_useContractCall!==void 0?_useContractCall:[],_ref2=_slicedToArray(_ref,1),stakingBalance=_ref2[0];var _ref3=(_useContractCall2=useContractCall({abi:tokenFarmInterface,address:NFTAddy,method:\"votesTotalAmt\",args:[]}))!==null&&_useContractCall2!==void 0?_useContractCall2:[],_ref4=_slicedToArray(_ref3,1),stakingBalance2=_ref4[0];var nothing;var f=0;if(stakingBalance2!==nothing&&stakingBalance!==nothing){f=stakingBalance2/stakingBalance;}return f;};","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice2.ts"],"names":["useContractCall","useEthers","TokenFarm","utils","constants","brownieConfig","helperConfig","CurrentVotePrice2","address","account","chainId","abi","networkName","NFTAddy","AddressZero","tokenFarmInterface","Interface","method","args","stakingBalance","stakingBalance2","nothing","f"],"mappings":"uMAAA,OAASA,eAAT,CAA0BC,SAA1B,KAA2C,eAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,qCAAtB,CACA,OAASC,KAAT,CAA2BC,SAA3B,KAA4C,QAA5C,CAGA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CAEA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,OAAD,CAAyC,wCACxE,eAA6BP,SAAS,EAAtC,CAAQQ,OAAR,YAAQA,OAAR,CAAiBC,OAAjB,YAAiBA,OAAjB,CAEA,GAAQC,CAAAA,GAAR,CAAgBT,SAAhB,CAAQS,GAAR,CACA,GAAMC,CAAAA,WAAW,CAAGF,OAAO,CAAGJ,YAAY,CAACI,OAAD,CAAf,CAA2B,SAAtD,CACA,GAAMG,CAAAA,OAAO,CAAGH,OAAO,CAAGL,aAAa,CAAC,UAAD,CAAb,CAA0BO,WAA1B,EAAuC,SAAvC,CAAH,CAAuDR,SAAS,CAACU,WAAxF,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,GAAIZ,CAAAA,KAAK,CAACa,SAAV,CAAoBL,GAApB,CAA3B,CAEA,2BACEX,eAAe,CAAC,CACdW,GAAG,CAAEI,kBADS,CAEdP,OAAO,CAAEK,OAFK,CAGdI,MAAM,CAAE,YAHM,CAIdC,IAAI,CAAE,EAJQ,CAAD,CADjB,qDAMQ,EANR,8BAAOC,cAAP,UAQE,6BACAnB,eAAe,CAAC,CACdW,GAAG,CAAEI,kBADS,CAEdP,OAAO,CAAEK,OAFK,CAGdI,MAAM,CAAE,eAHM,CAIdC,IAAI,CAAE,EAJQ,CAAD,CADf,uDAMM,EANN,+BAAOE,eAAP,UAOJ,GAAIC,CAAAA,OAAJ,CACE,GAAIC,CAAAA,CAAC,CAAG,CAAR,CACF,GAAGF,eAAe,GAAKC,OAApB,EAA+BF,cAAc,GAAKE,OAArD,CACA,CACEC,CAAC,CAAGF,eAAe,CAAGD,cAAtB,CACD,CACC,MAAOG,CAAAA,CAAP,CACD,CA/BM","sourcesContent":["import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const CurrentVotePrice2 = (address: string): number | undefined => {\n  const { account, chainId } = useEthers()\n\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"votesTotal\",\n      args: [],\n    }) ?? []\n\n    const [stakingBalance2] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"votesTotalAmt\",\n      args: [],\n    }) ?? []\nlet nothing\n  var f = 0    \nif(stakingBalance2 !== nothing && stakingBalance !== nothing)\n{\n  f = stakingBalance2 / stakingBalance\n}\n  return f\n}\n"]},"metadata":{},"sourceType":"module"}