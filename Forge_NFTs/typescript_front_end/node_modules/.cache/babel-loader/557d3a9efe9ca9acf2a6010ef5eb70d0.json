{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { SliderInput, SliderInput2 } from \"../../components\";\nimport { useEthers, useEtherBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, CircularProgress, Snackbar, makeStyles } from \"@material-ui/core\";\nimport { useStakeTokens, CurrentVotePrice2, CurrentVotePrice } from \"../../hooks\";\nimport { utils } from \"ethers\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport \"../../App.css\"; // This is the typescript way of saying this compent needs this type\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      gap: theme.spacing(2),\n      width: \"100%\"\n    },\n    slider: {\n      width: \"100%\",\n      maxWidth: \"400px\"\n    }\n  };\n}); // token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\n\nexport var StakeForm = function StakeForm(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var tokenAddress = token.address,\n      name = token.name;\n\n  var _useEthers = useEthers(),\n      account = _useEthers.account;\n\n  var tokenBalance = useEtherBalance(account);\n\n  var _useNotifications = useNotifications(),\n      notifications = _useNotifications.notifications;\n\n  var classes = useStyles();\n\n  var _useStakeTokens = useStakeTokens(tokenAddress),\n      stakeTokensSend = _useStakeTokens.send,\n      stakeTokensState = _useStakeTokens.state;\n\n  var formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0; //Gets vote price and sell price\n\n  var curVoteP = CurrentVotePrice(tokenAddress);\n  var formattedVoteP = curVoteP ? parseFloat(formatUnits(curVoteP, 18)) : 0;\n  var nothing;\n  var yourPrice = \"0\";\n\n  if (formattedVoteP !== nothing) {\n    yourPrice = formattedVoteP.toFixed(18);\n  }\n\n  var curVoteP2 = CurrentVotePrice2(tokenAddress);\n  var formattedVoteP2 = curVoteP2 ? parseFloat(formatUnits(curVoteP2, 18)) : 0;\n  var actualPriceSlider = 0;\n  var actualPrice = \"0\";\n\n  if (formattedVoteP2 !== nothing) {\n    actualPriceSlider = formattedVoteP2;\n    actualPrice = formattedVoteP2.toFixed(18);\n  }\n\n  var handleStakeSubmit = function handleStakeSubmit() {\n    var amountAsWei = utils.parseEther(amount.toString());\n    return stakeTokensSend(amountAsWei.toString());\n  };\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      amount = _useState2[0],\n      setAmount = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      amount2 = _useState4[0],\n      setAmount2 = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showErc20ApprovalSuccess = _useState6[0],\n      setShowErc20ApprovalSuccess = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showStakeTokensSuccess = _useState8[0],\n      setShowStakeTokensSuccess = _useState8[1];\n\n  var handleCloseSnack = function handleCloseSnack() {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false);\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false);\n  };\n\n  useEffect(function () {\n    if (notifications.filter(function (notification) {\n      return notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 transfer\";\n    }).length > 0) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true);\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false);\n    }\n\n    if (notifications.filter(function (notification) {\n      return notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake tokens\";\n    }).length > 0) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false);\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true);\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess]);\n\n  var _useState9 = useState(\"1\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      startingauction = _useState10[0],\n      setAmountz = _useState10[1];\n\n  var isMining = stakeTokensState.status === \"Mining\";\n  var hasZeroBalance = formattedTokenBalance === 0;\n  var hasZeroAmountSelected = parseFloat(amount.toString()) === 0;\n  var imgz = new Array();\n  var imgzNum = new Array();\n  var p;\n  var sel = \"https://forgetoken.org/api/forge/NFT/\" + amount2.toString() + \".png\";\n  var ez = sel.toString();\n\n  var selected = /*#__PURE__*/_jsxDEV(\"img\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 16\n  }, _this);\n\n  if (ez !== nothing) {\n    var selected = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: sel,\n      alt: \"Girl in a jacket\",\n      width: \"300\",\n      height: \"300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 16\n    }, _this);\n  }\n\n  console.log(\"SEL\", selected);\n  console.log(\"WELCOME\");\n\n  if (tokenAddress == \"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        children: [\"Bid on Auction, Claim NFT, Browse Collection, Your Collection\", /*#__PURE__*/_jsxDEV(SliderInput, {\n          label: \"Bid \".concat(name),\n          maxValue: actualPriceSlider * 3,\n          minValue: actualPriceSlider,\n          id: \"slider-input-\".concat(name),\n          className: classes.slider,\n          value: amount,\n          onChange: setAmount,\n          disabled: isMining\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          size: \"large\",\n          onClick: handleStakeSubmit,\n          disabled: isMining,\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 23\n          }, _this) : \"Stake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: showErc20ApprovalSuccess,\n        autoHideDuration: 5000,\n        onClose: handleCloseSnack,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnack,\n          severity: \"success\",\n          children: \"ERC-20 token transfer approved successfully! Now approve the 2nd tx to initiate the staking transfer.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: showStakeTokensSuccess,\n        autoHideDuration: 5000,\n        onClose: handleCloseSnack,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnack,\n          severity: \"success\",\n          children: \"Tokens staked successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true);\n  }\n\n  if (tokenAddress == \"0xFab46E002BbF0b4509813474841E0716E6730136\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        children: [\" \", selected, \"Claim NFT\", /*#__PURE__*/_jsxDEV(SliderInput2, {\n          label: \"Stake \".concat(name),\n          maxValue: 32,\n          min: 1,\n          id: \"slider-input-\".concat(name),\n          className: classes.slider,\n          value: amount2,\n          onChange: setAmount2,\n          disabled: isMining\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 8\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          size: \"large\",\n          onClick: handleStakeSubmit,\n          disabled: isMining,\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 23\n          }, _this) : \"Claim NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: showErc20ApprovalSuccess,\n        autoHideDuration: 5000,\n        onClose: handleCloseSnack,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnack,\n          severity: \"success\",\n          children: \"ERC-20 token transfer approved successfully! Now approve the 2nd tx to initiate the staking transfer.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: showStakeTokensSuccess,\n        autoHideDuration: 5000,\n        onClose: handleCloseSnack,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: handleCloseSnack,\n          severity: \"success\",\n          children: \"Claimed NFT successfully!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(StakeForm, \"kPm4AKwIbhK2rfYykQBpN+yiAD8=\", false, function () {\n  return [useEthers, useEtherBalance, useNotifications, useStyles, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx"],"names":["React","useEffect","useState","SliderInput","SliderInput2","useEthers","useEtherBalance","useNotifications","formatUnits","Button","CircularProgress","Snackbar","makeStyles","useStakeTokens","CurrentVotePrice2","CurrentVotePrice","utils","Alert","useStyles","theme","container","display","flexDirection","alignItems","gap","spacing","width","slider","maxWidth","StakeForm","token","tokenAddress","address","name","account","tokenBalance","notifications","classes","stakeTokensSend","send","stakeTokensState","state","formattedTokenBalance","parseFloat","curVoteP","formattedVoteP","nothing","yourPrice","toFixed","curVoteP2","formattedVoteP2","actualPriceSlider","actualPrice","handleStakeSubmit","amountAsWei","parseEther","amount","toString","setAmount","amount2","setAmount2","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","filter","notification","type","transactionName","length","startingauction","setAmountz","isMining","status","hasZeroBalance","hasZeroAmountSelected","imgz","Array","imgzNum","p","sel","ez","selected","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,kBAA1C;AAGA,SAASC,SAAT,EAAmBC,eAAnB,EAAqDC,gBAArD,QAA6E,eAA7E;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SACEC,MADF,EAEEC,gBAFF,EAGEC,QAHF,EAIEC,UAJF,QAKO,mBALP;AAOA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,gBAA5C,QAAoE,aAApE;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAO,eAAP,C,CAEA;;;;AAKA,IAAMC,SAAS,GAAGN,UAAU,CAAC,UAACO,KAAD;AAAA,SAAY;AACvCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE,MADA;AAETC,MAAAA,aAAa,EAAE,QAFN;AAGTC,MAAAA,UAAU,EAAE,QAHH;AAITC,MAAAA,GAAG,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd,CAJI;AAKTC,MAAAA,KAAK,EAAE;AALE,KAD4B;AAQvCC,IAAAA,MAAM,EAAE;AACND,MAAAA,KAAK,EAAE,MADD;AAENE,MAAAA,QAAQ,EAAE;AAFJ;AAR+B,GAAZ;AAAA,CAAD,CAA5B,C,CAcA;AACA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA+B;AAAA;;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AACtD,MAAiBC,YAAjB,GAAwCD,KAAxC,CAAQE,OAAR;AAAA,MAA+BC,IAA/B,GAAwCH,KAAxC,CAA+BG,IAA/B;;AAEA,mBAAoB5B,SAAS,EAA7B;AAAA,MAAQ6B,OAAR,cAAQA,OAAR;;AACA,MAAMC,YAAY,GAAG7B,eAAe,CAAC4B,OAAD,CAApC;;AACA,0BAA0B3B,gBAAgB,EAA1C;AAAA,MAAQ6B,aAAR,qBAAQA,aAAR;;AAEA,MAAMC,OAAO,GAAGnB,SAAS,EAAzB;;AAEA,wBACEL,cAAc,CAACkB,YAAD,CADhB;AAAA,MAAcO,eAAd,mBAAQC,IAAR;AAAA,MAAsCC,gBAAtC,mBAA+BC,KAA/B;;AAGA,MAAMC,qBAA6B,GAAGP,YAAY,GAC9CQ,UAAU,CAACnC,WAAW,CAAC2B,YAAD,EAAe,EAAf,CAAZ,CADoC,GAE9C,CAFJ,CAZsD,CAmBtD;;AACA,MAAMS,QAAQ,GAAG7B,gBAAgB,CAACgB,YAAD,CAAjC;AAEA,MAAMc,cAAsB,GAAGD,QAAQ,GACnCD,UAAU,CAACnC,WAAW,CAACoC,QAAD,EAAW,EAAX,CAAZ,CADyB,GAEnC,CAFJ;AAIA,MAAIE,OAAJ;AACA,MAAIC,SAAS,GAAG,GAAhB;;AACA,MAAGF,cAAc,KAAIC,OAArB,EAA6B;AAE3BC,IAAAA,SAAS,GAAGF,cAAc,CAACG,OAAf,CAAuB,EAAvB,CAAZ;AACD;;AAED,MAAMC,SAAS,GAAGnC,iBAAiB,CAACiB,YAAD,CAAnC;AAEE,MAAMmB,eAAuB,GAAGD,SAAS,GACrCN,UAAU,CAACnC,WAAW,CAACyC,SAAD,EAAY,EAAZ,CAAZ,CAD2B,GAErC,CAFJ;AAGF,MAAIE,iBAAiB,GAAG,CAAxB;AACA,MAAIC,WAAW,GAAG,GAAlB;;AACA,MAAGF,eAAe,KAAIJ,OAAtB,EAA8B;AAC5BK,IAAAA,iBAAiB,GAAGD,eAApB;AACAE,IAAAA,WAAW,GAAGF,eAAe,CAACF,OAAhB,CAAwB,EAAxB,CAAd;AACD;;AASD,MAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,QAAMC,WAAW,GAAGtC,KAAK,CAACuC,UAAN,CAAiBC,MAAM,CAACC,QAAP,EAAjB,CAApB;AACA,WAAOnB,eAAe,CAACgB,WAAW,CAACG,QAAZ,EAAD,CAAtB;AACD,GAHD;;AAKA,kBACEvD,QAAQ,CAA2C,CAA3C,CADV;AAAA;AAAA,MAAOsD,MAAP;AAAA,MAAeE,SAAf;;AAGE,mBACAxD,QAAQ,CAA2C,CAA3C,CADR;AAAA;AAAA,MAAOyD,OAAP;AAAA,MAAgBC,UAAhB;;AAGF,mBACE1D,QAAQ,CAAC,KAAD,CADV;AAAA;AAAA,MAAO2D,wBAAP;AAAA,MAAiCC,2BAAjC;;AAEA,mBAA4D5D,QAAQ,CAAC,KAAD,CAApE;AAAA;AAAA,MAAO6D,sBAAP;AAAA,MAA+BC,yBAA/B;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BJ,IAAAA,wBAAwB,IAAIC,2BAA2B,CAAC,KAAD,CAAvD;AACAC,IAAAA,sBAAsB,IAAIC,yBAAyB,CAAC,KAAD,CAAnD;AACD,GAHD;;AAKA/D,EAAAA,SAAS,CAAC,YAAM;AACd,QACEmC,aAAa,CAAC8B,MAAd,CACE,UAACC,YAAD;AAAA,aACEA,YAAY,CAACC,IAAb,KAAsB,oBAAtB,IACAD,YAAY,CAACE,eAAb,KAAiC,wBAFnC;AAAA,KADF,EAIEC,MAJF,GAIW,CALb,EAME;AACA,OAACT,wBAAD,IAA6BC,2BAA2B,CAAC,IAAD,CAAxD;AACAC,MAAAA,sBAAsB,IAAIC,yBAAyB,CAAC,KAAD,CAAnD;AACD;;AAED,QACE5B,aAAa,CAAC8B,MAAd,CACE,UAACC,YAAD;AAAA,aACEA,YAAY,CAACC,IAAb,KAAsB,oBAAtB,IACAD,YAAY,CAACE,eAAb,KAAiC,cAFnC;AAAA,KADF,EAIEC,MAJF,GAIW,CALb,EAME;AACAT,MAAAA,wBAAwB,IAAIC,2BAA2B,CAAC,KAAD,CAAvD;AACA,OAACC,sBAAD,IAA2BC,yBAAyB,CAAC,IAAD,CAApD;AACD;AACF,GAtBQ,EAsBN,CAAC5B,aAAD,EAAgByB,wBAAhB,EAA0CE,sBAA1C,CAtBM,CAAT;;AAwBA,mBACA7D,QAAQ,CAA8C,GAA9C,CADR;AAAA;AAAA,MAAKqE,eAAL;AAAA,MAAsBC,UAAtB;;AAIA,MAAMC,QAAQ,GAAGjC,gBAAgB,CAACkC,MAAjB,KAA4B,QAA7C;AAEA,MAAMC,cAAc,GAAGjC,qBAAqB,KAAK,CAAjD;AACA,MAAMkC,qBAAqB,GAAGjC,UAAU,CAACa,MAAM,CAACC,QAAP,EAAD,CAAV,KAAkC,CAAhE;AACA,MAAIoB,IAAI,GAAG,IAAIC,KAAJ,EAAX;AACA,MAAIC,OAAO,GAAG,IAAID,KAAJ,EAAd;AACF,MAAIE,CAAJ;AACA,MAAIC,GAAG,GAAG,0CAAwCtB,OAAO,CAACF,QAAR,EAAxC,GAA2D,MAArE;AACA,MAAIyB,EAAE,GAAGD,GAAG,CAACxB,QAAJ,EAAT;;AAEA,MAAI0B,QAAQ,gBAAG;AAAA;AAAA;AAAA;AAAA,WAAf;;AACA,MAAGD,EAAE,KAAKpC,OAAV,EAAkB;AAClB,QAAIqC,QAAQ,gBAAG;AAAK,MAAA,GAAG,EAAEF,GAAV;AAAe,MAAA,GAAG,EAAC,kBAAnB;AAAsC,MAAA,KAAK,EAAC,KAA5C;AAAkD,MAAA,MAAM,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,aAAf;AACC;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,QAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACA,MAAGtD,YAAY,IAAI,4CAAnB,EAAgE;AAE9D,wBACE;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEM,OAAO,CAACjB,SAAxB;AAAA,iGAGE,QAAC,WAAD;AACE,UAAA,KAAK,gBAASa,IAAT,CADP;AAEE,UAAA,QAAQ,EAAEkB,iBAAiB,GAAC,CAF9B;AAGE,UAAA,QAAQ,EAAEA,iBAHZ;AAIE,UAAA,EAAE,yBAAkBlB,IAAlB,CAJJ;AAKE,UAAA,SAAS,EAAEI,OAAO,CAACV,MALrB;AAME,UAAA,KAAK,EAAE6B,MANT;AAOE,UAAA,QAAQ,EAAEE,SAPZ;AAQE,UAAA,QAAQ,EAAEe;AARZ;AAAA;AAAA;AAAA;AAAA,iBAHF,eAaE,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,SADR;AAEE,UAAA,OAAO,EAAC,WAFV;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,OAAO,EAAEpB,iBAJX;AAKE,UAAA,QAAQ,EAAEoB,QALZ;AAAA,oBAOGA,QAAQ,gBAAG,QAAC,gBAAD;AAAkB,YAAA,IAAI,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,mBAAH,GAAoC;AAP/C;AAAA;AAAA;AAAA;AAAA,iBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAyBE,QAAC,QAAD;AACE,QAAA,IAAI,EAAEZ,wBADR;AAEE,QAAA,gBAAgB,EAAE,IAFpB;AAGE,QAAA,OAAO,EAAEI,gBAHX;AAAA,+BAKE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEA,gBAAhB;AAAkC,UAAA,QAAQ,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,eAzBF,eAmCE,QAAC,QAAD;AACE,QAAA,IAAI,EAAEF,sBADR;AAEE,QAAA,gBAAgB,EAAE,IAFpB;AAGE,QAAA,OAAO,EAAEE,gBAHX;AAAA,+BAKE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEA,gBAAhB;AAAkC,UAAA,QAAQ,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,eAnCF;AAAA,oBADF;AAgDD;;AAED,MAAGlC,YAAY,IAAI,4CAAnB,EAAgE;AAEhE,wBAEE;AAAA,8BACA;AAAK,QAAA,SAAS,EAAEM,OAAO,CAACjB,SAAxB;AAAA,wBAAqC+D,QAArC,4BAEK,QAAC,YAAD;AACG,UAAA,KAAK,kBAAWlD,IAAX,CADR;AAEG,UAAA,QAAQ,EAAE,EAFb;AAGG,UAAA,GAAG,EAAE,CAHR;AAIG,UAAA,EAAE,yBAAkBA,IAAlB,CAJL;AAKG,UAAA,SAAS,EAAEI,OAAO,CAACV,MALtB;AAMG,UAAA,KAAK,EAAEgC,OANV;AAOG,UAAA,QAAQ,EAAEC,UAPb;AAQG,UAAA,QAAQ,EAAEa;AARb;AAAA;AAAA;AAAA;AAAA,iBAFL,eAYM,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,SADR;AAEE,UAAA,OAAO,EAAC,WAFV;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,OAAO,EAAEpB,iBAJX;AAKE,UAAA,QAAQ,EAAEoB,QALZ;AAAA,oBAOGA,QAAQ,gBAAG,QAAC,gBAAD;AAAkB,YAAA,IAAI,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,mBAAH,GAAoC;AAP/C;AAAA;AAAA;AAAA;AAAA,iBAZN;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,eAwBI,QAAC,QAAD;AACE,QAAA,IAAI,EAAEZ,wBADR;AAEE,QAAA,gBAAgB,EAAE,IAFpB;AAGE,QAAA,OAAO,EAAEI,gBAHX;AAAA,+BAKE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEA,gBAAhB;AAAkC,UAAA,QAAQ,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,eAxBJ,eAkCI,QAAC,QAAD;AACE,QAAA,IAAI,EAAEF,sBADR;AAEE,QAAA,gBAAgB,EAAE,IAFpB;AAGE,QAAA,OAAO,EAAEE,gBAHX;AAAA,+BAKE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEA,gBAAhB;AAAkC,UAAA,QAAQ,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,eAlCJ;AAAA,oBAFF;AAwDC;;AACD,sBAEE,qCAFF;AAIC,CAvOM;;GAAMpC,S;UAGSxB,S,EACCC,e,EACKC,gB,EAEVW,S,EAGdL,c;;;KAVSgB,S","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { SliderInput, SliderInput2 } from \"../../components\"\n\nimport CurrencyInput from 'react-currency-input-field';\nimport { useEthers,useEtherBalance, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useStakeTokens, CurrentVotePrice2, CurrentVotePrice } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\n\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n  const { address: tokenAddress, name } = token\n\n  const { account } = useEthers()\n  const tokenBalance = useEtherBalance(account)\n  const { notifications } = useNotifications()\n\n  const classes = useStyles()\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n\n\n\n  //Gets vote price and sell price\n  const curVoteP = CurrentVotePrice(tokenAddress)\n\n  const formattedVoteP: number = curVoteP\n    ? parseFloat(formatUnits(curVoteP, 18))\n    : 0\n    \n  let nothing\n  var yourPrice = \"0\"\n  if(formattedVoteP!== nothing){\n\n    yourPrice = formattedVoteP.toFixed(18)\n  }\n  \n  const curVoteP2 = CurrentVotePrice2(tokenAddress)\n\n    const formattedVoteP2: number = curVoteP2\n      ? parseFloat(formatUnits(curVoteP2, 18))\n      : 0\n  var actualPriceSlider = 0\n  var actualPrice = \"0\"\n  if(formattedVoteP2!== nothing){\n    actualPriceSlider = formattedVoteP2\n    actualPrice = formattedVoteP2.toFixed(18)\n  }\n  \n\n\n\n\n\n\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n  const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n\n    const [amount2, setAmount2] =\n    useState<number | string | Array<number | string>>(1)\n\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  var [startingauction, setAmountz] =\n  useState<string | undefined | Array<number | string>>(\"1\")\n  \n  \n  const isMining = stakeTokensState.status === \"Mining\"\n\n  const hasZeroBalance = formattedTokenBalance === 0\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var imgz = new Array();\n  var imgzNum = new Array();\nvar p \nvar sel = \"https://forgetoken.org/api/forge/NFT/\"+amount2.toString()+\".png\"\nvar ez = sel.toString()\n\nvar selected = <img></img>\nif(ez !== nothing){\nvar selected = <img src={sel} alt=\"Girl in a jacket\" width=\"300\" height=\"300\"></img>\n}\nconsole.log(\"SEL\", selected)\nconsole.log(\"WELCOME\")\nif(tokenAddress == \"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\"){\n\n  return (\n    <>\n      <div className={classes.container}> \n      \n      Bid on Auction, Claim NFT, Browse Collection, Your Collection\n        <SliderInput\n          label={`Bid ${name}`}\n          maxValue={actualPriceSlider*3}\n          minValue={actualPriceSlider}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleStakeSubmit}\n          disabled={isMining }\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Stake\"}\n        </Button>\n   \n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the staking transfer.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens staked successfully!\n        </Alert>\n      </Snackbar>\n\n    </>\n  )\n}\n\nif(tokenAddress == \"0xFab46E002BbF0b4509813474841E0716E6730136\"){\n\nreturn(\n\n  <>\n  <div className={classes.container}> {selected}\n       Claim NFT\n       <SliderInput2\n          label={`Stake ${name}`}\n          maxValue={32}\n          min={1}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount2}\n          onChange={setAmount2}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleStakeSubmit}\n          disabled={isMining }\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Claim NFT\"}\n        </Button>\n   \n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the staking transfer.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Claimed NFT successfully!\n        </Alert>\n      </Snackbar>\n\n  \n  \n  \n  \n  \n  \n  </>\n)\n\n\n}\nreturn(\n\n  <></>\n)\n}"]},"metadata":{},"sourceType":"module"}