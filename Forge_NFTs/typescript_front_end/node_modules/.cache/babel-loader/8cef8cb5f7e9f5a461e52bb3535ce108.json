{"ast":null,"code":"import _objectSpread from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"label\", \"id\", \"maxValue\", \"minValue\", \"value\", \"onChange\", \"disabled\"];\n\nvar _jsxFileName = \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/SliderInput.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Slider, Input, Typography, makeStyles } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    inputsContainer: {\n      display: \"grid\",\n      gap: theme.spacing(3),\n      gridTemplateRows: \"auto\",\n      gridTemplateColumns: \"1fr auto\"\n    },\n    slider: {}\n  };\n});\nexport var SliderInput = function SliderInput(_ref) {\n  _s();\n\n  var _ref$label = _ref.label,\n      label = _ref$label === void 0 ? \"\" : _ref$label,\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? \"input-slider\" : _ref$id,\n      maxValue = _ref.maxValue,\n      minValue = _ref.minValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var handleSliderChange = function handleSliderChange(event, newValue) {\n    onChange(newValue);\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    onChange(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  var handleBlur = function handleBlur() {\n    if (value < 0) {\n      onChange(0);\n    } else if (value > maxValue) {\n      onChange(maxValue);\n    }\n  };\n\n  var sliderStep = maxValue / 100;\n  var inputStep = maxValue / 50;\n  var classes = useStyles();\n  var sliderMarks = [{\n    value: minValue,\n    label: \"0%\"\n  }, {\n    value: maxValue,\n    label: \"100%\"\n  }]; // ... is a \"Spread\" operator\n  // standard javascript thing\n  // works on iterables\n  // expands a list\n\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, rest), {}, {\n    children: [label && /*#__PURE__*/_jsxDEV(Typography, {\n      id: id,\n      gutterBottom: true,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          value: typeof value === \"number\" ? value : 0,\n          step: sliderStep,\n          onChange: handleSliderChange,\n          \"aria-labelledby\": id,\n          max: maxValue,\n          min: minValue,\n          disabled: disabled,\n          marks: disabled ? [] : sliderMarks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          value: parseFloat(value.toString()).toFixed(18),\n          margin: \"dense\",\n          onChange: handleInputChange,\n          onBlur: handleBlur,\n          disabled: disabled,\n          inputProps: {\n            step: inputStep,\n            min: 0,\n            max: maxValue,\n            type: \"number\",\n            \"aria-labelledby\": id\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, _this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SliderInput, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = SliderInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SliderInput\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/SliderInput.tsx"],"names":["React","Slider","Input","Typography","makeStyles","useStyles","theme","inputsContainer","display","gap","spacing","gridTemplateRows","gridTemplateColumns","slider","SliderInput","label","id","maxValue","minValue","value","onChange","disabled","rest","handleSliderChange","event","newValue","handleInputChange","target","Number","handleBlur","sliderStep","inputStep","classes","sliderMarks","parseFloat","toString","toFixed","step","min","max","type"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Slider, Input, Typography, makeStyles } from \"@material-ui/core\";\n\ninterface SliderInputProps {\n  label?: string;\n  id?: string;\n  maxValue: number;\n  minValue: number;\n  value: number | string | (string | number)[];\n  onChange: (newValue: number | string | Array<number | string>) => void;\n  disabled?: boolean;\n  [x: string]: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  inputsContainer: {\n    display: \"grid\",\n    gap: theme.spacing(3),\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: \"1fr auto\",\n  },\n  slider: {},\n}));\n\nexport const SliderInput = ({\n  label = \"\",\n  id = \"input-slider\",\n  maxValue,\n  minValue,\n  value,\n  onChange,\n  disabled = false,\n  ...rest\n}: SliderInputProps) => {\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    onChange(newValue);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      onChange(0);\n    } else if (value > maxValue) {\n      onChange(maxValue);\n    }\n  };\n\n  const sliderStep = maxValue / 100;\n  const inputStep = maxValue / 50;\n\n  const classes = useStyles();\n\n  const sliderMarks = [\n    {\n      value: minValue,\n      label: \"0%\",\n    },\n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n\n  // ... is a \"Spread\" operator\n  // standard javascript thing\n  // works on iterables\n  // expands a list\n  return (\n    <div {...rest}>\n      {label && (\n        <Typography id={id} gutterBottom>\n          {label}\n        </Typography>\n      )}\n      <div className={classes.inputsContainer}>\n        <div>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            step={sliderStep}\n            onChange={handleSliderChange}\n            aria-labelledby={id}\n            max={maxValue}\n            min={minValue}\n            disabled={disabled}\n            marks={disabled ? [] : sliderMarks}\n          />\n        </div>\n        <div>\n          <Input\n            value={parseFloat(value.toString()).toFixed(18)}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            disabled={disabled}\n            inputProps={{\n              step: inputStep,\n              min: 0,\n              max: maxValue,\n              type: \"number\",\n              \"aria-labelledby\": id,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}