{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react'; // modified from https://usehooks.com/useDebounce/\n\nexport function useDebounce(value, delay) {\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      debouncedValue = _useState2[0],\n      setDebouncedValue = _useState2[1];\n\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["../../../../src/hooks/useDebounce.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC,C,CAEA;;AACA,OAAM,SAAU,WAAV,CAAyB,KAAzB,EAAmC,KAAnC,EAAgD;AACpD,kBAA4C,QAAQ,CAAI,KAAJ,CAApD;AAAA;AAAA,MAAO,cAAP;AAAA,MAAuB,iBAAvB;;AAEA,EAAA,SAAS,CAAC,YAAK;AACb;AACA,QAAM,OAAO,GAAG,UAAU,CAAC,YAAK;AAC9B,MAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,KAFyB,EAEvB,KAFuB,CAA1B,CAFa,CAMb;AACA;AACA;;AACA,WAAO,YAAK;AACV,MAAA,YAAY,CAAC,OAAD,CAAZ;AACD,KAFD;AAGD,GAZQ,EAYN,CAAC,KAAD,EAAQ,KAAR,CAZM,CAAT;AAcA,SAAO,cAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\n// modified from https://usehooks.com/useDebounce/\nexport function useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        // Update debounced value after delay\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n        // Cancel the timeout if value changes (also on delay change or unmount)\n        // This is how we prevent debounced value from updating if value is changed ...\n        // .. within the delay period. Timeout gets cleared and restarted.\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n    return debouncedValue;\n}\n//# sourceMappingURL=useDebounce.js.map"]},"metadata":{},"sourceType":"module"}