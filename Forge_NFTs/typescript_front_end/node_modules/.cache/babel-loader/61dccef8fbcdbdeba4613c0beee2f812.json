{"ast":null,"code":"import _slicedToArray from\"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{useContractFunction,useEthers}from\"@usedapp/core\";import{utils,constants}from\"ethers\";import{Contract}from\"@ethersproject/contracts\";import LPFarm from\"../chain-info/DaughterContract.json\";import brownieConfig from\"../brownie-config-json.json\";import helperConfig from\"../helper-config.json\";/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */export var RedeemBuyNFTNoApprove=function RedeemBuyNFTNoApprove(tokenAddress){var _useEthers=useEthers(),chainId=_useEthers.chainId;var networkName=chainId?helperConfig[chainId]:\"ganache\";var NFTBOOK=chainId?brownieConfig[\"networks\"][networkName][\"NFTBOOK\"]:constants.AddressZero;//MEME ACTUAL USING LP Contracts  \nvar rewardABI=LPFarm.abi;var LPFarmInterface=new utils.Interface(rewardABI);var LPRewardsContract=new Contract(NFTBOOK,LPFarmInterface);var _useContractFunction=useContractFunction(LPRewardsContract,\"buyForERC\",{transactionName:\"Unstake tokens\"}),approveErc20Send=_useContractFunction.send,unstakeTokensState22v3=_useContractFunction.state;var send=function send(){return approveErc20Send();};var _useState=useState(unstakeTokensState22v3),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];useEffect(function(){setState(unstakeTokensState22v3);},[unstakeTokensState22v3]);return{send:send,state:state};};","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/redeemBuyNFTNoApprove.ts"],"names":["useEffect","useState","useContractFunction","useEthers","utils","constants","Contract","LPFarm","brownieConfig","helperConfig","RedeemBuyNFTNoApprove","tokenAddress","chainId","networkName","NFTBOOK","AddressZero","rewardABI","abi","LPFarmInterface","Interface","LPRewardsContract","transactionName","approveErc20Send","send","unstakeTokensState22v3","state","setState"],"mappings":"uMAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,mBAAT,CAA8BC,SAA9B,KAA+C,eAA/C,CACA,OAASC,KAAT,CAAgBC,SAAhB,KAAiC,QAAjC,CACA,OAASC,QAAT,KAAyB,0BAAzB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qCAAnB,CAEA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CAEA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,YAAD,CAA0B,CAC7D,eAAoBR,SAAS,EAA7B,CAAQS,OAAR,YAAQA,OAAR,CAEA,GAAMC,CAAAA,WAAW,CAAGD,OAAO,CAAGH,YAAY,CAACG,OAAD,CAAf,CAA2B,SAAtD,CACA,GAAME,CAAAA,OAAO,CAAGF,OAAO,CAAGJ,aAAa,CAAC,UAAD,CAAb,CAA0BK,WAA1B,EAAuC,SAAvC,CAAH,CAAuDR,SAAS,CAACU,WAAxF,CAEA;AACA,GAAMC,CAAAA,SAAS,CAAGT,MAAM,CAACU,GAAzB,CACA,GAAMC,CAAAA,eAAe,CAAG,GAAId,CAAAA,KAAK,CAACe,SAAV,CAAoBH,SAApB,CAAxB,CACA,GAAMI,CAAAA,iBAAiB,CAAG,GAAId,CAAAA,QAAJ,CACxBQ,OADwB,CACfI,eADe,CAA1B,CAKF,yBACAhB,mBAAmB,CAACkB,iBAAD,CAAoB,WAApB,CAAiC,CAClDC,eAAe,CAAE,gBADiC,CAAjC,CADnB,CAAcC,gBAAd,sBAAQC,IAAR,CAAuCC,sBAAvC,sBAAgCC,KAAhC,CAKA,GAAMF,CAAAA,IAAI,CAAI,QAARA,CAAAA,IAAQ,EAAM,CAClB,MAAOD,CAAAA,gBAAgB,EAAvB,CACD,CAFD,CAGA,cAA0BrB,QAAQ,CAACuB,sBAAD,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eAEA1B,SAAS,CAAC,UAAM,CACZ0B,QAAQ,CAACF,sBAAD,CAAR,CAEH,CAHQ,CAGN,CAACA,sBAAD,CAHM,CAAT,CAIA,MAAO,CAAED,IAAI,CAAJA,IAAF,CAAQE,KAAK,CAALA,KAAR,CAAP,CACC,CA7BM","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/DaughterContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const RedeemBuyNFTNoApprove = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    NFTBOOK, LPFarmInterface\n  )  \n\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"buyForERC\", {\n  transactionName: \"Unstake tokens\",\n})\n\nconst send =  () => {\n  return approveErc20Send()\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}"]},"metadata":{},"sourceType":"module"}