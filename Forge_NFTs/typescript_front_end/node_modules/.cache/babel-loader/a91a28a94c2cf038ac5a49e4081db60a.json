{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebouncePair, useEthers } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { ChainStateContext } from './context';\nimport { chainStateReducer } from './chainStateReducer';\nimport { callsReducer } from './callsReducer';\nimport { multicall } from './multicall';\nimport { notifyDevtools } from '../devtools';\nimport { useDevtoolsReporting } from './useDevtoolsReporting';\nexport function ChainStateProvider(_ref) {\n  var children = _ref.children,\n      multicallAddresses = _ref.multicallAddresses;\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library,\n      chainId = _useEthers.chainId;\n\n  var blockNumber = useBlockNumber();\n\n  var _useReducer = useReducer(callsReducer, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      calls = _useReducer2[0],\n      dispatchCalls = _useReducer2[1];\n\n  var _useReducer3 = useReducer(chainStateReducer, {}),\n      _useReducer4 = _slicedToArray(_useReducer3, 2),\n      state = _useReducer4[0],\n      dispatchState = _useReducer4[1];\n\n  var _useDebouncePair = useDebouncePair(calls, chainId, 50),\n      _useDebouncePair2 = _slicedToArray(_useDebouncePair, 2),\n      debouncedCalls = _useDebouncePair2[0],\n      debouncedId = _useDebouncePair2[1];\n\n  var uniqueCalls = debouncedId === chainId ? getUnique(debouncedCalls) : []; // used for deep equality in hook dependencies\n\n  var uniqueCallsJSON = JSON.stringify(uniqueCalls);\n  var multicallAddress = chainId !== undefined ? multicallAddresses[chainId] : undefined;\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses);\n  useEffect(function () {\n    if (library && blockNumber !== undefined && chainId !== undefined) {\n      if (!multicallAddress) {\n        console.error(\"Missing multicall address for chain id \".concat(chainId));\n        return;\n      }\n\n      var start = Date.now();\n      multicall(library, multicallAddress, blockNumber, uniqueCalls).then(function (state) {\n        dispatchState({\n          type: 'FETCH_SUCCESS',\n          blockNumber: blockNumber,\n          chainId: chainId,\n          state: state\n        });\n        notifyDevtools({\n          type: 'MULTICALL_SUCCESS',\n          duration: Date.now() - start,\n          chainId: chainId,\n          blockNumber: blockNumber,\n          multicallAddress: multicallAddress,\n          state: state\n        });\n      }).catch(function (error) {\n        console.error(error);\n        dispatchState({\n          type: 'FETCH_ERROR',\n          blockNumber: blockNumber,\n          chainId: chainId,\n          error: error\n        });\n        notifyDevtools({\n          type: 'MULTICALL_ERROR',\n          duration: Date.now() - start,\n          chainId: chainId,\n          blockNumber: blockNumber,\n          multicallAddress: multicallAddress,\n          calls: uniqueCalls,\n          error: error\n        });\n      });\n    }\n  }, [library, blockNumber, chainId, multicallAddress, uniqueCallsJSON]);\n  var value = chainId !== undefined ? state[chainId] : undefined;\n  var provided = {\n    value: value,\n    multicallAddress: multicallAddress,\n    dispatchCalls: dispatchCalls\n  };\n  return _jsx(ChainStateContext.Provider, {\n    value: provided,\n    children: children\n  }, void 0);\n}\n\nfunction getUnique(requests) {\n  var unique = [];\n\n  var _iterator = _createForOfIteratorHelper(requests),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var request = _step.value;\n\n      if (!unique.find(function (x) {\n        return x.address === request.address && x.data === request.data;\n      })) {\n        unique.push(request);\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return unique;\n}","map":{"version":3,"sources":["../../../../../src/providers/chainState/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebouncePair, useEthers } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { ChainStateContext } from './context';\nimport { chainStateReducer } from './chainStateReducer';\nimport { callsReducer } from './callsReducer';\nimport { multicall } from './multicall';\nimport { notifyDevtools } from '../devtools';\nimport { useDevtoolsReporting } from './useDevtoolsReporting';\nexport function ChainStateProvider({ children, multicallAddresses }) {\n    const { library, chainId } = useEthers();\n    const blockNumber = useBlockNumber();\n    const [calls, dispatchCalls] = useReducer(callsReducer, []);\n    const [state, dispatchState] = useReducer(chainStateReducer, {});\n    const [debouncedCalls, debouncedId] = useDebouncePair(calls, chainId, 50);\n    const uniqueCalls = debouncedId === chainId ? getUnique(debouncedCalls) : [];\n    // used for deep equality in hook dependencies\n    const uniqueCallsJSON = JSON.stringify(uniqueCalls);\n    const multicallAddress = chainId !== undefined ? multicallAddresses[chainId] : undefined;\n    useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses);\n    useEffect(() => {\n        if (library && blockNumber !== undefined && chainId !== undefined) {\n            if (!multicallAddress) {\n                console.error(`Missing multicall address for chain id ${chainId}`);\n                return;\n            }\n            const start = Date.now();\n            multicall(library, multicallAddress, blockNumber, uniqueCalls)\n                .then((state) => {\n                dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state });\n                notifyDevtools({\n                    type: 'MULTICALL_SUCCESS',\n                    duration: Date.now() - start,\n                    chainId,\n                    blockNumber,\n                    multicallAddress,\n                    state,\n                });\n            })\n                .catch((error) => {\n                console.error(error);\n                dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error });\n                notifyDevtools({\n                    type: 'MULTICALL_ERROR',\n                    duration: Date.now() - start,\n                    chainId,\n                    blockNumber,\n                    multicallAddress,\n                    calls: uniqueCalls,\n                    error,\n                });\n            });\n        }\n    }, [library, blockNumber, chainId, multicallAddress, uniqueCallsJSON]);\n    const value = chainId !== undefined ? state[chainId] : undefined;\n    const provided = { value, multicallAddress, dispatchCalls };\n    return _jsx(ChainStateContext.Provider, { value: provided, children: children }, void 0);\n}\nfunction getUnique(requests) {\n    const unique = [];\n    for (const request of requests) {\n        if (!unique.find((x) => x.address === request.address && x.data === request.data)) {\n            unique.push(request);\n        }\n    }\n    return unique;\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}