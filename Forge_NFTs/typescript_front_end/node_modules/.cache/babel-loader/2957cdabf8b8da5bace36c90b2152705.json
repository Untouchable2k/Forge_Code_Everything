{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\nexport function useLookupAddress() {\n  var _useEthers = useEthers(),\n      account = _useEthers.account,\n      library = _useEthers.library;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      ens = _useState2[0],\n      setEns = _useState2[1];\n\n  useEffect(function () {\n    var mounted = true;\n\n    if (account && library) {\n      library === null || library === void 0 ? void 0 : library.lookupAddress(account).then(function (name) {\n        if (mounted) {\n          setEns(name);\n        }\n      }).catch(function () {\n        return setEns(null);\n      });\n    }\n\n    return function () {\n      mounted = false;\n    };\n  }, [account, library]);\n  return ens;\n}","map":{"version":3,"sources":["../../../../src/hooks/useLookupAddress.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,SAAT,QAA0B,aAA1B;AAEA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,mBAA6B,SAAS,EAAtC;AAAA,MAAQ,OAAR,cAAQ,OAAR;AAAA,MAAiB,OAAjB,cAAiB,OAAjB;;AACA,kBAAsB,QAAQ,EAA9B;AAAA;AAAA,MAAO,GAAP;AAAA,MAAY,MAAZ;;AAEA,EAAA,SAAS,CAAC,YAAK;AACb,QAAI,OAAO,GAAG,IAAd;;AAEA,QAAI,OAAO,IAAI,OAAf,EAAwB;AACtB,MAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CACH,aADJ,CACkB,OADlB,EAEG,IAFH,CAEQ,UAAC,IAAD,EAAS;AACb,YAAI,OAAJ,EAAa;AACX,UAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OANH,EAOG,KAPH,CAOS;AAAA,eAAM,MAAM,CAAC,IAAD,CAAZ;AAAA,OAPT,CAAA;AAQD;;AAED,WAAO,YAAK;AACV,MAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAAC,OAAD,EAAU,OAAV,CAjBM,CAAT;AAmBA,SAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\nexport function useLookupAddress() {\n    const { account, library } = useEthers();\n    const [ens, setEns] = useState();\n    useEffect(() => {\n        let mounted = true;\n        if (account && library) {\n            library === null || library === void 0 ? void 0 : library.lookupAddress(account).then((name) => {\n                if (mounted) {\n                    setEns(name);\n                }\n            }).catch(() => setEns(null));\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [account, library]);\n    return ens;\n}\n//# sourceMappingURL=useLookupAddress.js.map"]},"metadata":{},"sourceType":"module"}