{"ast":null,"code":"import React from\"react\";import{useEtherBalance,useEthers,useTokenBalance}from\"@usedapp/core\";import{formatUnits}from\"@ethersproject/units\";import{BalanceMsg}from\"../../components\";import{jsx as _jsx}from\"react/jsx-runtime\";export var WalletBalance=function WalletBalance(_ref){var token=_ref.token;var image=token.image,address=token.address,name=token.name;var _useEthers=useEthers(),account=_useEthers.account;var tokenBalance=useTokenBalance(address,account);var formattedTokenBalance=tokenBalance?parseFloat(formatUnits(tokenBalance,18)):0;var tokenBalance2=useEtherBalance(account);if(address==\"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\"){formattedTokenBalance=tokenBalance2?parseFloat(formatUnits(tokenBalance2,18)):0;}else{formattedTokenBalance=tokenBalance?parseFloat(formatUnits(tokenBalance,18)):0;}return/*#__PURE__*/_jsx(BalanceMsg,{label:\"Your un-staked \".concat(name,\" balance\"),amount:formattedTokenBalance,tokenImgSrc:image});};","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/WalletBalance.tsx"],"names":["React","useEtherBalance","useEthers","useTokenBalance","formatUnits","BalanceMsg","WalletBalance","token","image","address","name","account","tokenBalance","formattedTokenBalance","parseFloat","tokenBalance2"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,eAAT,CAA0BC,SAA1B,CAAqCC,eAArC,KAA4D,eAA5D,CACA,OAASC,WAAT,KAA4B,sBAA5B,CACA,OAASC,UAAT,KAA2B,kBAA3B,C,2CAMA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAmC,IAAhCC,CAAAA,KAAgC,MAAhCA,KAAgC,CAC9D,GAAQC,CAAAA,KAAR,CAAiCD,KAAjC,CAAQC,KAAR,CAAeC,OAAf,CAAiCF,KAAjC,CAAeE,OAAf,CAAwBC,IAAxB,CAAiCH,KAAjC,CAAwBG,IAAxB,CAEA,eAAoBR,SAAS,EAA7B,CAAQS,OAAR,YAAQA,OAAR,CACA,GAAMC,CAAAA,YAAY,CAAGT,eAAe,CAACM,OAAD,CAAUE,OAAV,CAApC,CAEA,GAAIE,CAAAA,qBAA6B,CAAGD,YAAY,CAC9CE,UAAU,CAACV,WAAW,CAACQ,YAAD,CAAe,EAAf,CAAZ,CADoC,CAE9C,CAFF,CAID,GAAMG,CAAAA,aAAa,CAAGd,eAAe,CAACU,OAAD,CAArC,CACC,GAAGF,OAAO,EAAG,4CAAb,CAA0D,CAEzDI,qBAAqB,CAAGE,aAAa,CAClCD,UAAU,CAACV,WAAW,CAACW,aAAD,CAAgB,EAAhB,CAAZ,CADwB,CAElC,CAFH,CAGA,CALD,IAKK,CAEHF,qBAAqB,CAAGD,YAAY,CAClCE,UAAU,CAACV,WAAW,CAACQ,YAAD,CAAe,EAAf,CAAZ,CADwB,CAElC,CAFF,CAGD,CACD,mBACE,KAAC,UAAD,EACE,KAAK,0BAAoBF,IAApB,YADP,CAEE,MAAM,CAAEG,qBAFV,CAGE,WAAW,CAAEL,KAHf,EADF,CAOD,CA7BM","sourcesContent":["import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEtherBalance, useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n  const { image, address, name } = token;\n\n  const { account } = useEthers();\n  const tokenBalance = useTokenBalance(address, account);\n\n  var formattedTokenBalance: number = tokenBalance\n  ? parseFloat(formatUnits(tokenBalance, 18))\n  : 0;\n\n const tokenBalance2 = useEtherBalance(account);\n  if(address ==\"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\"){\n\n   formattedTokenBalance = tokenBalance2\n    ? parseFloat(formatUnits(tokenBalance2, 18))\n    : 0;\n  }else{\n\n    formattedTokenBalance = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n  }\n  return (\n    <BalanceMsg\n      label={`Your un-staked ${name} balance`}\n      amount={formattedTokenBalance}\n      tokenImgSrc={image}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}