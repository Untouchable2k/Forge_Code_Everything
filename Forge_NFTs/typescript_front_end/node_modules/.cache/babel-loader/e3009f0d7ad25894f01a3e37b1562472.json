{"ast":null,"code":"import _slicedToArray from\"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useContractCall,useEthers}from\"@usedapp/core\";import TokenFarm from\"../chain-info/ForgeTokenNFT.json\";import{utils,constants}from\"ethers\";import brownieConfig from\"../brownie-config-json.json\";import helperConfig from\"../helper-config.json\";/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */export var SoldNFTs=function SoldNFTs(aucNum){var _useContractCall;var _useEthers=useEthers(),account=_useEthers.account,chainId=_useEthers.chainId;var abi=TokenFarm.abi;var networkName=chainId?helperConfig[chainId]:\"ganache\";var NFTAddy=chainId?brownieConfig[\"networks\"][networkName][\"NFT\"]:constants.AddressZero;var NFTAddyContract=chainId?brownieConfig[\"networks\"][networkName][\"NFTBOOK\"]:constants.AddressZero;var tokenFarmInterface=new utils.Interface(abi);var _ref=(_useContractCall=useContractCall({abi:tokenFarmInterface,address:NFTAddy,method:\"ownerOf\",args:[aucNum]}))!==null&&_useContractCall!==void 0?_useContractCall:[],_ref2=_slicedToArray(_ref,1),stakingBalance2=_ref2[0];if(stakingBalance2==NFTAddyContract){return true;}return false;};","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/soldNFTs.ts"],"names":["useContractCall","useEthers","TokenFarm","utils","constants","brownieConfig","helperConfig","SoldNFTs","aucNum","account","chainId","abi","networkName","NFTAddy","AddressZero","NFTAddyContract","tokenFarmInterface","Interface","address","method","args","stakingBalance2"],"mappings":"uMAAA,OAASA,eAAT,CAA0BC,SAA1B,KAA2C,eAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,kCAAtB,CACA,OAASC,KAAT,CAA2BC,SAA3B,KAA4C,QAA5C,CAGA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CAEA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,MAAD,CAAyC,sBAC/D,eAA6BP,SAAS,EAAtC,CAAQQ,OAAR,YAAQA,OAAR,CAAiBC,OAAjB,YAAiBA,OAAjB,CAEA,GAAQC,CAAAA,GAAR,CAAgBT,SAAhB,CAAQS,GAAR,CACA,GAAMC,CAAAA,WAAW,CAAGF,OAAO,CAAGJ,YAAY,CAACI,OAAD,CAAf,CAA2B,SAAtD,CACA,GAAMG,CAAAA,OAAO,CAAGH,OAAO,CAAGL,aAAa,CAAC,UAAD,CAAb,CAA0BO,WAA1B,EAAuC,KAAvC,CAAH,CAAmDR,SAAS,CAACU,WAApF,CACA,GAAMC,CAAAA,eAAe,CAAGL,OAAO,CAAGL,aAAa,CAAC,UAAD,CAAb,CAA0BO,WAA1B,EAAuC,SAAvC,CAAH,CAAuDR,SAAS,CAACU,WAAhG,CAEA,GAAME,CAAAA,kBAAkB,CAAG,GAAIb,CAAAA,KAAK,CAACc,SAAV,CAAoBN,GAApB,CAA3B,CAEA,2BACEX,eAAe,CAAC,CACdW,GAAG,CAAEK,kBADS,CAEdE,OAAO,CAAEL,OAFK,CAGdM,MAAM,CAAE,SAHM,CAIdC,IAAI,CAAE,CAACZ,MAAD,CAJQ,CAAD,CADjB,qDAMQ,EANR,8BAAOa,eAAP,UAQF,GAAGA,eAAe,EAAIN,eAAtB,CAAsC,CACpC,MAAO,KAAP,CACD,CAEC,MAAO,MAAP,CACD,CAvBM","sourcesContent":["import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/ForgeTokenNFT.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const SoldNFTs = (aucNum: string): boolean | undefined => {\n  const { account, chainId } = useEthers()\n\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFT\"] : constants.AddressZero\n  const NFTAddyContract = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance2] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"ownerOf\",\n      args: [aucNum],\n    }) ?? []\n\nif(stakingBalance2 == NFTAddyContract){\n  return true;\n}\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}