{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, CircularProgress, Snackbar, makeStyles } from \"@material-ui/core\";\nimport { useUnstakeTokens, CurrentVotePrice, CurrentVotePrice2, VotePrice, useStakingBalance } from \"../../hooks\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useNotifications, useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { SliderInput, BalanceMsg } from \"../../components\";\nimport { utils } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    contentContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      gap: theme.spacing(2)\n    }\n  };\n});\nexport var Unstake = function Unstake(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var image = token.image,\n      tokenAddress = token.address,\n      name = token.name;\n\n  var _useEthers = useEthers(),\n      account = _useEthers.account;\n\n  var _useNotifications = useNotifications(),\n      notifications = _useNotifications.notifications;\n\n  var balance = useStakingBalance(tokenAddress); //Gets vote price and sell price\n\n  var curVoteP = CurrentVotePrice(tokenAddress);\n  var formattedVoteP = curVoteP ? parseFloat(formatUnits(curVoteP, 18)) : 0;\n  var nothing;\n  var yourPrice = \"0\";\n\n  if (formattedVoteP !== nothing) {\n    yourPrice = formattedVoteP.toFixed(18);\n  }\n\n  var curVoteP2 = CurrentVotePrice2(tokenAddress);\n  var formattedVoteP2 = curVoteP2 ? parseFloat(formatUnits(curVoteP2, 18)) : 0;\n  var actualPriceSlider = 0;\n  var actualPrice = \"0\";\n\n  if (formattedVoteP2 !== nothing) {\n    actualPriceSlider = formattedVoteP2;\n    actualPrice = formattedVoteP2.toFixed(18);\n  }\n\n  var balance2 = useTokenBalance(\"0xE5DaFb73374553c4cE1a196E928EeB9722149154\", account);\n  var formattedBalance = balance2 ? parseFloat(formatUnits(balance2, 0)) : 0;\n\n  var _useState = useState(200),\n      _useState2 = _slicedToArray(_useState, 2),\n      amount = _useState2[0],\n      setAmount = _useState2[1];\n\n  var _useUnstakeTokens = useUnstakeTokens(),\n      unstakeTokensSend = _useUnstakeTokens.send,\n      unstakeTokensState = _useUnstakeTokens.state;\n\n  var handleUnstakeSubmit = function handleUnstakeSubmit() {\n    return unstakeTokensSend(tokenAddress);\n  };\n\n  var _VotePrice = VotePrice(tokenAddress),\n      doVotePrice = _VotePrice.send,\n      unstakeTokensState2 = _VotePrice.state;\n\n  var handleVotePrice = function handleVotePrice() {\n    console.log(\"TESTZ\", Number(amount).toFixed(18));\n    var amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString());\n    return doVotePrice(amountAsWei.toString());\n  };\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showUnstakeSuccess = _useState4[0],\n      setShowUnstakeSuccess = _useState4[1];\n\n  var handleCloseSnack = function handleCloseSnack() {\n    showUnstakeSuccess && setShowUnstakeSuccess(false);\n  };\n\n  useEffect(function () {\n    if (notifications.filter(function (notification) {\n      return notification.type === \"transactionSucceed\" && notification.transactionName === \"Unstake tokens\";\n    }).length > 0) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true);\n    }\n  }, [notifications, showUnstakeSuccess]);\n  var isMining = unstakeTokensState.status === \"Mining\";\n  var classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.contentContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(BalanceMsg, {\n          label: \"Your shares of Forge NFT\",\n          amount: formattedBalance,\n          tokenImgSrc: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, _this), \"Your current Voted Price to sell: \", yourPrice, \" Polygon\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 61\n        }, _this), \"Everyone total overall sell price: \", actualPrice, \" Polygon\", /*#__PURE__*/_jsxDEV(SliderInput, {\n          label: \"Decide on price to sell NFTs for\",\n          minValue: actualPriceSlider * 10,\n          maxValue: actualPriceSlider / 10,\n          id: \"slider-input-\".concat(name),\n          className: \"6\",\n          value: amount,\n          onChange: setAmount,\n          disabled: isMining\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          size: \"large\",\n          onClick: handleVotePrice,\n          disabled: isMining,\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 23\n          }, _this) : \"Vote on Price to sell NFT for\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showUnstakeSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens unstaked successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Unstake, \"BQMAa6aipNeuBxtP2bH1EytwD3c=\", false, function () {\n  return [useEthers, useNotifications, useStakingBalance, useTokenBalance, useUnstakeTokens, useStyles];\n});\n\n_c = Unstake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Unstake\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx"],"names":["React","useState","useEffect","Button","CircularProgress","Snackbar","makeStyles","useUnstakeTokens","CurrentVotePrice","CurrentVotePrice2","VotePrice","useStakingBalance","Alert","useNotifications","useEthers","useTokenBalance","formatUnits","SliderInput","BalanceMsg","utils","useStyles","theme","contentContainer","display","flexDirection","alignItems","justifyContent","gap","spacing","Unstake","token","image","tokenAddress","address","name","account","notifications","balance","curVoteP","formattedVoteP","parseFloat","nothing","yourPrice","toFixed","curVoteP2","formattedVoteP2","actualPriceSlider","actualPrice","balance2","formattedBalance","amount","setAmount","unstakeTokensSend","send","unstakeTokensState","state","handleUnstakeSubmit","doVotePrice","unstakeTokensState2","handleVotePrice","console","log","Number","amountAsWei","parseEther","toString","showUnstakeSuccess","setShowUnstakeSuccess","handleCloseSnack","filter","notification","type","transactionName","length","isMining","status","classes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, CurrentVotePrice, CurrentVotePrice2, VotePrice, useStakingBalance } from \"../../hooks\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications, useEthers, useTokenBalance  } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {SliderInput, SliderInput2, BalanceMsg } from \"../../components\"\n\nimport { utils } from \"ethers\"\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n  const { image, address: tokenAddress, name } = token\n\n  const { account } = useEthers();\n  const { notifications } = useNotifications()\n\n  const balance = useStakingBalance(tokenAddress)\n\n  //Gets vote price and sell price\n  const curVoteP = CurrentVotePrice(tokenAddress)\n\n  const formattedVoteP: number = curVoteP\n    ? parseFloat(formatUnits(curVoteP, 18))\n    : 0\n    \n  let nothing\n  var yourPrice = \"0\"\n  if(formattedVoteP!== nothing){\n\n    yourPrice = formattedVoteP.toFixed(18)\n  }\n  \n  const curVoteP2 = CurrentVotePrice2(tokenAddress)\n\n    const formattedVoteP2: number = curVoteP2\n      ? parseFloat(formatUnits(curVoteP2, 18))\n      : 0\n  var actualPriceSlider = 0\n  var actualPrice = \"0\"\n  if(formattedVoteP2!== nothing){\n    actualPriceSlider = formattedVoteP2\n    actualPrice = formattedVoteP2.toFixed(18)\n  }\n  \n  const balance2 = useTokenBalance(\"0xE5DaFb73374553c4cE1a196E928EeB9722149154\", account)\n\n  const formattedBalance: number = balance2\n    ? parseFloat(formatUnits(balance2, 0))\n    : 0\n\n    const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(200)\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend(tokenAddress)\n  }\n\n\n\n  const { send: doVotePrice, state: unstakeTokensState2 } =\n    VotePrice(tokenAddress)\n\n  const handleVotePrice = () => {\n    console.log(\"TESTZ\", Number(amount).toFixed(18))\n    const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n    return doVotePrice(amountAsWei.toString())\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n  const isMining = unstakeTokensState.status === \"Mining\"\n\n\n  const classes = useStyles()\n\n  return (\n    <>\n      <div className={classes.contentContainer}>\n\n      <div className={\"content\"}>\n\n      \n        <BalanceMsg\n          label={`Your shares of Forge NFT`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        /><br></br>\n       Your current Voted Price to sell: {yourPrice} Polygon<br></br>\n       Everyone total overall sell price: {actualPrice} Polygon\n        <SliderInput\n          label={`Decide on price to sell NFTs for`}\n          minValue={actualPriceSlider*10}\n          maxValue={actualPriceSlider/10}\n          id={`slider-input-${name}`}\n            className={\"6\"}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleVotePrice}\n          disabled={isMining}\n        >\n          {isMining ? <CircularProgress size={26} /> : `Vote on Price to sell NFT for`}\n        </Button>\n      </div>\n      </div>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens unstaked successfully!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}