{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/TokenFarm.json\";\nimport { utils, constants } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport var useUnstakeTokens = function useUnstakeTokens() {\n  _s();\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId;\n\n  var abi = TokenFarm.abi;\n  var networkName = chainId ? helperConfig[chainId] : \"ganache\";\n  var tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero;\n  var tokenFarmInterface = new utils.Interface(abi);\n  var tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface);\n  return useContractFunction(tokenFarmContract, \"unstakeTokens\", {\n    transactionName: \"Unstake tokens\"\n  });\n};\n\n_s(useUnstakeTokens, \"Afeays331IA/8U9J41e26m49Kb8=\", false, function () {\n  return [useEthers, useContractFunction];\n});","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useUnstakeTokens.ts"],"names":["useContractFunction","useEthers","TokenFarm","utils","constants","Contract","useUnstakeTokens","chainId","abi","networkName","helperConfig","tokenFarmContractAddress","brownieConfig","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","transactionName"],"mappings":";;AAAA,SAASA,mBAAT,EAA8BC,SAA9B,QAA+C,eAA/C;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,QAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;;AAGA;AACA;AACA;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AACpC,mBAAoBL,SAAS,EAA7B;AAAA,MAAQM,OAAR,cAAQA,OAAR;;AAEA,MAAQC,GAAR,GAAgBN,SAAhB,CAAQM,GAAR;AACA,MAAMC,WAAW,GAAGF,OAAO,GAAGG,YAAY,CAACH,OAAD,CAAf,GAA2B,SAAtD;AACA,MAAMI,wBAAwB,GAAGJ,OAAO,GAAGK,aAAa,CAAC,UAAD,CAAb,CAA0BH,WAA1B,EAAuC,WAAvC,CAAH,GAAyDL,SAAS,CAACS,WAA3G;AAEA,MAAMC,kBAAkB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBP,GAApB,CAA3B;AAEA,MAAMQ,iBAAiB,GAAG,IAAIX,QAAJ,CACxBM,wBADwB,EAExBG,kBAFwB,CAA1B;AAKA,SAAOd,mBAAmB,CAACgB,iBAAD,EAAoB,eAApB,EAAqC;AAC7DC,IAAAA,eAAe,EAAE;AAD4C,GAArC,CAA1B;AAGD,CAjBM;;GAAMX,gB;UACSL,S,EAabD,mB","sourcesContent":["import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens = () => {\n  const { chainId } = useEthers()\n\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    tokenFarmContractAddress,\n    tokenFarmInterface\n  )\n\n  return useContractFunction(tokenFarmContract, \"unstakeTokens\", {\n    transactionName: \"Unstake tokens\",\n  })\n}\n"]},"metadata":{},"sourceType":"module"}