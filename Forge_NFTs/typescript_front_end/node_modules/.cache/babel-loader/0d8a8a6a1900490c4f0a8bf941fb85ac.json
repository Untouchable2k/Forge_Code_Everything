{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/Main.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\";\nimport eth from \"../eth.png\";\nimport dai from \"../dai.png\";\nimport forge from \"../forgetoken.png\";\nimport { YourWallet } from \"./yourWallet\";\nimport { TokenFarmContract } from \"./tokenFarmContract\";\nimport { useEthers } from \"@usedapp/core\";\nimport { constants } from \"ethers\";\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport brownieConfig from \"../brownie-config-json.json\";\nimport helperConfig from \"../helper-config.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nvar useStyles = makeStyles(function (theme) {\n  return {\n    title: {\n      color: theme.palette.common.white,\n      textAlign: \"center\",\n      padding: theme.spacing(4)\n    }\n  };\n});\nexport var Main = function Main() {\n  _s();\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      error = _useEthers.error;\n\n  var classes = useStyles();\n  var networkName = chainId ? helperConfig[chainId] : \"ganache\";\n  console.log(typeof chainId); // We need to pull the DAPP token address from the .json file written to by Brownie\n\n  var dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero;\n  var wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero;\n  var fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero; // console.log(dappTokenAddress)\n\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n\n  var supportedTokens = [{\n    image: forge,\n    address: wethTokenAddress,\n    name: \"Bid on NFT\"\n  }, {\n    image: dai,\n    address: fauTokenAddress,\n    name: \"Claim & Browse NFTs\"\n  }];\n  var supportedTokens2 = [{\n    image: eth,\n    address: wethTokenAddress,\n    name: \"Vote on Price to sell NFT\"\n  }, {\n    image: dai,\n    address: fauTokenAddress,\n    name: \"Redeem Shares for profit from sales\"\n  }, {\n    image: dai,\n    address: dappTokenAddress,\n    name: \"Buy NFT with Shares\"\n  }];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showNetworkError = _useState2[0],\n      setShowNetworkError = _useState2[1];\n\n  var handleCloseNetworkError = function handleCloseNetworkError(event, reason) {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    showNetworkError && setShowNetworkError(false);\n  };\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n\n\n  useEffect(function () {\n    if (error && error.name === \"UnsupportedChainIdError\") {\n      !showNetworkError && setShowNetworkError(true);\n    } else {\n      showNetworkError && setShowNetworkError(false);\n    }\n  }, [error, showNetworkError]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      component: \"h1\",\n      classes: {\n        root: classes.title\n      },\n      children: \"Dapp Token Farm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(YourWallet, {\n      supportedTokens: supportedTokens\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(TokenFarmContract, {\n      supportedTokens: supportedTokens2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showNetworkError,\n      autoHideDuration: 5000,\n      onClose: handleCloseNetworkError,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseNetworkError,\n        severity: \"warning\",\n        children: \"You gotta connect to the Kovan or Rinkeby network!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Main, \"9UIG4npW0dpxFLkomWpKvSFSorU=\", false, function () {\n  return [useEthers, useStyles];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/Main.tsx"],"names":["React","useEffect","useState","eth","dai","forge","YourWallet","TokenFarmContract","useEthers","constants","Snackbar","Typography","makeStyles","Alert","brownieConfig","helperConfig","useStyles","theme","title","color","palette","common","white","textAlign","padding","spacing","Main","chainId","error","classes","networkName","console","log","dappTokenAddress","AddressZero","wethTokenAddress","fauTokenAddress","supportedTokens","image","address","name","supportedTokens2","showNetworkError","setShowNetworkError","handleCloseNetworkError","event","reason","root"],"mappings":";;;;;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,UAA/B,QAAiD,mBAAjD;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;;AAQA;AACA;AACA;AACA,IAAMC,SAAS,GAAGJ,UAAU,CAAC,UAACK,KAAD;AAAA,SAAY;AACvCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KADvB;AAELC,MAAAA,SAAS,EAAE,QAFN;AAGLC,MAAAA,OAAO,EAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd;AAHJ;AADgC,GAAZ;AAAA,CAAD,CAA5B;AASA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACxB,mBAA2BlB,SAAS,EAApC;AAAA,MAAQmB,OAAR,cAAQA,OAAR;AAAA,MAAiBC,KAAjB,cAAiBA,KAAjB;;AAEA,MAAMC,OAAO,GAAGb,SAAS,EAAzB;AACA,MAAMc,WAAW,GAAGH,OAAO,GAAGZ,YAAY,CAACY,OAAD,CAAf,GAA2B,SAAtD;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOL,OAAnB,EALwB,CAMxB;;AACA,MAAMM,gBAAgB,GAAGN,OAAO,GAAGb,aAAa,CAAC,UAAD,CAAb,CAA0BgB,WAA1B,EAAuC,WAAvC,CAAH,GAAyDrB,SAAS,CAACyB,WAAnG;AACA,MAAMC,gBAAgB,GAAGR,OAAO,GAAGb,aAAa,CAAC,UAAD,CAAb,CAA0BgB,WAA1B,EAAuC,YAAvC,CAAH,GAA0DrB,SAAS,CAACyB,WAApG;AACA,MAAME,eAAe,GAAGT,OAAO,GAAGb,aAAa,CAAC,UAAD,CAAb,CAA0BgB,WAA1B,EAAuC,WAAvC,CAAH,GAAyDrB,SAAS,CAACyB,WAAlG,CATwB,CAUxB;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AACG,MAAMG,eAA6B,GAAG,CACrC;AACEC,IAAAA,KAAK,EAAEjC,KADT;AAEEkC,IAAAA,OAAO,EAAEJ,gBAFX;AAGEK,IAAAA,IAAI,EAAE;AAHR,GADqC,EAMrC;AACEF,IAAAA,KAAK,EAAElC,GADT;AAEEmC,IAAAA,OAAO,EAAEH,eAFX;AAGEI,IAAAA,IAAI,EAAE;AAHR,GANqC,CAAtC;AAYD,MAAMC,gBAA8B,GAAG,CACrC;AACEH,IAAAA,KAAK,EAAEnC,GADT;AAEEoC,IAAAA,OAAO,EAAEJ,gBAFX;AAGEK,IAAAA,IAAI,EAAE;AAHR,GADqC,EAMrC;AACEF,IAAAA,KAAK,EAAElC,GADT;AAEEmC,IAAAA,OAAO,EAAEH,eAFX;AAGEI,IAAAA,IAAI,EAAE;AAHR,GANqC,EAWrC;AACEF,IAAAA,KAAK,EAAElC,GADT;AAEEmC,IAAAA,OAAO,EAAEN,gBAFX;AAGEO,IAAAA,IAAI,EAAE;AAHR,GAXqC,CAAvC;;AAkBA,kBAAgDtC,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOwC,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAC9BC,KAD8B,EAE9BC,MAF8B,EAG3B;AACH,QAAIA,MAAM,KAAK,WAAf,EAA4B;AAC1B;AACD;;AAEDJ,IAAAA,gBAAgB,IAAIC,mBAAmB,CAAC,KAAD,CAAvC;AACD,GATD;AAWA;AACF;AACA;AACA;AACA;;;AACE1C,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,KAAK,IAAIA,KAAK,CAACY,IAAN,KAAe,yBAA5B,EAAuD;AACrD,OAACE,gBAAD,IAAqBC,mBAAmB,CAAC,IAAD,CAAxC;AACD,KAFD,MAEO;AACLD,MAAAA,gBAAgB,IAAIC,mBAAmB,CAAC,KAAD,CAAvC;AACD;AACF,GANQ,EAMN,CAACf,KAAD,EAAQc,gBAAR,CANM,CAAT;AAQA,sBACE;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,OAAO,EAAC,IADV;AAEE,MAAA,SAAS,EAAC,IAFZ;AAGE,MAAA,OAAO,EAAE;AACPK,QAAAA,IAAI,EAAElB,OAAO,CAACX;AADP,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAUE,QAAC,UAAD;AAAY,MAAA,eAAe,EAAEmB;AAA7B;AAAA;AAAA;AAAA;AAAA,aAVF,eAWE,QAAC,iBAAD;AAAmB,MAAA,eAAe,EAAEI;AAApC;AAAA;AAAA;AAAA;AAAA,aAXF,eAYE,QAAC,QAAD;AACE,MAAA,IAAI,EAAEC,gBADR;AAEE,MAAA,gBAAgB,EAAE,IAFpB;AAGE,MAAA,OAAO,EAAEE,uBAHX;AAAA,6BAKE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEA,uBAAhB;AAAyC,QAAA,QAAQ,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,aAZF;AAAA,kBADF;AAwBD,CAlGM;;GAAMlB,I;UACgBlB,S,EAEXQ,S;;;KAHLU,I","sourcesContent":["/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport forge from \"../forgetoken.png\"\nimport forgeNFT from \"../forgeNFT.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\nimport DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const { chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  console.log(typeof chainId)\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n   const supportedTokens: Array<Token> = [\n    {\n      image: forge,\n      address: wethTokenAddress,\n      name: \"Bid on NFT\",\n    },\n    {\n      image: dai,\n      address: fauTokenAddress,\n      name: \"Claim & Browse NFTs\",\n    }\n  ]\n  const supportedTokens2: Array<Token> = [\n    {\n      image: eth,\n      address: wethTokenAddress,\n      name: \"Vote on Price to sell NFT\",\n    },\n    {\n      image: dai,\n      address: fauTokenAddress,\n      name: \"Redeem Shares for profit from sales\",\n    },\n    {\n      image: dai,\n      address: dappTokenAddress,\n      name: \"Buy NFT with Shares\",\n    }\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && error.name === \"UnsupportedChainIdError\") {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)\n    }\n  }, [error, showNetworkError])\n\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: classes.title,\n        }}\n      >\n        Dapp Token Farm\n      </Typography>\n      <YourWallet supportedTokens={supportedTokens} />\n      <TokenFarmContract supportedTokens={supportedTokens2} />\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          You gotta connect to the Kovan or Rinkeby network!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}