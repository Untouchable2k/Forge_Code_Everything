{"ast":null,"code":"import _regeneratorRuntime from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { NetworkConnector } from '@web3-react/network-connector';\nimport { useEffect } from 'react';\nimport { useEthers } from '../hooks';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useConfig } from './config/context';\nexport function NetworkActivator() {\n  var _useEthers = useEthers(),\n      activate = _useEthers.activate,\n      account = _useEthers.account,\n      connectedChainId = _useEthers.chainId,\n      active = _useEthers.active,\n      connector = _useEthers.connector;\n\n  var _useConfig = useConfig(),\n      supportedChains = _useConfig.supportedChains,\n      readOnlyChainId = _useConfig.readOnlyChainId,\n      readOnlyUrls = _useConfig.readOnlyUrls;\n\n  useEffect(function () {\n    var eagerConnect = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var injected;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                injected = new InjectedConnector({\n                  supportedChainIds: supportedChains\n                });\n                _context.next = 3;\n                return injected.isAuthorized();\n\n              case 3:\n                if (!_context.sent) {\n                  _context.next = 5;\n                  break;\n                }\n\n                activate(injected);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function eagerConnect() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    eagerConnect();\n  }, []);\n  useEffect(function () {\n    if (readOnlyChainId && readOnlyUrls) {\n      if (!active || connector instanceof NetworkConnector && connectedChainId !== readOnlyChainId) {\n        activate(new NetworkConnector({\n          defaultChainId: readOnlyChainId,\n          urls: readOnlyUrls || []\n        }));\n      }\n    }\n  }, [readOnlyChainId, readOnlyUrls, active, account, connectedChainId, connector]);\n  return null;\n}","map":{"version":3,"sources":["../../../../src/providers/NetworkActivator.tsx"],"names":[],"mappings":";;AAAA,SAAS,gBAAT,QAAiC,+BAAjC;AACA,SAAS,SAAT,QAA0B,OAA1B;AACA,SAAS,SAAT,QAA0B,UAA1B;AACA,SAAS,iBAAT,QAAkC,gCAAlC;AACA,SAAS,SAAT,QAA0B,kBAA1B;AAEA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,mBAA4E,SAAS,EAArF;AAAA,MAAQ,QAAR,cAAQ,QAAR;AAAA,MAAkB,OAAlB,cAAkB,OAAlB;AAAA,MAAoC,gBAApC,cAA2B,OAA3B;AAAA,MAAsD,MAAtD,cAAsD,MAAtD;AAAA,MAA8D,SAA9D,cAA8D,SAA9D;;AACA,mBAA2D,SAAS,EAApE;AAAA,MAAQ,eAAR,cAAQ,eAAR;AAAA,MAAyB,eAAzB,cAAyB,eAAzB;AAAA,MAA0C,YAA1C,cAA0C,YAA1C;;AAEA,EAAA,SAAS,CAAC,YAAK;AACb,QAAM,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,gBAAA,QADa,GACF,IAAI,iBAAJ,CAAsB;AAAE,kBAAA,iBAAiB,EAAE;AAArB,iBAAtB,CADE;AAAA;AAAA,uBAET,QAAQ,CAAC,YAAT,EAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGjB,gBAAA,QAAQ,CAAC,QAAD,CAAR;;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZ,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAMA,IAAA,YAAY;AACb,GARQ,EAQN,EARM,CAAT;AAUA,EAAA,SAAS,CAAC,YAAK;AACb,QAAI,eAAe,IAAI,YAAvB,EAAqC;AACnC,UAAI,CAAC,MAAD,IAAY,SAAS,YAAY,gBAArB,IAAyC,gBAAgB,KAAK,eAA9E,EAAgG;AAC9F,QAAA,QAAQ,CAAC,IAAI,gBAAJ,CAAqB;AAAE,UAAA,cAAc,EAAE,eAAlB;AAAmC,UAAA,IAAI,EAAE,YAAY,IAAI;AAAzD,SAArB,CAAD,CAAR;AACD;AACF;AACF,GANQ,EAMN,CAAC,eAAD,EAAkB,YAAlB,EAAgC,MAAhC,EAAwC,OAAxC,EAAiD,gBAAjD,EAAmE,SAAnE,CANM,CAAT;AAQA,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["import { NetworkConnector } from '@web3-react/network-connector';\nimport { useEffect } from 'react';\nimport { useEthers } from '../hooks';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useConfig } from './config/context';\nexport function NetworkActivator() {\n    const { activate, account, chainId: connectedChainId, active, connector } = useEthers();\n    const { supportedChains, readOnlyChainId, readOnlyUrls } = useConfig();\n    useEffect(() => {\n        const eagerConnect = async () => {\n            const injected = new InjectedConnector({ supportedChainIds: supportedChains });\n            if (await injected.isAuthorized()) {\n                activate(injected);\n            }\n        };\n        eagerConnect();\n    }, []);\n    useEffect(() => {\n        if (readOnlyChainId && readOnlyUrls) {\n            if (!active || (connector instanceof NetworkConnector && connectedChainId !== readOnlyChainId)) {\n                activate(new NetworkConnector({ defaultChainId: readOnlyChainId, urls: readOnlyUrls || [] }));\n            }\n        }\n    }, [readOnlyChainId, readOnlyUrls, active, account, connectedChainId, connector]);\n    return null;\n}\n//# sourceMappingURL=NetworkActivator.js.map"]},"metadata":{},"sourceType":"module"}