{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\nimport DC from \"../chain-info/DaughterContract.json\";\nimport Erc20 from \"../chain-info/ERC20.json\";\nimport { utils, constants } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport brownieConfig from \"../brownie-config-json.json\";\nimport helperConfig from \"../helper-config.json\";\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\n\nexport var useStakeTokens = function useStakeTokens(tokenAddress) {\n  _s();\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  var abi = DC.abi;\n  var networkName = chainId ? helperConfig[chainId] : \"ganache\";\n  var tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero;\n  var ForgeAddy = chainId ? brownieConfig[\"networks\"][networkName][\"wethToken\"] : constants.AddressZero;\n  var NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero;\n  var tokenFarmInterface = new utils.Interface(abi);\n  var tokenFarmContract = new Contract(NFTBOOK, tokenFarmInterface);\n\n  var _useContractFunction = useContractFunction(tokenFarmContract, \"startBuyoutAuction\", {\n    transactionName: \"Stake tokens\"\n  }),\n      stakeTokensSend = _useContractFunction.send,\n      stakeTokensState = _useContractFunction.state;\n\n  var erc20Interface = new utils.Interface(Erc20.abi);\n  var tokenContract = new Contract(NFTBOOK, erc20Interface);\n  var Forgecontract = new Contract(ForgeAddy, erc20Interface);\n\n  var _useContractFunction2 = useContractFunction(Forgecontract, \"approve\", {\n    transactionName: \"Approve ERC20 transfer\"\n  }),\n      approveErc20Send = _useContractFunction2.send,\n      approveErc20State = _useContractFunction2.state;\n\n  var _useState = useState(\"0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      amountToStake = _useState2[0],\n      setAmountToStake = _useState2[1];\n\n  var options = {\n    value: amountToStake\n  };\n  useEffect(function () {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, options);\n    } // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n\n  }, [approveErc20State, amountToStake, tokenAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var send = function send(amount) {\n    setAmountToStake(amount);\n    return approveErc20Send(NFTBOOK, amount);\n  };\n\n  var _useState3 = useState(approveErc20State),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  useEffect(function () {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState);\n    } else {\n      setState(approveErc20State);\n    }\n  }, [approveErc20State, stakeTokensState]);\n  return {\n    send: send,\n    state: state\n  };\n};\n\n_s(useStakeTokens, \"cDsA0LHYmFx2q1gu3ePYIHEtKjE=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens.ts"],"names":["useEffect","useState","useContractFunction","useEthers","DC","Erc20","utils","constants","Contract","brownieConfig","helperConfig","useStakeTokens","tokenAddress","chainId","account","abi","networkName","tokenFarmContractAddress","AddressZero","ForgeAddy","NFTBOOK","tokenFarmInterface","Interface","tokenFarmContract","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","tokenContract","Forgecontract","approveErc20Send","approveErc20State","amountToStake","setAmountToStake","options","value","status","amount","setState"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport DC from \"../chain-info/DaughterContract.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = DC\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const ForgeAddy = chainId ? brownieConfig[\"networks\"][networkName][\"wethToken\"] : constants.AddressZero\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    NFTBOOK,\n    tokenFarmInterface\n  )\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"startBuyoutAuction\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(NFTBOOK, erc20Interface)\n\n  const Forgecontract = new Contract(ForgeAddy, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(Forgecontract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  var options = { value: amountToStake };\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, options)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(NFTBOOK, amount)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n"]},"metadata":{},"sourceType":"module"}