{"ast":null,"code":"import _regeneratorRuntime from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Contract } from '@ethersproject/contracts';\nvar ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\nexport function multicall(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider, address, blockNumber, requests) {\n    var _a, contract, _yield$contract$aggre, _yield$contract$aggre2, results, state, i, _requests$i, _address, data, result, stateForAddress;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.aggregate(requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            _yield$contract$aggre = _context.sent;\n            _yield$contract$aggre2 = _slicedToArray(_yield$contract$aggre, 2);\n            results = _yield$contract$aggre2[1];\n            state = {};\n\n            for (i = 0; i < requests.length; i++) {\n              _requests$i = requests[i], _address = _requests$i.address, data = _requests$i.data;\n              result = results[i];\n              stateForAddress = (_a = state[_address]) !== null && _a !== void 0 ? _a : {};\n              stateForAddress[data] = result;\n              state[_address] = stateForAddress;\n            }\n\n            return _context.abrupt(\"return\", state);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../../src/providers/chainState/multicall.ts"],"names":[],"mappings":";;;AACA,SAAS,QAAT,QAAyB,0BAAzB;AAKA,IAAM,GAAG,GAAG,CACV,0HADU,CAAZ;AAIA,gBAAsB,SAAtB;AAAA;AAAA;;;wEAAO,iBACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMD,QAAQ,CAAC,MAAT,KAAoB,CANnB;AAAA;AAAA;AAAA;;AAAA,6CAOI,EAPJ;;AAAA;AASC,YAAA,QATD,GASY,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CATZ;AAAA;AAAA,mBAU4C,QAAQ,CAAC,SAAT,CAC/C,QAAQ,CAAC,GAAT,CAAa;AAAA,kBAAG,OAAH,QAAG,OAAH;AAAA,kBAAY,IAAZ,QAAY,IAAZ;AAAA,qBAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;AAAA,aAAb,CAD+C,EAE/C;AAAE,cAAA,QAAQ,EAAE;AAAZ,aAF+C,CAV5C;;AAAA;AAAA;AAAA;AAUI,YAAA,OAVJ;AAcC,YAAA,KAdD,GAcqB,EAdrB;;AAeL,iBAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AAAA,4BACd,QAAQ,CAAC,CAAD,CADM,EAChC,QADgC,eAChC,OADgC,EACvB,IADuB,eACvB,IADuB;AAElC,cAAA,MAFkC,GAEzB,OAAO,CAAC,CAAD,CAFkB;AAGlC,cAAA,eAHkC,GAGnB,CAAA,EAAA,GAAG,KAAK,CAAC,QAAD,CAAR,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,EAHF;AAIxC,cAAA,eAAe,CAAC,IAAD,CAAf,GAAwB,MAAxB;AACA,cAAA,KAAK,CAAC,QAAD,CAAL,GAAiB,eAAjB;AACD;;AArBI,6CAsBE,KAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nconst ABI = [\n    'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n];\nexport async function multicall(provider, address, blockNumber, requests) {\n    var _a;\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const [, results] = await contract.aggregate(requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const result = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = result;\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall.js.map"]},"metadata":{},"sourceType":"module"}