{"ast":null,"code":"import _slicedToArray from \"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useContractFunction, useEthers } from \"@usedapp/core\";\nimport { utils, constants } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport LPFarm from \"../chain-info/DaughterContract.json\";\nimport brownieConfig from \"../brownie-config-json.json\";\nimport helperConfig from \"../helper-config.json\";\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\n\nexport var RedeemBuyNFTNoApprove = function RedeemBuyNFTNoApprove(tokenAddress) {\n  _s();\n\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId;\n\n  var networkName = chainId ? helperConfig[chainId] : \"ganache\";\n  var NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero; //MEME ACTUAL USING LP Contracts  \n\n  var rewardABI = LPFarm.abi;\n  var LPFarmInterface = new utils.Interface(rewardABI);\n  var LPRewardsContract = new Contract(NFTBOOK, LPFarmInterface);\n\n  var _useContractFunction = useContractFunction(LPRewardsContract, \"buyForERC\", {\n    transactionName: \"Stake tokens\"\n  }),\n      approveErc20Send = _useContractFunction.send,\n      unstakeTokensState22v3 = _useContractFunction.state;\n\n  var send = function send() {\n    return approveErc20Send();\n  };\n\n  var _useState = useState(unstakeTokensState22v3),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    setState(unstakeTokensState22v3);\n  }, [unstakeTokensState22v3]);\n  return {\n    send: send,\n    state: state\n  };\n};\n\n_s(RedeemBuyNFTNoApprove, \"WmhbrC3ZmdwOY9cCYY8ksiQ/LUY=\", false, function () {\n  return [useEthers, useContractFunction];\n});\n\n_c = RedeemBuyNFTNoApprove;\n\nvar _c;\n\n$RefreshReg$(_c, \"RedeemBuyNFTNoApprove\");","map":{"version":3,"sources":["/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/redeemBuyNFTNoApprove.ts"],"names":["useEffect","useState","useContractFunction","useEthers","utils","constants","Contract","LPFarm","brownieConfig","helperConfig","RedeemBuyNFTNoApprove","tokenAddress","chainId","networkName","NFTBOOK","AddressZero","rewardABI","abi","LPFarmInterface","Interface","LPRewardsContract","transactionName","approveErc20Send","send","unstakeTokensState22v3","state","setState"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,mBAAT,EAA8BC,SAA9B,QAA+C,eAA/C;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,QAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AAEA,OAAOC,YAAP,MAAyB,uBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,YAAD,EAA0B;AAAA;;AAC7D,mBAAoBR,SAAS,EAA7B;AAAA,MAAQS,OAAR,cAAQA,OAAR;;AAEA,MAAMC,WAAW,GAAGD,OAAO,GAAGH,YAAY,CAACG,OAAD,CAAf,GAA2B,SAAtD;AACA,MAAME,OAAO,GAAGF,OAAO,GAAGJ,aAAa,CAAC,UAAD,CAAb,CAA0BK,WAA1B,EAAuC,SAAvC,CAAH,GAAuDR,SAAS,CAACU,WAAxF,CAJ6D,CAM7D;;AACA,MAAMC,SAAS,GAAGT,MAAM,CAACU,GAAzB;AACA,MAAMC,eAAe,GAAG,IAAId,KAAK,CAACe,SAAV,CAAoBH,SAApB,CAAxB;AACA,MAAMI,iBAAiB,GAAG,IAAId,QAAJ,CACxBQ,OADwB,EACfI,eADe,CAA1B;;AAKF,6BACAhB,mBAAmB,CAACkB,iBAAD,EAAoB,WAApB,EAAiC;AAClDC,IAAAA,eAAe,EAAE;AADiC,GAAjC,CADnB;AAAA,MAAcC,gBAAd,wBAAQC,IAAR;AAAA,MAAuCC,sBAAvC,wBAAgCC,KAAhC;;AAKA,MAAMF,IAAI,GAAI,SAARA,IAAQ,GAAM;AAClB,WAAOD,gBAAgB,EAAvB;AACD,GAFD;;AAGA,kBAA0BrB,QAAQ,CAACuB,sBAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAEA1B,EAAAA,SAAS,CAAC,YAAM;AACZ0B,IAAAA,QAAQ,CAACF,sBAAD,CAAR;AAEH,GAHQ,EAGN,CAACA,sBAAD,CAHM,CAAT;AAIA,SAAO;AAAED,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,KAAK,EAALA;AAAR,GAAP;AACC,CA7BM;;GAAMf,qB;UACSP,S,EActBD,mB;;;KAfaQ,qB","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/DaughterContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const RedeemBuyNFTNoApprove = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    NFTBOOK, LPFarmInterface\n  )  \n\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"buyForERC\", {\n  transactionName: \"Stake tokens\",\n})\n\nconst send =  () => {\n  return approveErc20Send()\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}"]},"metadata":{},"sourceType":"module"}