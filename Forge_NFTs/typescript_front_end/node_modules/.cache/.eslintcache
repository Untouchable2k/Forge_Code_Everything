[{"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/index.tsx":"1","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/serviceWorker.js":"2","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/App.tsx":"3","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/Header.tsx":"4","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/Main.tsx":"5","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/index.ts":"6","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/index.ts":"7","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/YourWallet.tsx":"8","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/TokenFarmContract.tsx":"9","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx":"10","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/index.ts":"11","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/ConnectionRequiredMsg.tsx":"12","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/BalanceMsg.tsx":"13","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/SliderInput.tsx":"14","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/index.ts":"15","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/WalletBalance.tsx":"16","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx":"17","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useUnstakeTokens.ts":"18","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakingBalance.ts":"19","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens.ts":"20","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/SliderInput2.tsx":"21","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/votePrice.ts":"22","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice.ts":"23","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice2.ts":"24","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice3.ts":"25","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/claimNFT.ts":"26","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/soldNFTs.ts":"27","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/lastWonAuction.ts":"28","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentRedeem.ts":"29","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/sharestoBuyNFT.ts":"30","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentAuctionNumber.ts":"31","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime.ts":"32","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens2.ts":"33","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime2.ts":"34","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime3.ts":"35","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens3.ts":"36","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens4.ts":"37","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser.ts":"38","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/redeemNoApprove.ts":"39","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/redeemBuyNFTNoApprove.ts":"40","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser2.ts":"41","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove.ts":"42","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove2.ts":"43","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/distTime.ts":"44","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/distTimeKiwi.ts":"45","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/distTokens.ts":"46","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/index.tsx":"47","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/serviceWorker.js":"48","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/App.tsx":"49","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/Header.tsx":"50","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/Main.tsx":"51","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/index.ts":"52","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/index.ts":"53","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/YourWallet.tsx":"54","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/TokenFarmContract.tsx":"55","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/WalletBalance.tsx":"56","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx":"57","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/index.ts":"58","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/index.ts":"59","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx":"60","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/ConnectionRequiredMsg.tsx":"61","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/BalanceMsg.tsx":"62","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/SliderInput2.tsx":"63","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/distTokens.ts":"64","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/SliderInput.tsx":"65","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/distTimeKiwi.ts":"66","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/distTime.ts":"67","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove2.ts":"68","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove.ts":"69","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/redeemBuyNFTNoApprove.ts":"70","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/redeemNoApprove.ts":"71","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser2.ts":"72","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser.ts":"73","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime3.ts":"74","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime2.ts":"75","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime.ts":"76","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentAuctionNumber.ts":"77","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/sharestoBuyNFT.ts":"78","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/lastWonAuction.ts":"79","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/soldNFTs.ts":"80","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentRedeem.ts":"81","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice3.ts":"82","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice2.ts":"83","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice.ts":"84","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/votePrice.ts":"85","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useUnstakeTokens.ts":"86","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakingBalance.ts":"87","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/claimNFT.ts":"88","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens4.ts":"89","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens3.ts":"90","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens2.ts":"91","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens.ts":"92"},{"size":456,"mtime":1639497647000,"results":"93","hashOfConfig":"94"},{"size":4951,"mtime":1639497647000,"results":"95","hashOfConfig":"94"},{"size":910,"mtime":1658989012258,"results":"96","hashOfConfig":"94"},{"size":997,"mtime":1639497647000,"results":"97","hashOfConfig":"94"},{"size":4414,"mtime":1658988548581,"results":"98","hashOfConfig":"94"},{"size":41,"mtime":1639497647000,"results":"99","hashOfConfig":"94"},{"size":55,"mtime":1639497647000,"results":"100","hashOfConfig":"94"},{"size":2725,"mtime":1656958673252,"results":"101","hashOfConfig":"94"},{"size":2186,"mtime":1656958746107,"results":"102","hashOfConfig":"94"},{"size":12670,"mtime":1658988268376,"results":"103","hashOfConfig":"94"},{"size":196,"mtime":1653255409822,"results":"104","hashOfConfig":"94"},{"size":641,"mtime":1656955578185,"results":"105","hashOfConfig":"94"},{"size":877,"mtime":1639497647000,"results":"106","hashOfConfig":"94"},{"size":2524,"mtime":1656954111331,"results":"107","hashOfConfig":"94"},{"size":1413,"mtime":1658968116795,"results":"108","hashOfConfig":"94"},{"size":1040,"mtime":1654981876318,"results":"109","hashOfConfig":"94"},{"size":13866,"mtime":1658872232144,"results":"110","hashOfConfig":"94"},{"size":1040,"mtime":1656977307358,"results":"111","hashOfConfig":"94"},{"size":1093,"mtime":1656977303718,"results":"112","hashOfConfig":"94"},{"size":3149,"mtime":1656977281250,"results":"113","hashOfConfig":"94"},{"size":2415,"mtime":1656447737118,"results":"114","hashOfConfig":"94"},{"size":1845,"mtime":1656953748075,"results":"115","hashOfConfig":"94"},{"size":1047,"mtime":1656977236099,"results":"116","hashOfConfig":"94"},{"size":1039,"mtime":1656977240403,"results":"117","hashOfConfig":"94"},{"size":1048,"mtime":1656977243891,"results":"118","hashOfConfig":"94"},{"size":1872,"mtime":1656977366362,"results":"119","hashOfConfig":"94"},{"size":1186,"mtime":1656977268995,"results":"120","hashOfConfig":"94"},{"size":1030,"mtime":1656977249403,"results":"121","hashOfConfig":"94"},{"size":1040,"mtime":1656977231259,"results":"122","hashOfConfig":"94"},{"size":1033,"mtime":1656977264883,"results":"123","hashOfConfig":"94"},{"size":1040,"mtime":1656977223531,"results":"124","hashOfConfig":"94"},{"size":1039,"mtime":1656977188019,"results":"125","hashOfConfig":"94"},{"size":3128,"mtime":1656977286158,"results":"126","hashOfConfig":"94"},{"size":1015,"mtime":1656977194219,"results":"127","hashOfConfig":"94"},{"size":1033,"mtime":1656977201547,"results":"128","hashOfConfig":"94"},{"size":3167,"mtime":1656977290038,"results":"129","hashOfConfig":"94"},{"size":3151,"mtime":1656977297802,"results":"130","hashOfConfig":"94"},{"size":1044,"mtime":1656977176011,"results":"131","hashOfConfig":"94"},{"size":1854,"mtime":1656977258103,"results":"132","hashOfConfig":"94"},{"size":1751,"mtime":1656977254147,"results":"133","hashOfConfig":"94"},{"size":1254,"mtime":1656977180883,"results":"134","hashOfConfig":"94"},{"size":1875,"mtime":1656977208963,"results":"135","hashOfConfig":"94"},{"size":1860,"mtime":1656977213707,"results":"136","hashOfConfig":"94"},{"size":1013,"mtime":1658966962700,"results":"137","hashOfConfig":"94"},{"size":1021,"mtime":1658967024403,"results":"138","hashOfConfig":"94"},{"size":1846,"mtime":1658968194643,"results":"139","hashOfConfig":"94"},{"size":456,"mtime":1659552858070,"results":"140","hashOfConfig":"141"},{"size":4951,"mtime":1639497647000,"results":"142","hashOfConfig":"141"},{"size":918,"mtime":1659553523449,"results":"143","hashOfConfig":"141"},{"size":2009,"mtime":1659556769474,"results":"144","hashOfConfig":"141"},{"size":4285,"mtime":1659552971109,"results":"145","hashOfConfig":"141"},{"size":41,"mtime":1639497647000,"results":"146","hashOfConfig":"141"},{"size":55,"mtime":1639497647000,"results":"147","hashOfConfig":"141"},{"size":2725,"mtime":1656958673252,"results":"148","hashOfConfig":"141"},{"size":2186,"mtime":1656958746107,"results":"149","hashOfConfig":"141"},{"size":1040,"mtime":1654981876318,"results":"150","hashOfConfig":"141"},{"size":12361,"mtime":1659553994682,"results":"151","hashOfConfig":"141"},{"size":196,"mtime":1653255409822,"results":"152","hashOfConfig":"141"},{"size":1413,"mtime":1658968116795,"results":"153","hashOfConfig":"141"},{"size":13891,"mtime":1659552478034,"results":"154","hashOfConfig":"141"},{"size":643,"mtime":1659422289639,"results":"155","hashOfConfig":"141"},{"size":877,"mtime":1639497647000,"results":"156","hashOfConfig":"141"},{"size":2415,"mtime":1656447737118,"results":"157","hashOfConfig":"141"},{"size":1846,"mtime":1658968194643,"results":"158","hashOfConfig":"141"},{"size":2524,"mtime":1656954111331,"results":"159","hashOfConfig":"141"},{"size":1021,"mtime":1658967024403,"results":"160","hashOfConfig":"141"},{"size":1013,"mtime":1658966962700,"results":"161","hashOfConfig":"141"},{"size":1860,"mtime":1656977213707,"results":"162","hashOfConfig":"141"},{"size":1875,"mtime":1656977208963,"results":"163","hashOfConfig":"141"},{"size":1751,"mtime":1656977254147,"results":"164","hashOfConfig":"141"},{"size":1854,"mtime":1656977258103,"results":"165","hashOfConfig":"141"},{"size":1254,"mtime":1656977180883,"results":"166","hashOfConfig":"141"},{"size":1044,"mtime":1656977176011,"results":"167","hashOfConfig":"141"},{"size":1033,"mtime":1656977201547,"results":"168","hashOfConfig":"141"},{"size":1015,"mtime":1656977194219,"results":"169","hashOfConfig":"141"},{"size":1039,"mtime":1656977188019,"results":"170","hashOfConfig":"141"},{"size":1040,"mtime":1656977223531,"results":"171","hashOfConfig":"141"},{"size":1033,"mtime":1656977264883,"results":"172","hashOfConfig":"141"},{"size":1030,"mtime":1656977249403,"results":"173","hashOfConfig":"141"},{"size":1186,"mtime":1656977268995,"results":"174","hashOfConfig":"141"},{"size":1040,"mtime":1656977231259,"results":"175","hashOfConfig":"141"},{"size":1048,"mtime":1656977243891,"results":"176","hashOfConfig":"141"},{"size":1039,"mtime":1656977240403,"results":"177","hashOfConfig":"141"},{"size":1047,"mtime":1656977236099,"results":"178","hashOfConfig":"141"},{"size":1845,"mtime":1656953748075,"results":"179","hashOfConfig":"141"},{"size":1040,"mtime":1656977307358,"results":"180","hashOfConfig":"141"},{"size":1093,"mtime":1656977303718,"results":"181","hashOfConfig":"141"},{"size":1872,"mtime":1656977366362,"results":"182","hashOfConfig":"141"},{"size":3151,"mtime":1656977297802,"results":"183","hashOfConfig":"141"},{"size":3167,"mtime":1656977290038,"results":"184","hashOfConfig":"141"},{"size":3128,"mtime":1656977286158,"results":"185","hashOfConfig":"141"},{"size":3149,"mtime":1656977281250,"results":"186","hashOfConfig":"141"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},"y5md0f",{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"189"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":2,"source":"224","usedDeprecatedRules":"189"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"189"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"189"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"189"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"189"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"189"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"189"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"189"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"189"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"189"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"189"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"189"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"189"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"189"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"189"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"189"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"189"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"189"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"189"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"189"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"189"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"189"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"189"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"189"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"189"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"189"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"189"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"189"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mait0u",{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"325"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":2,"source":"343","usedDeprecatedRules":"325"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"325"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"325"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"325"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"325"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"325"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"325"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"325"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"325"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"325"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"325"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"325"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"325"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"325"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"325"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"325"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"325"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"325"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"325"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"325"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"325"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"325"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"325"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"325"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"325"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"325"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"325"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"325"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"325"},"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/index.tsx",[],["408","409"],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/serviceWorker.js",[],["410","411"],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/App.tsx",["412","413","414","415","416","417","418","419","420"],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/Header.tsx",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/Main.tsx",["421","422","423","424","425","426","427","428","429","430"],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/index.ts",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/index.ts",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/YourWallet.tsx",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/TokenFarmContract.tsx",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx",["431","432","433","434","435","436","437","438","439","440","441","442","443","444"],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/index.ts",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/ConnectionRequiredMsg.tsx",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/BalanceMsg.tsx",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/SliderInput.tsx",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/index.ts",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/WalletBalance.tsx",["445","446","447"],"import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEtherBalance, useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n  const { image, address, name } = token;\n\n  const { account } = useEthers();\n  const tokenBalance = useTokenBalance(\"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\", account);\n\n  var formattedTokenBalance: number = tokenBalance\n  ? parseFloat(formatUnits(tokenBalance, 18))\n  : 0;\n\n const tokenBalance2 = useEtherBalance(account);\n  \n\n    formattedTokenBalance = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n  \n  if(address == \"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\")\n  {\n  return (\n    <BalanceMsg\n      label={`Your Forge balance`}\n      amount={formattedTokenBalance}\n      tokenImgSrc={image}\n    />\n  );\n  }else{\n\n    return (<></>\n    );\n\n\n  }\n};\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx",["448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470"],"import React, { useEffect, useState } from \"react\"\nimport { SliderInput, SliderInput2 } from \"../../components\"\n\nimport CurrencyInput from 'react-currency-input-field';\nimport { useEthers,useEtherBalance, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useStakeTokens, AuctionEnd, BidNoApprove2, BidNoApprove, AllowanceUser2, AuctionTopBidder, AuctionBid2, useStakeTokens2, CurrentAuctionNumber, SoldNFTs, LastWonAuction, CurrentVotePrice2, ClaimNFT, CurrentVotePrice } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\n\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n  const { address: tokenAddress, name } = token\n\n  const { account } = useEthers()\n  const tokenBalance = useEtherBalance(account)\n  const { notifications } = useNotifications()\n\n  const classes = useStyles()\n\n\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n\n  //Gets vote price and sell price\n  const curVoteP = CurrentVotePrice(tokenAddress)\n\n  const formattedVoteP: number = curVoteP\n    ? parseFloat(formatUnits(curVoteP, 18))\n    : 0\n    \n  let nothing\n  var yourPrice = \"0\"\n  if(formattedVoteP!== nothing){\n\n    yourPrice = formattedVoteP.toFixed(18)\n  }\n  \n  const curVoteP2 = CurrentVotePrice2(tokenAddress)\n  var curVoteP2a = 0\nif(curVoteP2 != nothing){\n  curVoteP2a = curVoteP2  / 10**18\n\n}\n    const formattedVoteP2: number = curVoteP2a\n      ? parseFloat(curVoteP2a.toString())\n      : 0\n\n\n  var actualPriceSlider = 0\n  var actualPrice = \"0\"\n  if(formattedVoteP2!== nothing){\n    actualPriceSlider = formattedVoteP2\n    actualPrice = formattedVoteP2.toFixed(18)\n  }\n  \n\n\n  const LastWonAuctionz = LastWonAuction()\n  var lastWon = 0\n  var noClaim = false;\n  var clmzmsg = \"You have no claims, go bid on auction\"\n  if(LastWonAuctionz !== nothing && 0 <= parseFloat(LastWonAuctionz.toString())){\n    clmzmsg = \"You won NFT auction #\"+ (parseFloat(LastWonAuctionz.toString()) + 1)\n    lastWon = parseFloat(LastWonAuctionz.toString())\n    noClaim = true;\n  }\n  \n  var aucNumz1 = 0\nvar aucNumz = CurrentAuctionNumber(tokenAddress)\nif(aucNumz !== nothing){\n  aucNumz1 = parseFloat(aucNumz.toString()) - 1\n\n}\nvar endTime = AuctionEnd(aucNumz1.toString())\nvar endT = 0 \nif(endTime !== nothing){\n  endT = parseFloat(endTime.toString())\n}\n\n\nvar topBidder = AuctionTopBidder()\n\n\n\nvar alowz = AllowanceUser2()\nvar allowance = 0\nif(alowz !== nothing){\n  allowance = parseFloat(alowz.toString())\n}\n\n\nvar topBid = AuctionBid2()\nvar topBidzAmt = 0\nif(topBid !== nothing){\n  topBidzAmt = parseFloat(topBid.toString()) + 100000000000\n  topBidzAmt = topBidzAmt / 10 ** 18\n}\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const handleStakeSubmit = () => {\n      const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n      return stakeTokensSend(amountAsWei.toString())\n    }\n\n      const { send: stakeTokensSendNoApprove, state: stakeTokensStateA5 } =\n      BidNoApprove(tokenAddress)\n  \n      const handleStakeSubmitNoApprove = () => {\n        const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n        return stakeTokensSendNoApprove(amountAsWei.toString())\n      }\n\n\n\n      const { send: stakeTokensSend3, state: stakeTokensState33 } =\n      useStakeTokens2(tokenAddress)\n     \n  const handleStakeSubmit2 = () => {\n    const amountAsWei = utils.parseEther(Number(amount3).toFixed(18).toString())\n    return stakeTokensSend3(amountAsWei.toString())\n  }\n\n      const { send: stakeTokensSend34, state: stakeTokensState333 } =\n      BidNoApprove2(tokenAddress)\n     \n  const handleStakeSubmit2NoApprove = () => {\n    const amountAsWei = utils.parseEther(Number(amount3).toFixed(18).toString())\n    return stakeTokensSend34(amountAsWei.toString())\n  }\n\n\n\n\n\n  const { send: claimSend, state: stakeTokensState2 } =\n    ClaimNFT(tokenAddress)\n  \n  const handleClaimSubmit = () => {\n    return claimSend(lastWon.toString(), amount2.toString())\n  }\n\n  const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(actualPriceSlider)\n\n\n    const [amount3, setAmount3] =\n    useState<number | string | Array<number | string>>(topBidzAmt)\n\n    const [amount2, setAmount2] =\n    useState<number | string | Array<number | string>>(1)\n\n\n    if(amount == 0 && actualPriceSlider !== 0){\n      setAmount(actualPriceSlider)\n    }\n\n\n    if(amount3 == 0 && topBidzAmt !== 0 ){\n      setAmount3(topBidzAmt)\n    }\n\n        \n\n\n    var isSold = SoldNFTs(amount2.toString())\n\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  var [startingauction, setAmountz] =\n  useState<string | undefined | Array<number | string>>(\"1\")\n  \n  \n  const isMining = stakeTokensState.status === \"Mining\"\n  const isMining2 = stakeTokensState333.status === \"Mining\"\n  const isMining3 = stakeTokensState33.status === \"Mining\"\n  const isMining4 = stakeTokensState2.status === \"Mining\"\n  const isMining5 = stakeTokensStateA5.status === \"Mining\"\n\n  const hasZeroBalance = formattedTokenBalance === 0\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var imgz = new Array();\n  var imgzNum = new Array();\nvar p \nvar sel = \"https://forgetoken.org/api/forge/NFT/\"+amount2.toString()+\".png\"\nvar ez = sel.toString()\n\nvar selected = <img></img>\nvar selected2 =<img src=\"   https://thumbs.dreamstime.com/z/green-check-mark-circle-vector-illustration-flat-design-isolated-green-check-mark-circle-flat-design-isolated-125098940.jpg\n\" alt=\"This NFT is available to be Claimed\" width=\"50em\" height=\"50em\"></img>\n \nvar browse = <img></img>\nvar msg = \"\"\nif(ez !== nothing){\n\n  browse = <img src={sel} alt=\"Girl in a jacket\" width=\"300\" height=\"300\"></img>\n  selected = <img src={sel} alt=\"Girl in a jacket\" width=\"300\" height=\"300\"></img>\n  msg = \"This NFT is available for purchase or redemption\"\n  if(!isSold){\n      selected2 = <img src=\"https://forgetoken.org/img/red-xmark.jpeg\" alt=\"This NFT is Claimed\" width=\"50em\" height=\"50em\"></img>\n    msg = \"Someone has already claimed this NFT\"\n}\n\n}\nconst secondsSinceEpoch = Math.round(Date.now() / 1000)\nvar tttt = 650\nvar timeleft = endT - secondsSinceEpoch\nvar noTime = \"Auction currently running\"\nvar timeLeftMSG = \"There is \" + timeleft + \" seconds left in this Auction\"\nif(timeleft < 0 ){\n  noTime = \"Auction is over, start a new one or Claim NFT\"\n  timeLeftMSG=\"\"\n}else{\n  if(amount3 < topBidzAmt + topBidzAmt / 10){\n    setAmount3(topBidzAmt + topBidzAmt / 10)\n  }\n}\nvar but7 = \"Yest\"\n\nvar but9 =  <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit2}\ndisabled={isMining || isMining3 }\n>\n{isMining|| isMining3  ? <CircularProgress size={26} /> : \"Bid on Auction\"}\n</Button>\n\nvar but8 = <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit}\ndisabled={isMining }\n>\n{isMining ? <CircularProgress size={26} /> : \"Bid to start 3 day Auction for 1 NFT\"}\n</Button>\n\nconst amountAsWei5551 = utils.parseEther(Number(amount).toFixed(18).toString())\n    \nvar amount333 = parseFloat(amountAsWei5551.toString())\n\nif(amount333 <= allowance){\n  but7 = 'noo'\n  but8 =         <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleStakeSubmitNoApprove}\n  disabled={isMining || isMining5 }\n>\n  {isMining || isMining5 ? <CircularProgress size={26} /> : \"Bid to start 3 day Auction\"}\n</Button>\n}\nconst amountAsWei555 = utils.parseEther(Number(amount3).toFixed(18).toString())\n    \nvar amount33 = parseFloat(amountAsWei555.toString())\nif(amount33 <= allowance){\nbut9 =  <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit2NoApprove}\ndisabled={isMining || isMining2 }\n>\n{isMining || isMining2 ? <CircularProgress size={26} /> : \"Bid on auction for NFT\"}\n</Button>\n\n}\nif(timeleft > 0 && tokenAddress == \"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\"){\n\n  return (\n    <>\n      <div className={classes.container}>\n            {noTime}<br></br>{timeLeftMSG}\n      <progress value={tttt - timeleft} max={tttt}></progress>\n    \n      Auction #: {aucNumz1 + 1} out of 58<br></br>\n      Bid on to win NFT<br></br>\n      Minimum Bid: {topBidzAmt  } Forge<br></br></div>\n      <div className={classes.container}> \n      Current High Bidder: {topBidder}\n        <SliderInput\n          label={`Bid on NFT`}\n          maxValue={topBidzAmt*3}\n          minValue={topBidzAmt + topBidzAmt / 10}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount3}\n          onChange={setAmount3}\n          disabled={isMining }\n        />\n       \n   {but9}\n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to bid.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens bid successfully!\n        </Alert>\n      </Snackbar>\n\n    </>\n  )\n}\n\n\nif(tokenAddress == \"0xbF4493415fD1E79DcDa8cD0cAd7E5Ed65DCe7074\"){\n\n  return (\n    <>\n      <div className={classes.container}> \n            {noTime}<br></br>{timeLeftMSG}\n      <progress value={tttt - timeleft} max={tttt}></progress>\n      Auction #: {aucNumz1 + 2} out of 58<br></br>\n      Bid on NFT to start 3 day auction<br></br>Minimum Bid: {actualPriceSlider} Forge\n        <SliderInput\n          label={`Bid on NFT`}\n          maxValue={actualPriceSlider*3}\n          minValue={actualPriceSlider}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining }\n        />{but8}\n\n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to bid.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens bid successfully!\n        </Alert>\n      </Snackbar>\n\n    </>\n  )\n}\n\nif(tokenAddress == \"0xFab46E002BbF0b4509813474841E0716E6730136\"){\n\nreturn(\n\n  <>\n  <div className={classes.container}> <h2> <a href=\"https://testnets.opensea.io/collection/forgetokennft2\">Visit Forge Collection on Opensea</a> </h2>{selected}{selected2}\n    <h1>{msg}</h1><h1>{clmzmsg}</h1>must wait until after auction ends to claim\n       <SliderInput2\n          label={`Claim NFT # ${amount2}`}\n          maxValue={58}\n          min={1}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount2}\n          onChange={setAmount2}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleClaimSubmit}\n          disabled={isMining || isMining4 || !noClaim}\n        >\n          {isMining || isMining4 ? <CircularProgress size={26} /> : \"Claim NFT\"}\n        </Button>\n   \n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the staking transfer.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Claimed NFT successfully!\n        </Alert>\n      </Snackbar>\n\n  \n  \n  \n  \n  \n  \n  </>\n)\n\n\n}\nreturn(\n\n  <></>\n)\n}","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useUnstakeTokens.ts",["471"],"import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens = () => {\n  const { chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    tokenFarmContractAddress,\n    tokenFarmInterface\n  )\n\n  return useContractFunction(tokenFarmContract, \"unstakeTokens\", {\n    transactionName: \"Unstake tokens\",\n  })\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakingBalance.ts",["472"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  \n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: tokenFarmContractAddress,\n      method: \"stakingBalance\",\n      args: [address, account],\n    }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens.ts",["473","474","475"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport DC from \"../chain-info/DaughterContract.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = DC\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const ForgeAddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    NFTBOOK,\n    tokenFarmInterface\n  )\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"startBuyoutAuctionERC20\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(NFTBOOK, erc20Interface)\n\n  const Forgecontract = new Contract(ForgeAddy, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(Forgecontract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  //var options = { value: amountToStake };\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(NFTBOOK, \"2100000000000000000000000000000\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/components/SliderInput2.tsx",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/votePrice.ts",["476"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/DaughterContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const VotePrice = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    NFTBOOK, LPFarmInterface\n  )  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"setVotePrice\", {\n  transactionName: \"Unstake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(amount)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice.ts",["477"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const CurrentVotePrice = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"votesPrice\",\n      args: [account],\n    }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice2.ts",["478","479","480"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const CurrentVotePrice2 = (address: string): number | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"reservePrice\",\n      args: [],\n    }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice3.ts",["481"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const CurrentVotePrice3 = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"votesPrice\",\n      args: [account],\n    }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/claimNFT.ts",["482"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/DaughterContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const ClaimNFT = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    NFTBOOK, LPFarmInterface\n  )  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"send_NFTs_To_winner\", {\n  transactionName: \"Stake tokens\",\n})\n\nconst send =  (amount: string, nftNum: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(amount, nftNum)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/soldNFTs.ts",["483","484","485","486"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/ForgeTokenNFT.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const SoldNFTs = (aucNum: string): boolean | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFT\"] : constants.AddressZero\n  const NFTAddyContract = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance2] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"ownerOf\",\n      args: [aucNum],\n    }) ?? []\n\nif(stakingBalance2 == NFTAddyContract){\n  return true;\n}\n\n  return false;\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/lastWonAuction.ts",["487"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const LastWonAuction = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"AuctionWon\",\n      args: [account],\n    }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentRedeem.ts",["488","489"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const CurrentRedeem2 = (amt: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"estimator\",\n      args: [amt],\n    }) ?? []\n    \n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/sharestoBuyNFT.ts",["490","491"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const SharesNeeded = (amt: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"sharesNeeded\",\n      args: [],\n    }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/currentAuctionNumber.ts",["492","493"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const CurrentAuctionNumber = (address: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"aucNum\",\n      args: [],\n    }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime.ts",["494","495"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionEnd = (amt: string): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"AuctionEndsAt\",\n      args: [],\n    }) ?? [] \n    \n \n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens2.ts",["496","497","498"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport DC from \"../chain-info/DaughterContract.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens2 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = DC\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const ForgeAddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    NFTBOOK,\n    tokenFarmInterface\n  )\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"bidERC20\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(NFTBOOK, erc20Interface)\n\n  const Forgecontract = new Contract(ForgeAddy, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(Forgecontract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  //var options = { value: amountToStake };\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(account, \"2100000000000000000000000000000\")\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(NFTBOOK, amount)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime2.ts",["499","500"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionBid2 = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n  useContractCall({\n    abi: tokenFarmInterface,\n    address: NFTAddy,\n    method: \"currentAuctionBid\",\n    args: [],\n  }) ?? []\n\n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime3.ts",["501","502"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AuctionTopBidder = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n  useContractCall({\n    abi: tokenFarmInterface,\n    address: NFTAddy,\n    method: \"currentAuctionTopBidAddress\",\n    args: [],\n  }) ?? []\n\n  \n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens3.ts",["503","504","505","506"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport DC from \"../chain-info/DaughterContract.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens3 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = DC\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const ForgeAddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    NFTBOOK,\n    tokenFarmInterface\n  )\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"dispenseAuction\", {\n      transactionName: \"Unstake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(NFTBOOK, erc20Interface)\n\n  const Forgecontract = new Contract(ForgeAddy, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract , \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  //var options = { value: amountToStake };\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    console.log(\"AMT\", amount)\n    return approveErc20Send(NFTBOOK, \"2100000000000000000000000000000\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens4.ts",["507","508","509","510"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport DC from \"../chain-info/DaughterContract.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens4 = (tokenAddress: string) => {\n  const { chainId, account } = useEthers()\n  const { abi } = DC\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const tokenFarmContractAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const ForgeAddy = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    NFTBOOK,\n    tokenFarmInterface\n  )\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(tokenFarmContract, \"buyForERC\", {\n      transactionName: \"Unstake tokens\",\n    })\n    \n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(NFTBOOK, erc20Interface)\n\n  const Forgecontract = new Contract(ForgeAddy, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract , \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  //var options = { value: amountToStake };\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend()\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(\"100\")\n    console.log(\"AMT\", amount)\n    return approveErc20Send(NFTBOOK, \"2100000000000000000000000000000\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser.ts",["511"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AllowanceUser = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy,\n      method: \"allowance\",\n      args: [account, NFTAddy],\n    }) ?? [] \n    \n \n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/redeemNoApprove.ts",["512"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/DaughterContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const RedeemNoApprove = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    NFTBOOK, LPFarmInterface\n  )  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"dispenseAuction\", {\n  transactionName: \"Unstake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(amount)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/redeemBuyNFTNoApprove.ts",[],"/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser2.ts",["513","514"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/DaughterContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const AllowanceUser2 = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTAddy = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n  const NFTAddy2 = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const NFTAddy3 = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [stakingBalance] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: NFTAddy2,\n      method: \"allowance\",\n      args: [account, NFTAddy],\n    }) ?? [] \n    \n \n  return stakingBalance\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove.ts",["515"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/DaughterContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const BidNoApprove = (tokenAddress: string) => {\n  const { account, chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    NFTBOOK, LPFarmInterface\n  )  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"startBuyoutAuctionERC20\", {\n  transactionName: \"Stake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(account, amount)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove2.ts",["516"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/DaughterContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const BidNoApprove2 = (tokenAddress: string) => {\n  const { account, chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const NFTBOOK = chainId ? brownieConfig[\"networks\"][networkName][\"NFTBOOK\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    NFTBOOK, LPFarmInterface\n  )  \nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"bidERC20\", {\n  transactionName: \"Stake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send(account, amount)\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/distTime.ts",["517","518"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/ForgeDistributorContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const DistTime = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const dist = chainId ? brownieConfig[\"networks\"][networkName][\"distrubtor\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [timestamp2] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: dist,\n      method: \"timestamp\",\n      args: [],\n    }) ?? []\n\n  return timestamp2\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/distTimeKiwi.ts",["519","520"],"import { useContractCall, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/ForgeDistributorContract.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const DistTimeKiwi = (): BigNumber | undefined => {\n  const { account, chainId } = useEthers()\n  const { abi } = TokenFarm\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const dist = chainId ? brownieConfig[\"networks\"][networkName][\"distrubtor\"] : constants.AddressZero\n  \n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const [timestamp3] =\n    useContractCall({\n      abi: tokenFarmInterface,\n      address: dist,\n      method: \"timestampKiwi\",\n      args: [],\n    }) ?? []\n\n  return timestamp3\n}\n","/home/forgeserver/Desktop/Forge-NFT-dAPP/defi-stake-yield-brownie-main/front_end/src/hooks/distTokens.ts",["521"],"import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/ForgeDistributorContract.json\"\n\nimport brownieConfig from \"../brownie-config-json.json\"\n\nimport helperConfig from \"../helper-config.json\"\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const DistTokens = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  const dist = chainId ? brownieConfig[\"networks\"][networkName][\"distrubtor\"] : constants.AddressZero\n\n  //MEME ACTUAL USING LP Contracts  \n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    dist, LPFarmInterface\n  )  \n\nconst [amountToStake, setAmountToStake] = useState(\"0\")\n\nconst { send: approveErc20Send, state: unstakeTokensState22v3 } =\nuseContractFunction(LPRewardsContract, \"mintNFTShares\", {\n  transactionName: \"Unstake tokens\",\n})\n\nconst send =  (amount: string) => {\n  setAmountToStake(amount)\n  return approveErc20Send()\n}\nconst [state, setState] = useState(unstakeTokensState22v3)\n\nuseEffect(() => {\n    setState(unstakeTokensState22v3)\n\n}, [unstakeTokensState22v3])\nreturn { send, state }\n}","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/index.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/serviceWorker.js",[],["522","523"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/App.tsx",["524","525","526","527","528","529","530","531","532"],"import React from \"react\"\nimport { Header } from \"./features/Header\"\nimport { Main } from \"./features/Main\"\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Container } from \"@material-ui/core\"\n\nimport { Drawer } from '@material-ui/core';\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\n\nimport List from '@material-ui/core/List';\n\nimport classNames from 'classnames';\nimport Divider from '@material-ui/core/Divider';\nimport { FaHeart, FaGem } from 'react-icons/fa';\nexport const App = () => {\n  return (\n\n    <DAppProvider config={{\n      supportedChains: [ChainId.Polygon],\n      notifications: {\n        expirationPeriod: 1000,\n        checkInterval: 1000\n      }\n    }}>\n      \n      <Header />\n      <Container maxWidth=\"md\">\n        <Main />\n        <Drawer />\n      </Container>\n    </DAppProvider>\n  )\n}\nexport default App\n","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/Header.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/Main.tsx",["533","534","535","536","537","538"],"/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport forge from \"../forgetoken.png\"\nimport forgeNFT from \"../forgenft.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\nimport DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\n\nimport { FaHeart, FaGem } from 'react-icons/fa';\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const { chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  console.log(typeof chainId)\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const dappTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"DappToken\"] : constants.AddressZero\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  const dist = chainId ? brownieConfig[\"networks\"][networkName][\"distrubtor\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n   const supportedTokens: Array<Token> = [\n    {\n      image: forge,\n      address: wethTokenAddress,\n      name: \"Bid on NFT\",\n    },\n    {\n      image: dai,\n      address: fauTokenAddress,\n      name: \"Claim & Browse NFTs\",\n    }\n  ]\n  const supportedTokens2: Array<Token> = [\n    {\n      image: forgeNFT,\n      address: wethTokenAddress,\n      name: \"Vote on Price to sell NFT\",\n    },\n    {\n      image: forgeNFT,\n      address: fauTokenAddress,\n      name: \"Redeem Shares for profit from sales\",\n    },\n    {\n      image: forgeNFT,\n      address: dappTokenAddress,\n      name: \"Buy NFT with Shares\",\n    },\n    {\n      image: forgeNFT,\n      address: dist,\n      name: \"Admin\",\n    }\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && (error.name === \"UnsupportedChainIdError\"  || error.name === \"t\")) {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)\n    }\n  }, [error, showNetworkError])\n\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: classes.title,\n        }}\n      >\n        Forge NFT dAPP\n      </Typography>\n      <YourWallet supportedTokens={supportedTokens} />\n      <TokenFarmContract supportedTokens={supportedTokens2} />\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          You must be connected to the Polygon network!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/index.ts",[],["539","540"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/index.ts",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/YourWallet.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/TokenFarmContract.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/WalletBalance.tsx",["541","542","543"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/tokenFarmContract/Unstake.tsx",["544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563"],"import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, DistTokens, AuctionEnd, DistTimeKiwi, DistTime, RedeemBuyNFTNoApprove, RedeemNoApprove, AllowanceUser, CurrentVotePrice, useStakeTokens4, useStakeTokens3, SharesNeeded, CurrentRedeem2, CurrentVotePrice2, VotePrice, useStakingBalance } from \"../../hooks\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications, useEthers, useTokenBalance  } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {SliderInput, SliderInput2, BalanceMsg } from \"../../components\"\nimport \"../../App.css\"\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\n\n\nimport { FaHeart, FaGem } from 'react-icons/fa';\nimport { utils } from \"ethers\"\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n  const { image, address: tokenAddress, name } = token\n\n  const { account } = useEthers();\n  const { notifications } = useNotifications()\n\n  const balance = useStakingBalance(tokenAddress)\n\n  let nothing\n  const testTime = DistTime()\n  if(testTime!== nothing){\n\n    console.log(\"testTime \", parseFloat(testTime.toString()))\n  }\n  // console.log(\"TestTime \", testTime)\n  const testTimeKiwi = DistTimeKiwi()\n  if(testTimeKiwi!== nothing){\n    console.log(\"TestTimeKiwi \", parseFloat(testTimeKiwi.toString()))\n  }\n  var timeToDist = false\n  var timeToDistKiwi = false\n  var msgTime = \"Nothing to distribute\"\n  const secondsSinceEpoch = Math.round(Date.now() / 1000)\n  console.log(\"testTimeCurrent \", secondsSinceEpoch)\n  if(testTime!== nothing && secondsSinceEpoch > parseFloat(testTime.toString())){\n    console.log(\"testTime is currently awaiting distribution\")\n    timeToDist = true\n    msgTime = \"Click the button below to distribute the NFT Shares\"\n  }\n  if(testTimeKiwi!== nothing && secondsSinceEpoch > parseFloat(testTimeKiwi.toString())){\n    console.log(\"testTimeKiwi is currently awaiting distribution\")\n    timeToDistKiwi = true\n  }\n  //console.log(\"TestTimeKiwi \", testTimeKiwi)\n  //Gets vote price and sell price\n  const curVoteP = CurrentVotePrice(tokenAddress)\n\n  const formattedVoteP: number = curVoteP\n    ? parseFloat(formatUnits(curVoteP, 18))\n    : 0\n    \n  var yourPrice = \"0\"\n  if(formattedVoteP!== nothing){\n\n    yourPrice = formattedVoteP.toFixed(3)\n  }\n  \n  const curVoteP2 = CurrentVotePrice2(tokenAddress)\n\n\n\n  var curVoteP2a = 0\n  if(curVoteP2 != nothing){\n    curVoteP2a = curVoteP2\n  \n  }\n      const formattedVoteP2: number = curVoteP2a\n        ? parseFloat(formatUnits(curVoteP2a, 18))\n        : 0\n  \n        \n  var actualPriceSlider = 0\n  var actualPrice = 0\n  if(formattedVoteP2!== nothing){\n    actualPriceSlider = formattedVoteP2\n\n    actualPrice = formattedVoteP2 \n  }\n  \n  const balance2 = useTokenBalance(\"0x00ec8bF85C9400B2056fA0BB499fd7150178dd06\", account)\n\n  const formattedBalance: number = balance2\n    ? parseFloat(formatUnits(balance2, 0))\n    : 0\n\n    const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(actualPriceSlider)\n\n\n    const [amount2, setAmount2] =\n    useState<number | string | Array<number | string>>(0)\n\n\n\n\nif(amount == 0 && actualPriceSlider !== 0){\n  setAmount(actualPriceSlider)\n}\n\n\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend(tokenAddress)\n  }\n\n\n\n  const { send: doVotePrice, state: unstakeTokensState2 } =\n    VotePrice(tokenAddress)\n    \n  const handleVotePrice = () => {\n    const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n    return doVotePrice(amountAsWei.toString())\n  }\n\n  const { send: dist, state: unstakeTokensState22 } =\n    DistTokens(tokenAddress)\n    \n  const distributeTokens = () => {\n    const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n    return dist(amountAsWei.toString())\n  }\n\n\n\n  const { send: doRedeemShares, state: unstakeTokensState234 } =\n    useStakeTokens3(tokenAddress)\n\n  const handleRedeem = () => {\n    return doRedeemShares(Number(amount2).toString())\n  }\n\n\n\n  const { send: doRedeemSharesNoApprove, state: unstakeTokensState2346 } =\n    RedeemNoApprove(tokenAddress)\n\n  const handleRedeem2 = () => {\n    return doRedeemSharesNoApprove(Number(amount2).toString())\n  }\n  \n  \n\n  const { send: doCashinSharesNoApprove, state: unstakeTokensState23456 } =\n  RedeemBuyNFTNoApprove(tokenAddress)\n\n  const handleCashinNoApprove = () => {\n    return doCashinSharesNoApprove()\n  }\n\n  const { send: doCashinShares, state: unstakeTokensState2345 } =\n    useStakeTokens4(tokenAddress)\n\n  const handleCashin = () => {\n    return doCashinShares(Number(amount).toString())\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n  const isMining = unstakeTokensState.status === \"Mining\"\n  const isMining2 = unstakeTokensState2345.status === \"Mining\"\n  const isMining3 = unstakeTokensState23456.status === \"Mining\"\n  const isMining4 = unstakeTokensState2346.status === \"Mining\"\n  const isMining5 = unstakeTokensState234.status === \"Mining\"\n  const isMining6 = unstakeTokensState2.status === \"Mining\"\n\n  \nvar shares = SharesNeeded(amount.toString())\nvar sharesNeeded = 0\nif(shares !== nothing){\n  sharesNeeded = parseFloat(shares.toString())\n\n} \n\n\nvar alowz = AllowanceUser()\nvar allowance = 0\nif(alowz !== nothing){\n  allowance = parseFloat(alowz.toString())\n}\nvar endsAt = AuctionEnd(amount.toString())\nvar EndsAtt = 0\nvar noAuc = false\nif(endsAt!== nothing){\n  EndsAtt = parseFloat(endsAt.toString())\n}\n\nvar waitTilFinished\nif(secondsSinceEpoch < EndsAtt){\n  waitTilFinished =  <h1>Wait until Auction is over to claim a NFT</h1>  \n  noAuc = true\n}\nconst amountAsWei = utils.parseEther(Number(amount2).toFixed(0).toString())\n var test =  CurrentRedeem2(Number(amount2).toFixed(0).toString())\n var redeemamt = 0\n console.log(\"TEST,\", test)\n if(test !== nothing){\n   redeemamt = parseFloat(test.toString()) \n } \n var test2 = CurrentRedeem2(formattedBalance.toString())\n var redeemamtMax = 0\n if(test2 !== nothing){\n  redeemamtMax = parseFloat(test2.toString())\n } \n /*\n Test for max payouts total\n var test3 = CurrentRedeem2(\"320000\")\n\n var redeemamtMax2 = 0\n if(test3 !== nothing){\n  redeemamtMax2 = parseFloat(test3.toString()) / 10 ** 18\n }*/\n\n  const classes = useStyles()\n  if(tokenAddress == \"0x26C446e2B0d6295f22dE7c33452B583C12047463\"){\n    return (\n      <>\n     \n      <div className={classes.contentContainer}><h1>Once every 2 months you are able to distribute NFT Shares to the Forge Contract for distribution.</h1>\n<h1>{msgTime}</h1>\n\n<Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={distributeTokens}\n          disabled={!timeToDist }\n        >\n          {isMining || isMining6 ? <CircularProgress size={26} /> : `Distribute NFT Shares to Forge Contract`}\n        </Button>\n\n</div>\n      \n      \n      \n      </>\n    )\n  }\nif(tokenAddress == \"0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\")\n\n{\n  var msgmsg = \"\"\n  if(parseFloat(yourPrice) > 0.0001){\n    msgmsg = \"Your current Voted Price to sell: \" +yourPrice + \" Forge\"\n}\n  return (\n    <>\n      <div className={classes.contentContainer}>\n\n        <BalanceMsg\n          label={`Your shares of Forge NFT`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        /><br></br>\n       {msgmsg}<br></br>\n       Everyone total overall sell price: {actualPrice} Forge\n        <SliderInput\n        style={{width: \"350px\"}}\n          label={`Decide on price to sell NFTs for`}\n          minValue={actualPriceSlider/10 + 1/(10**18)}\n          maxValue={actualPriceSlider*10 - 1/(10**18)}\n          id={`slider-input-${name}`}\n            className={\"6\"}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleVotePrice}\n          disabled={isMining || isMining6}\n        >\n          {isMining || isMining6 ? <CircularProgress size={26} /> : `Vote on Price to sell NFT for`}\n        </Button>\n      </div>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Successfully voted on new price\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}else if(tokenAddress == \"0xFab46E002BbF0b4509813474841E0716E6730136\"){\n  var butText =\"Cash in \"+ amount +\" shares for \"+ (redeemamt / 10**18 * 2/3  ).toFixed(5) +\" Forge\"\n  var but = \"test\"\n  var but2 =  <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleRedeem}\n  disabled={isMining || isMining5}\n>\n  {isMining || isMining5 ? <CircularProgress size={26} /> : butText}\n  </Button>\n  if(allowance > amount){\n    but  = \"nohear2\"\n    but2 = <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={handleRedeem2}\n    disabled={isMining || isMining4}\n  >\n    {isMining || isMining4 ? <CircularProgress size={26} /> : butText}\n  </Button>\n  }\n  return(<>\n  <>\n      <div className={classes.contentContainer}>\n\n      \n        <BalanceMsg\n          label={`Your shares of Forge NFT`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        /><br></br>\n       You can redeem your {formattedBalance} shares for: {(redeemamtMax / 10**18 * 2/3).toFixed(5)} Forge<br></br>\n       Wait until auction ends to recieve maximum\n        <SliderInput\n          label={`Decide on how many Forge NFT Fractionalized shares to cash in`}\n          maxValue={formattedBalance}\n          minValue={0}\n          id={`slider-input-${name}`}\n            className={\"6\"}\n          value={amount2}\n          onChange={setAmount2}\n          disabled={isMining }\n        />\n        Once you cash in, you can never claim again\n        {but2}\n\n      </div>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Claimed Forge for your NFT shares.\n        </Alert>\n      </Snackbar>\n    </>\n  \n  \n  \n  </>)\n}else{\n  var butText = \"Click to trade \"+sharesNeeded+\" shares for NFT\"\n  var but3 = \"tes\"\n  var but4 = <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleCashin}\n  disabled={isMining || noAuc || isMining2}\n>\n  {isMining|| isMining2 ? <CircularProgress size={26} /> : butText}\n</Button>\n  if(allowance > sharesNeeded){\n    but3 = \"too\"\n    but4 = <Button\n    color=\"primary\"\n    variant=\"contained\"\n    size=\"large\"\n    onClick={handleCashinNoApprove}\n    disabled={isMining || noAuc || isMining3}\n  >\n    {isMining || isMining3 ? <CircularProgress size={26} /> : butText}\n  </Button>\n  }\n  return(<>\n  \n  <div className={classes.contentContainer}>\n\n<BalanceMsg\n  label={`Your shares of Forge NFT`}\n  amount={formattedBalance}\n  tokenImgSrc={image}\n/><br></br>\nYou can redeem your {formattedBalance} shares for {Math.floor((formattedBalance / sharesNeeded))} Forge NFTs<br></br>Each NFT costs {sharesNeeded} shares\n{waitTilFinished}\n{but4}\nAfter redeeming go to the top section \"Claim and Browse NFTs to select your NFT\"\n</div>\n<Snackbar\nopen={showUnstakeSuccess}\nautoHideDuration={5000}\nonClose={handleCloseSnack}\n>\n<Alert onClose={handleCloseSnack} severity=\"success\">\n  Successfully bought NFT, now go to Claim and Browse above and claim your NFT\n</Alert>\n</Snackbar>\n  \n  \n  \n  \n  \n  </>)\n}\n}\n","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/index.ts",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/index.ts",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/features/yourWallet/StakeForm.tsx",["564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586"],"import React, { useEffect, useState } from \"react\"\nimport { SliderInput, SliderInput2 } from \"../../components\"\n\nimport CurrencyInput from 'react-currency-input-field';\nimport { useEthers,useEtherBalance, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useStakeTokens, AuctionEnd, BidNoApprove2, BidNoApprove, AllowanceUser2, AuctionTopBidder, AuctionBid2, useStakeTokens2, CurrentAuctionNumber, SoldNFTs, LastWonAuction, CurrentVotePrice2, ClaimNFT, CurrentVotePrice } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\n\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n  const { address: tokenAddress, name } = token\n\n  const { account } = useEthers()\n  const tokenBalance = useEtherBalance(account)\n  const { notifications } = useNotifications()\n\n  const classes = useStyles()\n\n\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n\n  //Gets vote price and sell price\n  const curVoteP = CurrentVotePrice(tokenAddress)\n\n  const formattedVoteP: number = curVoteP\n    ? parseFloat(formatUnits(curVoteP, 18))\n    : 0\n    \n  let nothing\n  var yourPrice = \"0\"\n  if(formattedVoteP!== nothing){\n\n    yourPrice = formattedVoteP.toFixed(18)\n  }\n  \n  const curVoteP2 = CurrentVotePrice2(tokenAddress)\n  var curVoteP2a = 0\nif(curVoteP2 != nothing){\n  curVoteP2a = curVoteP2  / 10**18\n\n}\n    const formattedVoteP2: number = curVoteP2a\n      ? parseFloat(curVoteP2a.toString()) + 0.000001\n      : 0\n\n\n  var actualPriceSlider = 0\n  var actualPrice = \"0\"\n  if(formattedVoteP2!== nothing){\n    actualPriceSlider = formattedVoteP2\n    actualPrice = formattedVoteP2.toFixed(18)\n  }\n  \n\n\n  const LastWonAuctionz = LastWonAuction()\n  var lastWon = 0\n  var noClaim = false;\n  var clmzmsg = \"You have no claims, go bid on auction\"\n  if(LastWonAuctionz !== nothing && 0 <= parseFloat(LastWonAuctionz.toString())){\n    clmzmsg = \"You won NFT auction #\"+ (parseFloat(LastWonAuctionz.toString()) + 1)\n    lastWon = parseFloat(LastWonAuctionz.toString())\n    noClaim = true;\n  }\n  \n  var aucNumz1 = 0\nvar aucNumz = CurrentAuctionNumber(tokenAddress)\nif(aucNumz !== nothing){\n  aucNumz1 = parseFloat(aucNumz.toString()) - 1\n\n}\nvar endTime = AuctionEnd(aucNumz1.toString())\nvar endT = 0 \nif(endTime !== nothing){\n  endT = parseFloat(endTime.toString())\n}\n\n\nvar topBidder = AuctionTopBidder()\n\n\n\nvar alowz = AllowanceUser2()\nvar allowance = 0\nif(alowz !== nothing){\n  allowance = parseFloat(alowz.toString())\n}\n\n\nvar topBid = AuctionBid2()\nvar topBidzAmt = 0\nif(topBid !== nothing){\n  topBidzAmt = parseFloat(topBid.toString()) + 100000000000\n  topBidzAmt = topBidzAmt / 10 ** 18\n}\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n    const handleStakeSubmit = () => {\n      const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n      return stakeTokensSend(amountAsWei.toString())\n    }\n\n      const { send: stakeTokensSendNoApprove, state: stakeTokensStateA5 } =\n      BidNoApprove(tokenAddress)\n  \n      const handleStakeSubmitNoApprove = () => {\n        const amountAsWei = utils.parseEther(Number(amount).toFixed(18).toString())\n        return stakeTokensSendNoApprove(amountAsWei.toString())\n      }\n\n\n\n      const { send: stakeTokensSend3, state: stakeTokensState33 } =\n      useStakeTokens2(tokenAddress)\n     \n  const handleStakeSubmit2 = () => {\n    const amountAsWei = utils.parseEther(Number(amount3).toFixed(18).toString())\n    return stakeTokensSend3(amountAsWei.toString())\n  }\n\n      const { send: stakeTokensSend34, state: stakeTokensState333 } =\n      BidNoApprove2(tokenAddress)\n     \n  const handleStakeSubmit2NoApprove = () => {\n    const amountAsWei = utils.parseEther(Number(amount3).toFixed(18).toString())\n    return stakeTokensSend34(amountAsWei.toString())\n  }\n\n\n\n\n\n  const { send: claimSend, state: stakeTokensState2 } =\n    ClaimNFT(tokenAddress)\n  \n  const handleClaimSubmit = () => {\n    return claimSend(lastWon.toString(), amount2.toString())\n  }\n\n  const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(actualPriceSlider)\n\n\n    const [amount3, setAmount3] =\n    useState<number | string | Array<number | string>>(topBidzAmt)\n\n    const [amount2, setAmount2] =\n    useState<number | string | Array<number | string>>(1)\n\n\n    if(amount == 0 && actualPriceSlider !== 0){\n      setAmount(actualPriceSlider)\n    }\n\n\n    if(amount3 == 0 && topBidzAmt !== 0 ){\n      setAmount3(topBidzAmt)\n    }\n\n        \n\n\n    var isSold = SoldNFTs(amount2.toString())\n\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  var [startingauction, setAmountz] =\n  useState<string | undefined | Array<number | string>>(\"1\")\n  \n  \n  const isMining = stakeTokensState.status === \"Mining\"\n  const isMining2 = stakeTokensState333.status === \"Mining\"\n  const isMining3 = stakeTokensState33.status === \"Mining\"\n  const isMining4 = stakeTokensState2.status === \"Mining\"\n  const isMining5 = stakeTokensStateA5.status === \"Mining\"\n\n  const hasZeroBalance = formattedTokenBalance === 0\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var imgz = new Array();\n  var imgzNum = new Array();\nvar p \nvar sel = \"https://forgetoken.org/api/forge/NFT/\"+amount2.toString()+\".png\"\nvar ez = sel.toString()\n\nvar selected = <img></img>\nvar selected2 =<img src=\"   https://thumbs.dreamstime.com/z/green-check-mark-circle-vector-illustration-flat-design-isolated-green-check-mark-circle-flat-design-isolated-125098940.jpg\n\" alt=\"This NFT is available to be Claimed\" width=\"50em\" height=\"50em\"></img>\n \nvar browse = <img></img>\nvar msg = \"\"\nif(ez !== nothing){\n\n  browse = <img src={sel} alt=\"Girl in a jacket\" width=\"300\" height=\"300\"></img>\n  selected = <img src={sel} alt=\"Girl in a jacket\" width=\"300\" height=\"300\"></img>\n  msg = \"This NFT is available for purchase or redemption\"\n  if(!isSold){\n      selected2 = <img src=\"https://forgetoken.org/img/red-xmark.jpeg\" alt=\"This NFT is Claimed\" width=\"50em\" height=\"50em\"></img>\n    msg = \"Someone has already claimed this NFT\"\n}\n\n}\nconst secondsSinceEpoch = Math.round(Date.now() / 1000)\nvar tttt = 60 * 60 * 24 * 5\nvar timeleft = endT - secondsSinceEpoch\nvar noTime = \"Auction currently running\"\nvar timeLeftMSG = \"There is \" + timeleft + \" seconds left in this Auction\"\nif(timeleft < 0 ){\n  noTime = \"Auction is over, start a new one or Claim NFT\"\n  timeLeftMSG=\"\"\n}else{\n  if(amount3 < topBidzAmt + topBidzAmt / 10){\n    setAmount3(topBidzAmt + topBidzAmt / 10)\n  }\n}\nvar but7 = \"Yest\"\n\nvar but9 =  <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit2}\ndisabled={isMining || isMining3 }\n>\n{isMining|| isMining3  ? <CircularProgress size={26} /> : \"Bid on Auction\"}\n</Button>\n\nvar but8 = <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit}\ndisabled={isMining }\n>\n{isMining ? <CircularProgress size={26} /> : \"Bid to start 3 day Auction for 1 NFT\"}\n</Button>\n\nconst amountAsWei5551 = utils.parseEther(Number(amount).toFixed(18).toString())\n    \nvar amount333 = parseFloat(amountAsWei5551.toString())\n\nif(amount333 <= allowance){\n  but7 = 'noo'\n  but8 =         <Button\n  color=\"primary\"\n  variant=\"contained\"\n  size=\"large\"\n  onClick={handleStakeSubmitNoApprove}\n  disabled={isMining || isMining5 }\n>\n  {isMining || isMining5 ? <CircularProgress size={26} /> : \"Bid to start 3 day Auction\"}\n</Button>\n}\nconst amountAsWei555 = utils.parseEther(Number(amount3).toFixed(18).toString())\n    \nvar amount33 = parseFloat(amountAsWei555.toString())\nif(amount33 <= allowance){\nbut9 =  <Button\ncolor=\"primary\"\nvariant=\"contained\"\nsize=\"large\"\nonClick={handleStakeSubmit2NoApprove}\ndisabled={isMining || isMining2 }\n>\n{isMining || isMining2 ? <CircularProgress size={26} /> : \"Bid on auction for NFT\"}\n</Button>\n\n}\nif(timeleft > 0 && tokenAddress == \"0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\"){\n\n  return (\n    <>\n      <div className={classes.container}>\n            {noTime}<br></br>{timeLeftMSG}\n      <progress value={tttt - timeleft} max={tttt}></progress>\n    \n      Auction #: {aucNumz1 + 1} out of 70<br></br>\n      Bid on to win NFT<br></br>\n      Minimum Bid: {topBidzAmt  } Forge<br></br></div>\n      <div className={classes.container}> \n      Current High Bidder: {topBidder}\n        <SliderInput\n          label={`Bid on NFT`}\n          maxValue={topBidzAmt*3}\n          minValue={topBidzAmt + topBidzAmt / 10}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount3}\n          onChange={setAmount3}\n          disabled={isMining }\n        />\n       \n   {but9}\n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to bid.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens bid successfully!\n        </Alert>\n      </Snackbar>\n\n    </>\n  )\n}\n\n\nif(tokenAddress == \"0xF44fB43066F7ECC91058E3A614Fb8A15A2735276\"){\n\n  return (\n    <>\n      <div className={classes.container}> \n            {noTime}<br></br>{timeLeftMSG}\n      <progress value={tttt - timeleft} max={tttt}></progress>\n      Auction #: {aucNumz1 + 2} out of 70<br></br>\n      Bid on NFT to start 5 day auctions<br></br>Minimum Bid: {actualPriceSlider} Forge\n        <SliderInput\n          label={`Bid on NFT`}\n          maxValue={actualPriceSlider*3}\n          minValue={actualPriceSlider + 0.000000001}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining }\n        />{but8}\n\n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to bid.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens bid successfully!\n        </Alert>\n      </Snackbar>\n\n    </>\n  )\n}\n\nif(tokenAddress == \"0xFab46E002BbF0b4509813474841E0716E6730136\"){\n\nreturn(\n\n  <>\n  <div className={classes.container}> <h2> <a href=\"https://opensea.io/collection/forge-nft\">Visit Forge Collection on Opensea</a> </h2>{selected}{selected2}\n    <h1>{msg}</h1><h1>{clmzmsg}</h1>must wait until after auction ends to claim\n       <SliderInput2\n          label={`Claim NFT # ${amount2}`}\n          maxValue={70}\n          min={1}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount2}\n          onChange={setAmount2}\n          disabled={isMining }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleClaimSubmit}\n          disabled={isMining || isMining4 || !noClaim}\n        >\n          {isMining || isMining4 ? <CircularProgress size={26} /> : \"Claim NFT\"}\n        </Button>\n   \n        </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the staking transfer.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Claimed NFT successfully!\n        </Alert>\n      </Snackbar>\n\n  \n  \n  \n  \n  \n  \n  </>\n)\n\n\n}\nreturn(\n\n  <></>\n)\n}","/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/ConnectionRequiredMsg.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/BalanceMsg.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/SliderInput2.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/distTokens.ts",["587"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/components/SliderInput.tsx",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/distTimeKiwi.ts",["588","589"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/distTime.ts",["590","591"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove2.ts",["592"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/bidNoApprove.ts",["593"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/redeemBuyNFTNoApprove.ts",[],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/redeemNoApprove.ts",["594"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser2.ts",["595","596"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/allowUser.ts",["597"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime3.ts",["598","599"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime2.ts",["600","601"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/auctionEndTime.ts",["602","603"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentAuctionNumber.ts",["604","605"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/sharestoBuyNFT.ts",["606","607"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/lastWonAuction.ts",["608"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/soldNFTs.ts",["609","610","611","612"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentRedeem.ts",["613","614"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice3.ts",["615"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice2.ts",["616","617","618"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/currentVotePrice.ts",["619"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/votePrice.ts",["620"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useUnstakeTokens.ts",["621"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakingBalance.ts",["622"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/claimNFT.ts",["623"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens4.ts",["624","625","626","627"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens3.ts",["628","629","630","631"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens2.ts",["632","633","634"],"/home/forgeserver/Desktop/MainNet-Forge-NFT/defi-stake-yield-brownie-main/front_end/src/hooks/useStakeTokens.ts",["635","636","637"],{"ruleId":"638","replacedBy":"639"},{"ruleId":"640","replacedBy":"641"},{"ruleId":"638","replacedBy":"639"},{"ruleId":"640","replacedBy":"641"},{"ruleId":"642","severity":1,"message":"643","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":20},{"ruleId":"642","severity":1,"message":"646","line":8,"column":22,"nodeType":"644","messageId":"645","endLine":8,"endColumn":26},{"ruleId":"642","severity":1,"message":"647","line":8,"column":28,"nodeType":"644","messageId":"645","endLine":8,"endColumn":36},{"ruleId":"642","severity":1,"message":"648","line":8,"column":38,"nodeType":"644","messageId":"645","endLine":8,"endColumn":45},{"ruleId":"642","severity":1,"message":"649","line":11,"column":8,"nodeType":"644","messageId":"645","endLine":11,"endColumn":12},{"ruleId":"642","severity":1,"message":"650","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":18},{"ruleId":"642","severity":1,"message":"651","line":14,"column":8,"nodeType":"644","messageId":"645","endLine":14,"endColumn":15},{"ruleId":"642","severity":1,"message":"652","line":15,"column":10,"nodeType":"644","messageId":"645","endLine":15,"endColumn":17},{"ruleId":"642","severity":1,"message":"653","line":15,"column":19,"nodeType":"644","messageId":"645","endLine":15,"endColumn":24},{"ruleId":"642","severity":1,"message":"654","line":4,"column":8,"nodeType":"644","messageId":"645","endLine":4,"endColumn":11},{"ruleId":"642","severity":1,"message":"655","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":12},{"ruleId":"642","severity":1,"message":"656","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":17},{"ruleId":"642","severity":1,"message":"657","line":16,"column":8,"nodeType":"644","messageId":"645","endLine":16,"endColumn":22},{"ruleId":"642","severity":1,"message":"643","line":19,"column":10,"nodeType":"644","messageId":"645","endLine":19,"endColumn":20},{"ruleId":"642","severity":1,"message":"646","line":19,"column":22,"nodeType":"644","messageId":"645","endLine":19,"endColumn":26},{"ruleId":"642","severity":1,"message":"647","line":19,"column":28,"nodeType":"644","messageId":"645","endLine":19,"endColumn":36},{"ruleId":"642","severity":1,"message":"648","line":19,"column":38,"nodeType":"644","messageId":"645","endLine":19,"endColumn":45},{"ruleId":"642","severity":1,"message":"652","line":23,"column":10,"nodeType":"644","messageId":"645","endLine":23,"endColumn":17},{"ruleId":"642","severity":1,"message":"653","line":23,"column":19,"nodeType":"644","messageId":"645","endLine":23,"endColumn":24},{"ruleId":"642","severity":1,"message":"658","line":13,"column":22,"nodeType":"644","messageId":"645","endLine":13,"endColumn":34},{"ruleId":"642","severity":1,"message":"659","line":41,"column":9,"nodeType":"644","messageId":"645","endLine":41,"endColumn":16},{"ruleId":"642","severity":1,"message":"660","line":66,"column":5,"nodeType":"644","messageId":"645","endLine":66,"endColumn":19},{"ruleId":"661","severity":1,"message":"662","line":87,"column":16,"nodeType":"663","messageId":"664","endLine":87,"endColumn":18},{"ruleId":"661","severity":1,"message":"665","line":120,"column":11,"nodeType":"663","messageId":"664","endLine":120,"endColumn":13},{"ruleId":"642","severity":1,"message":"666","line":129,"column":9,"nodeType":"644","messageId":"645","endLine":129,"endColumn":28},{"ruleId":"642","severity":1,"message":"667","line":143,"column":30,"nodeType":"644","messageId":"645","endLine":143,"endColumn":50},{"ruleId":"642","severity":1,"message":"668","line":236,"column":7,"nodeType":"644","messageId":"645","endLine":236,"endColumn":18},{"ruleId":"661","severity":1,"message":"665","line":258,"column":19,"nodeType":"663","messageId":"664","endLine":258,"endColumn":21},{"ruleId":"661","severity":1,"message":"665","line":292,"column":17,"nodeType":"663","messageId":"664","endLine":292,"endColumn":19},{"ruleId":"661","severity":1,"message":"665","line":342,"column":23,"nodeType":"663","messageId":"664","endLine":342,"endColumn":25},{"ruleId":"642","severity":1,"message":"669","line":355,"column":5,"nodeType":"644","messageId":"645","endLine":355,"endColumn":8},{"ruleId":"670","severity":1,"message":"671","line":407,"column":7,"nodeType":"644","messageId":"672","endLine":407,"endColumn":14},{"ruleId":"642","severity":1,"message":"673","line":419,"column":5,"nodeType":"644","messageId":"645","endLine":419,"endColumn":9},{"ruleId":"642","severity":1,"message":"674","line":12,"column":27,"nodeType":"644","messageId":"645","endLine":12,"endColumn":31},{"ruleId":"642","severity":1,"message":"675","line":21,"column":8,"nodeType":"644","messageId":"645","endLine":21,"endColumn":21},{"ruleId":"661","severity":1,"message":"665","line":28,"column":14,"nodeType":"663","messageId":"664","endLine":28,"endColumn":16},{"ruleId":"642","severity":1,"message":"676","line":4,"column":8,"nodeType":"644","messageId":"645","endLine":4,"endColumn":21},{"ruleId":"642","severity":1,"message":"677","line":5,"column":37,"nodeType":"644","messageId":"645","endLine":5,"endColumn":52},{"ruleId":"642","severity":1,"message":"678","line":67,"column":5,"nodeType":"644","messageId":"645","endLine":67,"endColumn":14},{"ruleId":"661","severity":1,"message":"662","line":72,"column":14,"nodeType":"663","messageId":"664","endLine":72,"endColumn":16},{"ruleId":"642","severity":1,"message":"679","line":85,"column":5,"nodeType":"644","messageId":"645","endLine":85,"endColumn":16},{"ruleId":"661","severity":1,"message":"665","line":186,"column":15,"nodeType":"663","messageId":"664","endLine":186,"endColumn":17},{"ruleId":"661","severity":1,"message":"665","line":191,"column":16,"nodeType":"663","messageId":"664","endLine":191,"endColumn":18},{"ruleId":"642","severity":1,"message":"680","line":233,"column":8,"nodeType":"644","messageId":"645","endLine":233,"endColumn":23},{"ruleId":"642","severity":1,"message":"681","line":233,"column":25,"nodeType":"644","messageId":"645","endLine":233,"endColumn":35},{"ruleId":"642","severity":1,"message":"682","line":243,"column":9,"nodeType":"644","messageId":"645","endLine":243,"endColumn":23},{"ruleId":"642","severity":1,"message":"683","line":244,"column":9,"nodeType":"644","messageId":"645","endLine":244,"endColumn":30},{"ruleId":"642","severity":1,"message":"684","line":245,"column":7,"nodeType":"644","messageId":"645","endLine":245,"endColumn":11},{"ruleId":"685","severity":1,"message":"686","line":245,"column":14,"nodeType":"687","messageId":"688","endLine":245,"endColumn":25,"fix":"689"},{"ruleId":"642","severity":1,"message":"690","line":246,"column":7,"nodeType":"644","messageId":"645","endLine":246,"endColumn":14},{"ruleId":"685","severity":1,"message":"686","line":246,"column":17,"nodeType":"687","messageId":"688","endLine":246,"endColumn":28,"fix":"691"},{"ruleId":"642","severity":1,"message":"692","line":247,"column":5,"nodeType":"644","messageId":"645","endLine":247,"endColumn":6},{"ruleId":"693","severity":1,"message":"694","line":251,"column":16,"nodeType":"695","endLine":251,"endColumn":21},{"ruleId":"693","severity":1,"message":"694","line":255,"column":14,"nodeType":"695","endLine":255,"endColumn":19},{"ruleId":"642","severity":1,"message":"696","line":259,"column":3,"nodeType":"644","messageId":"645","endLine":259,"endColumn":9},{"ruleId":"642","severity":1,"message":"697","line":308,"column":3,"nodeType":"644","messageId":"645","endLine":308,"endColumn":7},{"ruleId":"661","severity":1,"message":"665","line":334,"column":33,"nodeType":"663","messageId":"664","endLine":334,"endColumn":35},{"ruleId":"661","severity":1,"message":"665","line":384,"column":17,"nodeType":"663","messageId":"664","endLine":384,"endColumn":19},{"ruleId":"661","severity":1,"message":"665","line":428,"column":17,"nodeType":"663","messageId":"664","endLine":428,"endColumn":19},{"ruleId":"642","severity":1,"message":"657","line":6,"column":8,"nodeType":"644","messageId":"645","endLine":6,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"699","line":39,"column":9,"nodeType":"644","messageId":"645","endLine":39,"endColumn":22},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"701","line":3,"column":17,"nodeType":"644","messageId":"645","endLine":3,"endColumn":26},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"700","line":30,"column":8,"nodeType":"644","messageId":"645","endLine":30,"endColumn":21},{"ruleId":"642","severity":1,"message":"701","line":3,"column":17,"nodeType":"644","messageId":"645","endLine":3,"endColumn":26},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"661","severity":1,"message":"665","line":30,"column":20,"nodeType":"663","messageId":"664","endLine":30,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"699","line":39,"column":9,"nodeType":"644","messageId":"645","endLine":39,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":20,"column":20,"nodeType":"644","messageId":"645","endLine":20,"endColumn":27},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"703","line":41,"column":9,"nodeType":"644","messageId":"645","endLine":41,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":20,"column":20,"nodeType":"644","messageId":"645","endLine":20,"endColumn":27},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"703","line":41,"column":9,"nodeType":"644","messageId":"645","endLine":41,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"704","line":19,"column":9,"nodeType":"644","messageId":"645","endLine":19,"endColumn":17},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"642","severity":1,"message":"700","line":30,"column":8,"nodeType":"644","messageId":"645","endLine":30,"endColumn":21},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"638","replacedBy":"705"},{"ruleId":"640","replacedBy":"706"},{"ruleId":"642","severity":1,"message":"643","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":20},{"ruleId":"642","severity":1,"message":"646","line":8,"column":22,"nodeType":"644","messageId":"645","endLine":8,"endColumn":26},{"ruleId":"642","severity":1,"message":"647","line":8,"column":28,"nodeType":"644","messageId":"645","endLine":8,"endColumn":36},{"ruleId":"642","severity":1,"message":"648","line":8,"column":38,"nodeType":"644","messageId":"645","endLine":8,"endColumn":45},{"ruleId":"642","severity":1,"message":"649","line":11,"column":8,"nodeType":"644","messageId":"645","endLine":11,"endColumn":12},{"ruleId":"642","severity":1,"message":"650","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":18},{"ruleId":"642","severity":1,"message":"651","line":14,"column":8,"nodeType":"644","messageId":"645","endLine":14,"endColumn":15},{"ruleId":"642","severity":1,"message":"652","line":15,"column":10,"nodeType":"644","messageId":"645","endLine":15,"endColumn":17},{"ruleId":"642","severity":1,"message":"653","line":15,"column":19,"nodeType":"644","messageId":"645","endLine":15,"endColumn":24},{"ruleId":"642","severity":1,"message":"654","line":4,"column":8,"nodeType":"644","messageId":"645","endLine":4,"endColumn":11},{"ruleId":"642","severity":1,"message":"655","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":12},{"ruleId":"642","severity":1,"message":"656","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":17},{"ruleId":"642","severity":1,"message":"657","line":16,"column":8,"nodeType":"644","messageId":"645","endLine":16,"endColumn":22},{"ruleId":"642","severity":1,"message":"652","line":21,"column":10,"nodeType":"644","messageId":"645","endLine":21,"endColumn":17},{"ruleId":"642","severity":1,"message":"653","line":21,"column":19,"nodeType":"644","messageId":"645","endLine":21,"endColumn":24},{"ruleId":"638","replacedBy":"705"},{"ruleId":"640","replacedBy":"706"},{"ruleId":"642","severity":1,"message":"674","line":12,"column":27,"nodeType":"644","messageId":"645","endLine":12,"endColumn":31},{"ruleId":"642","severity":1,"message":"675","line":21,"column":8,"nodeType":"644","messageId":"645","endLine":21,"endColumn":21},{"ruleId":"661","severity":1,"message":"665","line":28,"column":14,"nodeType":"663","messageId":"664","endLine":28,"endColumn":16},{"ruleId":"642","severity":1,"message":"658","line":13,"column":22,"nodeType":"644","messageId":"645","endLine":13,"endColumn":34},{"ruleId":"642","severity":1,"message":"643","line":15,"column":10,"nodeType":"644","messageId":"645","endLine":15,"endColumn":20},{"ruleId":"642","severity":1,"message":"646","line":15,"column":22,"nodeType":"644","messageId":"645","endLine":15,"endColumn":26},{"ruleId":"642","severity":1,"message":"647","line":15,"column":28,"nodeType":"644","messageId":"645","endLine":15,"endColumn":36},{"ruleId":"642","severity":1,"message":"648","line":15,"column":38,"nodeType":"644","messageId":"645","endLine":15,"endColumn":45},{"ruleId":"642","severity":1,"message":"652","line":19,"column":10,"nodeType":"644","messageId":"645","endLine":19,"endColumn":17},{"ruleId":"642","severity":1,"message":"653","line":19,"column":19,"nodeType":"644","messageId":"645","endLine":19,"endColumn":24},{"ruleId":"642","severity":1,"message":"659","line":41,"column":9,"nodeType":"644","messageId":"645","endLine":41,"endColumn":16},{"ruleId":"642","severity":1,"message":"660","line":66,"column":5,"nodeType":"644","messageId":"645","endLine":66,"endColumn":19},{"ruleId":"661","severity":1,"message":"662","line":87,"column":16,"nodeType":"663","messageId":"664","endLine":87,"endColumn":18},{"ruleId":"661","severity":1,"message":"665","line":120,"column":11,"nodeType":"663","messageId":"664","endLine":120,"endColumn":13},{"ruleId":"642","severity":1,"message":"666","line":129,"column":9,"nodeType":"644","messageId":"645","endLine":129,"endColumn":28},{"ruleId":"642","severity":1,"message":"667","line":143,"column":30,"nodeType":"644","messageId":"645","endLine":143,"endColumn":50},{"ruleId":"642","severity":1,"message":"668","line":236,"column":7,"nodeType":"644","messageId":"645","endLine":236,"endColumn":18},{"ruleId":"661","severity":1,"message":"665","line":258,"column":19,"nodeType":"663","messageId":"664","endLine":258,"endColumn":21},{"ruleId":"661","severity":1,"message":"665","line":282,"column":17,"nodeType":"663","messageId":"664","endLine":282,"endColumn":19},{"ruleId":"661","severity":1,"message":"665","line":332,"column":23,"nodeType":"663","messageId":"664","endLine":332,"endColumn":25},{"ruleId":"642","severity":1,"message":"669","line":345,"column":5,"nodeType":"644","messageId":"645","endLine":345,"endColumn":8},{"ruleId":"670","severity":1,"message":"671","line":397,"column":7,"nodeType":"644","messageId":"672","endLine":397,"endColumn":14},{"ruleId":"642","severity":1,"message":"673","line":409,"column":5,"nodeType":"644","messageId":"645","endLine":409,"endColumn":9},{"ruleId":"642","severity":1,"message":"676","line":4,"column":8,"nodeType":"644","messageId":"645","endLine":4,"endColumn":21},{"ruleId":"642","severity":1,"message":"677","line":5,"column":37,"nodeType":"644","messageId":"645","endLine":5,"endColumn":52},{"ruleId":"642","severity":1,"message":"678","line":67,"column":5,"nodeType":"644","messageId":"645","endLine":67,"endColumn":14},{"ruleId":"661","severity":1,"message":"662","line":72,"column":14,"nodeType":"663","messageId":"664","endLine":72,"endColumn":16},{"ruleId":"642","severity":1,"message":"679","line":85,"column":5,"nodeType":"644","messageId":"645","endLine":85,"endColumn":16},{"ruleId":"661","severity":1,"message":"665","line":186,"column":15,"nodeType":"663","messageId":"664","endLine":186,"endColumn":17},{"ruleId":"661","severity":1,"message":"665","line":191,"column":16,"nodeType":"663","messageId":"664","endLine":191,"endColumn":18},{"ruleId":"642","severity":1,"message":"680","line":233,"column":8,"nodeType":"644","messageId":"645","endLine":233,"endColumn":23},{"ruleId":"642","severity":1,"message":"681","line":233,"column":25,"nodeType":"644","messageId":"645","endLine":233,"endColumn":35},{"ruleId":"642","severity":1,"message":"682","line":243,"column":9,"nodeType":"644","messageId":"645","endLine":243,"endColumn":23},{"ruleId":"642","severity":1,"message":"683","line":244,"column":9,"nodeType":"644","messageId":"645","endLine":244,"endColumn":30},{"ruleId":"642","severity":1,"message":"684","line":245,"column":7,"nodeType":"644","messageId":"645","endLine":245,"endColumn":11},{"ruleId":"685","severity":1,"message":"686","line":245,"column":14,"nodeType":"687","messageId":"688","endLine":245,"endColumn":25,"fix":"707"},{"ruleId":"642","severity":1,"message":"690","line":246,"column":7,"nodeType":"644","messageId":"645","endLine":246,"endColumn":14},{"ruleId":"685","severity":1,"message":"686","line":246,"column":17,"nodeType":"687","messageId":"688","endLine":246,"endColumn":28,"fix":"708"},{"ruleId":"642","severity":1,"message":"692","line":247,"column":5,"nodeType":"644","messageId":"645","endLine":247,"endColumn":6},{"ruleId":"693","severity":1,"message":"694","line":251,"column":16,"nodeType":"695","endLine":251,"endColumn":21},{"ruleId":"693","severity":1,"message":"694","line":255,"column":14,"nodeType":"695","endLine":255,"endColumn":19},{"ruleId":"642","severity":1,"message":"696","line":259,"column":3,"nodeType":"644","messageId":"645","endLine":259,"endColumn":9},{"ruleId":"642","severity":1,"message":"697","line":308,"column":3,"nodeType":"644","messageId":"645","endLine":308,"endColumn":7},{"ruleId":"661","severity":1,"message":"665","line":334,"column":33,"nodeType":"663","messageId":"664","endLine":334,"endColumn":35},{"ruleId":"661","severity":1,"message":"665","line":384,"column":17,"nodeType":"663","messageId":"664","endLine":384,"endColumn":19},{"ruleId":"661","severity":1,"message":"665","line":428,"column":17,"nodeType":"663","messageId":"664","endLine":428,"endColumn":19},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"700","line":30,"column":8,"nodeType":"644","messageId":"645","endLine":30,"endColumn":21},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"704","line":19,"column":9,"nodeType":"644","messageId":"645","endLine":19,"endColumn":17},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"701","line":3,"column":17,"nodeType":"644","messageId":"645","endLine":3,"endColumn":26},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"661","severity":1,"message":"665","line":30,"column":20,"nodeType":"663","messageId":"664","endLine":30,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"701","line":3,"column":17,"nodeType":"644","messageId":"645","endLine":3,"endColumn":26},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":14,"column":11,"nodeType":"644","messageId":"645","endLine":14,"endColumn":18},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"700","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":21},{"ruleId":"642","severity":1,"message":"657","line":6,"column":8,"nodeType":"644","messageId":"645","endLine":6,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":5,"column":8,"nodeType":"644","messageId":"645","endLine":5,"endColumn":22},{"ruleId":"642","severity":1,"message":"700","line":30,"column":8,"nodeType":"644","messageId":"645","endLine":30,"endColumn":21},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":20,"column":20,"nodeType":"644","messageId":"645","endLine":20,"endColumn":27},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"703","line":41,"column":9,"nodeType":"644","messageId":"645","endLine":41,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"702","line":20,"column":20,"nodeType":"644","messageId":"645","endLine":20,"endColumn":27},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"703","line":41,"column":9,"nodeType":"644","messageId":"645","endLine":41,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"699","line":39,"column":9,"nodeType":"644","messageId":"645","endLine":39,"endColumn":22},{"ruleId":"642","severity":1,"message":"657","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"698","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":33},{"ruleId":"642","severity":1,"message":"699","line":39,"column":9,"nodeType":"644","messageId":"645","endLine":39,"endColumn":22},"no-native-reassign",["709"],"no-negated-in-lhs",["710"],"@typescript-eslint/no-unused-vars","'ProSidebar' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'SubMenu' is defined but never used.","'List' is defined but never used.","'classNames' is defined but never used.","'Divider' is defined but never used.","'FaHeart' is defined but never used.","'FaGem' is defined but never used.","'eth' is defined but never used.","'dapp' is defined but never used.","'DappToken' is defined but never used.","'networkMapping' is defined but never used.","'SliderInput2' is defined but never used.","'balance' is assigned a value but never used.","'timeToDistKiwi' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'handleUnstakeSubmit' is assigned a value but never used.","'unstakeTokensState22' is assigned a value but never used.","'amountAsWei' is assigned a value but never used.","'but' is assigned a value but never used.","@typescript-eslint/no-redeclare","'butText' is already defined.","redeclared","'but3' is assigned a value but never used.","'name' is assigned a value but never used.","'tokenBalance2' is assigned a value but never used.","'CurrencyInput' is defined but never used.","'useTokenBalance' is defined but never used.","'yourPrice' is assigned a value but never used.","'actualPrice' is assigned a value but never used.","'startingauction' is assigned a value but never used.","'setAmountz' is assigned a value but never used.","'hasZeroBalance' is assigned a value but never used.","'hasZeroAmountSelected' is assigned a value but never used.","'imgz' is assigned a value but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"711","text":"712"},"'imgzNum' is assigned a value but never used.",{"range":"713","text":"712"},"'p' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'browse' is assigned a value but never used.","'but7' is assigned a value but never used.","'tokenFarmContractAddress' is assigned a value but never used.","'tokenContract' is assigned a value but never used.","'amountToStake' is assigned a value but never used.","'BigNumber' is defined but never used.","'account' is assigned a value but never used.","'Forgecontract' is assigned a value but never used.","'NFTAddy3' is assigned a value but never used.",["709"],["710"],{"range":"714","text":"712"},{"range":"715","text":"712"},"no-global-assign","no-unsafe-negation",[6926,6937],"[]",[6955,6966],[6937,6948],[6966,6977]]